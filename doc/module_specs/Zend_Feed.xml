<sect1 id="zend.feed.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Feed</code> provides functionality for consuming RSS and Atom feeds. It provides a
        natural syntax for accessing elements of feeds, feed attributes, and entry attributes.
        <code>Zend_Feed</code> also has extensive support for modifying feed and entry structure with the
        same natural syntax, and turning the result back into XML. In the future, this modification support
        could provide support for the Atom Publishing Protocol.
    </para>

    <para>
        Programmatically, <code>Zend_Feed</code> consists of a base <code>Zend_Feed</code> class, abstract
        <code>Zend_Feed_Abstract</code> and <code>Zend_Feed_EntryAbstract</code> base classes for
        representing Feeds and Entries, specific implementations of feeds and entries for RSS and Atom, and
        a behind-the-scenes helper for making the natural syntax magic work.
    </para>

    <para>
        In the example below, we demonstrate a simple use case of retrieving an RSS feed and saving relevant
        portions of the feed data to a simple PHP array, which could then be used for printing the data, storing
        to a database, etc.
    </para>

    <note>
        Many RSS feeds have different channel and item properties available. The RSS specification provides for
        many optional properties, so be aware of this when writing code to work with RSS data.
    </note>

    <example>
        <title>Putting Zend_Feed to Work on RSS Feed Data</title>
        <programlisting role="php"><![CDATA[
// Use Zend_Feed
require_once 'Zend/Feed.php';

// Fetch the latest Slashdot headlines
try {
    $slashdotRss = Zend_Feed::import('http://rss.slashdot.org/Slashdot/slashdot');
} catch (Zend_Feed_Exception $e) {
    // feed import failed
    echo "Exception caught importing feed: {$e->getMessage()}\n";
    exit;
}

// Initialize the channel data array
$channel = array(
    'title'       => $slashdotRss->title(),
    'link'        => $slashdotRss->link(),
    'description' => $slashdotRss->description(),
    'items'       => array()
    );

// Loop over each channel item and store relevant data
foreach ($slashdotRss as $item) {
    $channel['items'][] = array(
        'title'       => $item->title(),
        'link'        => $item->link(),
        'description' => $item->description()
        );
}

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.importing">
    <title>Importing Feeds with Zend_Feed</title>
    <para>
        <code>Zend_Feed</code> enables developers to retrieve feeds very easily. If you know the URI of a
        feed, simply use the <code>Zend_Feed::import()</code> method:
        <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]>   </programlisting>
    </para>
    <para>
        You can also use <code>Zend_Feed</code> to fetch the contents of a feed from a file or the contents
        of a PHP string variable:
        <programlisting role="php"><![CDATA[
<?php

// importing a feed from a text file
$feedFromFile = Zend_Feed::importFile('feed.xml');

// importing a feed from a PHP string variable
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
    </para>
    <para>
        In each of the examples above, an object of a class that extends <code>Zend_Feed_Abstract</code> is
        returned upon success, depending on the type of the feed. If an RSS feed were retrieved via one of
        the import methods above, then a <code>Zend_Feed_Rss</code> object would be returned. On the other
        hand, if an Atom feed were imported, then a <code>Zend_Feed_Atom</code> object is returned. The
        import methods will also throw a <code>Zend_Feed_Exception</code> object upon failure, such as an
        unreadable or malformed feed.
    </para>
</sect1>

<sect1 id="zend.feed.findFeeds">
    <title>Retrieving Feeds from Web Pages</title>
    <para>
        Web pages often contain <code>&lt;link&gt;</code> tags that refer to feeds with content relevant to
        the particular page. <code>Zend_Feed</code> enables you to retrieve all feeds referenced by a web
        page with one simple method call:
        <programlisting role="php"><![CDATA[
<?php

$feedArray = Zend_Feed::findFeeds('http://www.example.com/news.html');

?>]]></programlisting>
        Here the <code>findFeeds()</code> method returns an array of <code>Zend_Feed_Abstract</code>
        objects that are referenced by <code>&lt;link&gt;</code> tags on the news.html web page. Depending on
        the type of each feed, each respective entry in the <code>$feedArray</code> array may be a
        <code>Zend_Feed_Rss</code> or <code>Zend_Feed_Atom</code> instance. <code>Zend_Feed</code> will throw a
        <code>Zend_Feed_Exception</code> upon failure, such as an HTTP 404 response code or a malformed feed.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-rss">
    <title>Consuming an RSS Feed</title>
    <para>
        Reading an RSS feed is as simple as instantiating a <code>Zend_Feed_Rss</code> object with the URL
        of the feed:
        <programlisting role="php"><![CDATA[
<?php

$channel = new Zend_Feed_Rss('http://rss.example.com/channelName');

?>]]></programlisting>
        If any errors occur fetching the feed, a <code>Zend_Feed_Exception</code> will be thrown.
    </para>

    <para>
        Once you have a feed object, you can access any of the standard RSS "channel" properties directly
        on the object:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->title();

?>]]></programlisting>
        Note the function syntax. <code>Zend_Feed</code> uses a convention of treating properties as XML
        object if they are requested with variable "getter" syntax (<code>$obj->property</code>) and as
        strings if they are access with method syntax (<code>$obj->property()</code>). This enables access
        to the full text of any individual node while still allowing full access to all children.
    </para>

    <para>
        If channel properties have attributes, they are accessible using PHP's array syntax:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->category['domain'];

?>]]></programlisting>
        Since XML attributes cannot have children, method syntax is not necessary for accessing attribute
        values.
    </para>

    <para>
        Most commonly you'll want to loop through the feed and do something with its entries.
        <code>Zend_Feed_Abstract</code> implements PHP's <code>Iterator</code> interface, so printing all
        titles of articles in a channel is just a matter of:
        <programlisting role="php"><![CDATA[
<?php

foreach ($channel as $item) {
    echo $item->title() . "\n";
}

?>]]></programlisting>
        If you are not familiar with RSS, here are the standard elements you can expect to be available in
        an RSS channel and in individual RSS items (entries).
    </para>

    <para>
        Required channel elements:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - The name of the channel</para>
            </listitem>
            <listitem>
                <para><code>link</code> - The URL of the web site corresponding to the channel</para>
            </listitem>
            <listitem>
                <para><code>description</code> - A sentence or several describing the channel</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Common optional channel elements:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>pubDate</code> - The publication date of this set of content, in RFC 822 date
                format</para>
            </listitem>
            <listitem>
                <para><code>language</code> - The language the channel is written in</para>
            </listitem>
            <listitem>
                <para><code>category</code> - One or more (specified by multiple tags) categories the
                channel belongs to</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        RSS <code>&lt;item&gt;</code> elements do not have any strictly required elements. However, either
        <code>title</code> or <code>description</code> must be present.
    </para>

    <para>
        Common item elements:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - The title of the item</para>
            </listitem>
            <listitem>
                <para><code>link</code> - The URL of the item</para>
            </listitem>
            <listitem>
                <para><code>description</code> - A synopsis of the item</para>
            </listitem>
            <listitem>
                <para><code>author</code> - The author's email address</para>
            </listitem>
            <listitem>
                <para><code>category</code> - One more more categories that the item belongs to</para>
            </listitem>
            <listitem>
                <para><code>comments</code> - URL of comments relating to this item</para>
            </listitem>
            <listitem>
                <para><code>pubDate</code> - The date the item was published, in RFC 822 date format</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        In your code you can always test to see if an element is non-empty with:
        <programlisting role="php"><![CDATA[
<?php

if ($item->propname()) {
    // ... proceed.
}

?>]]></programlisting>
    </para>

    <para>
        If you use <code>$item->propname</code> instead, you will always get an empty object which will
        evaluate to <code>TRUE</code>, so your check will fail.
    </para>

    <para>
        For further information, the official RSS 2.0 specification is available at:
        <ulink url="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</ulink>
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom">
<title>Consuming an Atom Feed</title>

    <para>
        <code>Zend_Feed_Atom</code> is used in much the same way as <code>Zend_Feed_Rss</code>. It provides
        the same access to feed-level properties and iteration over entries in the feed. The main
        difference is in the structure of the Atom protocol itself. Atom is a successor to RSS; it is more
        generalized protocol and it is designed to deal more easily with feeds that provide their full
        content inside the feed, splitting RSS' <code>description</code> tag into two elements,
        <code>summary</code> and <code>content</code>, for that purpose.
    </para>

    <example>
        <title>Basic Use of an Atom Feed</title>
        <para>
            Read an Atom feed and print the <code>title</code> and <code>summary</code> of each entry:
        </para>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/');
echo 'The feed contains ' . $feed->count() . ' entries.' . "\n\n";
foreach ($feed as $entry) {
    echo 'Title: ' . $entry->title() . "\n";
    echo 'Summary: ' . $entry->summary() . "\n\n";
}

?>]]>   </programlisting>
    </example>

    <para>
        In an Atom feed you can expect to find the following feed properties:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - The feed's title, same as RSS's channel title</para>
            </listitem>
            <listitem>
                <para><code>id</code> - Every feed and entry in Atom has a unique identifier</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Feeds can have multiple links, which are distinguished by a
                <code>type</code> attribute</para>
                <para>
                    The equivalent to RSS's channel link would be <code>type="text/html"</code>. If the link
                    is to an alternate version of the same content that's in the feed, it would have a
                    <code>rel="alternate"</code> attribute.
                </para>
            </listitem>
            <listitem>
                <para><code>subtitle</code> - The feed's description, equivalent to RSS' channel description
                </para>
                <para><code>author->name()</code> - The feed author's name</para>
                <para><code>author->email()</code> - The feed author's email address</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Atom entries commonly have the following properties:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>id</code> - The entry's unique identifier</para>
            </listitem>
            <listitem>
                <para><code>title</code> - The entry's title, same as RSS item titles</para>
            </listitem>
            <listitem>
                <para><code>link</code> - A link to another format an an alternate view of this entry</para>
            </listitem>
            <listitem>
                <para><code>summary</code> - A summary of this entry's content</para>
            </listitem>
            <listitem>
                <para><code>content</code> - The full content of the entry; can be skipped if the feed just
                contains summaries</para>
            </listitem>
            <listitem>
                <para><code>author</code> - with <code>name</code> and <code>email</code> sub-tags like
                feeds have</para>
            </listitem>
            <listitem>
                <para><code>published</code> - the date the entry was published, in RFC 3339 format</para>
            </listitem>
            <listitem>
                <para><code>updated</code> - the date the entry was last updated, in RFC 3339 format</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        For more information on Atom and plenty of resources, see
        <ulink url="http://www.atomenabled.org/">http://www.atomenabled.org/</ulink>.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom-single-entry">
    <title>Consuming a Single Atom Entry</title>

    <para>
        Single Atom <code>&lt;entry&gt;</code> elements are also valid by themselves. Usually the URL for an
        entry is the feed's URL followed by <code>/&lt;entryId&gt;</code>, such as
        <code>http://atom.example.com/feed/1</code>, using the example URL we used above.
    </para>

    <para>
        If you read a single entry, you will still have a <code>Zend_Feed_Atom</code> object, but it will
        automatically create an "anonymous" feed to contain the entry.
    </para>

    <example>
        <title>Reading a Single-Entry Atom Feed</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
echo 'The feed has: ' . $feed->count() . ' entry.';

$entry = $feed->current();

?>]]>   </programlisting>
    </example>

    <para>
        Alternatively, you could instantiate the entry object directly if you know you are accessing an
        <code>&lt;entry&gt;</code>-only document:
    </para>

    <example>
        <title>Using the Entry Object Directly for a Single-Entry Atom Feed</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom('http://atom.example.com/feed/1');
echo $entry->title();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.modifying-feed">
    <title>Modifying Feed and Entry structures</title>

    <para>
        <code>Zend_Feed</code>'s natural syntax extends to constructing and modifying feeds and entries as well
        as reading them. You can easily turn your new or modified objects back into well-formed XML for saving
        to a file or sending to a server.
    </para>

    <example>
        <title>Modifying an Existing Feed Entry</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = 'This is a new title';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
            This will output a full (includes <code>&lt;?xml ... &gt;</code> prologue) XML representation of the
            new entry, including any necessary XML namespaces.
        </para>
        <para>
            Note that the above will work even if the existing entry does not already have an author tag. You can
            use as many levels of <code>-&gt;</code> access as you like before getting to an assignment; all of the
            intervening levels will be created for you automatically if necessary.
        </para>
    </example>

    <para>
        If you want to use a namespace other than <code>atom:</code>, <code>rss:</code>, or <code>osrss:</code>
        in your entry, you need to register the namespace with <code>Zend_Feed</code> using <code>
        Zend_Feed::registerNamespace()</code>. When you are modifying an existing element, it will always
        maintain its original namespace. When adding a new element, it will go into the default namespace if
        you do not explicitly specify another namespace.
    </para>

    <example>
        <title>Creating an Atom Entry with Elements of Custom Namespaces</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom();
// id is always assigned by the server in Atom
$entry->title = 'my custom entry';
$entry->author->name = 'Example Author';
$entry->author->email = 'me@example.com';

// Now do the custom part.
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'my first custom value';
$entry->{'myns:container_elt'}->part1 = 'first nested custom part';
$entry->{'myns:container_elt'}->part2 = 'second nested custom part';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.custom-feed">
    <title>Custom Feed and Entry Classes</title>

    <para>
        Finally, you can extend the <code>Zend_Feed</code> classes if you'd like to provide your own format or
        niceties like automatic handling of elements that should go into a custom namespace.
    </para>

    <para>
        Here is an example of a custom Atom entry class that handles its own <code>myns:</code> namespace
        entries. Note that it also makes the <code>registerNamespace()</code> call for you, so the end user
        doesn't need to worry about namespaces at all.
    </para>

    <example>
        <title>Extending the Atom Entry Class with Custom Namespaces</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * The custom entry class automatically knows the feed URI (optional) and
 * can automatically add extra namespaces.
 */
class MyEntry extends Zend_Feed_EntryAtom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // Translate myUpdated to myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // Translate myUpdated to myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
            Then to use this class, you'd just instantiate it directly and set the <code>myUpdated</code>
            property:
            <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>       </programlisting>
        </para>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->