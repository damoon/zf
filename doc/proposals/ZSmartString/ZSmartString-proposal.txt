Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
ZSmartString


Proposers
-----------------------------------------------
John Coggeshall <john@zend.com>


Revision
-----------------------------------------------
$Id: ZSmartString-proposal.txt,v 1.1 2005/12/03 20:07:09 john Exp $


Overview
-----------------------------------------------
ZSmartString would be an implementation of regular interpolated
strings which had the added ability to include logic in their ultimate
rendering to assist in, among other things, the translation of strings
between languages. 


References
-----------------------------------------------
Inspired by the IntSmarty extension
	http://www.coggeshall.org/oss/intsmarty/
and the Smarty templating language
	http://smarty.php.net

Requirements
-----------------------------------------------
Must implement the ability to parse and execute logic (by converting it
PHP code ideally) within a string as defined by the SmartString language.
The Strings must maintain variable references as well to allow values to
be replaced as necessary at runtime.


Dependencies on Other Framework Components
-----------------------------------------------
None.


Theory of Operation
-----------------------------------------------
The basic principals of this component's operation will be to create an
instance which represents a single string.. i.e.

	$a = new ZSmartString("This is my String with Value $foo");

and provide the following language constructs in-line to allow the string 
to be manipulated based on values within the string:

if, else, elseif, ldelim, rdelim

In example: 
	$a = new ZSmartString("I have {if $x == 0}no apples{elseif $x == 1}one apple{else}$x apples{/if}");

ldelim and rdelim represent the delimiter used to define the language
(i.e. { and })

Once a string has been created variables must be added to represent the
variables in the scope of the function:

$a->addVariable('x', $numApples);

You can also register callback functions for filtering variables generically
to suit your needs:

function appleCountFilter($value) {
	// Can never have less then zero apples
	return ($value < 0) ? 0 : $value;
}

$a->addVariableFilter('appleFilter', 'appleCountFilter');

Smart Strings then can be returned in-line or rendered to PHP logic for
saving..

// Return result in-line (doesn't compile to PHP, just in-line executes)
print $a->render();

// return rendering logic as a PHP snippet:
eval($a->renderToPHP());

Optimizations can be made to make the SmartStrings intelligent enough to
identify which strings actually have logic within them and parse them,
and which ones are simple PHP strings requiring no logic parsing at all.

Class Index
-----------------------------------------------
ZSmartString


Use Cases
-----------------------------------------------

====================
Translation example
====================

define('ORANGE', 1);

$lang['en'][ORANGE] = "I have {if $x==0}no apples{elseif $x==1}one apple{else}$x apples{/if} and {if $x==0}no oranges{elseif $x==1}one orange{else}$y oranges{/if}.";
$lang['de'][ORANGE] = "Ich habe {if $x==0}keine{elseif $x==1}einen{else}$x{/if} {if $x == 1}A{else}Ã„{/if}pfel und {if $y ==0}keine{elseif $x==1}eninen{else}$x{/if} Orangen.";

$language = "de";


$sStrOranges = new ZSmartString($lang[$language][ORANGE]);

print $sStrOranges; 


Class Skeletons
-----------------------------------------------
ZSmartString
	addVariable('varName', $var);
		Adds 'varName' for use within the SmartString
	delVariable('varName');
		Dels 'varName' from the SmartString
	renderToPHP();
		Renders the Smart String as PHP code and returns it
	render();
		Returns the Smart String in its rendered form
	addVariableFilter('filter_name', 'callback_filter');
		Add a callback function to filter variables prior to
		rendering them.
	delVariableFilter('filter_name');
		Delete a filter
	addFunction('funcname', 'callback');
		Add a function named 'funcname' to the SmartString language
		associated with PHP function 'callback'.
	delFunction('funcname');
		Delete function named 'funcname'
	__toString()
		Maps to render();
