<sect1 id="zend.validate.introduction">

    <title>Introduction</title>

    <para>
        The Zend_Validate component provides a set of commonly needed validators. It also provides a simple
        validator chaining mechanism by which multiple validators may be applied to a single datum in a
        user-defined order.
    </para>

    <para>
        <emphasis role="strong">What is a validator?</emphasis>
    </para>

    <para>
        A validator examines its input with respect to some requirements and produces a boolean result -
        whether the input successfully validates against the requirements. If the input does not meet the
        requirements, a validator may additionally provide information about which requirement(s) the input
        does not meet.
    </para>

    <para>
        For example, a web application might require that a username be between six and twelve characters in
        length and may only contain alphanumeric characters. A validator can be used for ensuring that
        usernames meet these requirements. If a chosen username does not meet one or both of the requirements,
        it would be useful to know which of the requirements the username fails to meet.
    </para>

    <para>
        Having defined validation in this way provides the foundation for
        <code>Zend_Validate_Interface</code>, which defines two methods, <code>isValid()</code> and
        <code>getMessages()</code>. The <code>isValid()</code> method performs validation upon the provided
        value, returning <code>true</code> if and only if the value passes against the validation criteria. If
        <code>isValid()</code> returns <code>false</code>, the <code>getMessages()</code> is provided to
        return an array of messages explaining the reason(s) for validation failure.
    </para>

    <note>
        <para>
            The <code>getMessages()</code> returns validation failure messages for the most recent
            <code>isValid()</code> call only, since <code>isValid()</code> clears any messages existing from a previous <code>isValid()</code> call.
        </para>
    </note>

    <para>
        The following example illustrates validation of an e-mail address:

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/EmailAddress.php';
$validator = new Zend_Validate_EmailAddress();
if ($validator->isValid($email)) {
    // email appears to be valid
} else {
    // email is invalid; print the reasons
    foreach ($validator->getMessages() as $message) {
        echo "$message\n";
    }
}]]></programlisting>

    </para>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->