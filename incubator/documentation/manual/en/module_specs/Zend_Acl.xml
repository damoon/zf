<sect1 id="zend.acl.introduction">

    <title>Introduction</title>

    <para>
    Zend_Acl provides lightweight and flexible access control list (ACL) functionality and privileges management. In general, an application may utilize such functionality to control access to certain protected objects by other requesting objects.
    </para>

    <para>
    For the purposes of this documentation,

    <itemizedlist>

    <listitem>
    an <emphasis role="strong">Access Control Object (ACO)</emphasis> is an object to which access is controlled.
    </listitem>

    <listitem>
    an <emphasis role="strong">Access Request Object (ARO)</emphasis> is an object that may request access to an ACO.
    </listitem>

    </itemizedlist>

    Put simply, <emphasis role="strong">AROs request access to ACOs</emphasis>. For example, if a person requests access to a car, then the person is the requesting ARO, and the car is the ACO, since access to the car is under control.
    </para>

    <para>
    Through the specification and use of an access control list (ACL), an application may control how requesting objects (AROs) are granted access to protected objects (ACOs).

    Zend_Acl provides a tree-based structure to which multiple 'areas' (also known as ACOs) can be added. These 'areas' within the ACL can be assigned either generic or specific 'actions' (known as Contexts) that determine access privileges for user-defined 'groups' (or AROs). These actions are assigned to ACOs ad hoc when calling <code>allow()</code> or <code>deny()</code>.
    </para>

    <sect2 id="zend.acl.introduction.creating">

        <title>Creating the Access Control List (ACL)</title>

        <para>
        An ACL can represent any set of physical or virtual objects that you wish. For the purposes of demonstration, however, we will create a basic Content Management System ACL that maintains several tiers of groups over a wide variety of areas. To create a new ACL object, we instantiate the ACL with no parameters:
        </para>

        <programlisting role="php">&lt;?php

require_once 'Zend/Acl.php';

$acl = new Zend_Acl();</programlisting>

    </sect2>

    <sect2 id="zend.acl.introduction.aro_registry">

        <title>Registering Access Request Objects (AROs)</title>

        <para>
        Content Management Systems will nearly always require a hierarchy of permissions to determine the authoring capabilities of its users. There may be a 'Guest' group to allow limited access for demonstrations, a 'Staff' group for the majority of CMS users who perform most of the day-to-day operations, an 'Editor' group for those responsible for publishing, reviewing, archiving and deleting content, and finally an 'Administrator' group whose tasks may include all of those of the other groups as well as maintenance of sensitive information, user management, back-end configuration data and backup/export. This set of permissions can be represented in an ARO registry, allowing each group to inherit privileges from 'parent' groups, as well as providing distinct privileges for their unique group only. The permissions may be expressed as follows:
        </para>

        <table>
          <title>Access Controls for an Example CMS</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Unique permissions</entry>
                <entry>Inherit permissions from</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Guest</entry>
                <entry>View</entry>
                <entry>N/A</entry>
              </row>
              <row>
                <entry>Staff</entry>
                <entry>Edit, Submit, Revise</entry>
                <entry>Guest</entry>
              </row>
              <row>
                <entry>Editor</entry>
                <entry>Publish, Archive, Delete</entry>
                <entry>Staff</entry>
              </row>
              <row>
                <entry>Administrator</entry>
                <entry>(Granted all access)</entry>
                <entry>N/A</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
        These groups can be added to the ARO registry as follows:
        </para>

        <programlisting role="php">&lt;?php

require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

// Retrieve an instance of the ARO registry
$aro = $acl-&gt;aroRegistry();

// Add groups to the ARO registry

// Guest does not inherit access controls
$aro-&gt;add('guest');

// Staff inherits from guest
$aro-&gt;add('staff', $aro-&gt;guest);
// alternatively, $aro-&gt;add('staff', 'guest');

// Editor inherits from staff
$aro-&gt;add('editor', $aro-&gt;staff);

// Administrator does not inherit access controls
$aro-&gt;add('administrator');</programlisting>

    </sect2>

    <sect2 id="zend.acl.introduction.defining">

        <title>Defining Access Controls</title>

        <para>
        Now that the ARO registry contains the groups, permissions can be assigned to areas within the ACL. Zend_Acl provides an extremely flexible implementation whereby ACOs need only be created for those areas that require specific permissions. All descendant ACOs - even undeclared ACOs - inherit permissions defined for their ancestor ACOs.
        </para>

        <para>
        For example, if we assign access controls to <code>$acl-&gt;newsletters</code>, then descendant ACOs such as <code>$acl-&gt;newsletters-&gt;archive</code> and <code>$acl-&gt;newsletters-&gt;pending</code> inherit access controls from the parent ACO, <code>$acl-&gt;newsletters</code>, despite that they have not been specifically defined for either child ACO.
        </para>

        <para>
        Consequently, we can define a reasonably complex set of permissions with a minimum amount of code. To apply the base permissions as defined above:
        </para>

        <programlisting role="php">&lt;?php

require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

$aro = $acl-&gt;aroRegistry();

$aro-&gt;add('guest');
$aro-&gt;add('staff', $aro-&gt;guest);
$aro-&gt;add('editor', $aro-&gt;staff);
$aro-&gt;add('administrator', $aro-&gt;editor);

// Whitelist implementation; ACL denies access by default
$acl-&gt;deny();

// Guest may only view content
$acl-&gt;allow($aro-&gt;guest, 'view');
// alternatively, $acl-&gt;allow('guest, 'view');

// Staff inherits view privilege from guest, but also needs additional privileges
$acl-&gt;allow($aro-&gt;staff, array('edit', 'submit', 'revise'));

// Editor inherits view, edit, submit, and revise privileges from staff,
// but also needs additional privileges
$acl-&gt;allow($aro-&gt;editor, array('publish', 'archive', 'delete'));

// Administrator inherits nothing, but is allowed all privileges
$acl-&gt;allow($aro-&gt;administrator);</programlisting>

    </sect2>

    <sect2 id="zend.acl.introduction.querying">

        <title>Querying the ACL</title>

        <para>
        We now have a flexible ACL that can be used to determine whether requesters have permission to access areas and perform functions throughout the web application. Performing queries can be as flexible as you require:
        </para>

        <programlisting role="php">&lt;?php

// Querying the ACL at the root ACO

echo $acl-&gt;valid($aro-&gt;guest, 'view') ?
     "allowed" : "denied"; // allowed

echo $acl-&gt;valid($aro-&gt;staff, 'publish') ?
     "allowed" : "denied"; // denied

// Permission checks on more specific ACOs

echo $acl-&gt;newsletter-&gt;pending-&gt;valid($aro-&gt;guest, 'view') ?
     "allowed" : "denied"; // allowed

echo $acl-&gt;gallery-&gt;profiles-&gt;valid($aro-&gt;staff, 'revise') ?
     "allowed" : "denied"; // allowed because of inheritance

echo $acl-&gt;config-&gt;hosts-&gt;valid($aro-&gt;editor, 'update') ?
     "allowed" : "denied"; // denied because 'update' is undefined

// Querying permissions from the perspective of an ARO

echo $aro-&gt;staff-&gt;canAccess($acl-&gt;newsletter-&gt;pending, 'view') ?
     "allowed" : "denied"; // allowed</programlisting>

    </sect2>

</sect1>

<sect1 id="zend.acl.refining">

    <title>Refining Access Controls</title>

    <sect2 id="zend.acl.refining.precise">

        <title>Precise Access Controls</title>

        <para>
        The basic ACL as defined in the previous section shows how permissions can be applied at a general level. In practice, however, access controls tend to have exceptions and varying degrees of complexity. Zend_Acl allows to you accomplish these refinements in a straightforward and flexible manner.
        </para>

        <para>
        For the example CMS, it has been determined that whilst the 'staff' group covers the needs of the vast majority of users, there is a need for a new group that requires access to the newsletter and latest news in the CMS. The group is fairly self-sufficient and will have the ability to publish and archive both newsletters and the latest news.
        </para>

        <para>
        In addition, it has also been requested that the 'staff' group be allowed to view news stories but not to revise the latest news. Finally, it should be impossible for anyone (administrators included) to archive any 'announcement' news stories since they only have a lifespan of 1-2 days.
        </para>

        <para>
        First we revise the ARO registry to reflect these changes. We have determined that the 'marketing' group has the same basic permissions as 'staff', so we define 'marketing' in such a way that it inherits permissions from 'staff':
        </para>

        <programlisting role="php">// The new marketing group inherits permissions from staff
$aro-&gt;add('marketing', $aro-&gt;staff);</programlisting>

        <para>
        Then it is simply a matter of adding permissions to this new group on the target areas within the ACL:
        </para>

        <programlisting role="php">// Marketing must be able to publish and archive newsletters
$acl-&gt;newsletter-&gt;allow($aro-&gt;marketing, array('publish', 'archive'));

// It also needs to be able to publish and archive the latest news
$acl-&gt;news-&gt;latest-&gt;allow($aro-&gt;marketing, array('publish', 'archive'));

// Staff and marketing (by inheritance), are denied permission to revise the latest news
$acl-&gt;news-&gt;latest-&gt;deny($aro-&gt;staff, 'revise');

// Everyone (including administrators) are denied permission to archive news announcements
$acl-&gt;news-&gt;announcement-&gt;deny(null, 'archive');</programlisting>

        <para>
        We can now query the ACL with respect to the latest changes:
        </para>

        <programlisting role="php">echo $acl-&gt;newsletter-&gt;pending-&gt;valid($aro-&gt;staff, 'publish') ?
     "allowed" : "denied"; // denied

echo $acl-&gt;newsletter-&gt;pending-&gt;valid($aro-&gt;marketing, 'publish') ?
     "allowed" : "denied"; // allowed

echo $aro-&gt;staff-&gt;canAccess($acl-&gt;news-&gt;latest, 'publish') ?
     "allowed" : "denied"; // denied

echo $aro-&gt;marketing-&gt;canAccess($acl-&gt;news-&gt;latest, 'publish') ?
     "allowed" : "denied"; // allowed

echo $aro-&gt;editor-&gt;canAccess($acl-&gt;news-&gt;announcement, 'archive') ?
     "allowed" : "denied"; // denied</programlisting>

    </sect2>

    <sect2 id="zend.acl.refining.removing">

        <title>Removing Access Controls</title>

        <para>
        To remove one or more access rules from the ACL, simply use the available <code>removeAllow()</code> or <code>removeDeny()</code> methods. As with <code>allow()</code> and <code>deny()</code>, you may provide a <code>null</code> value to indicate application to all AROs, and the context may also be <code>null</code>, indicating all contexts, or a string or an array of strings, where the strings indicate the specific contexts to which the removal applies:
        </para>

        <programlisting role="php">// Remove the denial of revising latest news to staff (and marketing, by inheritance)
$acl-&gt;news-&gt;latest-&gt;removeDeny($aro-&gt;staff, 'revise');

// Remove the allowance of publishing and archiving newsletters to marketing
$acl-&gt;newsletter-&gt;removeAllow($aro-&gt;marketing, array('publish', 'archive'));</programlisting>

        <para>
        Permissions may be modified incrementally as indicated above, but <code>null</code> values will override such incremental changes:
        </para>

        <programlisting role="php">// Allow marketing all permissions upon the latest news
$acl-&gt;news-&gt;latest-&gt;allow($aro-&gt;marketing, null);</programlisting>

    </sect2>

</sect1>

<sect1 id="zend.acl.advanced">

    <title>Advanced Use</title>

    <sect2 id="zend.acl.advanced.storing">

        <title>Storing ACL Data for Persistence</title>

        <para>
        Zend_Acl was designed in such a way that it does not require any particular backend technology such as a database or cache server for storage of the ACL data. Its complete PHP implementation enables customized administration tools to be built upon Zend_Acl with relative ease and flexibility. Many situations require some form of interactive maintenance of the ACL, and Zend_Acl provides methods for traversing the structure and for determining the access controls with respect to AROs or ACOs.
        </para>

        <para>
        Storage of ACL data is therefore left as a task for the developer, since use cases are expected to vary widely for various situations. Because Zend_Acl is serializable, ACL objects may be serialized with PHP's <ulink url="http://php.net/serialize"><code>serialize()</code></ulink> function, and the results may be stored anywhere the developer should desire, such as a file, database, or caching mechanism.
        </para>

    </sect2>

    <sect2 id="zend.acl.advanced.traversing">

        <title>Traversing the ACL</title>

        <para>
        To retrieve an array of all child nodes of an ACO, you may simply iterate through the results of the <code>getChildren()</code> method. For each child object returned, you may also retrieve the 'allow' and 'deny' permissions as separate objects for inspection. These are returned as associative arrays, with the keys representing the defined AROs and the values containing an array of defined contexts:
        </para>

        <programlisting role="php">// Retrieve default ACL permissions from the root ACO
foreach ($acl-&gt;getAllow() as $aro =&gt; $permissions) {
    echo "Allow: $aro = " . join(', ', $permissions) . "\n";
}
foreach ($acl-&gt;getDeny() as $aro =&gt; $permissions) {
    echo "Deny:  $aro = " . join(', ', $permissions) . "\n";
}

// Retrieve all 1st-level children ACOs and list permissions specific to each child ACO
echo "\n";
foreach ($acl-&gt;getChildren() as $aco) {

    echo "Path: " . $aco-&gt;getPath(). "\n";

    foreach ($aco-&gt;getAllow() as $aro =&gt; $permissions) {
        echo "Allow: $aro = " . join(', ', $permissions) . "\n";
    }

    foreach ($aco-&gt;getDeny() as $aro =&gt; $permissions) {
        echo "Deny:  $aro = " . join(', ', $permissions) . "\n";
    }

    echo "\n";
}</programlisting>

        <para>
        You can also call <code>getParent()</code> to access each ACO's parent for traversing up to the root of the ACL.
        </para>

    </sect2>

    <sect2 id="zend.acl.advanced.view_from_aro">

        <title>Retrieving an ARO-Specific View of the ACL</title>

        <para>
        You may also retrieve an inclusive subset of an ACL by calling the <code>getValidAco()</code> method upon an ARO. This method traverses the ACL starting from the provided ACO and returns a new Zend_ACL object. This feature limits the amount of data in the returned ACL to that which pertains to the ARO in question.
        </para>

        <programlisting role="php">// Fetch the ACL as it pertains to the marketing ARO from the root
$aclMarketing = $aro-&gt;marketing-&gt;getValidAco($acl);

// Same as above, but limiting the view to the newsletter and its descendants
$aclMarketingNewsletter = $aro-&gt;marketing-&gt;getValidAco($acl-&gt;newsletter);</programlisting>

    </sect2>

    <sect2 id="zend.acl.advanced.permitted_aros">

        <title>Retrieving all AROs Having Access to an ACO</title>

        <para>
        An array of ARO instances can also be returned for each ACO node in the ACL. The <code>getValidAro()</code> method available for ACOs returns a list of all AROs that have access to the ACO, whether through specific or inherited permissions. To limit the search to particular AROs, simply supply either a single ARO identifier or an array of ARO identifiers.
        </para>

        <programlisting role="php">// Returns array of 'staff', 'editor', 'marketing', and 'administrator'
$aroList = $acl-&gt;news-&gt;getValidAro();

// Returns array containing only 'staff'
$aroList = $aro-&gt;news-&gt;getValidAro(array($aro-&gt;guest, $aro-&gt;staff));</programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
