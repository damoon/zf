<sect1 id="zend.locale.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Locale</code> is the Frameworks answer to the question 
        "how can the same application be used around the whole world". 
        Most people will say... "that's easy, let's translate all our output 
        to the several languages". But it's not that easy. 
    </para>
    <para>
        What we need is <code>Localization</code> or it's bigger brother <code>Internationalization</code>. 
        Both are often shortend to <code>L10N</code> and <code>I18N</code>. 
    </para>
    <para>
        To prevent irritation we define that Localization and Internationalization 
        are shortened to <code>Locale</code> or Localization. 

        <code>Zend_Locale</code> also provides additional informations on locales.
        These will be described in the following sections.
    </para>
    <sect2 id="zend.locale.localization">
        <title>What is Localization</title>
        <para>
            Localization means that an application (or homepage) can be used from different users
            which speak different languages.
            But as you already have expected Localization means more than only translating strings.
            It includes
        </para>
        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    Translating strings (done by Zend_Translate)
                </para>
            </listitem>
            <listitem>
                <para>
                    Localization of Dates, Times (done by Zend_Date)
                </para>
            </listitem>
            <listitem>
                <para>
                    Localization of Calendars (done by Zend_Calendar)
                </para>
            </listitem>
            <listitem>
                <para>
                    Localization of Currencies (done by Zend_Currency)
                </para>
            </listitem>
            <listitem>
                <para>
                    Parsing and Generating localized numbers (done by Zend_Locale_Format)
                </para>
            </listitem>
            <listitem>
                <para>
                    Retrieve localized standard strings as Countrynames, Languagenames and more (done by Zend_Locale_Data)
                </para>
            </listitem>
            <listitem>
                <para>
                    Localization of collations (will be integrated in future)
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
    <sect2 id="zend.locale.whatis">
        <title>What is a Locale</title>
        <para>
            When a class or function makes use of localization we say it is <code>locale-aware</code>.
            But how does it know which localization the user is expecting ?
        </para>
        <para>
            Here is the point where our <code>Locale</code> comes in use.
        </para>
        <para>
            A locale gives <code>Zend_Locale</code> and it's subclasses the information which language and
            which region we are expecting. Based on this information for example the proper output could be generated.
        </para>
        <para>
            Each computer user makes use of Locales even when they don't know it.
        </para>
    </sect2>
    <sect2 id="zend.locale.example">
        <title>Examples for Locales</title>
        <para>
            As already mentioned locales consist of informations on the users language and region where he lives.
        </para>
        <para>
            A user which lives in the USA would expect the language <code>english</code> and the region <code>usa</code>.
            But an german user would expect the language <code>german</code> and the region <code>germany</code>.
        </para>
        <para>
            The locale which we use in the framework is a international defined standard abbreviation of 
            language and region. It is written <code>language_REGION</code> whereas both parts are abbreviated to 2 chars.
        </para>
        <para>
            So our user from USA would use the locale <code>en_US</code> and our german user will make use of
            the locale <code>de_DE</code>.
        </para>
    </sect2>
    <sect2 id="zend.locale.definition">
        <title>Defining the right locale per search algorithm</title>
        <para>
            Defining the right locale for a user is as simple as just makeing an instance of <code>Zend_Locale</code>
        </para>
        <example>
            <title>Defining a locale</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');

$locale = new Zend_Locale();
?>]]></programlisting>
        </example>
        <para>
            <code>Zend_Locale</code> itself is able to detect the proper locale for a user.
        </para>
        <note>
            <title>Automatic detection</title>
            <para>
                It is recommended to let Zend_Locale detect the right locale instead of defining it per hand.
            </para>
        </note>
        <para>
            The seach algorithm will give the most probable locale based on
            <orderedlist>
                <listitem>
                    <para>
                        The users browser based on the global variable <code>HTTP_ACCEPT_LANGUAGE</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The servers locale based on PHP's internal function <code>setlocale()</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The standard locale which the Framework is set to
                    </para>
                </listitem>
            </orderedlist>
        </para>
        <para>
            Of course the automatic search algorithm can be affected to change the order of search.
            This can be done by using <code>Zend_Locale</code>'s constants <code>SERVER</code>, 
            <code>BROWSER</code> and <code>FRAMEWORK</code>, whereas BROWSER is used as 
            standard search algorithm if no one is defined.
        </para>
        <para>
            <code>SERVER</code> changes the automatic to search in the order :
            <orderedlist>
                <listitem>
                    <para>
                        Server's locale
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Framework's locale
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Browser's locale
                    </para>
                </listitem>
            </orderedlist>
        </para>
        <example>
            <title>Search Environment Locale</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');

$locale = new Zend_Locale(Zend_Locale::SERVER);
?>]]></programlisting>
        </example>
        <para>
            <code>FRAMEWORK</code> changes the automatic to search in the order :
            <orderedlist>
                <listitem>
                    <para>
                        Framework's locale
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Server's locale
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Browser's locale
                    </para>
                </listitem>
            </orderedlist>
        </para>
        <example>
            <title>Search Framework Locale</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');

$locale = new Zend_Locale(Zend_Locale::FRAMEWORK);
?>]]></programlisting>
        </example>
        <para>
            <code>BROWSER</code> changes the automatic to search in the order :
            <orderedlist>
                <listitem>
                    <para>
                        Browser's locale
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Server's locale
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Framework's locale
                    </para>
                </listitem>
            </orderedlist>
        </para>
        <example>
            <title>Search Browser Locale</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');

$locale = new Zend_Locale(Zend_Locale::BROWSER);
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.locale.handdefinition">
        <title>Defining a locale per hand and how it works internal</title>
        <para>
            Of course a locale can also be defined per hand.
        </para>
        <example>
            <title>Define locales per hand</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');

$locale = new Zend_Locale('de_DE');
?>]]></programlisting>
        </example>
        <para>
            The only thing to know is how locale's work...
            When a locale is not avaiable, the next lower one is used.
            Locales are ordered like in the following example.
        </para>
        <para>
            User gives <code>xh_RU</code>.
            The highest one is the given locale. <code>Zend_Locale</code> will
            search for <code>xh_RU</code> and not find it.
        </para>
        <para>
            <code>Zend_Locale</code> will now as next step search for <code>xh</code>
            as next lower locale.
        </para>
        <para>
            When neighter the first nor the second locale has been found, <code>Zend_Locale</code>
            will fall back to the base locale <code>root</code> where default world wide definitions
            can be found.
        </para>
        <para>
            The same way is used when an information is asked from a locale. Think of a date definition for
            arabic date which is asked for en_US. As in en_US no arabic date definition will be found, it will 
            fall back to en... even there the wished information can not be found, as in en dates are written 
            in gregorian... so it will fall back to root where it will find the proper information.
        </para>
    </sect2>
    <sect2 id="zend.locale.interaction">
        <title>How locales interact with locale aware classes</title>
        <para>
            Locale-aware classes can be used without the definition of a locale.
        </para>
        <example>
            <title>Autodefinition with locale aware classes</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');
require_once('Zend/Date.php');

$date = new Zend_Date('2006',Zend_Date::YEAR);
?>]]></programlisting>
        </example>
        <para>
            Here the locale aware <code>Zend_Date</code> class makes use of the 
            autorecognition for the locale which is used internal.
        </para>
        <para>
            But it can also be written by defining the standard locale standalone.
        </para>
        <example>
            <title>Use locale autosearch for more than one classes</title>
            <programlisting role="php"><![CDATA[<?php

require_once('Zend/Locale.php');
require_once('Zend/Date.php');
require_once('Zend/Measure.php');

$locale = new Zend_Locale();
$date = new Zend_Date('2006',Zend_Date::YEAR, $locale);
$temp = new Zend_Measure('100,10',Zend_Measure::TEMPERATURE, $locale);
?>]]></programlisting>
        </example>
        <para>
            This way the second locale-aware class has not to search once more the standard locale,
            as this has already been done by <code>Zend_Locale</code> itself. <code>$locale</code> stores
            the already found locale.
        </para>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->