<sect1 id="zend.log.writers">
  <title>Writers</title>
  <para>
    A Writer is an object that inherits from <code>Zend_Log_Writer_Abstract</code>.  A Writer's
    responsibility is to record log data to a storage backend.  
  </para>

  <sect2 id="zend.log.writers.stream">
    <title>Streams</title>
    <para>
      <code>Zend_Log_Writer_Stream</code> sends log
      data to a <ulink url="http://www.php.net/stream">PHP stream</ulink>.
    </para>

    <para>
      To write log data to the PHP output buffer, use the URL <code>php://output</code>.  Alternatively,
      you can may like to send log data directly to a stream like <code>STDERR</code> 
      (<code>php://stderr</code>).
      
      <programlisting role="php"><![CDATA[<?php
$writer = new Zend_Log_Writer_Stream('php://output');
$logger = new Zend_Log($writer);

$logger->info('Informational message');
?>]]></programlisting>        
    </para>

    <para>
      To write data to a file, use one of the
      <ulink url="http://www.php.net/manual/en/wrappers.php#wrappers.file">Filesystem
      URLs</ulink>:
      
      <programlisting role="php"><![CDATA[<?php
$writer = new Zend_Log_Writer_Stream('/path/to/logfile');
$logger = new Zend_Log($writer);

$logger->info('Informational message');
?>]]></programlisting>

      By default, the stream is opened in the append mode (<code>"a"</code>).
      To open it with a different mode, the Zend_Log_Writer_Stream constructor
      accepts an optional second parameter for the mode.
    </para>
  
    <para>
      The constructor of <code>Zend_Log_Writer_Stream</code> also accepts an existing stream resource:

      <programlisting role="php"><![CDATA[<?php
$stream = @fopen('/path/to/logfile', 'a', false);
if (! $stream) {
    throw new Exception('Failed to open stream');
}        

$writer = new Zend_Log_Writer_Stream($stream);
$logger = new Zend_Log($writer);

$logger->info('Informational message');
?>]]></programlisting>

      The mode cannot be specified for existing stream resources. Doing so
      will result in an <code>InvalidArgumentException</code>.
    </para>
  </sect2>

  <!-- TODO
  <sect2 id="zend.log.writers.stream">
    <title>Database</title>
    <para>
      TBD
    </para>
  </sect2>
  -->

  <sect2 id="zend.log.writers.stream">
    <title>Null</title>
    <para>
      The <code>Zend_Log_Writer_Null</code> is a stub that does not write log data to anything.
      It is useful for disabling logging or stubbing out logging during tests:

      <programlisting role="php"><![CDATA[<?php
$writer = new Zend_Log_Writer_Null;
$logger = new Zend_Log($writer);

// goes nowhere
$logger->info('Informational message');
?>]]></programlisting>
    </para>
  </sect2>

  <sect2 id="zend.log.writers.compositing">
    <title>Compositing</title>
    
    <para>
      There is no composite Writer object. However, a Log instance can write
      to any number of Writers. To do this, use the <code>addWriter()</code>
      method:
    
      <programlisting role="php"><![CDATA[<?php
$writer1 = new Zend_Log_Writer_Stream('/path/to/first/logfile');
$writer2 = new Zend_Log_Writer_Stream('/path/to/second/logfile');

$logger = new Zend_Log();
$logger->addWriter($writer1);
$logger->addWriter($writer2);

// goes to both writers
$logger->info('Informational message');      
?>]]></programlisting>
    </para>
  </sect2>
</sect1>