<sect1 id="zend.auth.adapter.ldap">

    <title>LDAP Authentication</title>

    <sect2 id="zend.auth.adapter.ldap.usage">

        <title>Usage</title>

        <para>
            To incorporate <code>Zend_Auth_Adapter_Ldap</code> authentication into your application quickly, even if
            you're not using <code>Zend_Controller</code>, the meat of your code should look something like the
            following:
            <programlisting role="php"><![CDATA[<?php
$username = $this->_request->getParam('username');
$password = $this->_request->getParam('password');

$auth = Zend_Auth::getInstance();

require_once 'Zend/Config/Ini.php';
$config = new Zend_Config_Ini('../application/config/config.ini', 'production');
$log_path = $config->ldap->log_path;
$options = $config->ldap->toArray();
unset($options['log_path']);

require_once 'Zend/Auth/Adapter/Ldap.php';
$adapter = new Zend_Auth_Adapter_Ldap($options, $username, $password);

$result = $auth->authenticate($adapter);

if ($log_path) {
    $messages = $result->getMessages();

    require_once 'Zend/Log.php';
    require_once 'Zend/Log/Writer/Stream.php';
    require_once 'Zend/Log/Filter/Priority.php';
    $logger = new Zend_Log();
    $logger->addWriter(new Zend_Log_Writer_Stream($log_path));
    $filter = new Zend_Log_Filter_Priority(Zend_Log::DEBUG);
    $logger->addFilter($filter);

    foreach ($messages as $i => $message) {
        if ($i-- > 1) { // $messages[2] and up are log messages
            $message = str_replace("\n", "\n  ", $message);
            $logger->log("Ldap: $i: $message", Zend_Log::DEBUG);
        }
    }
}]]></programlisting>
            Of course the logging code is optional, but it is highly recommended that you use a logger.
            <code>Zend_Auth_Adapter_Ldap</code> will record just about every bit of information anyone could want in
            <code>$messages</code> (more below), which is a nice feature in itself for something that has a history of
            being notoriously difficult to debug.
        </para>

        <para>
            The <code>Zend_Config_Ini</code> code is used above to load the adapter options. It is also optional. A
            regular array would work equally well. The following is an example
            <code>application/config/config.ini</code> file that has options for two separate servers. With multiple
            sets of server options the adapter will try each in order until the credentials are successfully
            authenticated. The names of the servers (e.g., <code>server1</code> and <code>server2</code>) are largely
            arbitrary. For details regarding the options array, see the <emphasis>Server Options</emphasis> section
            below. Note that <code>Zend_Config_Ini</code> requires that any values with equals characters
            (<code>=</code>) will need to be quoted (like the DNs shown below).
            <programlisting role="ini"><![CDATA[[production]

ldap.log_path = /tmp/ldap.log

; Typical options for OpenLDAP
ldap.server1.host = s0.foo.net
ldap.server1.accountDomainName = foo.net
ldap.server1.accountDomainNameShort = FOO
ldap.server1.accountCanonicalForm = 3
ldap.server1.username = "CN=user1,DC=foo,DC=net"
ldap.server1.password = pass1
ldap.server1.baseDn = "OU=Sales,DC=foo,DC=net"
ldap.server1.bindRequiresDn = true

; Typical options for Active Directory
ldap.server2.host = dc1.w.net
ldap.server2.useSsl = true
ldap.server2.accountDomainName = w.net
ldap.server2.accountDomainNameShort = W
ldap.server2.accountCanonicalForm = 3
ldap.server2.baseDn = "CN=Users,DC=w,DC=net"]]></programlisting>
            The above configuration will instruct <code>Zend_Auth_Adapter_Ldap</code> to attempt to authenticate users
            with the OpenLDAP server <code>s0.foo.net</code> first. If the authentication fails for any reason, the AD
            server <code>dc1.w.net</code> will be tried.
        </para>

        <para>
            With servers in different domains, this configuration illustrates multi-domain authentication. You can also
            have multiple servers in the same domain to provide redundancy.
        </para>

        <para>
            Note that in this case, even though OpenLDAP has no need for the short NetBIOS style domain name used by
            Windows we provide it here for name canonicalization purposes (described in the
            <emphasis>Username Canonicalization</emphasis> section below).
        </para>

    </sect2>

    <sect2 id="zend.auth.adapter.ldap.api">

        <title>The API</title>

        <para>
            The <code>Zend_Auth_Adapter_Ldap</code> constructor accepts three parameters.
        </para>

        <para>
            The <code>$options</code> parameter is required and must be an array containing one or more sets of
            options. Note that it is <emphasis>an array of arrays</emphasis> of
            <link linkend="zend.ldap">Zend_Ldap</link> options. Even if you will be using only one LDAP server, the
            options must still be within another array.
        </para>

        <para>
            Below is <ulink url="http://php.net/print_r"><code>print_r()</code></ulink> output of an example options
            parameter containing two sets of server options for LDAP servers <code>s0.foo.net</code> and
            <code>dc1.w.net</code> (same options as the above INI representation):
            <programlisting role="output"><![CDATA[Array
(
    [server2] => Array
        (
            [host] => dc1.w.net
            [useSsl] => 1
            [accountDomainName] => w.net
            [accountDomainNameShort] => W
            [accountCanonicalForm] => 3
            [baseDn] => CN=Users,DC=w,DC=net
        )

    [server1] => Array
        (
            [host] => s0.foo.net
            [accountDomainName] => foo.net
            [accountDomainNameShort] => FOO
            [accountCanonicalForm] => 3
            [username] => CN=user1,DC=foo,DC=net
            [password] => pass1
            [baseDn] => OU=Sales,DC=foo,DC=net
            [bindRequiresDn] => 1
        )

)]]></programlisting>
            The information provided in each set of options above is different mainly because AD does not require a
            username be in DN form when binding (see the <code>bindRequiresDn</code> option in the
            <emphasis>Server Options</emphasis> section below), which means we can omit the a number of options
            associated with retrieving the DN for a username being authenticated.
        </para>

        <note>
            <title>What is a DN?</title>
            <para>
                A DN or "distinguished name" is a string that represents the path to an object within the LDAP
                directory. Each comma separated component is an attribute and value representing a node. The components
                are evaluated in reverse. For example, the user account
                <emphasis>CN=Bob Carter,CN=Users,DC=w,DC=net</emphasis> is located directly within the
                <emphasis>CN=Users,DC=w,DC=net container</emphasis>. This structure is best explored with an LDAP
                browser like the ADSI Edit MMC snap-in for Active Directory or phpLDAPadmin.
            </para>
        </note>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
