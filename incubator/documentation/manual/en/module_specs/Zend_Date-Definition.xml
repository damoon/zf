<sect1 id="zend.date.definition">
    <title>Wky only one class?</title>
    <para>
    	Why is there only one class <code>Zend_Date</code> for handling dates and times in the Zend
    	Framework?
    </para>
    <para>
    	In other languages it was decided to split time and date. We think it is more natural to 
    	treat date and time always together. On the other hand in this manner the inevitable code
    	duplication can be avoided which supports the performance as well.
    </para>
    <sect2 id="zend.date.definition.notavaiable">
        <title>What is not possible with Zend_Date</title>
        <para>
        	Nevertheless there are some functionalities which do not work with the current 
        	<code>Zend_Date</code> class.
        </para>
        <para>
            <code>Zend_Date</code> is laid out as a pure date and time class. Therefore there are
            some functionalities which are not possiblem with the current <code>Zend_Date</code> 
            class. Even if there are only a few missing features they have to be mentioned for the 
            sake of completeness.
        </para>
        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    Calendar formats
                </para>
                 <para>
                 	Other calendar formats besides Gregorian are not supported by 
                 	<code>Zend_Date</code>. For this purpose the is the own class 
                 	<code>Zend_Calendar</code>. It supports not only Gregorian but also Arabic,
                 	Hebrew, Julian and other calendar formats.
                </para>
            </listitem>
            <listitem>
                <para>
                	Foreign-language month
                </para>
                 <para>
                 	If the month is set up in a different language than the fixed stated language
                 	or the language of the browser or the server, it can not be detected. The 
                 	reason is that not all 126 known languages can be parsed due to possible
                 	performance problems.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
    <sect2 id="zend.date.definition.internal">
        <title>Internes Handling von Datum und Uhrzeit</title>
        <para>
            Sowohl Datum als auch Uhrzeit werden intern als Timestamps verarbeitet.
        </para>
        <para>
            Das konnte aber nur deswegen so realisiert werden weil <code>Zend_Date</code> sich nicht auf den
            Unix-Timestamp oder den Integerbereich beschränkt. Durch die Erweiterung auf ALLE
            Zahlen kann der Zend_Framework auch Astronomische Daten verarbeiten,
            was PHP intern erst mit der Version 6 möglich ein wird.
        </para>
        <para>
            Trotzdem werden, solange es möglich ist, die internen PHP Funktionen benutzt.
            Das führt dazu das <code>Zend_Date</code> sehr schnell in der Verarbeitung ist.
        </para>
        <note>
            <title>Vorsicht</title>
            <para>
                Trotzdem ist Vorsicht geboten.
            </para>
            <para>
                Bei Verwendung von Datumsangaben ausserhalb des 32bit Timestamp Bereiches, wird der 
                Timestamp intern berechnet. Je weiter der Timestamp vom 32bit Bereich weg ist, desdo
                länger dauert dann natürlich auch die Berechnung. Deswegen sind astronomische 
                Datumsangaben mit Vorsicht zu verwenden.
            </para>
        </note>
    </sect2>
    <sect2 id="zend.date.definition.normalizing">
        <title>Normalisierung und Lokalisierung</title>
        <para>
            Wie bereits erwähnt kann <code>Zend_Date</code> Monatsnamen in der jeweiligen Landessprache
            erkennen. Hierbei wird das lokalisierte Monat auf den entsprechenden Timestamp umgewandelt.
            Auf die gleiche Art und Weise kann natürlich jedes Datum auch lokalisiert ausgegeben werden.
        </para>
        <para>
            Verwendung findet hierbei die Klasse <code>Zend_Locale</code>.
        </para>
        <para>
            Für detailierte Informationen zur Handhabung von Lokalisierung und Normalisierung wird die
            Dokumenation von <code>Zend_Locale</code> empfohlen.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->