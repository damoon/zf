<sect1 id="zend.date.definition">
    <title>Warum Datum und Zeit in einer Klasse ?</title>
    <para>
        Warum gibt es nur eine Klasse <code>Zend_Date</code> für die Handhabung von Datum und Uhrzeit 
        im Zend_Framework ?
    </para>
    <para>
        In anderen Sprachen hat man sich für die Trennung von Uhrzeit und Datum entschieden.
        Wir sind der Meinung das es natürlicher eine Klasse zu haben da Datum und Zeit
        immer gemeinsam gesehen werden. Andererseits wird auf diese Weise die Zwangsläufige 
        Dopplung von Code vermieden was wieder der Geschwindigkeit zu Gute kommt.
    </para>
    <sect2 id="zend.date.definition.notavaiable">
        <title>Was nicht geht mit Zend_Date</title>
        <para>
            Trotzdem gibt es Funktionalitäten die mit der vorliegenden <code>Zend_Date</code> Klasse
            nicht funktionieren.
        </para>
        <para>
            <code>Zend_Date</code> ist als reine Datums und Zeitklasse ausgelegt. Deswegen gibt es natürlich 
            auch Funktionalitäten die mit der vorliegenden <code>Zend_Date</code> Klasse
            nicht möglich sind. Auch wenn es nur sehr wenige sind, müssen Sie der Vollständigkeit
            halber hier erwähnt werden.
        </para>
        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    Kalender Formate
                </para>
                 <para>
                    Andere Kalenderformate als Gregorianisch werden von <code>Zend_Date</code> nicht unterstützt.
                    Hierfür gibt es eine eigene Klasse <code>Zend_Calendar</code>. Sie unterstützt nicht nur
                    Gregorianisch sondern auch Arabisch, Hebräisch, Julianisch und andere 
                    Kalender Formate.
                </para>
            </listitem>
            <listitem>
                <para>
                    Fremdsprachiges Monat
                </para>
                 <para>
                    Wenn das Monat in einer anderen als der fix angegebenen Sprache oder der 
                    Sprache die auf dem Browser oder dem Server eingestellt ist, angegeben wurde,
                    kann es nicht erkannt werden. Der Hintergrund ist, das nicht alle 126 bekannten
                    Sprachen durchgeparst werden können, da es hier sonst Probleme mit der Performance geben
                    würden.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
    <sect2 id="zend.date.definition.internal">
        <title>Internes Handling von Datum und Uhrzeit</title>
        <para>
            Sowohl Datum als auch Uhrzeit werden intern als Timestamps verarbeitet.
        </para>
        <para>
            Das konnte aber nur deswegen so realisiert werden weil <code>Zend_Date</code> sich nicht auf den
            Unix-Timestamp oder den Integerbereich beschränkt. Durch die Erweiterung auf ALLE
            Zahlen kann der Zend_Framework auch Astronomische Daten verarbeiten,
            was PHP intern erst mit der Version 6 möglich ein wird.
        </para>
        <para>
            Trotzdem werden, solange es möglich ist, die internen PHP Funktionen benutzt.
            Das führt dazu das Zend_Date sehr schnell in der Verarbeitung ist.
        </para>
        <note>
            <title>Vorsicht</title>
            <para>
                Trotzdem ist Vorsicht geboten.
            </para>
            <para>
                Bei Verwendung von Datumsangaben ausserhalb des 32bit Timestamp Bereiches, wird der 
                Timestamp intern berechnet. Je weiter der Timestamp vom 32bit Bereich weg ist, desdo
                länger dauert dann natürlich auch die Berechnung.
            </para>
        </note>
    </sect2>
    <sect2 id="zend.date.definition.normalizing">
        <title>Normalisierung und Lokalisierung</title>
        <para>
            Wie bereits erwähnt kann Zend_Date Monatsnamen in der jeweiligen Landessprache
            erkennen. Hierbei wird das lokalisierte Monat auf den entsprechenden Timestamp umgewandelt.
            Auf die gleiche Art und Weise kann natürlich jedes Datum auch lokalisiert ausgegeben werden.
        </para>
        <para>
            Verwendung findet hierbei die Klasse <code>Zend_Locale</code>.
        </para>
        <para>
            Für detailierte Informationen zur Handhabung von Lokalisierung und Normalisierung wird die
            Dokumenation von Zend_Locale empfohlen.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->