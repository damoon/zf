<sect1 id="zend.auth.introduction">

    <title>Introduction</title>

    <para>
    Zend_Auth provides an API for authentication and includes concrete authentication adapters for
    common use case scenarios.
    </para>

    <note>
        <para>
        Zend_Auth currently includes a <link linkend="zend.auth.digest">digest authentication adapter</link>
        as a simple proof-of-concept for the design. Additional adapters are planned for development.
        Interested in using a particular adapter? Your
        <ulink url="http://framework.zend.com/wiki/x/qx4">voting for an adapter</ulink> and
        <ulink url="http://framework.zend.com/wiki/x/GgE">contributions</ulink> are most welcome!
        </para>
    </note>

    <para>
    Zend_Auth is concerned only with <emphasis role="strong">authentication</emphasis> and not with
    <emphasis role="strong">authorization</emphasis>. Authentication is loosely defined as determining whether an entity actually is what it purports to be (i.e., identification), based on some set of credentials. Authorization, the process of deciding whether to allow an entity access to, or to perform operations upon, other entities is out of scope with respect to Zend_Auth. For more information about authorization and access control with the Zend Framework, please see
    <link linkend="zend.acl">Zend_Acl</link>.
    </para>

    <sect2 id="zend.auth.introduction.adapters">

        <title>Adapters</title>

        <para>
        Each Zend_Auth authentication adapter extends the abstract class <code>Zend_Auth_Adapter</code>.
        This abstract class provides two methods, <code>staticAuthenticate()</code> and
        <code>authenticate()</code>, that the extending adapter class may implement for authentication
        purposes. Each of these methods accepts a single array parameter, <code>$options</code>, which
        contains the options specific to an authentication attempt for the particular adapter (e.g.,
        login credentials such as a username and password combination):
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter.php';

class MyAuthAdapter extends Zend_Auth_Adapter
{
    public function authenticate($options)
    {
        // ...
    }
}]]></programlisting>

        <para>
        Both <code>staticAuthenticate()</code> and <code>authenticate()</code> must return an instance of
        a class that implements <code>Zend_Auth_Token_Interface</code> unless they throw an exception that
        derives from <code>Zend_Auth_Adapter_Exception</code>.
        </para>
    </sect2>

    <sect2 id="zend.auth.introduction.tokens">

        <title>Tokens</title>

        <para>
        In Zend_Auth, a token is used to represent the results of an authentication attempt. A token from
        one authentication adapter could contain very different information than a token from another
        adapter. Certainly applications will also have varying needs for what is contained in an
        authentication token.
        </para>

        <para>
        To accommodate these varied needs, <code>Zend_Auth_Token_Interface</code> is available for providing
        a very basic set of common functionality, and it defines three methods:
        <itemizedlist>
            <listitem>
                <para>
                <code>isValid()</code> - returns whether the token represents a successful authentication
                attempt
                </para>
            </listitem>
            <listitem>
                <para>
                <code>getIdentity()</code> - returns the identity of the authentication attempt
                </para>
            </listitem>
            <listitem>
                <para>
                <code>getMessage()</code> - returns a message regarding a failed authentication attempt
                </para>
            </listitem>
        </itemizedlist>
        </para>

        <para>
        Because each authentication mechanism varies, each concrete adapter provides its own token class.
        For example, the <link linkend="zend.auth.digest">digest authentication adapter</link> provides
        <code>Zend_Auth_Digest_Token</code>.
        </para>

        <para>
        Of course, developers can extend such token classes to suit their particular needs. For example, the
        date and time of the authentication attempt is a typically useful piece of information to have
        recorded in the token object.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.token_persistence">

        <title>Token Persistence</title>

        <para>
        HTTP is a stateless protocol, and techniques such as cookies and sessions have been developed in
        order to facilitate maintaining state across multiple requests in server-side web applications.
        <link linkend="zend.session">Zend_Session</link> is used within Zend_Auth to provide persistence
        of authentication tokens using the PHP session.
        </para>

        <para>
        This feature is on by default, but may be disabled for situations in which it may not be needed.
        </para>

        <para>
        Upon an authentication attempt, Zend_Auth stores the resulting authentication token into the session
        using <link linkend="zend.session">Zend_Session</link>. By default, the token is stored into a
        session namespace of "<code>Zend_Auth</code>" and has a token member name of "<code>token</code>",
        but these values are configurable where developers may need to store multiple tokens organized
        in various ways.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.using">

        <title>Using Zend_Auth</title>

        <para>
        There are two main ways to use Zend_Auth adapters:
        <orderedlist>
        <listitem>
            <para>
            indirectly, through <code>Zend_Auth</code>
            </para>
        </listitem>
        <listitem>
            <para>
            directly, through the adapter
            </para>
        </listitem>
        </orderedlist>
        The following example illustrates how to use a Zend_Auth adapter indirectly, through the use of
        <code>Zend_Auth</code>:
        </para>

        <programlisting role="php"><![CDATA[<?php

// create a new authentication object against MyAuth_Adapter
require_once 'Zend/Auth.php';
$auth = new Zend_Auth(new MyAuth_Adapter());

// setup authentication options
$options = array(
    'username' => 'someUser',
    'password' => 'somePassword'
    );

// authentication attempt; token is also saved in the session
$token = $auth->authenticate($options);

if (!$token->isValid()) {
    // authentication failed
    throw new Exception($token->getMessage());
} else {
    // authentication succeeded
}

// save the identity associated with the authentication attempt
$identity = $token->getIdentity();
]]></programlisting>

        <para>
        Once authentication has been attempted, as in the above example, it is a simple matter to see
        whether a valid authentication token exists in the session:
        </para>

        <programlisting role="php"><![CDATA[if ($auth->isLoggedIn()) {
    // valid authentication token exists; get it
    $token = $auth->getToken();
}]]></programlisting>

        <para>
        To remove a session token completely, just use the <code>logout()</code> method:
        </para>

        <programlisting role="php"><![CDATA[$auth->logout()]]></programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
