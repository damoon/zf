<sect1 id="zend.controller.subclassing">
    <title>Subclassing</title>

    <sect2 id="zend.controller.subclassing.introduction">
        <title>Introduction</title>
        <para>
            The <code>Zend_Controller</code> system was built with extensibility in mind, either
            by subclassing the existing classes or writing new classes that implement
            the interfaces <code>Zend_Controller_Router_Interface</code> and <code>Zend_Controller_Dispatcher_Interface</code>.
        </para>

        <para>
            Possible reasons for implementing a new router or dispatcher might be:

            <itemizedlist>
                <listitem>
                    <para>
                        The existing URI routing system is not suitable in some way, such as integrating
                        into an existing website that uses its own conventions for routing that do not
                        mesh with the routing mechanism provided with the Zend Framework.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You need to implement routing for something completely different.  The <code>Zend_Controller_Router</code>
                        class only deals with URIs.  It's possible and likely that you might want to use the MVC
                        pattern for developing another type of program, such as a console application.  In the case of
                        a console application, a custom router could process command line arguments to determine
                        the route.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The mechanism provided by <code>Zend_Controller_Dispatcher</code> is not suitable.  The default configuration
                        assumes a convention that controllers are classes and actions are methods of those classes.
                        However, there are many other strategies for doing this.  One example would be where controllers
                        are directories and actions are files within those directories.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You wish to provide additional capabilities that will be inherited by all of your controllers.
                        For example, <code>Zend_Controller_Action</code> does not integrate with <code>Zend_View</code> by default.
                        However, you could extend your own controller to do this, and using it would not require modifying the
                        supplied <code>Zend_Controller_Router</code> or <code>Zend_Controller_Dispatcher</code>.
                    </para>
                </listitem>
            </itemizedlist>

            Please be careful when overriding significant parts of the system, particularly the dispatcher.  One of
            the advantages of <code>Zend_Controller</code> is that it establishes common conventions for building applications.  If
            too much of this default behavior is changed, some of these advantages are lost.  However, there are many
            different needs and one solution can't fit them all, so the freedom is provided if needed.
        </para>
    </sect2>

    <sect2 id="zend.controller.subclassing.conventions">
        <title>Conventions</title>

        <para>
            When subclassing any of the Zend_Controller classes, you are strongly encouraged to follow these
            conventions for naming or storing files.  Doing so will ensure that another programmer who is familiar
            with the Zend Framework will be able to understand your project easily.
        </para>

        <sect3 id="zend.controller.subclassing.prefix">
            <title>Prefix</title>

            <para>
                Classes included with the Zend Framework follow a convention where every class is prefixed by
                "Zend_".  This is the prefix.  We recommend that you name all of your classes in the same way,
                e.g. if your company name is Widget, Inc., the prefix might be "Widget_".
            </para>
        </sect3>

        <sect3 id="zend.controller.directory.layout">
            <title>Directory Layout</title>

            <para>
                The <code>Zend_Controller</code> classes are stored in the library directory as follows:
            </para>
    <programlisting role="php"><![CDATA[
/library
  /Zend
    /Controller
      Action.php
      Dispatcher.php
      Router.php
]]></programlisting>
            <para>
                When subclassing <code>Zend_Controller</code> classes, it is recommended that the new classes
                be stored in an identical structure under your prefix.  This will make them easy to find for
                someone during that learning process of reviewing the code for your project.
            </para>

            <para>
                For example, a project from Widget, Inc. which implements only a custom router might look like this:
            </para>
<programlisting role="php"><![CDATA[
/library
  /Zend
  /Widget
    /Controller
      Router.php
      README.txt
]]></programlisting>
            <para>
                Notice in this example that the <code>Widget/Controller/</code> directory mirrors the <code>Zend/Controller/</code>
                directory wherever possible.  In this case, it provides the class <code>Widget_Controller_Router</code>,
                which would be either a subclass or replacement for <code>Zend_Controller_Router</code> implementing
                <code>Zend_Controller_Router_Interface</code>.
            </para>

            <para>
                Also, notice in the example above that a <code>README.txt</code> file has been placed in <code>Widget/Controller/</code>.
                Zend strongly encourages you to document your projects through supplying separate tests and
                documentation for customers.  However, we encourage you to also place a simple <code>README.txt</code> file
                right in the directory to briefly explain your changes and how they work.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.router.interface">
        <title>Router Interface</title>

        <para>
            The interface <code>Zend_Controller_Router_Interface</code> provides a definition for only one method:
        </para>
        <programlisting role="php"><![CDATA[<?php

  /**
   * @param  Zend_Controller_Dispatcher_Interface
   * @throws Zend_Controller_Router_Exception
   * @return Zend_Controller_Dispatcher_Token|boolean
   */
  public function route(Zend_Controller_Dispatcher_Interface $dispatcher);

?>]]></programlisting>
        <para>
            Routing only occurs once: when the request is first received into the system.  The purpose of the
            router is to generate a <code>Zend_Controller_Dispatch_Token</code> that specifies a controller and action of
            that controller.  This is then passed to the dispatcher.  If it is not possible to map a route to
            a dispatch token (nonsenical route) then a boolean, <code>FALSE</code>, should be returned.
        </para>

        <para>
            Some routers may process dynamic elements and need a way to determine if the dispatch token generated
            is actually dispatchable before returning it.  For this reason, the router receives the object handle
            of the dispatcher as the sole argument to its <code>route()</code> method.  The dispatcher provides a method,
            <code>isDispatchable()</code>, for this testing.
        </para>
    </sect2>

    <sect2 id="zend.controller.dispatcher.interface">
        <title>Dispatcher Interface</title>

        <para>
            <code>Zend_Controller_Front</code> will first call the router to receive the first dispatch token, which it will
            pass to the dispatcher.  The dispatcher will dispatch the action (instantiate the controller, call
            its action) and then return with either a boolean, FALSE, or another dispatch token.
        </para>

        <para>
            <code>Zend_Controller_Front</code> repeatedly calls the dispatcher until a dispatch token is not returned from
            it.  This is known as the dispatch loop.  It allows for actions to be processed sequentially
            until all work has been done.
        </para>

        <para>
            The interface <code>Zend_Controller_Dispatcher_Interface</code> provides definitions for two methods:
        </para>
        <programlisting role="php"><![CDATA[<?php

/**
 * @param  Zend_Controller_Dispatcher_Token $route
 * @return boolean
 */
public function isDispatchable(Zend_Controller_Dispatcher_Token $route);

?>]]></programlisting>
        <para>
            <code>isDispatchable()</code> checks if a dispatch token is dispatchable.  If it is, it returns <code>TRUE</code>.
            Otherwise, it returns <code>FALSE</code>.  The definition of what is dispatchable is left to the class
            implementing the interface.  In the case of the default implementation, <code>Zend_Controller_Dispatcher</code>, it means
            that the controller file exists, the class exists within the file, and the action method exists within the class.
        </para>
        <programlisting role="php"><![CDATA[<?php

/**
 * @param  Zend_Controller_Dispatcher_Token $route
 * @return Zend_Controller_Dispatcher_Token|boolean
 */
public function dispatch(Zend_Controller_Dispatcher_Token $route);

?>]]></programlisting>
        <para>
            <code>dispatch()</code> is where the work gets done.  This method must execute the action of the controller.
            It must return either a dispatch token or a boolean, FALSE, to indicate that there is no more work to do.
        </para>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
