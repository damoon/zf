<sect1 id="zend.rest.client">
    <title>Zend_Rest_Client</title>
    <sect2 id="zend.rest.client.introduction">
        <title>Introduction</resttitle>
        <para>
            Using the <code>Zend_Rest_Client</code> is very similar to using <code>SoapClient</code> objects (<ulink url="http://www.php.net/soap">SOAP web service extension</ulink>).
            You can simply call the REST service procedures as <code>Zend_Rest_Client</code> methods.
            Specify the service's full address in the <code>Zend_Rest_Client</code> constructor.
        </para>
        <example>
            <title>A basic REST request</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connect to framework.zend.com server and retrieve a greeting
 */
require_once 'Zend/Rest/Client.php';

$client = new Zend_Rest_Client('http://framework.zend.com/rest');

echo $client->sayHello('Davey', 'Day')->get(); // "Hello Davey, Good Day"

?>]]>
            </programlisting>
        </example>
        <para>
            <note>
                <code>Zend_Rest_Client</code> attempts to make remote methods look as much like native methods as possible, the only difference
				being that you must follow the method call with one of either <code>get()</code>,<code>post()</code>,<code>put()</code> or <code>delete()</code>.
            </note>
        </para>
    </sect2>
    <sect2 id="zend.rest.client.return">
		<title>Responses</title>
		<para>
			All requests made using <code>Zend_Rest_Client</code> return a <code>Zend_Rest_Client_Response</code> object. This object has many properties that make it easier to access the results.
		</para>
		<para>
			When the service is based on <code>Zend_Rest_Server</code>, <code>Zend_Rest_Client</code> can make several assumptions about the response, including response status (success or failure) and return type.
		</para>
		<example>
				<title>Response Status</title>
				<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Rest/Client.php';

$result = $client->sayHello('Davey', 'Day')->get();

if ($result->isSuccess()) {
	echo $result; // "Hello Davey, Good Day"
}
?>]]>
			</programlisting>
		</example>
		<para>
			In the example above, you can see that we use the request result as an object, to call <code>isSuccess()</code>, and then
			because of <code>__toString()</code>, we can simply <code>echo</code> the object to get the result. <code>Zend_Rest_Client_Response</code>
			will allow you to echo any scalar value - that is of string, integer or boolean values. For complex types, you can use either array or object notation.
		</para>
		<para>
			If however, you wish to query a service not using <code>Zend_Rest_Server</code> the <code>Zend_Rest_Client_Response</code> object will behave more like a <code>SimpleXMLElement</code>. However, to make things easier, it will automatically query the XML using XPath if the property is not a direct descendent of the document root element.
		</para>
		<example>
			<title>Using Technorati's Rest Service</title>
			<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Rest/Client.php';

$technorati = new Zend_Rest_Client('http://api.technorati.com/bloginfo');
$technorati->key($key);
$technorati->url('http://pixelated-dreams.com');
$result = $technorati->get();
echo $result->firstname .' '. $result->lastname;

?>]]>
			</programlisting>
		</example>
		<example>
			<title>Example Technorati Response</title>
			<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!-- generator="Technorati API version 1.0 /bloginfo" -->
<!DOCTYPE tapi PUBLIC "-//Technorati, Inc.//DTD TAPI 0.02//EN" "http://api.technorati.com/dtd/tapi-002.xml">
<tapi version="1.0">
	<document>
		<result>
			<url>http://pixelated-dreams.com</url>
			<weblog>
				<name>Pixelated Dreams</name>
				<url>http://pixelated-dreams.com</url>
				<author>
					<username>DShafik</username>
					<firstname>Davey</firstname>
					<lastname>Shafik</lastname>
				</author>
				<rssurl>http://pixelated-dreams.com/feeds/index.rss2</rssurl>
				<atomurl>http://pixelated-dreams.com/feeds/atom.xml</atomurl>
				<inboundblogs>44</inboundblogs>
				<inboundlinks>218</inboundlinks>
				<lastupdate>2006-04-26 04:36:36 GMT</lastupdate>
				<rank>60635</rank>
			</weblog>
			<inboundblogs>44</inboundblogs>
			<inboundlinks>218</inboundlinks>
		</result>
	</document>
</tapi>
			]]>
		<para>
			Here we are accessing the <code>firstname</code> and <code>lastname</code> properties. Even though these are not top-level
			elements, they are automatically returned when accessed by name.
		</para>
		<para>
            <note>
                If multiple items are found when accessing a value by name, an array will be returned.
            </note>
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
