<sect1 id="zend.service.delicious">
    <title>Zend_Service_Delicious</title>
    <sect2 id="zend.service.delicious.introduction">
        <title>Introduction</title>
        <para>
            <code>Zend_Service_Delicious</code> is simple API for using <ulink url="http://del.icio.us">del.icio.us</ulink>
            XML and JSON web services. This component gives you read-write access to posts at del.icio.us
            if you provide credentials. It also allows read-only access to public data of all users.
        </para>
        <example>
            <title>Get all posts</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');
$posts = $delicious->getAllPosts();

foreach ($posts as $post) {
    echo "--\n";
    echo "Title: {$post->getTitle()}\n";
    echo "Url: {$post->getUrl()}\n";
}
            ]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.retrieving_posts">
        <title>Retrieving posts</title>
        <para>
            Class provides three methods for post retrieving: <code>getPosts</code>, 
            <code>getRecentPosts</code> and <code>getAllPosts</code>. All of these 
            methods return <code>Zend_Service_Delicious_PostList</code> object which 
            holds all retrieved posts.
        </para>
        <programlisting role="php"><![CDATA[
/**
 * Get posts matching the arguments. If no date or url is given, most recent date will be used.
 *
 * @param string $tag Optional filtering by tag
 * @param Zend_Date $dt Optional filtering by date
 * @param string $url Optional filtering by url
 * @return Zend_Service_Delicious_PostList
 */
public function getPosts($tag = null, $dt = null, $url = null);
            ]]></programlisting>
            <programlisting role="php"><![CDATA[
/**
 * Get recent posts
 *
 * @param string $tag   Optional filtering by tag
 * @param string $count Maximal number of posts to be returned (default 15)
 * @return Zend_Service_Delicious_PostList
 */
public function getRecentPosts($tag = null, $count = 15);
        ]]></programlisting>
        <programlisting role="php"><![CDATA[
/**
 * Get all posts
 *
 * @param string $tag Optional filtering by tag
 * @return Zend_Service_Delicious_PostList
 */
public function getAllPosts($tag = null);
        ]]></programlisting>
    </sect2>
    <sect2 id="zend.service.delicious.postlist">
        <title>Zend_Service_Delicious_PostList</title>
        <para>
            For easier data access this class implements <code>Countable</code>, <code>Iterator</code> and
            <code>ArrayAccess</code> interfaces.
        </para>
        <example>
            <title>Accessing post lists</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');
$posts = $delicious->getAllPosts();

// count posts
echo count($posts);

// iterate over posts
foreach ($posts as $post) {
    echo "--\n";
    echo "Title: {$post->getTitle()}\n";
    echo "Url: {$post->getUrl()}\n";
}

// get post as from the array
echo $posts[0]->getTitle();
            ]]></programlisting>
        </example>
        <note>
            <para>
                Methods <code>ArrayAccess::offsetSet()</code> and <code>ArrayAccess::offsetUnset()</code>
                in this implementation just throw errors. So code like <code>unset($posts[0]);</code> and
                <code>$posts[0] = 'A';</code> will throw exception because this properties are read-only.
            </para>
        </note>
    </sect2>
    <sect2 id="zend.service.delicious.editing_posts">
        <title>Editing posts</title>
        <example>
            <title>Post editing</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');
$posts = $delicious->getPosts();

// set title
$posts[0]->setTitle('New title');
// save changes
$posts[0]->save();
            ]]></programlisting>
        </example>
        <para>
           Every setter method returns the post so you can chain method calls.
        </para>
        <example>
            <title>Method call chaining</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');
$posts = $delicious->getPosts();

$posts[0]->setTitle('New title')
         ->setNotes('New notes')
         ->save();
            ]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.deleting_posts">
        <title>Deleting posts</title>
        <para>
            There are two way to delete a post, by specifying post URL or by calling <code>delete()</code>
            method on a post.
        </para>
        <example>
            <title>Deleting posts</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');

// by specifying date
$delicious->deletePost('http://framework.zend.com');

// or by calling a method on a post
$posts = $delicious->getPosts();
$posts[0]->delete();

// the second way actually does this
$delicious->deletePost($posts[0]->getUrl());
            ]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.adding_posts">
        <title>Adding new posts</title>
        <para>
            When adding a post first you need to call <code>createNewPost()</code> method which returns
            <code>Zend_Service_Delicious_Post</code> object. When you edit the post you need to save it
            to del.icio.us database by calling a <code>save()</code> method.
        </para>
        <example>
            <title>Adding a post</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');

// create a new post and save it (with method call chaining)
$delicious->createNewPost('Zend Framework', 'http://framework.zend.com')
          ->setNotes('Zend Framework Homepage')
          ->save();

// create a new post and save it  (without method call chaining)
$newPost = $delicious->createNewPost('Zend Framework', 'http://framework.zend.com'); 
$newPost->setNotes('Zend Framework Homepage'); 
$newPost->save(); 
            ]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.tags">
        <title>Tags</title>
        <example>
            <title>Tags</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');

// get all tags
print_r($delicious->getTags());

// rename tag ZF to zendFramework
$delicious->renameTag('ZF', 'zendFramework');
            ]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.bundles">
        <title>Bundles</title>
        <example>
            <title>Bundles</title>
            <programlisting><![CDATA[
$delicious = new Zend_Service_Delicious('username', 'password');

// get all bundles
print_r($delicious->getBundles());

// delete bundle someBundle
$delicious->deleteBundle('someBundle');

// add bundle
$delicious->addBundle('newBundle', array('tag1', 'tag2'));
            ]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.public_data">
        <title>Public data</title>
        <para>
            del.icio.us web API allows access to data of all users.
        </para>
        <table>
            <title>Functions for retrieving public data</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Description</entry>
                        <entry>Return type</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>getUserFans</entry>
                        <entry>Retrieves fans of a user</entry>
                        <entry>Array</entry>
                    </row>
                    <row>
                        <entry>getUserNetwork</entry>
                        <entry>Retrieves network of a user</entry>
                        <entry>Array</entry>
                    </row>
                    <row>
                        <entry>getUserPosts</entry>
                        <entry>Retrieves posts of a user</entry>
                        <entry>Zend_Service_Delicious_PostList</entry>
                    </row>
                    <row>
                        <entry>getUserTags</entry>
                        <entry>Retrieves tags of a user</entry>
                        <entry>Array</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <note>
            <para>
                When using only these methods username and password are note required when constructing
                <code>Zend_Service_Delicious</code> object.
            </para>
        </note>
        <example>
            <title>Retrieving public data</title>
            <programlisting><![CDATA[
// username and password are not required
$delicious = new Zend_Service_Delicious();

// get fans of user someUser
print_r($delicious->getUserFans('someUser'));

// get network of user someUser
print_r($delicious->getUserNetwork('someUser'));

// get tags of user someUser
print_r($delicious->getUserTags('someUser'));
            ]]></programlisting>
        </example>
        <sect3 id="zend.service.delicious.public_data.posts">
            <title>Public posts</title>
            <para>
                When retrieving public posts with <code>getUserPosts()</code> method the
                <code>Zend_Service_Delicious_PostList</code> object is returned but it contains
                <code>Zend_Service_Delicious_SimplePost</code> objects which hold only basic data
                of a post, this objects only contain URL, title, notes and tags.
            </para>
            <table>
                <title>Methods of <code>Zend_Service_Delicious_SimplePost</code> class</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>Name</entry>
                            <entry>Description</entry>
                            <entry>Return type</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>getNotes</entry>
                            <entry>Returns notes of a post</entry>
                            <entry>String</entry>
                        </row>
                        <row>
                            <entry>getTags</entry>
                            <entry>Returns tags of a post</entry>
                            <entry>Array</entry>
                        </row>
                        <row>
                            <entry>getTitle</entry>
                            <entry>Returns title of a post</entry>
                            <entry>String</entry>
                        </row>
                        <row>
                            <entry>getUrl</entry>
                            <entry>Returns URL of a post</entry>
                            <entry>String</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect3>
    </sect2>
</sect1>
