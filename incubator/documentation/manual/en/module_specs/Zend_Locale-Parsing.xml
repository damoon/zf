<sect1 id="zend.locale.parsing">

    <title>Normalization and Localization</title>

    <para>
        <code>Zend_Locale_Format</code> is a internal component used by Zend_Locale. All locale aware classes use
        <code>Zend_Locale_Format</code> for normalization and localization of numbers and dates. Normalization involves
        parsing input from a variety of data respresentations, like dates, into a standardized, structured
        representation, such as a PHP array with year, month, and day elements.
    </para>

    <para>
        The exact same string containing a number or a date might mean different things to people with different customs
        and conventions. Disambiguation of numbers and dates requires rules about how to interpret these strings and
        normalize the values into a standardized data structure. Thus, all methods in <code>Zend_Locale_Format</code>
        require a locale in order to parse the input data.
        <note>
            <title>Default "root" Locale</title>
            <para>
                If no locale is specified, then normalization and localization will use the standard "root" locale,
                which might yield unexpected behavior, if the input originated in a different locale, or output for a
                specific locale was expected.
            </para>

        </note>
    </para>

    <sect2 id="zend.locale.number.normalize">

        <title>Number normalization: getNumber($input, $precision = false, $locale = false)</title>

        <para>
            There are many
            <ulink url="http://en.wikipedia.org/wiki/Numeral">number systems</ulink>
            different from the common
            <ulink url="http://en.wikipedia.org/wiki/Decimal">decimal system</ulink>
            (e.g. "3.14"). Numbers can be normalized with the <code>getNumber()</code> function to obtain the standard
            decimal representation. For all number-related discussions in this manual,
            <ulink url="http://en.wikipedia.org/wiki/Arabic_numerals">Arabic/European numerals (0,1,2,3,4,5,6,7,8,9)</ulink>
            are implied, unless explicitly stated otherwise.
        </para>

        <example>
            <title>Number normalization</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getNumber('13.524,678', false, $locale);

print $number; // will return 13524.678
?>]]></programlisting>
        </example>

        <sect3 id="zend.locale.number.normalize.precision">

            <title>Precision and Calculations</title>

            <para>
                Since <code>getNumber()</code> can normalize extremely large numbers, check the result carefully before
                using finite precision calculations, such as ordinary PHP math operations. For example, <code>if
                ((string)int_val($number) != $number) { use
                <ulink url="http://www.php.net/bc">BCMath</ulink>
                or
                <ulink url="http://www.php.net/gmp">GMP</ulink>
                </code>. Most PHP installations support the BCMath extension.
            </para>

            <para>
                Also, the precision of the resulting decimal representation can be truncated to a desired length with
                <code>getNumber()</code>. If no precision is given, no truncation occurs. Use only PHP integers to
                specify the precision. The result will not be rounded. So "1.6" will return "1", not "2", if the
                precision is zero.
            </para>

            <example>
                <title>Number normalization with precision</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getNumber('13.524,678', 1, $locale);

print $number; // will return 13524.6
?>]]></programlisting>
            </example>

        </sect3>

    </sect2>

    <sect2 id="zend.locale.number.localize">

        <title>Number localization</title>

        <para>
            <code>toNumber()</code> can localize numbers to the
            <link linkend="zend.locale.regions">supported locales</link>
            . This function will return a localized string of the given number in a conventional format for a specific
            locale.
        </para>

        <example>
            <title>Number localization</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toNumber(13547.36, $locale);

// will return 13.547,36
print $number;
?>]]></programlisting>
        </example>

        <para>
            <note>
                <title>Unlimited length</title>
                <para>
                    <code>toNumber()</code> can localize numbers with unlimited length. It is not related to integer or
                    float limitations.
                </para>
            </note>
        </para>

        <para>
            The same way as within <code>getNumber()</code>, <code>toNumber()</code> handles precision. If no precision
            is given, the complete localized number will be returned.
        </para>

        <example>
            <title>Number localization with precision</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toNumber(13547.3678, 2, $locale);

// will return 13.547,36
print $number;
?>]]></programlisting>
        </example>

        <para>
            <note>
                <title>Be aware</title>
                <para>
                    <code>toNumber()</code> will truncate the output. The result will not be rounded. So 1.6 will not
                    return 2 but 1 instead.
                </para>
            </note>
        </para>

    </sect2>

    <sect2 id="zend.locale.number.test">

        <title>Number testing</title>

        <para>
            <code>isNumber()</code> checks if a given string is a number and returns true or false.
        </para>

        <example>
            <title>Number testing</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale();
if (Zend_Locale_Format::isNumber('13.445,36', 'de_AT') {
    print "Number";
} else {
    print "not a Number";
} 
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.float.normalize">

        <title>Float value normalization</title>

        <para>
            Floating point values can be parsed with the <code>getFloat()</code> function. A floating point value will
            be returned.
        </para>

        <example>
            <title>Floating point value normalization</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getFloat('13.524,678', 2, $locale);

// will return 13524.67
print $number;
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.float.localize">

        <title>Floating point value localization</title>

        <para>
            <code>toFloat()</code> can localize floating point values. This function will return a localized string of
            the given number.
        </para>

        <example>
            <title>Floating point value localization</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toFloat(13547.3655, 1, $locale);

// will return 13.547,3
print $number;
?>]]></programlisting>
        </example>

        <para>
            <note>
                <title>Be aware</title>
                <para>
                    <code>toFloat()</code> will truncate the output. The result will not be rounded. So 1.6 will not
                    return 2 but 1 instead.
                </para>
            </note>
        </para>

    </sect2>

    <sect2 id="zend.locale.float.test">

        <title>Floating point value testing</title>

        <para>
            <code>isFloat()</code> checks if a given string is a floating point value and returns true or false.
        </para>

        <example>
            <title>Floating point value testing</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::isFloat('13.445,36', $locale) {
    print "float";
} else {
    print "not a float";
} 
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.integer.normalize">

        <title>Integer value normalization</title>

        <para>
            Integer values can be parsed with the <code>getInteger()</code> function. A integer value will be returned.
        </para>

        <example>
            <title>Integer value normalization</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getInteger('13.524,678', $locale);

// will return 13524
print $number;
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.integer.localize">

        <title>Integer point value localization</title>

        <para>
            <code>toInteger()</code> can localize integer values. This function will return a localized string of the
            given number.
        </para>

        <example>
            <title>Integer value localization</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toInteger(13547.3655, $locale);

// will return 13.547
print $number;
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.integer.test">

        <title>Integer value testing</title>

        <para>
            <code>isInteger()</code> checks if a given string is a integer value and returns true or false.
        </para>

        <example>
            <title>Integer value testing</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::isInteger('13.445', $locale) {
    print "integer";
} else {
    print "not a integer";
} 
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.date.normalizing">

        <title>Normalize a date or time</title>

        <para>
            <code>getDate()</code> has the ability to parse a localized date. There will always be an array with the
            date values returned.
            <note>
                <title>Return values</title>
                <para>
                    All return values are OPTIONAL. If only date is given all time values are supressed. If no time is
                    given all date values are supressed.
                </para>
            </note>
            <note>
                <title>Exception</title>
                <para>
                    If no date or time can be found within the given input, an exception will be thrown.
                </para>
            </note>
        </para>

        <para>
            The following return values are possible :
            <table>
                <title>Return values</title>
                <tgroup cols='4'>
                    <thead>
                        <row>
                            <entry>Array key</entry>
                            <entry>Returned value</entry>
                            <entry>Minimum</entry>
                            <entry>Maximum</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>day</entry>
                            <entry>integer</entry>
                            <entry>1</entry>
                            <entry>31</entry>
                        </row>
                        <row>
                            <entry>month</entry>
                            <entry>integer</entry>
                            <entry>1</entry>
                            <entry>12</entry>
                        </row>
                        <row>
                            <entry>year</entry>
                            <entry>integer</entry>
                            <entry>no limit</entry>
                            <entry>no limit</entry>
                        </row>
                        <row>
                            <entry>hour</entry>
                            <entry>integer</entry>
                            <entry>0</entry>
                            <entry>no limit</entry>
                        </row>
                        <row>
                            <entry>minute</entry>
                            <entry>integer</entry>
                            <entry>0</entry>
                            <entry>59</entry>
                        </row>
                        <row>
                            <entry>second</entry>
                            <entry>integer</entry>
                            <entry>0</entry>
                            <entry>59</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <example>
            <title>Normalizing a date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$date = Zend_Locale_Format::getDate('13.04.2006', 'dd.MM.yyyy');

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            But <code>getDate()</code> can now only handle given formats, it also knows local standard formats, so by
            using only the locale the used format can be automatically detected.
        </para>

        <example>
            <title>Normalizing a date by locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$date = Zend_Locale_Format::getDate('13.04.2006', false, $locale);

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            Also a complete date can be parsed by only giving by giving a complete date as input.
        </para>

        <example>
            <title>Normalizing a date with time</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$locale = new Zend_Locale('de_AT');
$date = Zend_Locale_Format::getDate('13.04.2005 22:14:55', false, $locale);

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            Of course also an unusal´or userdefined format can be parsed.
        </para>

        <example>
            <title>Normalizing a userdefined date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$date = Zend_Locale_Format::getDate('13200504T551422', 'ddyyyyMM ssmmHH');

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            The format can include the following signs :
            <table>
                <title>Format definition</title>
                <tgroup cols='2'>
                    <thead>
                        <row>
                            <entry>Format Letter</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>d or dd</entry>
                            <entry>1 or 2 digit day</entry>
                        </row>
                        <row>
                            <entry>M or MM</entry>
                            <entry>1 or 2 digit month</entry>
                        </row>
                        <row>
                            <entry>y or yy</entry>
                            <entry>1 or 2 digit year</entry>
                        </row>
                        <row>
                            <entry>yyyy</entry>
                            <entry>4 digit year</entry>
                        </row>
                        <row>
                            <entry>h</entry>
                            <entry>1 or 2 digit hour</entry>
                        </row>
                        <row>
                            <entry>m</entry>
                            <entry>1 or 2 digit minute</entry>
                        </row>
                        <row>
                            <entry>s</entry>
                            <entry>1 or 2 digit second</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <para>
            Examples for proper formats are
            <table>
                <title>Example formats</title>
                <tgroup cols='3'>
                    <thead>
                        <row>
                            <entry>Formats</entry>
                            <entry>Input</entry>
                            <entry>Output</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>dd.MM.yy</entry>
                            <entry>1.4.6</entry>
                            <entry>['day'] => 1,
                                   ['month'] => 4, 
                                   ['year'] => 6</entry>
                        </row>
                        <row>
                            <entry>dd.MM.yy</entry>
                            <entry>01.04.2006</entry>
                            <entry>['day'] => 1, ['month'] => 4, ['year'] => 2006</entry>
                        </row>
                        <row>
                            <entry>yyyyMMdd</entry>
                            <entry>1.4.6</entry>
                            <entry>['day'] => 6, ['month'] => 4, ['year'] => 1</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <note>
            <title>Database date format</title>
            <para>
                If you want to parse a database date value (f.e. MySql or MsSql) use Zend_Date's ISO_8601 format instead
                of getDate().
            </para>
        </note>

        <para>
            <code>getDate()</code> has an build in automatic correction for false inputs. It can detect false values and
            will fix them.
        </para>

        <example>
            <title>Correction for date normalizing</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Locale');

$date = Zend_Locale_Format::getDate('41.10.20', 'ddMMyy');

// instead of 41 for the day, the 41 will be returned as year value
print_r ($date);
?>]]></programlisting>
        </example>

    </sect2>

<sect2 id="zend.locale.numbersystems">

    <title>Numeral System Conversion</title>

    <para>
        <code>Zend_Locale_Format::toNumberSystem()</code> converts digits between different
        <ulink url="http://en.wikipedia.org/wiki/Arabic_numerals">numeral systems</ulink>
        , including the standard Arabic/European numeral system (0,1,2,3,4,5,6,7,8,9), not to be confused with
        <ulink url="http://en.wikipedia.org/wiki/Eastern_Arabic_numerals">Eastern Arabic numerals</ulink>
        sometimes used with the Arabic language to express numerals. Attempts to use an unsupported numeral system will
        result in an exception, to avoid accidentally performing an incorrect conversion due to a spelling error. All
        characters in the input, which are not numerals for the selected numeral system, are copied to the output -i.e.
        no conversion of decimal format characters.
    </para>

    <para>
        Suppose a web form collected a numeric input expressed using arabic digits "١‎٠٠". Most software and PHP
        functions expect input using Arabic numerals. Fortunately, converting this input to it's equivalent Arabic
        numerals "100" requires little effort using <code>toNumberSystem($input, $sourceNumeralSystem,
        $destNumeralSystem)</code>, which returns the <code>$input</code> with numerals in
        <code>$sourceNumeralSystem</code> converted to <code>$destNumeralSystem</code>.
    </para>

    <example>
        <title>Converting numerals to Arabic/European</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$string = "١‎٠٠";   // Arabic for 100
$normal = Zend_Locale_Format::toNumberSystem($string, 'Arab', 'Euro');

print "\nOriginal: ".$string;
print "\nNormalized:".$normal;
?>]]></programlisting>
    </example>

    <para>
        Similarly, any of the supported numeral systems may be converted to any other supported numeral system.
    </para>

    <example>
        <title>Converting numerals from Arabic/European</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$string = '123';
$local = Zend_Locale_Format::toNumberSystem($string, 'Euro', 'Arab');

print "\nOriginal: ".$string;
print "\nLocalize:".$local;
?>]]></programlisting>
    </example>

    <sect3 id="zend.locale.appendix.numberscripts.supported">

        <title>List of supported numeral systems</title>

        <para>
            <table>
                <title>List of supported numeral systems</title>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Notation Name</entry>
                            <entry>Script</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Arabic</entry>
                            <entry>Arab</entry>
                        </row>
                        <row>
                            <entry>Balinese</entry>
                            <entry>Bali</entry>
                        </row>
                        <row>
                            <entry>Bengali</entry>
                            <entry>Beng</entry>
                        </row>
                        <row>
                            <entry>Devanagari</entry>
                            <entry>Deva</entry>
                        </row>
                        <row>
                            <entry>Gujarati</entry>
                            <entry>Gujr</entry>
                        </row>
                        <row>
                            <entry>Gurmukhi</entry>
                            <entry>Guru</entry>
                        </row>
                        <row>
                            <entry>Kannada</entry>
                            <entry>Knda</entry>
                        </row>
                        <row>
                            <entry>Khmer</entry>
                            <entry>Khmr</entry>
                        </row>
                        <row>
                            <entry>Lao</entry>
                            <entry>Laoo</entry>
                        </row>
                        <row>
                            <entry>Limbu</entry>
                            <entry>Limb</entry>
                        </row>
                        <row>
                            <entry>Malayalam</entry>
                            <entry>Mlym</entry>
                        </row>
                        <row>
                            <entry>Mongolian</entry>
                            <entry>Mong</entry>
                        </row>
                        <row>
                            <entry>Myanmar</entry>
                            <entry>Mymr</entry>
                        </row>
                        <row>
                            <entry>New_Tai_Lue</entry>
                            <entry>Talu</entry>
                        </row>
                        <row>
                            <entry>Nko</entry>
                            <entry>Nkoo</entry>
                        </row>
                        <row>
                            <entry>Oriya</entry>
                            <entry>Orya</entry>
                        </row>
                        <row>
                            <entry>Tamil</entry>
                            <entry>Taml</entry>
                        </row>
                        <row>
                            <entry>Telugu</entry>
                            <entry>Telu</entry>
                        </row>
                        <row>
                            <entry>Thai</entry>
                            <entry>Tale</entry>
                        </row>
                        <row>
                            <entry>Tibetan</entry>
                            <entry>Tibt</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

    </sect3>

</sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
