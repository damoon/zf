<sect1 id="zend.controller.response">
    <title>The Response Object</title>

    <sect2 id="zend.controller.response.usage">
        <title>Usage</title>

        <para>
            The response object is the logical pair to the <link
                linkend="zend.controller.request">request object</link>. Its
            purpose is to collate content and/or headers so that they may be
            returned en masse. Additionally, the front controller will pass any
            caught exceptions to the response object, allowing the developer to
            gracefully handle exceptions. This functionality may be overridden
            by setting
            <code>Zend_Controller_Front::throwExceptions(true)</code>:
        </para>

        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);
]]></programlisting>

        <para>
            To send the response output, including headers, use
            <code>sendOutput()</code>.
        </para>

        <programlisting role="php"><![CDATA[
$response->sendOutput();
]]></programlisting>

        <note>
            <para>
                By default, the front controller calls <code>sendOutput()</code>
                when it has finished dispatching the request; typically you will
                never need to call it. However, if you wish to manipulate the
                response or use it in testing, you can override this
                behaviour by setting the <code>returnResponse</code> flag with
                <code>Zend_Controller_Front::returnResponse(true)</code>:
            </para>

            <programlisting role="php"><![CDATA[<?php
$front->returnResponse(true);
$response = $front->dispatch();

// do some more processing, such as logging...
// and then send the output:
$response->sendOutput();
?>]]></programlisting>
        </note>
            
        <para>
            Developers should make use of the response object in their action
            controllers. Instead of directly rendering output and sending
            headers, push them to the response object:
        </para>

        <programlisting role="php"><![CDATA[
// Within an action controller action:
// Set a header
$this->getResponse()
    ->setHeader('Content-Type', 'text/html')
    ->appendBody($content);
]]></programlisting>

        <para>
            By doing this, all headers get sent at once, just prior to
            displaying the content.
        </para>

        <note>
            <para>
                If using the action controller <link
                    linkend="zend.controller.action.viewintegration">view
                    integration</link>, you do not need to set the rendered view
                script content in the response object as
                <code>Zend_Controller_Action::render()</code> does this by default.
            </para>
        </note>

        <para>
            Should an exception occur in an application, check the response object's
            <code>isException()</code> flag, and retrieve the exception using
            <code>getException()</code>. Additionally, one may create custom
            response objects that redirect to error pages, log exception messages,
            do pretty formatting of exception messages (for development
            environments), etc.
        </para>

        <para>
            You may retrieve the response object following the front controller
            dispatch(), or request the front controller to return the response
            object instead of rendering output.
        </para>

        <programlisting role="php"><![CDATA[
// retrieve post-dispatch:
$front->dispatch();
$response = $front->getResponse();
if ($response->isException()) {
    // log, mail, etc...
}

// Or, have the front controller dispatch() process return it
$front->returnResponse(true);
$response = $front->dispatch();

// do some processing...

// finally, echo the response
$response->sendResponse();
]]></programlisting>

        <para>
            By default, exception messages are not displayed. This behaviour may be
            overridden by calling <code>renderExceptions()</code>, or enabling the
            front controller to throwExceptions(), as shown above:
        </para>

        <programlisting role="php"><![CDATA[
$response->renderExceptions(true);
$front->dispatch($request, $response);

// or:
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions();
$response->sendOutput();

// or:
$front->throwExceptions(true);
$front->dispatch();
]]></programlisting>
    </sect2>

    <sect2 id="zend.controller.response.namedsegments">
        <title>Named Segments</title>

        <para>
            The response object has support for "named segments". This allows
            you to segregate body content into different segments and order
            those segments so output is returned in a specific order.
            Internally, body content is saved as an array, and the various
            accessor methods can be used to indicate placement and names within
            that array.
        </para>

        <para>
            As an example, you could use a <code>preDispatch()</code> hook to
            add a header to the response object, then have the action controller
            add body content, and a <code>postDispatch()</code> hook add a
            footer:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Assume that this plugin class is registered with the front controller
class MyPlugin extends Zend_Controller_Plugin_Abstract
{
    public function preDispatch(Zend_Controller_Request_Abstract $request)
    {
        $response = $this->getResponse();
        $view = new Zend_View();
        $view->setBasePath('../views/scripts');

        $response->prepend('header', $view->render('header.phtml'));
    }

    public function postDispatch(Zend_Controller_Request_Abstract $request)
    {
        $response = $this->getResponse();
        $view = new Zend_View();
        $view->setBasePath('../views/scripts');

        $response->append('footer', $view->render('footer.phtml'));
    }
}

// a sample action controller
class MyController extends Zend_Controller_Action
{
    public function fooAction()
    {
        $this->render();
    }
}
?>]]></programlisting>
        
        <para>
            In the above example, a call to <code>/my/foo</code> will cause the
            final body content of the response object to have the following
            structure:
        </para>

        <programlisting role="php"><![CDATA[<?php
array(
    'header'  => ..., // header content
    'default' => ..., // body content from MyController::fooAction()
    'footer'  => ...  // footer content
);
?>]]></programlisting>

        <para>
            When this is rendered, it will render in the order in which elements
            are arranged in the array.
        </para>

        <para>
            A variety of methods can be used to manipulate the named segments:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setBody()</code> and <code>appendBody()</code> both
                    allow you to pass a second value, <code>$name</code>,
                    indicating a named segment. In each case, if you provide
                    this, it will overwrite that specific named segment or
                    create it if it does not exist (appending to the array by
                    default). If no named segment is passed to
                    <code>setBody()</code>, it resets the entire body content
                    array. If no named segment is passed to appendBody(), the
                    content is appended to the value in the 'default' name
                    segment.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>prepend($name, $content)</code> will create a segment
                    named <code>$name</code> and place it at the beginning of
                    the array. If the segment exists already, it will be removed
                    prior to the operation (i.e., overwritten and replaced).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>append($name, $content)</code> will create a segment
                    named <code>$name</code> and place it at the end of
                    the array. If the segment exists already, it will be removed
                    prior to the operation (i.e., overwritten and replaced).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>insert($name, $content, $parent = null, $before =
                        false)</code> will create a segment named
                    <code>$name</code>. If provided with a <code>$parent</code>
                    segment, the new segment will be placed either before or
                    after that segment (based on the value of
                    <code>$before</code>) in the array. If the segment exists
                    already, it will be removed prior to the operation (i.e.,
                    overwritten and replaced).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearBody($name = null)</code> will remove a single
                    named segment if a <code>$name</code> is provided (and the
                    entire array otherwise).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getBody($spec = false)</code> can be used to retrieve a single
                    array segment if <code>$spec</code> is the name of a named
                    segment. If <code>$spec</code> is false, it returns a string
                    formed by concatenating all named segments in order. If
                    <code>$spec</code> is true, it returns the body content
                    array.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
