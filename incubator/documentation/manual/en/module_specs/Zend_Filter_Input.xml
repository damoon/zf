<sect1 id="zend.filter.input">

    <title>Zend_Filter_Input</title>

    <sect2 id="zend.filter.input.introduction">

        <title>Introduction</title>

        <para>
            <literal>Zend_Filter_Input</literal> provides facilities to promote a structured approach to input
            data filtering. It serves multiple purposes because it caters to the needs of three different
            groups of people:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Developers
                </para>
                <para>
                    Although filtering input can never be as easy as doing nothing, developers need to ensure
                    the integrity of their data without adding unnecessary complexity to their code.
                </para>
            </listitem>
            <listitem>
                <para>
                    Managers
                </para>
                <para>
                    Managers of all types who need to maintain control over a large group of developers can
                    enforce a structured approach to input filtering by restricting or eliminating access to
                    raw input.
                </para>
            </listitem>
            <listitem>
                <para>
                    Auditors
                </para>
                <para>
                    Those who audit an application's code need to quickly and reliably identify when and
                    where raw input is used by a developer. The characteristics that promote code clarity
                    also aid auditors by providing a clear distinction among the different approaches to
                    input filtering.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            There are a variety of approaches to input filtering, and there are also a variety of methods
            that PHP developers can use. Whitelist filtering, blacklist filtering, regular expressions,
            conditional statements, and native PHP functions are just a few examples of the input filtering
            potpourri.
        </para>

    </sect2>

    <sect2 id="zend.filter.input.theory_of_operation">

        <title>Theory of Operation</title>

        <para>
            In order to provide a structured approach to input filtering, by default,
            <literal>Zend_Filter_Input</literal> attempts to enforce controlled access to input by setting the
            reference to the source data array to <code>null</code>.
        </para>

        <para>
            In the default (strict) approach, a single argument is passed to the constructor - an array of data to filter. Unfiltered data may only be accessed through the <code>getRaw()</code> method:
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// Filter the $_POST data array
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST);

// $_POST is now null
echo null === $_POST ? 'yes' : 'no'; // prints 'yes'

// Get the raw e-mail value
echo $filterPost->getRaw('email'); // prints 'webmaster@example.com']]></programlisting>

        <para>
            <literal>Zend_Filter_Input</literal> sets the array that is passed (<literal>$_POST</literal>) to
            <literal>null</literal>, so direct access is no longer possible. (The raw data are only available
            through the <literal>getRaw()</literal> method, which is much easier to monitor and/or avoid
            altogether.)
        </para>

        <para>
            In the optional (non-strict) approach, <literal>false</literal> is passed as the second argument
            to the constructor:
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// Filter the $_POST data array
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST, false);

// $_POST remains not null
echo null === $_POST ? 'yes' : 'no'; // prints 'no'

// Get the raw e-mail value
echo $filterPost->getRaw('email'); // prints 'webmaster@example.com']]></programlisting>

        <para>
            The use of the filter is exactly the same, but <literal>Zend_Filter_Input</literal> does not set
            the original array (<literal>$_POST</literal>) to <literal>null</literal>, so developers can
            still access it directly. This approach is discouraged in favor of the strict approach.
        </para>

        <para>
            <literal>Zend_Filter_Input</literal> is designed primarily with arrays in mind. Many sources of
            input are already covered by PHP's superglobal arrays (<literal>$_GET</literal>,
            <literal>$_POST</literal>, <literal>$_COOKIE</literal>, etc.), and arrays are a common construct
            used to store input from other sources. If you need to filter a scalar, see
            <xref linkend="zend.filter" />.
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->