<sect1 id="zend.controller.action">
    <title>Action Controllers</title>

    <sect2 id="zend.controller.action.introduction">
        <title>Introduction</title>
        <para>
            <code>Zend_Controller_Action</code> is an abstract class you may use
            for implementing Action Controllers for use with the Front
            Controller when building a website based on the
            Model-View-Controller (MVC) pattern.
        </para>

        <para>
            To use <code>Zend_Controller_Action</code>, you will need to
            subclass it in your actual action controller classes (or subclass it
            to create your own base class for action controllers). The most
            basic operation is to subclass it, and create action methods that
            correspond to the various actions you wish the controller to handle
            for your site.  Zend_Controller's routing and dispatch handling will
            autodiscover any methods ending in 'Action' in your class as
            potential controller actions.
        </para>

        <para>
            For example, let's say your class is defined as follows:
        </para>

        <programlisting role="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // do something
    }

    public function bazAction()
    {
        // do something
    }
}
]]></programlisting>
            
        <para>
            The above <code>FooController</code> class (controller
            <code>foo</code>) defines two actions, <code>bar</code> and
            <code>baz</code>.
        </para>

        <para>
            There's much more that can be accomplished than this, such as custom
            initialization actions, default actions to call should no action (or
            an invalid action) be specified, pre- and post-dispatch hooks, and a
            variety of helper methods. This chapter serves as an overview of the
            action controller functionality
        </para>
    </sect2>

    <sect2 id="zend.controller.action.initialization">
        <title>Object initialization</title>

        <para>
            While you can always override the action controller's constructor,
            we do not recommend this. Zend_Controller_Action::__construct()
            performs some important tasks, such as registring the request and
            response objects, as well as any custom invocation arguments passed
            in from the front controller. If you must override the constructor,
            be sure to call <code>parent::__construct($request, $response,
            $invokeArgs)</code>.
        </para>

        <para>
            The more appropriate way to customize instantiation is to use the
            <code>init()</code> method, which is called as the last task of
            <code>__construct()</code>.  For example, if you want to connect to
            a database at instantiation:
        </para>

        <programlisting role="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function init()
    {
        $this->db = Zend_Db::factory('Pdo_Mysql', array(
            'host'     => 'myhost',
            'username' => 'user',
            'password' => 'XXXXXXX',
            'dbname'   => 'website'
        ));
    }
}
]]></programlisting>
    </sect2>

    <sect2 id="zend.controller.action.prepostdispatch">
        <title>Pre- and Post-Dispatch Hooks</title>

        <para>
            <code>Zend_Controller_Action</code> specifies two methods that may
            be called to bookend a requested action, <code>preDispatch()</code>
            and <code>postDispatch()</code>. These can be useful in a variety of
            ways: verifying authentication and ACLs prior to running an action
            (by calling <code>_forward()</code> in <code>preDispatch()</code>,
            the action will be skipped), for instance, or placing generated
            content in a sitewide template (<code>postDispatch()</code>).
        </para>
    </sect2>

    <sect2 id="zend.controller.action.accessors">
        <title>Accessors</title>

        <para>
            A number of objects and variables are registered with the object,
            and each has accessor methods.
        </para>

        <itemizedlist>
            <listitem><para>
                <emphasis>Request Object</emphasis>: <code>getRequest()</code>
                may be used to retrieve the request object used to call the
                action.
            </para></listitem>

            <listitem>
                <para>
                    <emphasis>Response Object</emphasis>:
                    <code>getResponse()</code> may be used to retrieve the
                    response object aggregating the final response. Some typical
                    calls might look like:
                </para>

                <programlisting role="php"><![CDATA[
$this->getResponse()->setHeader('Content-Type', 'text/xml');
$this->getResponse()->appendBody($content);
]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    <emphasis>Invocation Arguments</emphasis>: the front
                    controller may push parameters into the router, dispatcher,
                    and action controller. To retrieve these, use
                    <code>getInvokeArg($key)</code>; alternatively, fetch the
                    entire list using <code>getInvokeArgs()</code>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>Request parameters</emphasis>: The request object
                    aggregates request parameters, such as any _GET or _POST
                    parameters, or user parameters specified in the URL's path
                    information. To retrieve these, use
                    <code>_getParam($key)</code> or
                    <code>_getAllParams()</code>. You may also set request
                    parameters using <code>_setParam()</code>; this is useful
                    when forwarding to additional actions.
                </para>

                <para>
                    To test whether or not a parameter exists (useful for
                    logical branching), use <code>_hasParam($key)</code>.
                </para>

                <note>
                    <para>
                        <code>_getParam()</code> may take an optional second
                        argument containing a default value to use if the
                        parameter is not set or is empty. Using it eliminates
                        the need to call <code>_hasParam()</code> prior to
                        retrieving a value:
                    </para>

                    <programlisting role="php"><![CDATA[<?php
// Use default value of 1 if id is not set
$id = $this->_getParam('id', 1);

// Instead of:
if ($this->_hasParam('id') {
    $id = $this->_getParam('id');
} else {
    $id = 1;
}
?>]]></programlisting>
                </note>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.action.viewintegration">
        <title>View Integration</title>

        <para>
            <code>Zend_Controller_Action</code> provides a rudimentary and
            flexible mechanism for view integration. Two methods accomplish
            this, <code>initView()</code> and <code>render()</code>; the former
            method lazy-loads the <code>$view</code> public property, and the
            latter renders a view based on the current requested action, using
            the directory hierarchy to determine the script path.
        </para>

        <sect3 id="zend.controller.action.viewintegration.initview">
            <title>View Initialization</title>

            <para>
                <code>initView()</code> initializes the view object.
                <code>render()</code> calls <code>initView()</code> in order to
                retrieve the view object, but it may be initialized at any time;
                by default it populates the <code>$view</code> property with a
                <code>Zend_View</code> object, but any class implementing
                <code>Zend_View_Interface</code> may be used. If
                <code>$view</code> is already initialized, it simply returns
                that property.
            </para>

            <para>
                The default implementation makes the following assumption of
                the directory structure:
            </para>

            <programlisting role="php"><![CDATA[
applicationOrModule/
    controllers/
        IndexController.php
    views/
        scripts/
            index/
                index.phtml
        helpers/
        filters/
]]></programlisting>
            
            <para>
                In other words, view scripts are assumed to be in the
                <code>views/scripts/</code> subdirectory, and the
                <code>views</code> subdirectory is assumed to be a sibling ofe
                functionality when determining the view script name and path.
            </para>
        </sect3>

        <sect3 id="zend.controller.action.viewintegration.render">
            <title>Rendering Views</title>

            <para>
                <code>render()</code> has the following signature:
            </para>

            <programlisting role="php"><![CDATA[<?php
string render(string $action = null, string $name = null, bool $noController = false);
?>]]></programlisting>

            <para>
                <code>render()</code> renders a view script. If no arguments are
                passed, it assumes that the script requested is
                <code>[controller]/[action].phtml</code> (where
                <code>.phtml</code> is the value of the <code>$viewSuffix</code>
                property). Passing a value for <code>$action</code> will render
                that template in the <code>[controller]</code> subdirectory. To
                override using the <code>[controller]</code> subdirectory, pass
                a true value for <code>$noController</code>. Finally, templates
                are rendered into the response object; if you wish to render to
                a specific <link
                    linkend="zend.controller.response.namedsegments">named
                    segment</link> in the response object, pass a value to
                <code>$name</code>.
            </para>

            <para>
                Some examples:
            </para>

            <programlisting role="php"><![CDATA[<?php
class MyController extends Zend_Controller_Action
{
    public function fooAction()
    {
        // Renders my/foo.phtml
        $this->render();

        // Renders my/bar.phtml
        $this->render('bar');

        // Renders baz.phtml
        $this->render('baz', null, true);

        // Renders foo/login.phtml to the 'form' segment of the response object
        $this->render('login', 'form');
        
        // Renders site.phtml to the 'page' segment of the response object
        $this->render('site', 'page', true);
    }
}
]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.action.utilmethods">
        <title>Utility Methods</title>

        <para>
            Besides the accessors and view integration methods,
            <code>Zend_Controller_Action</code> has several utility methods for
            performing common tasks from within your action methods (or from
            pre-/post-dispatch).
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>_forward($action, $controller = null, $module = null,
                        array $params = null)</code>: perform another action. If
                    called in <code>preDispatch()</code>, the currently
                    requested action will be skipped in favor of the new one.
                    Otherwise, after the current action is processed, the action
                    requested in _forward() will be executed.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>_redirect($url, array $options =
                        array())</code>: redirect to another location. This
                    method takes a URL and an optional set of options. By
                    default, it performs an HTTP 302 redirect.
                </para>

                <para>
                    The options may include one or more of the following:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>exit:</emphasis> whether or not to exit
                            immediately. If requested, it will cleanly close any
                            open sessions and perform the redirect.
                        </para>

                        <para>
                            You may set this option globally within the
                            controller using the <code>setRedirectExit()</code>
                            accessor.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <emphasis>prependBase:</emphasis> whether or not to
                            prepend the base URL registered with the request
                            object to the URL provided.
                        </para>

                        <para>
                            You may set this option globally within the
                            controller using the
                            <code>setRedirectPrependBase()</code> accessor.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            <emphasis>code:</emphasis> what HTTP code to utilize
                            in the redirect. By default, an HTTP 302 is
                            utilized; any code between 301 and 306 may be used.
                        </para>

                        <para>
                            You may set this option globally within the
                            controller using the
                            <code>setRedirectCode()</code> accessor.
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
