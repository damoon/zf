<sect1 id="zend.session.globalsessionmanagement">

    <title>Global Session Management</title>

    <para>
        The default behavior of sessions can be modified using the static methods in Zend_Session_Core. All management
        and manipulation of global session management occurs using Zend_Session_Core, including configuration of the
        <ulink url="http://www.php.net/session#session.configuration">usual options provided by ext/session</ulink>
        , using <code>Zend_Session::setOptions()</code>.
    </para>

    <sect2 id="zend.session.setoptions">

        <title>setOptions()</title>

        <para>
            When the first session namespace is requested, Zend_Session_Core will autostart itself, unless already
            started explicitly by using
            <link linkend="zend.session.startingasession"><code>Zend_Session_Core::start()</code>
            </link>
            . The underlying PHP session will use defaults from Zend_Session_Core, unless modified first by
            <code>Zend_Session::setOptions()</code>.
        </para>

        <para>
            To pass the options just pass the basename (the non <code>session.</code> part) as part of an array to
            setOptions. Without setting any options, Zend_Session will utilize the recommended options first, then the
            default php.ini settings. Community feedback about best practices for these options should be sent to
            <ulink url="mailto:fw-auth@lists.zend.com">fw-auth@lists.zend.com</ulink>
            .
        </para>

        <para>
            To "automatically" configure this component using an ".ini" file with Zend_Config_Ini:
            <example>
                <title>Using Zend_Config to Configure Zend_Session</title>
<programlisting role="php">
<![CDATA[<?php
$config = new Zend_Config_Ini('myapp.ini', 'sandbox');
Zend_Session_Core::setOptions($config->asArray()); 
?>]]></programlisting>
            </example>
            The corresponding "myapp.ini" file:
            <example>
                <title>myapp.ini</title>
<programlisting role="php">
<![CDATA[
;  Defaults for our live servers
[live]
; bug_compat_42
; bug_compat_warn
; cache_expire
; cache_limiter
; cookie_domain
; cookie_lifetime
; cookie_path
; cookie_secure
; entropy_file
; entropy_length
; gc_divisor
; gc_maxlifetime
; gc_probability
; hash_bits_per_character
; hash_function
; name = ZFSESSION
; referer_check
; save_handler
; save_path
; serialize_handler
; use_cookies
; use_only_cookies
; use_trans_sid

; remember_me_seconds = <integer seconds>
; strict = on|off


; Our sandbox server uses the same settings as our live server,
; except as overridden below:
[sandbox : live]
; Don't forget to create this directory and make it rwx (readable and modifiable) by PHP.
save_path = /home/myaccount/zend_sessions/myapp
use_only_cookies = on
; When persisting session id cookies, request a TTL of 10 days
remember_me_seconds = 864000
]]></programlisting>
            </example>
        </para>

    </sect2>

    <sect2 id="zend.session.options">

        <title>Options</title>

        <para>
            Most options shown above need no explanation beyond that found in the standard PHP documentation.
            <itemizedlist mark='opencircle'>
                <listitem>
                    <para>
                        boolean <code>strict</code> - disables automatic starting of <code>Zend_Session_Core</code> when
                        using <code>new Zend_Session()</code>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        integer <code>remember_me_seconds</code> - how long should session id cookie persist, after user
                        agent has ended (i.e. browser window closed)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        string <code>save_path</code> - The correct value is system dependent, and should be provided by
                        the developer using an <emphasis role="strong">absolute path</emphasis> to a directory readable
                        and writable by the PHP process.
                    </para>
                    <note>
                        <title>Security Risk</title>
                        <para>
                            If this path is shared with other users or PHP applications, various security issues might
                            occur, including theft of session content, hijacking of sessions, and collision of garbage
                            collection (e.g. another user's application might cause PHP to delete your application's
                            session files).
                        </para>
                    </note>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.session.rememberme">

        <title>rememberMe(integer $seconds)</title>

        <para>
            Ordinarily, sessions end when the user agent ends its "session", such as when an end user closes their
            browser window. However, when a user logs in to your website, they might want their virtual session to last
            for 24 hours, or even longer. Forum software commonly gives the user a choice for how long their session
            should last. Use <code>Zend_Session_Core::rememberMe()</code> to send an updated session cookie to the user
            agent with a lifetime defaulting to <code>remember_me_seconds</code>, which is set to 2 weeks, unless you
            modify that value using <code>setOptions()</code>.
        </para>

    </sect2>

    <sect2 id="zend.session.forgetme">

        <title>forgetMe()</title>

        <para>
            This function complements <code>rememberMe()</code> by changing the session cookie back to a lifetime ending
            when the user agent ends its session (e.g. user closes their browser window).
        </para>

    </sect2>

    <sect2 id="zend.session.destroy">

        <title>destroy(bool $remove_cookie)</title>

        <para>
            <code>Zend_Session_Core::destroy()</code> destroys all of the persistent data associated with the current
            session. However, no variables in PHP are affected, so your namespaced sessions (instances of
            <code>Zend_Session</code>) remain readable. To complete a "logout", set the optional parameter to true to
            also delete the user agent's session id cookie.
        </para>

    </sect2>

    <sect2 id="zend.session.savehandler">

        <title>setSaveHandler(Zend_Session_SaveHandler_Interface $interface)</title>

        <para>
            Most developers will find the default save handler sufficient.  This method provides an object-oriented
            wrapper for <code><ulink url="http://php.net/session_set_save_handler">session_set_save_handler()</ulink></code>.
        </para>

    </sect2>

</sect1>
