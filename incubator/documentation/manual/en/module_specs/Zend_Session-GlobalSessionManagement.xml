<sect1 id="zend.session.globalsessionmanagement">

    <title>Global Session Management</title>

    <para>
        The default behavior of sessions can be modified using the static methods in Zend_Session_Core. All management
        and manipulation of global session management occurs using Zend_Session_Core, including configuration of the
        <ulink url="http://www.php.net/session#session.configuration">usual options provided by ext/session</ulink>
        , using <code>Zend_Session::setOptions()</code>.
    </para>

    <sect2 id="zend.session.setoptions">

        <title>setOptions()</title>

        <para>
            When the first session namespace is requested, Zend_Session_Core will autostart itself, unless already
            started explicitly by using
            <link linkend="zend.session.startingasession"><code>Zend_Session_Core::start()</code>
            </link>
            . The underlying PHP session will use defaults from Zend_Session_Core, unless modified first by
            <code>Zend_Session::setOptions()</code>.
        </para>

        <para>
            To pass the options just pass the basename (the non <code>session.</code> part) as part of an array to
            setOptions. Without setting any options, Zend_Session will utilize the recommended options first, then the
            default php.ini settings. Community feedback about best practices for these options should be sent to
            <ulink url="mailto:fw-auth@lists.zend.com">fw-auth@lists.zend.com</ulink>
            .
        </para>

        <para>
            To "automatically" configure this component using an ".ini" file with Zend_Config_Ini:
            <example>
                <title>Using Zend_Config to Configure Zend_Session</title>
<programlisting role="php"><![CDATA[<?php
$config = new Zend_Config_Ini('myapp.ini', 'sandbox');
Zend_Session_Core::setOptions($config->asArray()); 
?>]]></programlisting>
            </example>
            The corresponding "myapp.ini" file:
            <example>
                <title>myapp.ini</title>
<programlisting role="php">
<![CDATA[
;  Defaults for our live servers
[live]
; bug_compat_42
; bug_compat_warn
; cache_expire
; cache_limiter
; cookie_domain
; cookie_lifetime
; cookie_path
; cookie_secure
; entropy_file
; entropy_length
; gc_divisor
; gc_maxlifetime
; gc_probability
; hash_bits_per_character
; hash_function
; name = ZFSESSION
; referer_check
; save_handler
; save_path
; serialize_handler
; use_cookies
; use_only_cookies
; use_trans_sid

; remember_me_seconds = <integer seconds>
; strict = on|off


; Our sandbox server uses the same settings as our live server,
; except as overridden below:
[sandbox : live]
; Don't forget to create this directory and make it rwx (readable and modifiable) by PHP.
save_path = /home/myaccount/zend_sessions/myapp
use_only_cookies = on
; When persisting session id cookies, request a TTL of 10 days
remember_me_seconds = 864000
]]></programlisting>
            </example>
        </para>

    </sect2>

    <sect2 id="zend.session.options">

        <title>Options</title>

        <para>
            Most options shown above need no explanation beyond that found in the standard PHP documentation.
            <itemizedlist mark='opencircle'>
                <listitem>
                    <para>
                        boolean <code>strict</code> - disables automatic starting of <code>Zend_Session_Core</code> when
                        using <code>new Zend_Session()</code>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        integer <code>remember_me_seconds</code> - how long should session id cookie persist, after user
                        agent has ended (i.e. browser window closed)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        string <code>save_path</code> - The correct value is system dependent, and should be provided by
                        the developer using an <emphasis role="strong">absolute path</emphasis> to a directory readable
                        and writable by the PHP process.
                    </para>
                    <note>
                        <title>Security Risk</title>
                        <para>
                            If the path is readable by other applications, then session hijacking might be possible. If
                            the path is writable by other applications, then
                            <ulink url="http://en.wikipedia.org/wiki/Session_poisoning">session poisoning</ulink>
                            might be possible. If this path is shared with other users or other PHP applications,
                            various security issues might occur, including theft of session content, hijacking of
                            sessions, and collision of garbage collection (e.g. another user's application might cause
                            PHP to delete your application's session files).
                        </para>
                        <para>
                            For example, an attacker can visit the victim's website to obtain a session cookie. Then
                            edit the cookie path to his own domain on the same server, before visiting his own website
                            to execute <code>var_dump($_SESSION)</code>. Armed with detailed knowledge of the victim's
                            use of data in their sessions, the attacker can then modify the session state (poisoning the
                            session), alter the cookie path back to the victim's website, and then make requests from
                            the victim's website using the poisoned session. Even if two applications on the same server
                            do not have read/write access to the other application's save_path, if the save_path is
                            guessable, and the attacker has control over one of these two websites, the attacker could
                            alter their website's save_path to use the other's save_path, and thus accomplish session
                            poisoning, under some common configurations of PHP. Thus, the value for save_path should not
                            be made public knowledge, and should be altered to a secure location unique to each
                            application.
                        </para>
                    </note>
                </listitem>
                <listitem>
                    <para>
                        boolean <code>use_only_cookies</code> - In order to avoid introducing additional security risks,
                        do not alter the default value of this option.
                        <note>
                            <title>Security Risk</title>
                            <para>
                                If this setting is not enabled, an attacker can easily fix victim's session ids, using
                                links on the attacker's website, such as
                                <code>http://www.victim-website.com/index.php?PHPSESSID=fixed_session_id</code>. The
                                fixation works, if the victim does not already have a session id cookie for
                                victim-website.com. Once a victim is using a known session id, the attacker can then
                                attempt to hijack the session by pretending to be the victim, and emulating the victim's
                                user agent.
                            </para>
                        </note>
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.session.regenerateid">

        <title>regenerateId()</title>

        <para>
            The safest and most secure way to regenerate session id's in user agent cookies would be to avoid using
            conditional logic. Regenerating on every request prevents several possible avenues of attack, but at small
            performance and bandwidth cost. Anytime there is 'privilege escalation' or session parameter change, use
            <code>regenerateId()</code> to create a new session id. If you call the <code>rememberMe()</code> function,
            then don't use <code>regenerateId()</code>, since the former calls the latter. If a user has successfully
            logged into your website, use <code>rememberMe()</code> instead. Changing session ids helps protect against
            session hijacking. Even if an attacker gains access to an old session id, <code>regenerateId()</code> also
            moves the session data from the old session id "handle" to the new one, so no data remains accessible via
            the old session id.
        </para>

        <para>
            With XSS, an attacker does not need direct access to a victim's network traffic. If the victim already has a
            session cookie, XSS might allow an attacker to read the cookie and steal the session. For victims with no
            session cookies, using XSS to inject javascript, an attacker could create a session id cookie with a known
            value, then set an identical cookie on his own system, in order to hijack the victim's session. If the
            victim visited an attacker's website, then the attacker can also emulate most other identifiable
            characteristics of the victim's user agent. However, the attacker can not arbitrarily alter the server-side
            state of PHP sessions. Thus, developers should rely on <code>Zend_Session_Core</code>'s session handling
            logic and <code>Zend_Session_Core::regenerateId()</code> to thwart attempts to use session fixation for
            hijacking sessions.
        </para>

        <para>
            By itself, calling this function when the user's session is first used, does not prevent session fixation
            attacks, unless you can distinguish between a session originated by an attacker emulating the victim. If
            both originate from the same proxy (e.g. a large AOL proxy), there might not be any way to distinguish
            between a victim using a cookie created through an XSS vulnerability on your website by the attacker, if the
            attacker first initiates a session on your website. If you can distinguish between an attacker and victim
            using the same session id (e.g. their IP's are from different countries), then session hijacking can be
            dealt with directly. If the attacker has not already initiated a session, and fixed the victim's session id
            to the attacker's session id (sort of reverse hijacking) using an XSS vulnerability, then the sample code
            below makes it much harder for an attacker to know the current victim's session id.
        </para>

        <example>
            <title>Anonymous Sessions and Session Fixation</title>
<programlisting role="php"><![CDATA[<?php
$session = new Zend_Session();
 
if (!isset($session->initialized))
{ 
    Zend_Session_Core::regenerateId(); 
    $session->initialized = true;
} 
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.rememberme">

        <title>rememberMe(integer $seconds)</title>

        <para>
            Ordinarily, sessions end when the user agent ends its "session", such as when an end user closes their
            browser window. However, when a user logs in to your website, they might want their virtual session to last
            for 24 hours, or even longer. Forum software commonly gives the user a choice for how long their session
            should last. Use <code>Zend_Session_Core::rememberMe()</code> to send an updated session cookie to the user
            agent with a lifetime defaulting to <code>remember_me_seconds</code>, which is set to 2 weeks, unless you
            modify that value using <code>setOptions()</code>. To help thwart session fixation/hijacking, use this
            function when a user successfully authenticates and you application performs a "login".
        </para>

    </sect2>

    <sect2 id="zend.session.forgetme">

        <title>forgetMe()</title>

        <para>
            This function complements <code>rememberMe()</code> by changing the session cookie back to a lifetime ending
            when the user agent ends its session (e.g. user closes their browser window).
        </para>

    </sect2>

    <sect2 id="zend.session.destroy">

        <title>destroy(bool $remove_cookie)</title>

        <para>
            <code>Zend_Session_Core::destroy()</code> destroys all of the persistent data associated with the current
            session. However, no variables in PHP are affected, so your namespaced sessions (instances of
            <code>Zend_Session</code>) remain readable. To complete a "logout", set the optional parameter to true to
            also delete the user agent's session id cookie.
        </para>

    </sect2>

    <sect2 id="zend.session.savehandler">

        <title>setSaveHandler(Zend_Session_SaveHandler_Interface $interface)</title>

        <para>
            Most developers will find the default save handler sufficient. This method provides an object-oriented
            wrapper for <code>
            <ulink url="http://php.net/session_set_save_handler">session_set_save_handler()</ulink>
            </code>.
        </para>

    </sect2>

</sect1>
