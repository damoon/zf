<sect1 id="zend.measure.types">
    <title>Types of measurements</title>
    <sect2 id="zend.measure.types.acceleration">
        <title>Zend_Measure_Acceleration</title>
        <para>
            <code>Zend_Measure_Acceleration</code> covers the physical factor of acceleration.
        </para>
        <para>
            <note>
                The standard measurement unit is meter per square second (<code>m/s²</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Acceleration.php';

// define standard measurement unit
$unit = new Zend_Measure(100,Zend_Measure::ACCELERATION,'en');

// convert to km/s²
echo $unit->convertTo(Zend_Measure_Acceleration::KILOMETER_PER_SQUARE_SECOND);
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.angle">
        <title>Zend_Measure_Angle</title>
        <para>
            <code>Zend_Measure_Angle</code> covers angular dimensions.
        </para>
        <para>
            <note>
                The standard measurement unit is radiant (<code>rad</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Angle.php';

$angle = new Zend_Measure(100,Zend_Measure::ANGLE,'en');

// add a second angle
$second = new Zend_Measure(30,Zend_Measure::ANGLE,'en');
$sum = $angle->add($second);

echo $sum->convertTo(Zend_Measure_Angle::DEGREE);
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.area">
        <title>Zend_Measure_Area</title>
        <para>
            <code>Zend_Measure_Area</code> covers square measures.
        </para>
        <para>
            <note>
                The standard measurement unit is square meter (<code>m²</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Area.php';

// define another measurement... here hectare
$area = new Zend_Measure(100,Zend_Measure_Area::HECTARE,'en');

// convert to the standard measurement unit Zend_Measure_Area::SQUARE_METER
echo $area->convertTo(Zend_Measure_Area::STANDARD);
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.binary">
        <title>Zend_Measure_Binary</title>
        <para>
            <code>Zend_Measure_Binary</code> covers binary convertions.
        </para>
        <para>
            <note>
                The standard measurement unit is byte (<code>b</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Binary.php';

$binary = new Zend_Measure(100,Zend_Measure_Binary::MEGABYTE,'en');

// convert to the measurement unit megabyte as defined by SI
echo $binary->convertTo(Zend_Measure_Binary::MEGABYTE_SI);
?>]]></programlisting>
        </para>
        <note>
            <para>
                The terms kilo-, mega-, giga and so on...
                have to be seen, in the normal language use, for 1000 or 10³.
            </para>
            <para>
                In the binary format for computers the terms kilo-, mega-, giga- and so on have
                to be seen for a convertion factor of 1024 instead of 1000.
            </para>
            <para>
                To preclude confusions a few years ago the notation BI was introduced.
                Instead of kilobyte, kibibyte for kilo-binary-byte should be used.
            </para>
            <para>
                In the class BINARY both notations can be found.
            </para>
            <para>
                KILOBYTE = 1024 - binary conputer conversion
                KIBIBYTE = 1024 - new notation
                KILO_BINARY_BYTE = 1024 - new notation, long format
                KILOBYTE_SI = 1000 - SI notation for kilo (1000)
            </para>
            <para>
                DVDs for example are marked with the SI-notation, but almost all
                harddisks are marked in computer binary notation.
            </para>
        </note>
    </sect2>
    <sect2 id="zend.measure.types.capacitance">
        <title>Zend_Measure_Capacitance</title>
        <para>
            <code>Zend_Measure_Capacitance</code> covers the physical factor of capacitance.
        </para>
        <para>
            <note>
                The standard measurement unit is farad (<code>F</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Capacitance.php';

// definition of the measurement as string
$capacity = new Zend_Measure('100 Farad',Zend_Measure::CAPACITANCE,'en');

// output value
echo $capacity;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.cooking.volume">
        <title>Zend_Measure_Cooking_Volume</title>
        <para>
            <code>Zend_Measure_Cooking_Volume</code> covers volumes which are used for cooking or written
            in cookbooks.
        </para>
        <para>
            This class is a reduced version of the class <code>Zend_Measure_Volume</code>,
            but it covers only the measurement units which are needed for cooking.
        </para>
        <para>
            <note>
                The standard measurement unit is cubic meter (<code>m³</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Cooking/Volume.php';

// define the measurement unit as extended string
$rum = new Zend_Measure('You will need 10cl rum',Zend_Measure_Cooking_Volume::CENTILITER,'de');

// output value
echo $rum;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.cooking.weight">
        <title>Zend_Measure_Cooking_Weight</title>
        <para>
            <code>Zend_Measure_Cooking_Weight</code> covers the weights which are used for cooking or written
            in cookbooks.
        </para>
        <para>
            This class is a reduced version of the class <code>Zend_Measure_Weight</code>,
            but it covers only the measurement units which are neededfor cooking.
        </para>
        <para>
            <note>
                The standard measurement unit is gram (<code>g</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Cooking/Weight.php';

// extract the measurement unit from an localized string
$rum = new Zend_Measure('The cake needs 2,5g oil',Zend_Measure_Cooking_Weight::GRAM,'de');

// output value
echo $rum;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.current">
        <title>Zend_Measure_Current</title>
        <para>
            <code>Zend_Measure_Current</code> covers the physical factor of current.
        </para>
        <para>
            <note>
                The standard measurement unit is ampere (<code>A</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Current.php';

// extract the measurement unit from an localized string with number grouping
$unit = new Zend_Measure('1.200,50Ampere',Zend_Measure::CURRENT,'de');

echo $unit->convertTo(Zend_Measure_Current::KILOAMPERE);
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.density">
        <title>Zend_Measure_Density</title>
        <para>
            <code>Zend_Measure_Density</code> covers the physical factor of density.
        </para>
        <para>
            <note>
                The standard measurement unit is kilogram per cubic meter (<code>kg/m³</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Density.php';

$unit = new Zend_Measure(100,Zend_Measure::DENSITY,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.energy">
        <title>Zend_Measure_Energy</title>
        <para>
            <code>Zend_Measure_Energy</code> covers the physical factor of energy.
        </para>
        <para>
            <note>
                The standard measurement unit is joule (<code>J</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Energy.php';

$unit = new Zend_Measure(100,Zend_Measure::ENERGY,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.force">
        <title>Zend_Measure_Force</title>
        <para>
            <code>Zend_Measure_Force</code> covers the physical factor of force.
        </para>
        <para>
            <note>
                The standard measurement unit is newton (<code>N</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Energy.php';

$unit = new Zend_Measure(100,Zend_Measure::ENERGY,'de');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.flow.mass">
        <title>Zend_Measure_Flow_Mass</title>
        <para>
            <code>Zend_Measure_Flow_Mass</code> covers the physical factor of flow rate.
            The weight of the flowing mass is used as reference point within this class.
        </para>
        <para>
            <note>
                The standard measurement unit is kilogram per second (<code>kg/s</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Flow/Mass.php';

$unit = new Zend_Measure(100,Zend_Measure::FLOW_MASS,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.flow.mole">
        <title>Zend_Measure_Flow_Mole</title>
        <para>
            <code>Zend_Measure_Flow_Mole</code> covers the physical factor of flow rate.
            The density of the flowing mass is used as reference point within this class.
        </para>
        <para>
            <note>
                The standard measurement unit is mole per second (<code>mol/s</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Flow/Mole.php';

$unit = new Zend_Measure(100,Zend_Measure::FLOW_MOLE,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.flow.volume">
        <title>Zend_Measure_Flow_Volume</title>
        <para>
            <code>Zend_Measure_Flow_Volume</code> covers the physical factor of flow rate.
            The volume of the flowing mass is used as reference point within this class.
        </para>
        <para>
            <note>
                The standard measurement unit is cubic meter per second (<code>m³/s</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Flow/Volume.php';

$unit = new Zend_Measure(100,Zend_Measure::FLOW_VOLUME,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.frequency">
        <title>Zend_Measure_Frequency</title>
        <para>
            <code>Zend_Measure_Frequency</code> covers the physical factor of frequency.
        </para>
        <para>
            <note>
                The standard measurement unit is hertz (<code>Hz</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Frequency.php';

$unit = new Zend_Measure(100,Zend_Measure::FREQUENCY,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.illumination">
        <title>Zend_Measure_Illumination</title>
        <para>
            <code>Zend_Measure_Illumination</code> covers the physical factor of light density.
        </para>
        <para>
            <note>
                The standard measurement unit is lux (<code>lx</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Illumination.php';

$unit = new Zend_Measure(100,Zend_Measure::ILLUMINATION,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.length">
        <title>Zend_Measure_Length</title>
        <para>
            <code>Zend_Measure_Length</code> covers the physical factor of length.
        </para>
        <para>
            <note>
                The standard measurement unit is meter (<code>m</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Length.php';

$unit = new Zend_Measure(100,Zend_Measure::LENGTH,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.lightness">
        <title>Zend_Measure_Lightness</title>
        <para>
            <code>Zend_Measure_Lightness</code> covers the physical factor of light energy.
        </para>
        <para>
            <note>
                The standard measurement unit is candela per square meter (<code>cd/m²</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Lightness.php';

$unit = new Zend_Measure(100,Zend_Measure::LIGHTNESS,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.number">
        <title>Zend_Measure_Number</title>
        <para>
            <code>Zend_Measure_Number</code> can convert between number formats.
        </para>
        <para>
            <note>
                The standard unit is decimal.
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Number.php';

$binary = new Zend_Measure('10010110',Zend_Measure_Number::BINARY,'en');

// convert to roman number format
echo $binary->convertTo(Zend_Measure_Number::ROMAN);
?>]]></programlisting>
        </para>
        <para>
            The best known number format is the decimal system.
        </para>
        <para>
            Additionaly this class covers the octal system, the hexadecimal system,
            the binary system, the roman number format and a few not so familiar systems.
            <note>
                Be aware that only the decimal part of numbers is handled.
                The fractional part will be stripped.
            </note>
        </para>
        <note>
            <para>
                For the roman numbersystem digits greater 4000 are supported.
                In reality these digits are shown with a crossbeam on top of the digit.
            </para>
            <para>
                As the crossbeam can not be shown within the computer, an underline has to be used
                instead of it.
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Number.php';

$great = '_X';
$unit = new Zend_Measure($great,Zend_Measure_Number::ROMAN,'en');

// convert to the decimal system
echo $unit->convertTo(Zend_Measure_Number::DECIMAL);
?>]]></programlisting>
        </note>
    </sect2>
    <sect2 id="zend.measure.types.power">
        <title>Zend_Measure_Power</title>
        <para>
            <code>Zend_Measure_Power</code> covers the physical factor of power.
        </para>
        <para>
            <note>
                The standard measurement unit is watt (<code>W</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Power.php';

$unit = new Zend_Measure(100,Zend_Measure::POWER,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.pressure">
        <title>Zend_Measure_Pressure</title>
        <para>
            <code>Zend_Measure_Pressure</code> covers the physical factor of pressure.
        </para>
        <para>
            <note>
                The standard measurement unit is newton per square meter (<code>N/m²</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Pressure.php';

$unit = new Zend_Measure(100,Zend_Measure::PRESSURE,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.speed">
        <title>Zend_Measure_Speed</title>
        <para>
            <code>Zend_Measure_Speed</code> covers the physical factor of speed.
        </para>
        <para>
            <note>
                The standard measurement unit is meter per second (<code>m/s</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Speed.php';

$unit = new Zend_Measure(100,Zend_Measure::SPEED,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.temperature">
        <title>Zend_Measure_Temperature</title>
        <para>
            <code>Zend_Measure_Temperature</code> covers the physical factor of temperature.
        </para>
        <para>
            <note>
                The standard measurement unit is kelvin (<code>K</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Temperature.php';

$unit = new Zend_Measure(100,Zend_Measure::TEMPERATURE,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.torque">
        <title>Zend_Measure_Torque</title>
        <para>
            <code>Zend_Measure_Torque</code> covers the physical factor of torque.
        </para>
        <para>
            <note>
                The standard measurement unit is newton meter (<code>Nm</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Torque.php';

$unit = new Zend_Measure(100,Zend_Measure::TORQUE,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.viscosity.dynamic">
        <title>Zend_Measure_Viscosity_Dynamic</title>
        <para>
            <code>Zend_Measure_Viscosity_Dynamic</code> covers the physical factor of viscosity.
            The weight of the fluid is used as reference point within this class.
        </para>
        <para>
            <note>
                The standard measurement unit is kilogram per meter second (<code>kg/ms</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Viscosity/Dynamic.php';

$unit = new Zend_Measure(100,Zend_Measure::VISCOSITY_DYNAMIC,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.viscosity.kinematic">
        <title>Zend_Measure_Viscosity_Kinematic</title>
        <para>
            <code>Zend_Measure_Viscosity_Kinematic</code> covers the physical factor of viscosity.
            The distance of the flown fluid is used as reference point within this class.
        </para>
        <para>
            <note>
                The standard measurement unit is square meter per second (<code>m²/s</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Viscosity/Kinematic.php';

$unit = new Zend_Measure(100,Zend_Measure::VISCOSITY_KINEMATIC,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.volume">
        <title>Zend_Measure_Volume</title>
        <para>
            <code>Zend_Measure_Volume</code> covers the physical factor of volume (content).
        </para>
        <para>
            <note>
                The standard measurement unit is cubic meter (<code>m³</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Volume.php';

$unit = new Zend_Measure(100,Zend_Measure::VOLUME,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
    <sect2 id="zend.measure.types.weight">
        <title>Zend_Measure_Weight</title>
        <para>
            <code>Zend_Measure_Weight</code> covers the physical factor of weight.
        </para>
        <para>
            <note>
                The standard measurement unit is kilogram (<code>kg</code>).
            </note>
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure.php';
require_once 'Zend/Measure/Weight.php';

$unit = new Zend_Measure(100,Zend_Measure::WEIGHT,'en');

echo $unit;
?>]]></programlisting>
        </para>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->