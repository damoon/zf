<sect1 id="zend.memory.overview">
    <title>Overview</title>

    <sect2 id="zend.memory.introduction">
        <title>Introduction</title>
        <para>
            Zend_Memory component is intended to manage memory in limited memory environment.
        </para>

        <para>
            Memory objects (memory containers) are generated by memory manager by request and
            transparently swapped/loaded when it's necessary.
        </para>

        <para>
            Memory manager uses <link linkend="zend.cache.backends">Zend_Cache backends</link> as storage provider.
        </para>

        <example>
            <title>Using Zend_Memory component</title>
            <para>
                <code>Zend_Memory::factory()</code> instantiates memory manager object with specified backend options.
            </para>
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Memory.php';

$backendOptions = array(
    'cacheDir' => './tmp/' // Directory where to put the swapped memory blocks
);

$memoryManager = Zend_Memory::factory('File', $backendOptions);

...

$loadedFiles = array();

for ($count = 0; $count < 10000; $count++) {
    $f = fopen($fileNames[$count], 'rb');
    $data = fread($f, filesize($fileNames[$count]));
    $fclose($f);

    $loadedFiles[] = $memoryManager->create($data);
}

...

echo $loadedFiles[$index1]->value;
...
$loadedFiles[$index2]->value = $newValue;
...
$loadedFiles[$index3]->value[$charIndex] = '_';
...

?>]]></programlisting>
        </example>
    </sect2>

    <sect2 id="zend.memory.theory-of-operation">
        <title>Theory of Operation</title>
        <para>
            Zend_Memory component operates with following concepts:
            <itemizedlist>
                <listitem>
                    <para>Memory manager</para>
                </listitem>
                <listitem>
                    <para>Memory container</para>
                </listitem>
                <listitem>
                    <para>Locked memory object</para>
                </listitem>
                <listitem>
                    <para>Movable memory object</para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            Memory manager generates memory objects (locked or movable) by request of user application and
            returns them wrapped into memory container object.
        </para>

        <para>
            Memory container has virtual or actual <code>value</code> attribute of string type. It represents the value specified
            at memory object creation time.
        </para>

        <para>
            User can operate with this <code>value</code> attribute as he/she prefere:
            <programlisting role="php"><![CDATA[<?php
$memObject = $memoryManager->create($data);
...
echo $memObject->value;
...
$memObject->value = $newValue;
...
$memObject->value[$index] = '_';
...
echo ord($memObject->value[$index1]);
...
$memObject->value = substr($memObject->value, $start, $length);
...

?>]]></programlisting>
        </para>
    </sect2>
</sect1>
