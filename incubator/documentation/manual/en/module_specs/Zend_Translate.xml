<book>
<sect1 id="zend.translate.introduction">
    <title>Introduction</title>
    <para>
        The Zend_Translate component provides the Zend Framework with message translation functionality.
        It can handle pre-translated strings stored in different source file formats.
    </para>
    <para>
        The Zend Framework offers common way to prepare multi-lingual applications.
    </para>
    <para>
        PHP code operates with strings identifiers, which are translated to actual used strings at run time.
    </para>
    <para>
        Translated strings can be stored in different source file formats. PHP arrays and gettext (.mo) files are supported now.
    </para>
    <para>
        Module usage example:
        <example>
            <title>Zend_Translate module usage example:</title>
            <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_ARRAY,
                           array('Message 1' => 'Message 1',
                                 'Message 2' => 'Message 2',
                                 'Message 3' => 'Message 3'
                                ),
                           'en');

$lang->addTranslation('de',
                      array('Message 1' => 'Nachricht 1',
                            'Message 2' => 'Nachricht 2',
                            'Message 3' => 'Nachricht 3'
                           ),
                     );

$lang->addTranslation('ru',
                      array('Message 1' => 'Сообщение 1',
                            'Message 2' => 'Сообщение 2',
                            'Message 3' => 'Сообщение 3'
                           ),
                     );

...

$lang->setLanguage('de');

...

echo $lang->_('Message 2');

...
?>]]>
            </programlisting>
            <para>
                It prints 'Nachricht 2'.
            </para>
        </example>
    </para>
</sect1>

<sect1 id="zend.translate.translate_api">
    <title>Translate API</title>
    <para>
        The Zend_Translate class is actually a wrapper to specific file format adapter.
    </para>
    <para>
        Zend_Translate offers adapter independent API to operate with translated strings.
    </para>

    <sect2 id="zend.translate.translate_api.construct">
        <title>Translate object construction.</title>
        <para>
            Zend_Translate constructor takes three parameters as an input:
            <itemizedlist>
                <listitem>
                    <para><code>$adapter</code> is an adapter name (string).</para>
                    <para><code>Zend_Translate::AN_...</code> constants may be used as well as strings here.</para>
                </listitem>
                <listitem>
                    <para><code>$options</code> is an adapter specific options, which initialize translation data.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>$locale</code> is a locale information for specified options.
                        <code>$locale</code> parameter is optional. Deafault Zend_Locale object is used if <code>$locale</code>
                        is omitted. This parameter may be a string or a Zend_Locale object. (See below for more details)
                    </para>
                    <para>Specified locale is also used as a default locale/language for translation.</para>
                </listitem>
            </itemizedlist>

            <para>
                Translation object creation:
                <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_ARRAY, array('msg1' => 'Message 1',
                                                           'msg2' => 'Message 2',
                                                           'msg3' => 'Message 3',
                                                          ),
                           'en');
...
?>]]>
                </programlisting>
            </para>
        </para>
    </sect2>

    <sect2 id="zend.translate.translate_api.adapters">
        <title>Adapter manipulation methods.</title>
        <para>
            There are two methods in Zend_Translate to work with adapter.
        </para>
        <para>
            <code>Zend_Translate::setAdapter()</code> method allows to switch to another adapter. It has the same signature as
            <code>Zend_Translate</code> object constructor:
            <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_ARRAY, array('msg1' => 'Message 1',
                                                           'msg2' => 'Message 2',
                                                           'msg3' => 'Message 3',
                                                          ),
                           'en');
...
$lang->setAdapter(Zend_Translate::AN_GETTEXT, $translationPath . 'messages_en.mo', 'en');
?>]]>
            </programlisting>
        </para>
        <para>
            <code>Zend_Translate::getAdapter()</code> method returns used adapter:
            <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_ARRAY, array('msg1' => 'Message 1',
                                                           'msg2' => 'Message 2',
                                                           'msg3' => 'Message 3',
                                                          ),
                           'en');
...
echo $lang->getAdapter()->toString();
?>]]>
            </programlisting>
            It prints 'Array'.
        </para>
    </sect2>

    <sect2 id="zend.translate.translate_api.add_translation">
        <title>Add translation data.</title>
        <para>
            <code>Zend_Translate::addTranslation()</code> method is used to add translation data.
        </para>

        <para>
            It takes three parameters as an input:
            <itemizedlist>
                <listitem>
                    <para><code>$locale</code> is a locale/language identifier for translation data.</para>
                </listitem>
                <listitem>
                    <para><code>$options</code> is an adapter specific options, which represents actual translation data.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>$clear</code> is an optional boolean parameter, which signals to clear translation data for
                        specified locale/language. Default value is false.
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                Usage example:
                <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_ARRAY,
                           array('Message 1' => 'Message 1',
                                 'Message 2' => 'Message 2',
                                 'Message 3' => 'Message 3'
                                ),
                           'en');

$lang->addTranslation('de',
                      array('Message 1' => 'Nachricht 1',
                            'Message 2' => 'Nachricht 2',
                            'Message 3' => 'Nachricht 3'
                           ),
                     );
...
?>]]>
                </programlisting>
            </para>
        </para>
    </sect2>


    <sect2 id="zend.translate.translate_api.locale_language">
        <title>Locales and langueges.</title>
        <para>
            Zend_Translate can operate with locales as well as with languages. It takes Zend_Locale objects or a strings
            as an input parameters in object constructor and <code>Zend_Translate::addTranslation()</code> methods.
        </para>

        <para>
            If <code>$locale</code> is a correct locale either it's a string or Zend_Locale object, then Zend_Translate works
            with locales (language info retrieving returns string representation of locale).
            Otherwise Zend_Translate needs $locale to be a string and treats it as a 'language'.
        </para>
        <para>
            It's your choice which option should be used.
        </para>


        <para>
            There are for methods to operate with locales/languages.
        </para>
        <para>
            <code>Zend_Translate::setLocale($locale)</code> and <code>Zend_Translate::getLocale()</code> methods are used to
            set and get current locale (default locale used for translation).
        </para>
        <para>
            <code>Zend_Translate::setLanguage($language)</code> and <code>Zend_Translate::setLanguage($language)</code> methods are
            used to set and get current language (default language used for translation).
        </para>
    </sect2>

    <sect2 id="zend.translate.translate_api.translation">
        <title>Messages translation.</title>
        <para>
            <code>Zend_Translate::translate($messageId[, $locale])</code> method is used to translate messages.
        </para>
        <para>
            If <code>$locale</code> is omitted, then default locale/language is used.
        </para>

        <para>
            <code>Zend_Translate::_($messageId[, $locale])</code> is a shorter synonym for <code>translate()</code> method.
        </para>

        <example>
            <title>Zend_Translate::translate() method usage example:</title>
            <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_GETTEXT, $translationPath . 'messages_en.mo', 'en');
$lang->addTranslation(Zend_Translate::AN_GETTEXT, $translationPath . 'messages_de.mo', 'de');
$lang->addTranslation(Zend_Translate::AN_GETTEXT, $translationPath . 'messages_fr.mo', 'fr');

...

$lang->setLanguage('fr');

...

echo $lang->_('Message 2');
echo $lang->_('Message 3');
echo $lang->_('Message 3', 'de');

...

echo $lang->translate('Message 3');

...
?>]]>
            </programlisting>
        </example>
    </sect2>

    <sect2 id="zend.translate.translate_api.tools">
        <title>Tools methods.</title>
        <para>
            <code>Zend_Translate::getLanguageList()</code> method returns an array of available languages.
        </para>

        <para>
            <code>Zend_Translate::isAvailable($language)</code> method checks if translation data
            for specified language is available.
        </para>
    </sect2>
</sect1>

<sect1 id="zend.translate.adapters">
    <title>Zend_Translate adapters</title>
    <para>
        Zend_Translate adapters encapsulate format specific functionality.
    </para>
    <para>
        PHP arrays and gettext (.mo files) adapters are available now.
    </para>

    <sect2 id="zend.translate.adapters.array">
        <title>Array adapter.</title>
        <para>
            Array adapter gets php arrays as $options parameter in <code>Zend_Translate</code> constructor,
            <code>Zend_Translate::setAdapter()</code> and <code>Zend_Translate::addTranslation()</code> methods.
        </para>
        <para>
            Array keys are message ids and values are translated strings for specified language:
            <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_ARRAY,
                           array('Message 1' => 'Message 1',
                                 'Message 2' => 'Message 2',
                                 'Message 3' => 'Message 3'
                                ),
                           'en');

$lang->addTranslation('de',
                      array('Message 1' => 'Nachricht 1',
                            'Message 2' => 'Nachricht 2',
                            'Message 3' => 'Nachricht 3'
                           ),
                     );

$lang->addTranslation('ru',
                      array('Message 1' => 'Сообщение 1',
                            'Message 2' => 'Сообщение 2',
                            'Message 3' => 'Сообщение 3'
                           ),
                     );

...

$lang->setLanguage('de');

...

echo $lang->_('Message 2');

...
?>]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.translate.adapters.gettext">
        <title>Gettext adapter.</title>
        <para>
            Gettext adapter gets translation file name as $options parameter in <code>Zend_Translate</code> constructor,
            <code>Zend_Translate::setAdapter()</code> and <code>Zend_Translate::addTranslation()</code> methods.
        </para>
        <para>
            <programlisting role="php"><![CDATA[<?php
...
$lang = new Zend_Translate(Zend_Translate::AN_GETTEXT , $translationPath . 'messages_en.mo', 'en');
$lang->addTranslation('de', $translationPath . 'messages_de.mo');
$lang->addTranslation('ru', $translationPath . 'messages_ru.mo');

...

$lang->setLanguage('de');

...

echo $lang->_('Message 2');

...
?>]]>
            </programlisting>
        </para>
        <para>
            Use 'man gettext' or <ulink url="http://en.wikipedia.org/wiki/Gettext">Wikipedia Gettext article</ulink> for more
            information about format.
        </para>
    </sect2>
</sect1>
</book>
