<sect1 id="zend.log.overview.overview">
    <title>Overview</title>

    <para>
      <code>Zend_Log</code> is a component for general purpose logging.
      It supports multiple log backends, formatting messages sent to the log,
      and filtering messages from being logged. These functions are divided
      into the following objects:

      <itemizedlist>
        <listitem>
          <para>
            A Log (instance of <code>Zend_Log</code>) is the object that your
            application uses the most. You can have as many Log objects as you
            like and they will not interact. A Log object must contain at
            least one Writer, and can optionally contain one or more Filters.
          </para>
        </listitem><listitem>
          <para>
            A Writer (inherits from <code>Zend_Log_Writer_Abstract</code>) is
            responsible for saving data to storage.
          </para>
        </listitem><listitem>
          <para>
            A Filter (implements <code>Zend_Log_Filter_Interface</code>)
            blocks log data from being saved. A filter may be applied to an
            individual Writer, or to a Log where it is applied before all
            Writers. In either case, filters may be chained.
          </para>
        </listitem>
        
        <!-- TODO
        <listitem>
          <para>
            A Formatter (implements <code>Zend_Log_Formatter_Interface</code>)
            can format the log data before it is written by a Writer. Each
            Writer has exactly one Formatter.
          </para>
        </listitem>
        -->
      </itemizedlist>
    </para>
    
    <sect2 id="zend.log.overview.creating-a-logger">
      <title>Creating a Log</title>
      <para>
        To get started logging, instantiate a Writer and then pass it to a Log
        instance:
        
        <programlisting role="php"><![CDATA[<?php

$logger = new Zend_Log();
$writer = new Zend_Log_Writer_Stream('php://output');

$logger->addWriter($writer);

?>]]></programlisting>

        It is important to note that the Log must
        have at least one Writer.  Any number of Writers can be added with the
        Log's <code>addWriter()</code> method.
      </para>

      <para>
        Alternatively, you can pass a Writer directly to constructor of Log as
        a shortcut:        

      <programlisting role="php"><![CDATA[<?php

$writer = new Zend_Log_Writer_Stream('php://output');
$logger = new Zend_Log($writer);

?>]]></programlisting>

        The Log is now ready to use.  
      </para>
    </sect2>

    <sect2 id="zend.log.overview.logging-messages">
      <title>Logging Messages</title>
      
      <para>
        To log a message, call the <code>log()</code> method of a Log instance
        and pass it the message with a corresponding priority:

      <programlisting role="php"><![CDATA[<?php

$logger->log('Informational message', Zend_Log::INFO);

?>]]></programlisting>

      The first parameter of the <code>log()</code> method is a string <code>message</code> and the second
      parameter is an integer <code>priority</code>.  The priority must be one of the priorities recognized
      by the Log instance.  This is explained in the next section.
    </para>
      
    <para>
      A shortcut is also available. Instead of calling the <code>log()</code> method, you can
      call a method by the same name as the priority:      
      
      <programlisting role="php"><![CDATA[<?php

$logger->log('Informational message', Zend_Log::INFO);
$logger->info('Informational message');

$logger->log('Emergency message', Zend_Log::EMERG);
$logger->emerg('Emergency message');

?>]]></programlisting>
    </para>
  </sect2>
  
  <sect2 id="zend.log.overview.builtin-priorities">
    <title>Built-in Priorities</title>
    <para>
      The <code>Zend_Log</code> class has the following priorities defined:

      <programlisting role="php"><![CDATA[
EMERG   = 0;  // Emergency: system is unusable
ALERT   = 1;  // Alert: action must be taken immediately
CRIT    = 2;  // Critical: critical conditions
ERR     = 3;  // Error: error conditions
WARN    = 4;  // Warning: warning conditions
NOTICE  = 5;  // Notice: normal but significant condition
INFO    = 6;  // Informational: informational messages
DEBUG   = 7;  // Debug: debug messages
]]></programlisting>

      These priorities are always available, and a convenience method of the same name
      is available for each one.
    </para>
    
    <para>
      The priorities are not arbitrary. They come from the BSD <code>syslog</code> protocol,
      which is described in <ulink url="http://tools.ietf.org/html/rfc3164">RFC-3164</ulink>.
      The names and corresponding priority numbers are also
      compatible with another PHP logging system, 
      <ulink url="http://pear.php.net/package/log">PEAR Log</ulink>,
      which perhaps promotes interoperability between it and <code>Zend_Log</code>.
    </para>
    
    <para>
      Priority numbers descend in order of importance. <code>EMERG</code> (0)
      is the most important priority. <code>DEBUG</code> (7) is the least
      important priority of the built-in priorities. Priorities of lower
      importance than <code>DEBUG</code> may defined by the user. When
      selecting the priority for your log message, be aware of this priority
      hierarchy and choose appropriately.
    </para>
  </sect2>
  
  <sect2 id="zend.log.overview.user-defined-priorities">
    <title>User-defined Priorities</title>
    
    <para>
      User-defined priorities can be added at runtime using the Log's
      <code>addPriority()</code> method:

      <programlisting role="php"><![CDATA[<?php
        
$logger->addPriority('FOO', 8);      

?>]]></programlisting>

      The snippet above creates a new priority, <code>FOO</code>, whose
      value is <code>8</code>. The new priority is then available for logging:
    
      <programlisting role="php"><![CDATA[<?php

$logger->log('Foo message', 8);
$logger->foo('Foo Message);

?>]]></programlisting>

      New priorities cannot overwrite existing ones.  
    </para>    
  </sect2>
</sect1>
