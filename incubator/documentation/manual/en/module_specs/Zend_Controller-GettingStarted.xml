<sect1 id="zend.controller.getting-started">
    <title>Getting Started</title>

    <sect2 id="zend.controller.getting-started.introduction">
        <title>Introduction</title>
        <para>
            The <code>Zend_Controller</code> system was built with extensibility
            in mind, either by subclassing the existing classes or writing new
            classes that implement the various interfaces and abstract classes
            that form the foundation of the controller family of classes.
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.server-configuration">
        <title>Server Configuration</title>
        <para>
            Zend_Controller is built to support modern websites with clean URIs
            (few or no query parameters).  As such, the suggested configuration
            requires support from the webserver in the form of URI rewriting to
            redirect all requests to a single file, here called "index.php",
            which will simply bootstrap <code>Zend_Controller_Front</code>.  On
            Apache webservers, this is handled by an optional module called
            mod_rewrite.
        </para>

        <para>
            The first step in configuring the server is to sucessfully install
            and enable mod_rewrite.  The next step is to put two files in the
            document root: .htaccess and index.php.  The .htaccess file is used
            by Apache and must contain a mod_rewrite rule to redirect all
            requests to index.php.  For development purposes, it is often
            simplest to write a mod_rewrite rule that will redirect all requests
            to index.php except for certain file extensions.  Here is an example
            of such a file:
        </para>
        <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php
]]></programlisting>
        <para>
            In the example above, all requests not containing one of the above
            file extensions will be passed to index.php.  This is useful for
            development, however in production the rewrite rules should be
            written to exclude directories instead.
        </para>

        <para>
            That said, the basic functionality of Zend_Controller also supports
            URLs using query parameters -- as an example,
            <code>index.php?controller=foo&amp;action=bar</code>. Additionally,
            another shipped router, <code>Zend_Controller_RewriteRouter</code>,
            works in a variety of environments, including many without
            mod_rewrite-like capabilities. If you cannot use mod_rewrite or an
            equivalent, you'll still be able to use Zend_Controller for your
            site.
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.bootstrap">
        <title>Bootstrap File</title>

        <para>
            After setting up the .htaccess file, create a new file called
            <code>index.php</code>.  This is a bootstrap file.  The purpose of
            the index.php file is only to bootstrap Zend_Controller_Front, which
            should ideally be located outside of the document root.
        </para>

        <note>
            The bootstrap file should be the only PHP file stored in the
            document root.
        </note>

        <para>
            For security purposes, Zend very strongly recommends not storing any
            PHP files in directories that are accessible by the webserver (those
            that are beneath the document root).  While this is not possible in
            every scenario, such as shared hosting, this should be considered a
            best practice and observed whenever possible.
        </para>

        <para>
            Create the bootstrap file, <code>index.php</code>, in the document
            root to bootstrap Zend_Controller_Front:
        </para>
        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Controller/Front.php';

Zend_Controller_Front::run('/path/to/your/controllers');

?>]]></programlisting>
        <para>
            See the next section regarding the
            <code>/path/to/your/controllers</code>.

            As instructed in <code>README.txt</code>, the directory of the Zend
            Framework library must be in the <code>include_path</code>.  If this
            is not set in <code>php.ini</code>, <code>set_include_path()</code>
            can be called in this file before the <code>require_once()</code>.
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.directory-structure">
        <title>Directory Structure</title>

        <para>
            It is recommended that websites built with the Zend Framework share
            a common directory structure.  While this is not possible in every
            case, it is for many or perhaps most.  Choosing to conform to this
            structure will make your code more easily understandable by someone
            familiar with the conventions of the Zend Framework.
        </para>

        <para>
            The suggested directory structure consists of both library
            directories (from Zend and elsewhere) and application directories.
        </para>
        <programlisting role="php"><![CDATA[
/application
  /models
  /views
  /controllers
/document_root
  /images
  /styles
  .htaccess
  index.php
/library
  /Zend
]]></programlisting>

        <note>
            This section is not yet complete.  It is under heavy construction
            and is subject to change.
        </note>
    </sect2>

    <sect2 id="zend.controller.overview.defaultcontroller">
        <title>Default Controller</title>

        <para>
            Every site must define a default controller.  This is the controller
            that is reached when no controller is specified in the URI, such as
            in this URI:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/
]]></programlisting>

        <para>
            In the shipped configuration, the default controller should be named
            <code>IndexController</code>, and defined in a file named
            <code>IndexController.php</code>. Internally, it will be referenced
            as the controller 'index'.
        </para>

        <para>
            You may change the default controller prior to dispatching the front
            controller by calling the <code>setDefaultController()</code> method
            on either the front controller or dispatcher object. When doing so,
            use the internal naming conventions. Thus, the class
            <code>HomeController</code> (in the <code>HomeController.php</code>
            file) would be referred to as <code>home</code>.
        </para>

        <para>
            Controllers should extend the <code>Zend_Controller_Action</code>
            class and be placed in the controllers directory.
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Controller/Action.php';

class IndexController extends Zend_Controller_Action
{
    public function indexAction()
    {
        echo 'Hello from IndexController';
    }

    public function noRouteAction()
    {
        $this->_redirect('/');
    }
}

?>]]></programlisting>

        <para>
            More detail on the default controller and action, as well as writing
            action controller classes, will be presented in later chapters.
        </para>

        <note>
            This section is not yet complete.  It is under heavy construction
            and is subject to change.
        </note>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
