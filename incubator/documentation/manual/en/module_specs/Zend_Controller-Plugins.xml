<sect1 id="zend.controller.plugins">
    <title>Plugins</title>

    <sect2 id="zend.controller.plugins.introduction">
        <title>Introduction</title>

        <para>
        The controller architecture includes a plugin system that allows user code to be called when certain events occur in the controller process lifetime. The front controller uses a plugin broker as a registry for user plugins, and the plugin broker ensures that event methods are called on each plugin registered with the front controller.
        </para>

        <para>
        The event methods are defined in the abstract class <code>Zend_Controller_Plugin_Abstract</code>, from which user plugin classes inherit:
        <itemizedlist>
            <listitem><code>routeStartup()</code> is called before <code>Zend_Controller_Front</code> begins evaluating the request against its routes.</listitem>
            <listitem><code>routeShutdown()</code> is called after <code>Zend_Controller_Router</code> exits, when Zend_Controller_Front exits from the router.</listitem>
            <listitem><code>dispatchLoopStartup()</code> is called before <code>Zend_Controller_Front</code> enters its dispatch loop.</listitem>
            <listitem><code>preDispatch()</code> is called before an action is dispatched by <code>Zend_Controller_Dispatcher</code>. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>), the current action may be skipped.</listitem>
            <listitem><code>postDispatch()</code> is called after an action is dispatched by <code>Zend_Controller_Dispatcher</code>. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>), a new action may be specified for dispatching.</listitem>
            <listitem><code>dispatchLoopShutdown()</code> is called before <code>Zend_Controller_Front</code> exits its dispatch loop.</listitem>
        </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.controller.plugins.writing">
        <title>Writing Plugins</title>

        <para>
        In order to write a plugin class, simply include and extend the abstract class <code>Zend_Controller_Plugin_Abstract</code>:
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Controller/Plugin/Abstract.php';

class MyPlugin extends Zend_Controller_Plugin_Abstract
{
    // ...
}]]></programlisting>
        </para>
        <para>
        None of the methods of <code>Zend_Controller_Plugin_Abstract</code> are abstract, and this means that plugin classes are not forced to implement any of the available event methods listed above. Plugin writers can implement whatever even methods may suit their particular needs.
        </para>
        <para>
        <code>Zend_Controller_Plugin_Abstract</code> also makes the request and response objects available to controller plugins via the <code>getRequest()</code> and <code>getResponse()</code> methods, respectively.
        </para>
    </sect2>

    <sect2 id="zend.controller.plugins.using">
        <title>Using Plugins</title>
        <para>
        Plugin classes are registered with <code>Zend_Controller_Front::registerPlugin()</code> prior to dispatching. The following snippet illustrates how a plugin may be used in the controller chain:
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Controller/Front.php';
require_once 'Zend/Controller/Router.php';
require_once 'Zend/Controller/Plugin/Abstract.php';

class MyPlugin extends Zend_Controller_Plugin_Abstract
{
    public function routeStartup()
    {
        $this->getResponse()->appendBody('<p>routeStartup() called</p>');
    }

    public function routeShutdown($request)
    {
        $this->getResponse()->appendBody('<p>routeShutdown() called</p>');
    }

    public function dispatchLoopStartup($request)
    {
        $this->getResponse()->appendBody('<p>dispatchLoopStartup() called</p>');
    }

    public function preDispatch($request)
    {
        $this->getResponse()->appendBody('<p>preDispatch() called</p>');
    }

    public function postDispatch($request)
    {
        $this->getResponse()->appendBody('<p>postDispatch() called</p>');
    }

    public function dispatchLoopShutdown()
    {
        $this->getResponse()->appendBody('<p>dispatchLoopShutdown() called</p>');
    }
}

$controller = new Zend_Controller_Front();
$controller->setControllerDirectory('/path/to/controllers')
           ->setRouter(new Zend_Controller_Router())
           ->registerPlugin(new MyPlugin());
$response = $controller->dispatch();

echo $response;]]></programlisting>
        </para>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
