<sect1 id="zend.gdata.introduction">
    <title>Introduction to Gdata</title>
    <para>
        Google Data APIs provide programmatic interface to some of Google's
        online services.  The Google data Protocol is based upon the 
        <ulink url="http://ietfreport.isoc.org/idref/draft-ietf-atompub-protocol/">Atom Publishing Protocol</ulink>
        and allows client applications to retrieve data matching queries, 
        post data, update data and delete data using standard HTTP and the 
        Atom syndication formation.

        The Zend_Gdata component is a PHP 5 interface for accessing Google Data
        from PHP.  The Zend_Gdata component also supports accessing other services
        implementing the Atom Publishing Protocol.  
    </para>

    <para>
        See
        <ulink url="http://code.google.com/apis/gdata/">http://code.google.com/apis/gdata/</ulink>
        for more information about Google Data API.
    </para>

    <para>
        The services that are accessible by Zend_Gdata include the
        following:

        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="zend.gdata.spreadsheets">Google Spreadsheets</link>
                    provides an online collaborative spreadsheets tool which can
                    be used as a simple data store for your applications.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.blogger">Google Blogger</link>
                    is a popular internet provider of
                    "push-button publishing" and syndication.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.codesearch">Google CodeSearch</link>
                    allows you to search public source code from many projects.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.notebook">Google Notebook</link>
                    allows you to view public Notebook content. 
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <note>
        <title>Unsupported services</title>
        <para>
            Google Data API also supports Google Base, Picasa Web Albums, 
            Google Apps Provisioning, but Zend_Gdata does not provide helper 
            classes for these products in this release.
        </para>

        <para>
            The Google Calendar code is in the process of being finalized for 
            release, and is currently included in the incubator directory of 
            the Zend Framework.  As incubator code, stability is not guaranteed.
            If you wish to use the incubator code, please include the 
            incubator/library directory in your classpath before, 
            and in addition to, the core library directory.
        </para>

        <para>
            Zend_Gdata does not provide an interface to any other Google
            service, such as Search, Gmail, Translation, or Maps.
            Only services that support the Google Data API are supported.
        </para>
    </note>

    <sect2 id="zend.gdata.introduction.authentication">
        <title>Google Data Client Authentication</title>
        <para>
            Most Google Data services require client applications to
            authenticate against the Google server before accessing
            private data, or saving or deleting data.
            There are two implementations of authentication for Google Data:
            <link linkend="zend.gdata.authsub">AuthSub</link> and
            <link linkend="zend.gdata.clientlogin">ClientLogin</link>.
            Zend_Gdata offers class interfaces for both of these methods.
        </para>

        <para>
            Most other types of queries against Google Data services do not
            require authentication.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.dependencies">
        <title>Dependencies</title>
        <para>
            Zend_Gdata makes use of 
            <link linkend="zend.http.client">Zend_Http_Client</link> to send
            requests to google.com and fetch results.  The response to most
            Google Data requests is returned as a subclass of the 
            Zend_Gdata_App_Feed or Zend_Gdata_App_Entry classes.
        </para>

        <para>
            Zend_Gdata assumes your PHP application is running on a host that
            has a direct connection to the internet.
            The Zend_Gdata client operates by contacting Google Data servers.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.creation">
        <title>Creating a new Gdata client</title>

        <para>
            Create a new object of class Zend_Gdata_App, Zend_Gdata, or one 
            of the subclasses available that offer helper methods for
            service-specific behavior.
        </para>

        <para>
            The single optional parameter to the Zend_Gdata_App constructor
            is an instance of 
            <link linkend="zend.http.client">Zend_Http_Client</link>.
            If you don't pass this parameter, Zend_Gdata creates a default
            Zend_Http_Client object, which will not have associated
            credentials to access private feeds.  Specifying the 
            Zend_Http_Client object also allows you to
            pass configuration options to that client object.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Http_Client');
Zend_Loader::loadClass('Zend_Gdata');

$client = new Zend_Http_Client();
$client->setConfig( ...options... );

$gdata = new Zend_Gdata($client);
?>]]></programlisting>

        <para>
            Also see the sections on authentication for methods to
            create an authenticated Zend_Http_Client object.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.parameters">
        <title>Common query parameters</title>

        <para>
            You can specify parameters to customize queries with Zend_Gdata.
            Query parameters are specified using subclasses of Zend_Gdata_Query.
            The Zend_Gdata_Query class includes methods to set all query 
            parameters used throughout GData services.  Individual services,
            such as Spreadsheets, also provide query classes to defined 
            parameters which are custom to the particular service and feeds.
            Spreadsheets includes a CellQuery class to query the Cell Feed
            and a ListQuery class to query the List Feed, as different
            query parameters are applicable to each of those feed types.

            The GData-wide parameters are described below.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    The <code>q</code> parameter specifies a full-text
                    query.  The value of the parameter is a string.
                </para>
                <para>
                    Set this parameter with the <code>setQuery()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>alt</code> parameter specifies the feed type.
                    The value of the parameter can be
                    <code>atom</code>,
                    <code>rss</code>,
                    <code>json</code>,
                    or <code>json-in-script</code>.
                    If you don't specify this parameter, the default feed type
                    is <code>atom</code>.
                </para>
                <para>
                    Set this parameter with the <code>setAlt()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>maxResults</code> parameter limits the number
                    of entries in the feed.  The value of the parameter is
                    an integer.  The number of entries returned in the feed 
                    will not exceed this value.
                </para>
                <para>
                    Set this parameter with the <code>setMaxResults()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>startIndex</code> parameter specifies the
                    ordinal number of the first entry returned in the feed.
                    Entries before this number are skipped.
                </para>
                <para>
                    Set this parameter with the <code>setStartIndex()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>updatedMin</code> and <code>updatedMax</code>
                    parameters specify bounds on the entry date.
                    If you specify a value for <code>updatedMin</code>,
                    no entries that were updated earlier than the date
                    you specify are included in the feed.  Likewise
                    no entries updated after the date specified by
                    <code>updatedMax</code> are included.
                </para>
                <para>
                    You can use numeric timestamps, or a variety of
                    date/time string representations as the value for
                    these parameters.
                </para>
                <para>
                    Set this parameter with the <code>setUpdatedMin()</code>
                    and <code>setUpdatedMax()</code> functions.
                </para>
            </listitem>

        </itemizedlist>

        <para>
            There is a <code>get</code> function for each
            <code>set</code> function.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Gdata_Query();
$query->setMaxResults(10);
echo $gdata->getMaxResults();   // returns 10
?>]]></programlisting>

        <para>
            The Zend_Gdata class also implements "magic" getter and
            setter methods, so you can use the name of the parameter
            as a virtual member of the class. 
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Gdata_Query();
$query->maxResults = 10;
echo $query->maxResults;        // returns 10
?>]]></programlisting>

        <para>
            You can clear all parameters with the <code>resetParameters()</code>
            function.  This is useful to do if you reuse a Zend_Gdata
            object for multiple queries.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Gdata_Query();
$query->maxResults = 10;
// ...get feed...

$gdata->resetParameters();      // clears all parameters
// ...get a different feed...
?>]]></programlisting>

    </sect2>

    <sect2 id="zend.gdata.introduction.getfeed">
        <title>Fetching a feed</title>

        <para>
            Use the <code>getFeed()</code> function to retrieve
            a feed from a specified URI.
            This function returns an instance of class specified
            as the second argument to getFeed, which defaults to
            Zend_Gdata_Feed.  
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$query = new Zend_Gdata_Query();
$query->setMaxResults(10);
$uri = 'http://www.blogger.com/feeds/blogID/posts/default' . 
        $query->getQueryString();
$feed = $gdata->getFeed($uri);
?>]]></programlisting>

        <para>
            See later sections for special functions in each
            helper class for Google Data services.  These
            functions help you to get feeds from the URI that is
            appropriate for the respective service.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.post">
        <title>Posting entries to Google servers</title>

        <para>
            The Zend_Gdata object has a function <code>post()</code>
            with which you can upload data to save new entries
            to Google Data services.
        </para>

        <para>
            You can use the data model classes for each service to
            construct the appropriate entry to post to Google's 
            services.  The <code>post()</code> function will
            accept a child of Zend_Gdata_App_Entry as data to
            post to the service.  The method returns a child
            of Zend_Gdata_App_Entry which represents the state
            of the entry as it was returned from the server.
        </para>

        <para>
            Alternatively, you could construct the XML structure
            for an entry as a string and pass the string to the
            <code>post()</code> function.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata($authenticatedHttpClient);

$entry = $gdata->newEntry();
$entry->title = $gdata->newTitle('Playing football at the park');
$content = $gdata->newContent('We will visit the park and play a few football matches');
$content->setType('text');

$entryResult = $gdata->post($entry, 
        'http://www.blogger.com/feeds/blogID/posts/default');

echo 'The <id> of the resulting entry is: ' . $entryResult->id->text;
?>]]></programlisting>

        <para>
            To post entries, you must be using an authenticated
            Zend_Http_Client that you created using the Zend_Gdata_AuthSub
            or Zend_Gdata_ClientLogin classes.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.delete">
        <title>Deleting entries on Google servers</title>

        <para>
            Option 1: The Zend_Gdata object has a function <code>delete()</code>
            with which you can delete entries from Google Data
            services.  Pass the edit URL value from
            a feed entry to the <code>delete()</code> method.
        </para>

        <para>
            Option 2: Alternatively, you can call <code>$entry->delete()</code>
            on an entry retrieved from a Google service.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata($authenticatedHttpClient);
// a Google Data feed
$feedUri = ...;
$feed = $gdata->getFeed($feedUri);
foreach ($feed as $feedEntry) {
    // Option 1 - delete the entry directly
    $feedEntry->delete();
    // Option 2 - delete the entry by passing the edit URL to $gdata->delete()
    $gdata->delete($feedEntry->getEditLink()->href);
}
?>]]></programlisting>

        <para>
            To delete entries, you must be using an authenticated
            Zend_Http_Client that you created using the Zend_Gdata_AuthSub
            or Zend_Gdata_ClientLogin classes.
        </para>

    </sect2>
 
</sect1> 
