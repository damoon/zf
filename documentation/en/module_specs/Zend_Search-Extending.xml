<sect1 id="zend.search.extending">
	<title>Extensibility</title>

	<sect2 id="zend.search.extending.analysis">
        <title>Text Analysis</title>
            <para>
                <code>Zend_Search_Lucene_Analysis_Analyzer</code> class is used by indexer to tokenize document
                text fields.
            </para>
            
            <para>
                <code>Zend_Search_Lucene_Analysis_Analyzer::getDefault()</code> and <code>Zend_Search_Lucene_Analysis_Analyzer::setDefault()</code> methods are used
                to get and set default analyser.
            </para>
            
            <para>
                Thus you can assign your own text analayser or choose it from the set of predefined analysers:
                <code>Zend_Search_Lucene_Analysis_Analyzer_Common_Text</code> and <code>Zend_Search_Lucene_Analysis_Analyzer_Common_Text_CaseInsensitive</code> (default).
                Both of them interpret token as a sequense of letters. <code>Zend_Search_Lucene_Analysis_Analyzer_Common_Text_CaseInsensitive</code> converts tokens
                to lower case.
            </para>
            
            <para>
                To switch between analysers use code:
            </para>
            
            <programlisting role="php"><![CDATA[<?php
        
Zend_Search_Lucene_Analysis_Analyzer::setDefault(new Zend_Search_Lucene_Analysis_Analyzer_Common_Text());
...
$index->addDocument($doc);

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.search.extending.scoring">
		<title>Scoring Algorithms</title>
        <para>
            The score of query <literal>q</literal> for document <literal>d</literal>
            is defined as follows:
        </para>
    
        <para>
            <code>score(q,d) = sum( tf(t in d) * idf(t) * getBoost(t.field in d) * lengthNorm(t.field in d)  ) *
            coord(q,d) * queryNorm(q)</code>
        </para>
    
        <para>
            tf(t in d) - <code>Zend_Search_Lucene_Search_Similarity::tf($freq)</code> - a score factor based on a term or phrase's frequency in a document.
        </para>
    
        <para>
            idf(t) - <code>Zend_Search_Lucene_Search_SimilaritySimilarity::tf($term, $reader)</code> - a score factor for a simple term for the specified index.
        </para>
    
        <para>
            getBoost(t.field in d) - boost factor for the term field.
        </para>
    
        <para>
            lengthNorm($term) - the normalization value for a field given the total
            number of terms contained in a field. This value is stored within the index.
            These values, together with field boosts, are stored in an index and multiplied
            into scores for hits on each field by the search code.
        </para>
        <para>
            Matches in longer fields are less precise, so implementations of this method
            usually return smaller values when numTokens is large, and larger values when numTokens is small.
        </para>
    
        <para>
            coord(q,d) - <code>Zend_Search_Lucene_Search_Similarity::coord($overlap, $maxOverlap)</code> - a score
            factor based on the fraction of all query terms that a document contains.
        </para>
    
        <para>
            The presence of a large portion of the query terms indicates a better match
            with the query, so implementations of this method usually return larger values
            when the ratio between these parameters is large and smaller values when
            the ratio between them is small.
        </para>
    
        <para>
            queryNorm(q) -  the normalization value for a query given the sum of the squared weights
            of each of the query terms. This value is then multiplied into the weight of each query
            term.
        </para>
    
        <para>
            This does not affect ranking, but rather just attempts to make scores from different
            queries comparable.
        </para>
    
        <para>
            Scoring algorithm can be customized by defining your own Similatity class. To do this
            extend Zend_Search_Lucene_Search_Similarity class as defined below, then use
            <code>Zend_Search_Lucene_Search_Similarity::setDefault($similarity);</code> method to set it as default.
        </para>
    
        <programlisting role="php"><![CDATA[<?php
        
class MySimilarity extends Zend_Search_Lucene_Search_Similarity {
    public function lengthNorm($fieldName, $numTerms) {
        return 1.0/sqrt($numTerms);
    }

    public function queryNorm($sumOfSquaredWeights) {
        return 1.0/sqrt($sumOfSquaredWeights);
    }

    public function tf($freq) {
        return sqrt($freq);
    }

    /**
     * It's not used now. Computes the amount of a sloppy phrase match,
     * based on an edit distance.
     */
    public function sloppyFreq($distance) {
        return 1.0;
    }

    public function idfFreq($docFreq, $numDocs) {
        return log($numDocs/(float)($docFreq+1)) + 1.0;
    }

    public function coord($overlap, $maxOverlap) {
        return $overlap/(float)$maxOverlap;
    }
}

$mySimilarity = new MySimilarity();
Zend_Search_Lucene_Search_Similarity::setDefault($mySimilarity);

?>]]></programlisting>
	</sect2>
	
	<sect2 id="zend.search.extending.storage">
		<title>Storage Containers</title>
        <para>
        An abstract class Zend_Search_Lucene_Storage_Directory defines directory functionality.
        </para>
    
        <para>
        The Zend_Search_Lucene constructor uses either a string or Zend_Search_Lucene_Storage_Directory object
        as an input.
        </para>
    
        <para>
        Zend_Search_Lucene_Storage_Directory_Filesystem class implements directory functionality for file system.
        </para>
    
        <para>
        If string is used as an input for the Zend_Search_Lucene constructor, then the index reader
        (Zend_Search_Lucene object) treats it as a file system path and instantiates
        Zend_Search_Lucene_Storage_Directory_Filesystem object by themselves.
        </para>
    
        <para>
        You can define your own directory implementation by extending Zend_Search_Lucene_Storage_Directory class.
        </para>
    
        <para>
        Zend_Search_Lucene_Storage_Directory methods:
    
        <programlisting><![CDATA[<?php
        
abstract class Zend_Search_Lucene_Storage_Directory {
/**
 * Closes the store.
 *
 * @return void
 */
abstract function close();


/**
 * Creates a new, empty file in the directory with the given $filename.
 *
 * @param string $name
 * @return void
 */
abstract function createFile($filename);


/**
 * Removes an existing $filename in the directory.
 *
 * @param string $filename
 * @return void
 */
abstract function deleteFile($filename);


/**
 * Returns true if a file with the given $filename exists.
 *
 * @param string $filename
 * @return boolean
 */
abstract function fileExists($filename);


/**
 * Returns the length of a $filename in the directory.
 *
 * @param string $filename
 * @return integer
 */
abstract function fileLength($filename);


/**
 * Returns the UNIX timestamp $filename was last modified.
 *
 * @param string $filename
 * @return integer
 */
abstract function fileModified($filename);


/**
 * Renames an existing file in the directory.
 *
 * @param string $from
 * @param string $to
 * @return void
 */
abstract function renameFile($from, $to);


/**
 * Sets the modified time of $filename to now.
 *
 * @param string $filename
 * @return void
 */
abstract function touchFile($filename);


/**
 * Returns a Zend_Search_Lucene_Storage_File object for a given $filename in the directory.
 *
 * @param string $filename
 * @return Zend_Search_Lucene_Storage_File
 */
abstract function getFileObject($filename);
    
}

?>]]></programlisting>
        </para>
    
        <para>
        <code>getFileObject($filename)</code> method of Zend_Search_Lucene_Storage_Directory class returns
        Zend_Search_Lucene_Storage_File object.
        </para>
        <para>
        Zend_Search_Lucene_Storage_File abstract class implements file abstraction and index file reading
        primitives.
        </para>
        <para>
        You must also extend Zend_Search_Lucene_Storage_File class for your Directory implementation.
        </para>
        <para>
        Only two methods of Zend_Search_Lucene_Storage_File class must be overloaded in your implementation:
    
        <programlisting><![CDATA[
    class MyFile extends Zend_Search_Lucene_Storage_File {
        /**
         * Sets the file position indicator and advances the file pointer.
         * The new position, measured in bytes from the beginning of the file,
         * is obtained by adding offset to the position specified by whence,
         * whose values are defined as follows:
         * SEEK_SET - Set position equal to offset bytes.
         * SEEK_CUR - Set position to current location plus offset.
         * SEEK_END - Set position to end-of-file plus offset. (To move to
         * a position before the end-of-file, you need to pass a negative value
         * in offset.)
         * Upon success, returns 0; otherwise, returns -1
         *
         * @param integer $offset
         * @param integer $whence
         * @return integer
         */
        public function seek($offset, $whence=SEEK_SET) {
            ...
        }
    
        /**
         * Read a $length bytes from the file and advance the file pointer.
         *
         * @param integer $length
         * @return string
         */
        protected function _fread($length=1) {
            ...
        }]]>
        </programlisting>
        </para>

	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
