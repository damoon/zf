<sect1 id="zend.controller.overview">
	<title>Overview</title>
	
	<sect2 id="zend.controller.overview.introduction">
		<title>Introduction</title>
		<para>
			<code>Zend_Controller</code> provides the foundation for building a website based
			on the Model-View-Controller (MVC) pattern.
		</para>

		<para>
			The <code>Zend_Controller</code> system is designed to be lightweight, modular,
			and extensible.  It is a minimalist design to permit flexibility and some freedom to users
			while providing enough structure so that systems built around <code>Zend_Controller</code> share
			some common conventions and similar code layout.
		</para>

		<para>
			The <code>Zend_Controller</code> workflow is implemented by several components.  While
			it is not necessary to completely understand the underpinnings of all of these components
			to use the system, having a working knowledge of the process is helpful.  

			<itemizedlist>
				<listitem>
					<para>
						<code>Zend_Controller_Front</code>
						orchestrates the entire workflow of the <code>Zend_Controller</code> system.  It
						is an interpretation of the FrontController pattern.  <code>Zend_Controller_Front</code>
						processes all requests received by the server and is ultimately responsible for
						delegating requests to ActionControllers (<code>Zend_Controller_Action</code>).  
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Router</code> is the router.  Routing is
						the process of taking a URI endpoint and decomposing it to
						determine which controller, and action of that controller, should receive
						the request.  This definition of controller, action, and optional parameters,
						is packaged into a value object called <code>Zend_Controller_Dispather_Token</code>.  
						This is then processed by <code>Zend_Controller_Dispatcher</code>.  Routing occurs 
						only once: when the request is initially received and before the first controller is dispatched.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Dispatcher</code> is the dispatcher.  Dispatching is
						the process of taking the <code>Zend_Controller_Dispatcher_Token</code>, finding 
						the appropriate controller file, instantiating a controller class in that file 
						(must implement <code>Zend_Controller_Action</code>), and finally running the action method in 
						that controller object.  Unlike routing, which occurs only once, dispatching occurs 
						in a loop.  <code>Zend_Controller_Dispatcher</code> is repeatedly called by 
						<code>Zend_Controller_Front</code> until all actions have been dispatched sequentially.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Action</code> is the base controller component.  Each
						controller is a single class that extends the <code>Zend_Controller_Action class</code>,
						and this class has action methods.
					</para>
				</listitem>
			</itemizedlist>

			The workflow of <code>Zend_Controller</code> is relatively simple.  A request is received by 
			<code>Zend_Controller_Front</code>, which in turn calls <code>Zend_Controller_Router</code> to determine which 
			controller (and action in that controller) to dispatch.  <code>Zend_Controller_Router</code> decomposes the URI 
			into a <code>Zend_Controller_Dispatcher_Token</code> object that describes where to dispatch.  
			<code>Zend_Controller_Front</code> then enters a dispatch loop.  It calls <code>Zend_Controller_Dispatcher</code>,
			passing it the token, to dispatch to the actual controller and action.  After the controller has finished, 
			control returns to <code>Zend_Controller_Front</code>.  If the controller has indicated that another controller 
			should be dispatched by returning a new token, the loop continues and another dispatch is performed.  
			Otherwise, the process ends.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Route Process</title>

		<para>
			Before your first controller can be built, you need to understand how the routing
			process works as it is implemented in <code>Zend_Controller_Router</code>.  Remember that the 
			workflow is divided into routing, which occurs only once, and dispatching, which 
			occurs thereafter in a loop.
		</para>

		<para>
			<code>Zend_Controller_Front</code> calls <code>Zend_Controller_Router</code> to map a URI 
			to a controller -- and an action within that controller.  <code>Zend_Controller_Router</code> 
			takes the URI and decomposes it into a value object, <code>Zend_Controller_Dispatcher_Token</code>, 
			which will be passed to the dispatcher (<code>Zend_Controller_Dispatcher</code>).
		</para>

		<para>
			The router uses a very simple mapping to determine the name of the controller and
			the name of the action within that controller:

			<programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
			</programlisting>

			Notice above that the first segment is always the name of the controller and the
			second segment is always the name of the action.
		</para>

		<para>
			Optionally, parameters may be defined in the URI that will be passed to the controller.
			These take the form of key/value pairs:

			<programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
			</programlisting>
		</para>

		<para>
			If nothing is present in the <code>/controller/</code> part of the URI, then this will become
			"<code>index</code>".  If nothing is present in the <code>/action/</code> part of the URI, then 
			this will also become "<code>index</code>".  These examples illustrate:

				<programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Controller: roadmap
Action    : future	

http://framework.zend.com/roadmap/
Controller: roadmap
Action    : index

http://framework.zend.com/
Controller: index
Action    : index]]>
				</programlisting>
			</para>

			<note>
				We are currently developing a new router with a URI rewriting engine that will give 
				much more flexible capabilities than are presently available in the router.
				This will be included in a preview release in the very near future.
			</note>

			<para>
				The controller name, the action name within that controller, and any optional parameters
				are packaged into a token, <code>Zend_Controller_Dispatcher_Token</code>.  This token 
				is returned to <code>Zend_Controller_Front</code>, which will then enter the dispatch loop. 
				Once in the dispatch loop, the token will be passed to <code>Zend_Controller_Dispatcher</code>.
			</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatch-token">
		<title>Dispatch Token</title>
		
		<para>
			The dispatch token is a simple value object that is passed between <code>Zend_Controller_Front</code> 
			and classes the implement the router and dispatcher interfaces.  It packages a definition of a controller, 
			an action, and parameters to be passed to the action.
		</para>
		
		<itemizedlist>
			<listitem><para>
				The controller name is accessed by <code>getControllerName()</code> and <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
				The name of the action to call within that controller is accessed by <code>getActionName()</code> and <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
				Parameters to be passed to that action are an associative array of key/value pairs that are accessed by <code>getParams()</code> 
				and <code>setParams()</code>.
			</para></listitem>
		</itemizedlist>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Dispatch Process</title>

		<para>
			Dispatching is the process of taking a token, <code>Zend_Controller_Dispatcher_Token</code>, extracting 
			the information contained in it: a controller name, an action name, and option parameters,
			and then instantiating a controller and calling an action of that controller.
		</para>
	</sect2>	
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
