<sect1 id="zend.controller.overview">
	<title>Overzicht</title>

	<sect2 id="zend.controller.overview.introduction">
		<title>Inleiding</title>
		<para>
			De <code>Zend_Controller</code> verstrekt de basis om een website te bouwen volgens
			het Model-View-Controller (MVC) patroon.
		</para>

		<para>
			Het <code>Zend_Controller</code> systeem is ontworpen om lichtgewicht, moduleerbaar
			en uitbreidbaar te zijn. Het is een minimalistisch ontwerp om flexibiliteit en
			vrijdom aan de gebruikers te laten en tevens genoeg struktuur te verstrekken
			zodanig dat alle systemen die rond <code>Zend_Controller</code> worden gebouwd dezelfde
			overeenkomsten en een gelijkaardige code lay-out delen.
		</para>

		<para>
			Het <code>Zend_Controller</code> werkschema wordt door verschillende componenten 
			geïmplementeerd. Hoewel het niet nodig is om volledig de details van al deze
			componenten te begrijpen om het systeem te gebruiken, kan een praktische kennis
			van de werkwijze zeer hulpvol zijn.

			<itemizedlist>
				<listitem>
					<para>
						<code>Zend_Controller_Front</code>
						Orkestreert het gehele werkschema van het <code>Zend_Controller</code> systeem.
						Het is een interpretatie van het FrontController patroon.
						<code>Zend_Controller_Front</code> verwerkt alle door de server ontvangen aanvragen
						en is uiteindelijk verantwoordelijk voor het doorgeven van de aanvragen aan de
						ActionControllers (<code>Zend_Controller_Action</code>).
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Router</code> is de router. Routing is het verwerken en
						opbreken van een URI eindbestemming om te determineren welke controller en
						welke aktie van die controller het verzoek zou moeten behandelen. Deze definitie van
						controller, aktie en optionele parameters is verpakt in een waardeobjekt genaamd
						<code>Zend_Controller_Dispatcher_Token</code>.
						Dit wordt dan verwerkt door de <code>Zend_Controller_Dispatcher</code>. Routing 
						gebeurt slechts één keer: wanneer het verzoek wordt ontvangen en voordat de eerste
						controller word gedispatched.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Dispatcher</code> is de dispatcher. Dispatching is
						het process van het ontvangen van het <code>Zend_Controller_Dispatcher_Token</code>,
						het vinden van het toepassende controller bestand, het instantiëren van een 
						controller klasse in dat bestand (moet <code>Zend_Controller_Action</code>
						implementeren), en uiteindelijk de aktiemethode uitvoeren in dat controller objekt.
						In tegenstelling tot routing, dat maar eenmaal gebeurt, 
						gebeurt dispatching in een loop. <code>Zend_Controller_Dispatcher</code> wordt 
						herhaaldelijk opgeroepen door <code>Zend_Controller_Front</code> totdat alle 
						akties opeenvolgend zijn gedispatched.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Action</code> is de basiscomponent van de controller. Elke 
						controller is een enkele klasse welke de <code>Zend_Controller_Action class</code>
						uitbreidt, en deze klasse heeft aktiemethodes.
					</para>
				</listitem>
			</itemizedlist>

			Het werkschema van <code>Zend_Controller</code> is relatief eenvoudig. Een verzoek wordt ontvangen door
			<code>Zend_Controller_Front</code>, die op zijn beurt <code>Zend_Controller_Router</code> inroept om
			te determineren welke controller (en aktie in die controller) gedispatched wordt. <code>Zend_Controller_Router</code>
			breekt de URI op in een <code>Zend_Controller_Dispatcher_Token</code> objekt dat beschrijft waar te dispatchen.
			<code>Zend_Controller_Front</code> gaat dan in een dispatch loop. Het roept de <code>Zend_Controller_Dispatcher</code>
			op aan wie hij het token doorgeeft, om aan de uiteindelijke controller en aktie te dispatchen. Nadat de
			controller gedaan heeft, gaat de controle terug naar <code>Zend_Controller_Front</code>. Indien de controller
			heeft aangeduid dat een andere controller gedispatched moet worden door een nieuw token terug te sturen gaat de 
			loop verder en een andere dispatch wordt afgewerkt. Zoniet is de verwerking afgelopen.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Route Process</title>

		<para>
			Voordat je eerste controller kan gebouwd worden moet je verstaan hoe het routing process werkt
			zoals het geïmplementeerd is in <code>Zend_Controller_Router</code>. Vergeet niet dat het
			werkschema opgedeeld is in routing, dat maar één keer gebeurt, en dispatching, dat daarna in
			een loop voorkomt.
		</para>

		<para>
			<code>Zend_Controller_Front</code> roept <code>Zend_Controller_Router</code> op om een URI
			naar een controller te mappen -- en een aktie binnenin die controller. <code>Zend_Controller_Router</code> 
			neemt de URI en breekt die op in een waardeobjekt, <code>Zend_Controller_Dispatcher_Token</code>,
			dat aan de dispatcher (<code>Zend_Controller_Dispatcher</code>) zal worden doorgegeven.
		</para>

		<para>
			De routeur gebruikt een zeer eenvoudige mapping om de naam van de contoller en de naam van de 
			aktie in de controller te determineren:

			<programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
			</programlisting>
			
			Merk hierboven op dat het eerste segment altijd de naam van de controller en het tweede
			segment altijd de naam van de aktie is.
		</para>

		<para>
			Parameters mogen eventueel worden gedefinieerd in de URI die aan de controller wordt
			doorgegeven. Deze nemen de vorm aan van key/waarde-paren:

			<programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
			</programlisting>
		</para>

		<para>
			Indien er niets aanwezig is in het <code>/controller/</code> deel van de URI wordt deze
			"<code>index</code>". Indien er niets aanwezig is in het <code>/action/</code> deel van
			de URI, dan wordt dit ook een "<code>index</code>". Deze voorbeelden om dit te illustreren:

				<programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Controller: roadmap
Action    : future

http://framework.zend.com/roadmap/
Controller: roadmap
Action    : index

http://framework.zend.com/
Controller: index
Action    : index]]>
				</programlisting>
			</para>

			<note>
				Momenteel ontwikkelen we een nieuwe router met een URI herschrijvingsmotor die veel meer
				flexibiliteit aan de router zal geven dan nu het geval is. Dit zal aanwezig zijn
				in een preview versie in de zeer nabije toekomst.
			</note>

			<para>
				De controller naam, de aktienaam binnenin die controller en alle optionele parameters
				zijn verpakt in een token, <code>Zend_Controller_Dispatcher_Token</code>. Dit token
				wordt teruggekeerd naar <code>Zend_Controller_Front</code>, die dan in de dispatch loop
				gaat. Eenmaal in de dispatch loop wordt het token aan de <code>Zend_Controller_Dispatcher</code>
				gegeven.
			</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatch-token">
		<title>Dispatch Token</title>

		<para>
			Het Dispatch Token is een eenvoudig waardeobjekt dat wordt doorgegeven tussen 
			<code>Zend_Controller_Front</code> en klassen die de router en dispatcher interfaces implementeren.
			Het is een verpakking van de definitie van een controller, een aktie en de parameters die aan de
			aktie moeten worden doorgegeven.
		</para>

		<itemizedlist>
			<listitem><para>
				De naam van de controller kan bekomen en gezet worden met <code>getControllerName()</code> en <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
				De naam van de aktie die moet worden opgeroepen binnenin die controller kan bekomen en gezet worden door
				<code>getActionName()</code> en <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
				Paremeters die aan de aktie moeten worden doorgegeven zijn een associatieve array van key/waarden-paren
				die bekomen en gezt kunnen worden door <code>getParams()</code> en <code>setParams()</code>.
			</para></listitem>
		</itemizedlist>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Dispatch Process</title>

		<para>
			Dispatching is het process waarin een token, <code>Zend_Controller_Dispatcher_Token</code>, wordt genomen
			en de informatie die het bevat er wordt uitgehaald: een controllernaam, een aktienaam en optionele
			parameters. Dan wordt de controller geïnstantieerd en de aktie van die controller opgeroepen.
		</para>
	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
