<sect1 id="zend.view.introduction">

    <title>Inleiding</title>
    
    <para>
        Zend_View is een klasse bestemd om met het "view" deel van
		het model-view-controller ontwerppatroon te werken. Meer bepaald
		bestaat het om het view script gescheiden te houden van het model
		en controller scripts. Het verstrekt een systeem van helpers,
		output filters en variabel escaping.
    </para>
    
    <para>
        Zend_View is template systeem agnostisch; je mag PHP als
		je template taal gebruiken of instanties van andere template
		systemen maken en ze binnenin je view script manipuleren.
    </para>

    <para>
		
        Zend_View gebruiken gebeurt hoofdzakelijk in twee hoofdstappen:
        
        1.  Jouw controller script maakt een instantie van
        Zend_View en kent er variabelen aan toe.
        
        2. De controller vertelt Zend_View om een bepaald view weer te geven,
		hierdoor de controle aan het viewscript doorgevend, welke de view
		output genereert.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Controller Script</title>
        
        <para>
			Als een eenvoudig voorbeeld, laat ons zeggen dat je controller een
			lijst van boekdata heeft dat het door een view wil hebben weergegeven.
			Het controller script zou als volgt kunnen zijn:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// gebruik een model om data voor auteurs en titels van boeken te verkrijgen
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// ken nu de boekdata aan een instantie van een Zend_View toe
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// en geef het view script genaamd "boeklijst.php" weer
echo $view->render('boeklijst.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>View Script</title>
        
        <para>
			Nu hebben we het geassocieerde view script, "boeklijst.php" nodig.
			dit is een PHP script zoals alle andere, met één uitzondering: het
			voert zich uit binnenin de Zend_View instantie, wat betekent dat
			referenties naar $this naar de eigenschappen en methodes van de
			Zend_View instantie verwijzen. (Variabelen die aan de instantie
			werden toegwezen door de controller zijn publieke eigenschappen
			van de Zend_View instantie.) Zodoende zou een zeer eenvoudig
			script er als volgt kunnen uitzien:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Een tabel van enige boeken. -->
    <table>
        <tr>
            <th>Auteur</th>
            <th>Titel</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Er zijn geen boeken af te beelden.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
			Merk op hoe we de "escape()" methode gebruiken om output
			escaping op de variabelen toe te passen.
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>Controller Scripts</title>
    
    <para>
		De controller is waar je Zend_View instantieert en configureert.
		Je wijst dan variabelen aan de view toe en vertelt het view de
		output weer te geven door middel van een bepaald script.
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>Variabelen toewijzen</title>
        
        <para>
			Je controller script zou de nodige variabelen aan het view moeten
			toewijzen voordat het de controle aan het view script overhandigd.
			Normaal gesproken kan je toewijzingen één per één doen door
			waarden aan de eigenschappen van de view instantie toe te wijzen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hooi";
$view->b = "Bij";
$view->c = "Zee";
?>]]>
        </programlisting>
        
        <para>
			Dit kan wel vervelend zijn als je reeds alle waarden die
			toegewezen moeten worden in een array of objekt voorhanden hebt.
        </para>
        
        <para>
			de assign() methode laat je "bulk" toewijzingen doen vanaf een array
			of objekt. De volgende voorbeelden hebben hetzelfde effekt als de
			hierboven beschreven één per één eigenschapstoewijzingen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// wij een array van key/waarde-paren toe, waar de key
// de variabelnaam is, en de waarde de toegewezen waarde.
$array = array(
    'a' => "Hooi",
    'b' => "Bij",
    'c' => "Zee",
);
$view->assign($array);

// doe hetzelfde met de publieke eigenschappen van een
// objekt. Merk op hoe we naar een array casten bij de toewijzing.
$obj = new StdClass;
$obj->a = "Hooi";
$obj->b = "Bij";
$obj->c = "Zee";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
			Anderzijds kan je de toewijzingsmethode gebruiken om
			één per één toewijzingen te doen door een string
			variabelnaam door te geven, en dan de variabelwaarde.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hooi");
$view->assign('b', "Bij");
$view->assign('c', "Zee");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>Een View Script weergeven</title>
        
        <para>
			Eenmaal je al de nodige variabelen hebt toegewezen zou de controller
			Zend_View moeten vertellen dat het een bepaald view script moet weergeven.
			Dat doe je door de render() methode op te roepen. Merk op dat de methide
			het weergegeven view zal terugsturen en niet afprinten. Je moet het dus zelf
			afprinten of echo-en wanneer dat jou past.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hooi";
$view->b = "Bij";
$view->c = "Zee";
echo $view->render('eenView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>View Script Paden</title>
        
        <para>
			Standaard verwacht Zend_View dat je view scripts in dezelfde map
			zijn als het controller script. Bijvoorbeeld, als je controller
			script in "/map/naar/toepassing/controllers" en het roept
			$view->render('eenView.php') op zal Zend_View naar
			"/map/naar/toepassing/controllers/eenView.php" zoeken.
        </para>
        
        <para>
			waarschijnlijk zijn je scripts ergens anders ondergebracht. Om
			Zend_View daarvan op de hoogte te brengen gebruik je de
			setScriptPath() methode.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/map/naar/toepassing/views');
?>]]>
        </programlisting>
        
        <para>
			Als je nu $view->render('eenView.php') oproept zal het naar
			"/pad/naar/toepassing/views/eenView.php' kijken.
        </para>
        
        <para>
			In feite kan je paden "opstapelen" door de addScriptPath()
            methode te gebruiken. Terwijl je paden aan de stapel toevoegt
			zal Zend_View in het meest recente pad kijken voor het
			gevraagde view script. Dit laat je toe de standaard te overschrijven
			met verpersoonlijkte views zodat je persoonlijke "thema's" of "skins"
			voor sommige views kan maken terwijl die niet op andere views van
			toepassing zijn.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/pad/naar/toepassing/views');
$view->addScriptPath('/pad/naar/persoonlijk/');

// wanneer je nu $view->render('boeklijst.php') oproept zal Zend_View
// eerst kijken naar "pad/naar/persoonlijk/boeklijst.php", dan naar
// "/pad/naar/toepassing/views/boeklijst.php", en uiteindelijk in
// de huidige map naar "boeklijst.php".
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>View Scripts</title>
        
    <para>
		Eenmaal je controller de variabelen heeft toegewezen en render()
		heeft opgeroepen zal Zend_View het gevraagde view script oproepen
		en het binnenin de Zend_View instantie uitvoeren. Daarom wijzen
		referenties naar $this in je view scripts eigenlijk naar de
		Zend_View instantie zelf.
    </para>
    
    <para>
		Variabelen die aan het view script werden toegewezen door de 
		controller worden beschouwd als instantie-eigenschappen. Bijvoorbeeld,
		indien de controller een variabele 'iets' zou toewijzen, zou je
		ernaar verwijzen in je view script als $this->iets. (Dit laat je toe
		de variabelen die werden toegewezen te scheiden van de variabelen die
		intern zijn aan het script zelf.)
    </para>
    
    <para>
		Bij wijze van geheugenverfrisser vindt je hieronder het view script van
		de Zend_View inleiding:
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Een tabel van enige boeken. -->
    <table>
        <tr>
            <th>Auteur</th>
            <th>Titel</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Er zijn geen boeken af te beelden.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Escaping Output</title>
        
        <para>
			Eén van de meest belangrijke taken die in een view script
			moeten worden uitgevoerd is die welke verzekert dat output
			op een korrekte wijze wordt ge-escaped; dit helpt, onder andere,
			cross-site scripting aanvallen te voorkomen. Behalve als je een
			functie, methode of helper gebruilt die zelf het escapen voor
			rekening neemt, zou je altijd variabelen moeten escapen als je
			ze output.
        </para>
        
        <para>
			Zend_View komt met een methode escape() die veel van het escape
			werk voor je uitvoert.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// slecht gebruik van het view-script:
echo $this->variable;

// goed gebruik van het view-script:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
			Standaard gebruikt de escape() methode de PHP functie htmlspecialchars()
			om data te escapen. Afhangende van jouw environment zou het kunnen dat je
			zou willen dat het escapen op een andere manier wordt uitgevoerd. Gebruik
			de setEscape() methode op controller niveau om Zend_View te laten weten
			welke escape callback te gebruiken.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// Maak een Zend_View instantie
$view = new Zend_View();

// vertel het htmlentities te gebruiken als escape callback
$view->setEscape('htmlentities');

// of vertel het een statische klassemethode te gebruiken als callback
$view->setEscape(array('EenClass', 'methodeNaam'));

// of zelfs een instantiemethode
$obj = new EenClass();
$view->setEscape(array($obj, 'methodeNaam'));

// en geef dan je view weer
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
			De callback functie of methode zou de waarde die ge-escaped moet
			worden als eerste parameter moeten nemen en alle andere parameters
			moeten optioneel zijn.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Template Systemen</title>
        
        <para>
			Alhoewel PHP zelf een machtig template systeem is vinden
			vele developpeurs dat het een tè machtig of complex systeem 
			is voor template designers. Daarom kan het view script
			gebruikt worden om een ander template objekt te instantiëren 
			en te manipuleren, zoals een PHPLIB-stijl template. Het
			view script voor dit soort aktiviteir zou er als volgt
			kunnen uitzien:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "boeklijst" => "boeklijst.tpl",
        "elkboek" => "elkboek.tpl",
    ));
    
    foreach ($this->boeken as $key => $val) {
        $tpl->set_var('auteur', $this->escape($val['author']);
        $tpl->set_var('titel', $this->escape($val['title']);
        $tpl->parse("boeken", "elkboek", true);
    }
    
    $tpl->pparse("output", "boeklijst");
} else {
    $tpl->setFile("geenboeken", "geenboeken.tpl")
    $tpl->pparse("output", "geenboeken");
}
?>]]>
        </programlisting>
        
        <para>
			Dit zouden de template bestanden zijn:
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- boeklijst.tpl -->
<table>
    <tr>
        <th>Auteur</th>
        <th>Titel</th>
    </tr>
    {boeken}
</table>

<!-- elkboek.tpl -->
    <tr>
        <td>{auteur}</td>
        <td>{titel}</td>
    </tr>

<!-- geenboeken.tpl -->
<p>Er zijn geen boeken af te beelden.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>View Helpers</title>
    
    <para>
		In je view scripts is het dikwijls nodig een aantal complexe
		functies steeds weer uit te voeren, bv: een datum formateren,
		formulierelementen genereren of aktielinks afbeelden. Je kan
		helper klassen gebruiken om deze gedragingen voor jou uit te
		voeren.
    </para>
    
    <para>
		Om een helper in jouw script te gebruiken moet je het oproepen
		door $this->helperName() te gebruiken. Achter de scène zal
		Zend_View de Zend_View_Helper klasse laden, een instantie van het
		objekt maken en zijn helperName() methode oproepen. De 
		instantie van het objekt is Behind the scenes, Zend_View will load the
        Zend_View_Helper_HelperName class, create an object instance of
        it, and call its helperName() method.  The object instance is
        blijvend in de Zend_View instantie, en is hergebruikt voor alle
		verdere oproepen aan $this->helperName().
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Initiële Helpers</title>
        
        <para>
			Zend_View komt met een set van initiële helper klassen die
			allemaal relatief zijn aan formulierelementen generatie. Ze
			doen elk automatisch de juiste output escaping. Ze zijn:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): Maakt een &lt;input
                type="button" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): maakt
                een &lt;input type="checkbox" /&gt; element.  De
                $options parameter is een array waar de eerste waarde de
                "checked" waarde is, en de tweede waarde de "unchecked" waarde
                (standaard waarden '1' en '0').  Als $value overeenkomt met de 
                "checked" waarde, zal de checkbox aangezet worden.
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): Maakt een &lt;input
                type="file" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): Maakt een &lt;input
                type="hidden" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): Maakt een &lt;input
                type="password" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): Maakt een serie
                &lt;input type="radio" /&gt; elementen, één voor elk van de
                $options elementen. In de $options array is de element
                key de radio waarde en de elementwaarde is de radiolabel.  
				De $value radio zal worden voorgeselecteerd.
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): Maakt een &lt;input
                type="reset" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): Maakt een
                &lt;select&gt;...&lt;/select&gt; blok met één 
                &lt;option&gt; voor elk van de $options elementen.  In
                de $options array is de element key de optiewaarde en de
				elementwaarde is de optielabel. De $value optie(s) 
				zal/zullen worden voorgeselecteerd.
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): Maakt een &lt;input
                type="submit" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): Maakt een &lt;input
                type="text" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): Maakt een
                &lt;textarea&gt;...&lt;/textarea&gt; blok.
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Deze gebruiken in je scripts is heel eenvoudig. Hier is een voorbeeld.
			Merk op dat het enige je hoeft te doen is ze op te roepen, ze laden en 
			instantiëren zichzelf wanneer dat nodig is.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// binnenin je view script verwijst $this naar de Zend_View instantie.
// 
// veronderstel dat je reeds een serie select opties hebt toegewezen onder de naam
// $landen als Array('us' => 'Verenigde Staten', 'il' =>
// 'Israël', 'be' => 'België', 'nl' => 'Nederland').
?>
<form action="aktie.php" method="post">
    <p><label>Jouw Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Je land:
        <?php echo $this->formSelect('country', 'be', null, $this->landen) ?>
    </label></p>
    <p><label>Zou je je graag inschrijven ?
        <?php echo $this->formCheckbox('opt_in', 'ja', null, array('ja', 'nee') ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
			Het resultaat van het view script zal op het volgende lijken:
        </para>
        
        <programlisting role="php"><![CDATA[<form action="aktie.php" method="post">
    <p><label>Jouw Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Je land:
        <select name="country">
            <option value="us">Verenigde Staten</option>
            <option value="il">Israël</option>
            <option value="be" selected="selected">België</option>
            <option value="nl">Nederland</option>
        </select>
    </label></p>
    <p><label>Zou je je graag inschrijven ?
        <input type="hidden" name="opt_in" value="nee" />
        <input type="checkbox" name="opt_in" value="ja" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Helper Paden</title>
        
        <para>
			Zoals met view scripts kan de controller een stapel van paden
			specifiëren waar Zend_View naar helper klassen moet zoeken.
			Standaard kijkt Zend_View in "Zend/View/Helper/*" voor helper
			klassen. Je kan Zend_View vertellen in andere plaatsen te kijken
			door de setHelperPath() en addHelperPath() methodes te gebruiken.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/pad/naar/meer/helpers');
?>]]>
        </programlisting>
        
        <para>
			In feite kan je paden "opstapelen" door de addHelperPath()
            methode te gebruiken. Terwijl je paden aan de stapel toevoegt
			zal Zned_Viewer steeds in het meest-recent-toegevoegde pad
			naar de gevraagde helper klasse zoeken. Dit laat je toe de
			initiële distributie van helpers uit te breiden (of zelfs te
			vervangen) door je eigen persoonlijke helpers.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/pad/naar/enige/helpers');
$view->addHelperPath('/ander/pad/naar/helpers');

// wanneer je nu $this->helperName() oproept zal Zend_View eerst kijken naar
// "/other/path/to/helpers/HelperName.php", dan naar
// "/path/to/some/helpers/HelperName", en uiteindelijk naar
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Je eigen Helpers schrijven</title>
        
        <para>
			Je eigen helpers schrijven is gemakkelijk. Volg gewoon deze regels:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
				De klassenaam moet Zend_View_Helper_* zijn, waar * de naam
				van de helper zelf is. Bijvoorbeeld, als je een helper
				genaamd "speciaalDoel" schrijft zou de klassenaam
				"Zend_View_Helper_SpeciaalDoel" zijn (let op de hoofdletters).
            </para></listitem>
            
            <listitem><para>
				De klasse moet een publieke methode hebben die overeenkomt
				met de helpernaam; dit is de methode die zal worden
				opgeroepen wanneer je template "$this->speciaalDoel()" 
				oproept. In ons "speciaalDoel" helpervoorbeeld zou de
				verplichte methodeverklaring "public function speciaalDoel()"
				zijn. 
            </para></listitem>
            
            <listitem><para>
				In het algemeen zou de klasse niets moeten printen, echo-en of
				op eender welke andere wijze output genereren. In plaats daarvan
				zou het waarden moeten terugsturen die kunnen worden geprint of
				ge-echod. De teruggestuurde waarden moeten korrekt worden 
				ge-escaped.
            </para></listitem>
            
            <listitem><para>
				De klasse moet in een bastand worden opgeslaan dat genoemd is
				naar de helper methode. Voortbouwend op ons "speciaalDoel" helper
				voorbeeld, moet het bestand "SpeciaalDoel.php" noemen.
            </para></listitem>
        </itemizedlist>
        
        <para>
			Plaats het helper klasse bestand ergens in je helper pad stapel en
			Zend_View zal het automatisch laden, instantiëren en uitvoeren.
        </para>
        
        <para>
			Hier is een voorbeeld van onze SpeciaalDoel helpercode:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpeciaalDoel {
    protected $_count = 0;
    public function speciaalDoel()
    {
        $this->_count++;
        $output = "Ik heb 'The Jerk' {$this->_count} keer gezien.";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
			Je kan de SpeciaalDoel helper zoveel keer oproepen als je
			wil een een view script; het zal éénmaal geïnstantieerd worden,
			en is dan blijvend aanwezig voor de gehele leefduur van de
			Zend_View instantie.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// denk eraan: in een view script verwijst $this naar de Zend_View instantie.
echo $this->speciaalDoel();
echo $this->speciaalDoel();
echo $this->speciaalDoel();
?>]]>
        </programlisting>
        
        <para>
            De output zou hierop moeten lijken:
        </para>
        <programlisting role="php"><![CDATA[Ik heb 'The Jerk' 1 keer gezien.
Ik heb 'The Jerk' 2 keer gezien.
Ik heb 'The Jerk' 3 keer gezien.]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->