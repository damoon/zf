<sect1 id="zend.pdf.introduction">
    <!-- @todo review and revise upon completion of refactoring -->
    <title>Inleiding.</title>
    <para>
	De <code>Zend_Pdf</code> module is een volledig in PHP 5 geschreven motor voor het manipuleren van PDF (Portable dokument Format).
	Het kan bestaande dokumenten laden, nieuwe dokumenten maken, dokumenten wijzigen en weer opslaan. Het laat dus eender
	welke PHP toepassing dynamisch PDF dokumenten aanmaken door bestaande templates aan te passen of dokumenten van de grond opnieuw
	op te bouwen.

    Zend_Pdf ondersteund de volgende mogelijkheden:
    <itemizedlist>
        <listitem>
            <para>
			Een nieuw dokument maken of een bestaand dokument opladen.
            <footnote>
                <para>
				PDF V1.4 (Acrobat 5) dokumenten zijn nu ondersteund.
                </para>
            </footnote>
            </para>
        </listitem>
        <listitem>
            <para>
			Een bepaalde revisie van een dokument bekomen.
            </para>
        </listitem>
        <listitem>
            <para>
			Pagina's binnenin het dokument manipuleren. De pagina orde veranderen, nieuwe pagina's
			toevoegen, pagina's verwijderen uit een dokument.
            </para>
        </listitem>
        <listitem>
            <para>
			Verschillende tekening primitieven (lijnen, rechthoeken, polygonen, cirkels, ellipsen en sektoren).
            </para>
        </listitem>
        <listitem>
            <para>
			Tekst schrijven met één van de 16 standaard lettertypes.
            </para>
        </listitem>
        <listitem>
            <para>
			Rotaties.
            </para>
        </listitem>
        <listitem>
            <para>
			Beelden tekenen.
            <footnote>
                <para>
				Enkel JPG beelden zijn onderteund voor de moment.
                </para>
            </footnote>
            </para>
        </listitem>
        <listitem>
            <para>
            Incremental PDF bestand update.
            </para>
        </listitem>
    </itemizedlist>
    </para>
</sect1>

<sect1 id="zend.pdf.create">
    <title>Maken en opladen van PDF dokumenten.</title>
    <para>
    De <code>Zend_Pdf</code> klasse stelt het PDF dokument zelf voor en verstrekt functionaliteit op dokument
	niveau.
    </para>

    <para>
	Om een nieuw dokument aan te maken moet je een nieuw <code>Zend_Pdf</code> objekt aanmaken.
    </para>

    <para>
    De <code>Zend_Pdf</code> klasse verstrekt ook twee statische methodes om bestaande
	PDF dokumentent te laden. Deze zijn de <code>Zend_Pdf::load()</code> en <code>Zend_Pdf::parse()</code> 
	methodes. Beiden geven een <code>Zend_Pdf</code> objekt als resultaat terug of werpen een
	fout op indien er een probleem optrad.
    </para>

    <example>
        <title>Maak een nieuw of laadt een bestaand PDF dokument.</title>
        <programlisting role="php"><![CDATA[<?php
...
// Maak een nieuw PDF dokument.
$pdf1 = new Zend_Pdf();

// Laadt een PDF dokument van een bestand.
$pdf2 = Zend_Pdf::load($fileName);

// Laadt een PDF dokument van een string.
$pdf3 = Zend_Pdf::parse($pdfString);
...
?>]]></programlisting>
    </example>

    <para>
	Het PDF bestandsformaat ondersteund incremental dokument update. Dus elke keer een
	dokument wordt upgedate word er een nieuwe revisie van het dokument gemaakt.
	De <code>Zend_Pdf</code> module ondersteund het opvragen van een bepaalde revisie.
    </para>
    <para>
	De revisie kan worden bepaald als een tweede parameter voor de <code>Zend_Pdf::load()</code> en
    <code>Zend_Pdf::parse()</code> methodes of worden aangvraagd door <code>Zend_Pdf::rollback()</code>
        <footnote>
            <para>
            De <code>Zend_Pdf::rollback()</code> methode moet ingeroepen worden voor er enige veranderingen
			aan het dokument worden doorgevoerd. Indien dit niet het geval is is het gedrag onvoorspelbaar.
            </para>
        </footnote>
    call.
    </para>

    <example>
        <title>Een bepaalde revisie van een dokument opvragen.</title>
        <programlisting role="php"><![CDATA[<?php
...
// Een vorige revisie van het PDF dokument opvragen.
$pdf1 = Zend_Pdf::load($fileName, 1);

// Een vorige revisie van het PDF dokument opvragen.
$pdf2 = Zend_Pdf::parse($pdfString, 1);

// De eerste revisie van het PDF dokument opvragen.
$pdf3 = Zend_Pdf::load($fileName);
$revisions = $pdf3->revisions();
$pdf3->rollback($revisions - 1);
...
?>]]></programlisting>
    </example>


</sect1>


<sect1 id="zend.pdf.save">
    <title>Wijzigen van het PDF dokument opslaan.</title>
    <para>
	Er kunnen twee methodes worden aangewend om gewijzigde PDF dokumenten op te slaan. Deze zijn de 
	<code>Zend_Pdf::save()</code> en <code>Zend_Pdf::render()</code> methodes.
    </para>

    <para>
    De <code>Zend_Pdf::save($filename, $updateOnly = false)</code> methode slaat het dokument in een bestand op.
	Indien $updateOnly TRUE is zal alleen een nieuw PDF segment aan het bestand worden toegevoegd. Zoniet wordt het
	bestand overschreven.
    </para>

    <para>
    <code>Zend_Pdf::render($filename, $updateOnly = false)</code> geeft het PDF dokument als een string terug. 
	Indien $updateOnly TRUE is, wordt alleen het nieuwe PDF bestandssegment teruggestuurd.
    </para>

    <example>
        <title>Een PDF dokument opslaan.</title>
        <programlisting role="php"><![CDATA[<?php
...
// PDF dokument laden.
$pdf = Zedn_Pdf::load($fileName);
...
// Dokument updaten
$pdf->save($fileName, true);
// Het dokument als een nieuw bestand opslaan
$pdf->save($newFileName, true);

// Het dokument als een string terugsturen.
$pdfString = $pdf->render();

...
?>]]></programlisting>
    </example>

</sect1>

<sect1 id="zend.pdf.pages">
    <title>Dokument pagina's.</title>
    <para>
	De PDF dokument pagina abstractie word afgehandled door de <code>Zend_Pdf_Page</code> klasse.
    </para>

    <para>
	PDF pagina's worden ofwel vanuit bestaande PDF dokumenten geladen of worden nieuw aangemaakt.
    </para>

    <para>
	Een nieuwe pagina kan worden verkregen door een nieuw <code>Zend_Pdf_Page</code> objekt te maken of
	door de <code>Zend_Pdf::newPage()</code> methode op te roepen, welke een <code>Zend_Pdf_Page</code> objekt
	terugggeeft. Het verschil is dat de <code>Zend_Pdf::newPage()</code> methode een nieuwe pagina in een
	bestaand PDF dokument maakt. Ongebonden pagina's kunnen niet in verschillende PDF dokumenten worden
	gebruikt, maar zijn iets sneller om aan te maken.
    <footnote>
        <para>
		Het is een limitatie van de V1.0 versie van de Zend_Pdf module. Deze limitatie zal verdijnen in volgende
		versies. Ongebondde pagina's zullen altijd een beter (optimaler) resultaat geven om pagina's te delen 
		onder dokumenten.
        </para>
    </footnote>Aan jou om de keuze te maken welke aanbreng je verkiest.
    </para>

    <para>
    De <code>Zend_Pdf::newPage()</code> methode en de <code>Zend_Pdf_Page</code> constructor aanvaarden dezelfde
    set parameters. Ofwel is het de paginagrootte ($x, $y) in points (1/72 duim), of een vooropgestelde konstante,
    welke een paginatype voorstelt:
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_A4</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_A4_LANDSCAPE</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_LETTER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_LETTER_LANDSCAPE</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
	Dokument pagina's worden opgeslaan in de publieke <code>$pages</code> eigenschap van de <code>Zend_Pdf</code> klasse.
	Dat is een array van <code>Zend_Pdf_Page</code> objekten. Het omvat de volledige set en de orde van de pagina's van het
	dokument en kan gemanipuleerd worden als een array:
    </para>

    <example>
        <title>PDF pagina management.</title>
        <programlisting role="php"><![CDATA[<?php
...
// De orde omkeren
$pdf->pages = array_reverse($pdf->pages);
...
// Een nieuw pagina toevoegen
$pdf->pages[] = new Zend_Pad_Page(Zend_Pdf_Const::PAGESIZE_A4);
// Een nieuwe pagina toevoegen
$pdf->pages[] = $pdf->newPage(Zend_Pdf_Const::PAGESIZE_A4);

// De aangeduide pagina verijderen.
unset($pdf->pages[$id]);

...
?>]]></programlisting>
    </example>

</sect1>

<sect1 id="zend.pdf.drawing">
    <title>Tekenen.</title>

    <sect2 id="zend.pdf.drawing.geometry">
        <title>Geometrie.</title>
        <para>
		PDF gebruikt net dezelfde geometrie als PostScript. Het begint van de beneden-linkse
		hoek van de pagina en is standaard afgemeten in points (1/72 van een duim).
        </para>
        <para>
		De grootte van een pagina kan worden bekomen van het pagina objekt:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
$width  = $pdfPage->getWidth();
$height = $pdfPage->getHeight();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.color">
        <title>Kleur.</title>
        <para>
		PDF heeft geweldig goede kleurweergavemogelijkheden. Zend_Pdf ondersteund grijsschalen, RGB en CMYK
		kleuren. Elk van deze notatis kan worden gebruikt daar waar een <code>Zend_Pdf_Color</code> objekt
		nodig is. De <code>Zend_Pdf_Color_GrayScale</code>, <code>Zend_Pdf_Color_RGB</code> en
        <code>Zend_Pdf_Color_CMYK</code> klassen verstrekken deze functionaliteit:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
// $grayLevel (float number). 0.0 (zwart) - 1.0 (wit)
$color1 = new Zend_Pdf_Color_GrayScale($grayLevel);

// $r, $g, $b (float numbers). 0.0 (minimum intensiteit) - 1.0 (maximum intensiteit)
$color2 = new Zend_Pdf_Color_RGB($r, $g, $b);

// $c, $m, $y, $k (float numbers). 0.0 (minimum intensiteit) - 1.0 (maximum intensiteit)
$color3 = new Zend_Pdf_Color_CMYK($c, $m, $y, $k);]]>
            </programlisting>
        </para>
    </sect2>


    <sect2 id="zend.pdf.drawing.shape-drawing">
        <title>Vormen tekenen</title>
        <para>
		Alle tekenoperaties kunnen worden uitgevoerd in de kontekst van een PDF pagina.
        </para>
        <para>
        De <code>Zend_Pdf_Page</code> klasse verstrekt een set van teken primitieven:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Een lijn trekken van x1,y1 naar x2,y2.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawLine($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Teken een rechthoek.
 *
 * Vultypes:
 * Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE - vul rechthoek en streep door (standaard)
 * Zend_Pdf_Const::SHAPEDRAW_STROKE      - streep rechthoek door
 * Zend_Pdf_Const::SHAPEDRAW_FILL        - vul rechthoek op
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param integer $fillType
 */
public function drawRectangle($x1, $y1, $x2, $y2, $fillType = Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Een polygoon tekenen.
 *
 * Als $fillType een Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE of Zend_Pdf_Const::SHAPEDRAW_FILL is,
 * zal de polygoon automatisch gesloten zijn.
 * Zie een gedtailleerde beschrijving van deze methodes in een PDF dokumentatie
 * (sectie 4.4.2 Path painting Operators, Opvulling)
 *
 * @param array $x  - array of float (the X coordinaten van de toppen)
 * @param array $y  - array of float (the Y coordinaten van de toppen)
 * @param integer $fillType
 * @param integer $fillMethod
 */
public function drawPolygon($x, $y,
                            $fillType = Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE,
                            $fillMethod = Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Teken een cirkel gecentreerd op x, y met een radius van radius.
 *
 * Hoeken zijn aangeduid in radianten
 *
 * Method signatures:
 * drawCircle($x, $y, $radius);
 * drawCircle($x, $y, $radius, $fillType);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle, $fillType);
 *
 *
 * Het is niet echt een cirkel want PDF ondersteund alleen Bezier krommen.
 * Maar het komt er héél dichtbij.
 * Het verschilt maximaal 0.00026 radianten van een cirkel
 * (op PI/8, 3*PI/8, 5*PI/8, 7*PI/8, 9*PI/8, 11*PI/8, 13*PI/8 and 15*PI/8 hoeken).
 * Op 0, PI/4, PI/2, 3*PI/4, PI, 5*PI/4, 3*PI/2 en 7*PI/4 zijn het exacte tangenten van cirkels.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param mixed $param4
 * @param mixed $param5
 * @param mixed $param6
 */
public function  drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Teken een ellips in een bepaalde rechthoek.
 *
 * Method signatures:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $fillType);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle, $fillType);
 *
 * Hoeken zijn aangeduid in radianten
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param mixed $param5
 * @param mixed $param6
 * @param mixed $param7
 */
public function drawEllipse($x1, $y1, $x2, $y2, $param5 = null, $param6 = null, $param7 = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.text-drawing">
        <title>Tekst schrijven.</title>
        <para>
		Ook tekst wordt geschreven in de paginakontekst:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Teken een regel tekst op de bepaalde plaats.
 *
 * @param string $text
 * @param float $x
 * @param float $y
 * @throws Zend_Pdf_Exception
 */
public function drawText($text, $x, $y );]]>
            </programlisting>
        </para>
        <para>
		De huidige lettertype en lettertypegrootte worden gebruilt om tekst te schrijven. Zie een gedetailleerde beschrijving
		hieronder.
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.using-fonts">
        <title>lettertypes gebruiken.</title>
        <para>
        De <code>Zend_Pdf_Page::drawText()</code> methode gebruikt de aktieve lettertype die kan gezet worden door
        de <code>Zend_Pdf_Page::drawText()</code> methode:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Aktief lettertype zetten.
 *
 * @param Zend_Pdf_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
		PDF ondersteunt Type1, TrueType, Type3 and komposiet lettertypes. Er zijn ook 14 standaard Type1 lettertypes
        voorzien in PDF. De Zend_Pdf module verstrekt op dit moment alleen de 14 standaard lettertypes. Die kunnen
		bekomen worden door de <code>Zend_Pdf_Font_Standard</code> klasse te gebruiken. Een bepaalde lettertype
		moet worden gebruilt als argument:
        </para>
        <example>
            <title>Een standaard lettertype maken.</title>
            <programlisting role="php"><![CDATA[<?php
...
// Een nieuw lettertype maken
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA);

// lettertype aktief maken
$pdfPage->setFont($font, 36);
...
?>]]>
            </programlisting>
        </example>
        <para>
		De <code>Zend_Pdf_Const</code> verstrekt konstanten voor de 14 standaard lettertypes:
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_ROMAN</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_SYMBOL</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_ZAPFDINGBATS</para>
            </listitem>
        </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.image-drawing">
        <title>Beelden tekenen.</title>
        <para>
        De <code>Zend_Pdf_Page</code> klasse voorziet de <code>drawImage()</code> methode om beelden te tekenen:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Teken een beel op de bepaalde positie.
 *
 * @param Zend_Pdf_Image $image
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawImage(Zend_Pdf_Image $image, $x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
		Beeldobjekten worden door afstammelingen van de <code>Zend_Pdf_Image</code> klasse voorgesteld.
        </para>
        <para>
		Alleen JPG beelden zin momenteel ondersteund:
        </para>
        <example>
            <title>Beelden tekenen.</title>
            <programlisting role="php"><![CDATA[<?php
...
$image = new Zend_Pdf_Image_JPEG('my_image.jpg');
$pdfPage->drawImage($image, 100, 100, 400, 300);;
...
?>]]>
            </programlisting>
        </example>

        <para>
            <emphasis>Belangrijk! De <code>Zend_Pdf_Image_JPEG</code> klasse heeft de PHP GD extensie nodig.</emphasis>
        </para>
        <para>
			Zie de PHP dokumentatie voor meer informatie
            (<ulink url="http://www.php.net/manual/nl/ref.image.php">http://www.php.net/manual/nl/ref.image.php</ulink>).
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.line-drawing-style">
        <title>Lijnstijl tekenen</title>
        <para>
		De lijnstijl wordt gedefinieerd door lijndikte, lijnkleur en lijnstippenpatroon. Al deze parameters kunnen door de <code>Zend_Pdf_Page</code> klasse methodes worden aangegeven:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/** Zet lijnkleur. */
public function setLineColor(Zend_Pdf_Color $color);

/** Zet lijndikte. */
public function setLineWidth(float $width);

/**
 * Zet lijnstippenpatroon.
 *
 * Het patroon ($pattern) is een Array van floats: array(on_length, off_length, on_length, off_length, ...)
 * Faze ($phase) is shift vanaf het begin van de lijn.
 *
 * @param array $pattern
 * @param array $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.fill-style">
        <title>Vulstijl.</title>
        <para>
        De <code>Zend_Pdf_Page::drawRectangle()</code>, <code>Zend_Pdf_Page::drawPoligon()</code>,
        <code>Zend_Pdf_Page::drawCircle()</code> en <code>Zend_Pdf_Page::drawEllipse()</code> methodes aanvaarden
        het optioneel argument <code>$fillType</code>. Dit kan het volgende zijn:
        </para>

        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_STROKE - streep</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_FILL - alleen opvullen</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE - opvullen en doorstrepen (standaard)</para>
            </listitem>
        </itemizedlist>

        <para>
        De <code>Zend_Pdf_Page::drawPoligon()</code> methode aanvaard ook een optionele parameter
        <code>$fillMethod</code>:
        </para>
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING (standaard)</para>
                <para>
                <citetitle>De PDF referentie</citetitle> beschrijft deze regel als volgt (originele tekst):
                <blockquote>
The nonzero winding number rule determines whether a given point is inside a
path by conceptually drawing a ray from that point to infinity in any direction
and then examining the places where a segment of the path crosses the ray. Starting
with a count of 0, the rule adds 1 each time a path segment crosses the ray
from left to right and subtracts 1 each time a segment crosses from right to left.
After counting all the crossings, if the result is 0 then the point is outside the path;
otherwise it is inside.

Note: The method just described does not specify what to do if a path segment coincides
with or is tangent to the chosen ray. Since the direction of the ray is arbitrary,
the rule simply chooses a ray that does not encounter such problem intersections.
For simple convex paths, the nonzero winding number rule defines the inside
and outside as one would intuitively expect. The more interesting cases are those
involving complex or self-intersecting paths like the ones shown in Figure 4.10
(in a PDF Reference).

For a path consisting of a five-pointed star, drawn with five connected straight
line segments intersecting each other, the rule considers the inside to be the entire
area enclosed by the star, including the pentagon in the center. For a path composed
of two concentric circles, the areas enclosed by both circles are considered
to be inside, provided that both are drawn in the same direction. If the circles are
drawn in opposite directions, only the "doughnut" shape between them is inside,
according to the rule; the "doughnut hole" is outside.
            </blockquote>
            </para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FILLMETHOD_EVENODD</para>
                <para>
                <citetitle>De PDF referentie</citetitle> beschrijft deze regel als volgt (originele tekst):
                <blockquote>
An alternative to the nonzero winding number rule is the even-odd rule. This rule
determines the "insideness" of a point by drawing a ray from that point in any
direction and simply counting the number of path segments that cross the ray,
regardless of direction. If this number is odd, the point is inside; if even, the point
is outside. This yields the same results as the nonzero winding number rule for
paths with simple shapes, but produces different results for more complex
shapes.

Figure 4.11 (in a PDF Reference) shows the effects of applying the even-odd rule
to complex paths. For the five-pointed star, the rule considers the triangular
points to be inside the path, but not the pentagon in the center. For the two
concentric circles, only the "doughnut" shape between the two circles is considered inside,
regardless of the directions in which the circles are drawn.
                </blockquote>
            </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.pdf.drawing.rotations">
        <title>Rotaties.</title>
        <para>
		Een PDF pagina kan geroteerd worden zolang er nog niets op werd geschreven of getekend.
		Het word gedaan door de <code>Zend_Pdf_Page::rotate()</code> methode:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * De pagina rond het punt ($x, $y) roteren met de aangeduide hoek (in radianten).
 *
 * @param float $angle
 */
public function rotate($x, $y, $angle);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.save-restore">
        <title>Opslaan/herstellen van een grafische staat.</title>
        <para>
		Op eender welk moment kan een grafische staat van een pagina (huidig lettertype, lettertype
		grootte, lijnkleur, vulkleur, lijnstijl, paginarotatie, clip area) worden opgeslaan
		en terug worden hersteld. Het opsla-operatie slaat de data in een grafische staatstapel op,
		de hersteloperatie haalt ze er weer vandaan.
        </para>
        <para>
		Dit zijn de <code>Zend_Pdf_Page</code> klassemethodes om deze operaties uit te voeren:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * De grafische staat van deze pagina opslaan.
 * Dit neemt een "foto" van de huidige stijl, positie en clipping area en
 * enige aangebrachte rotatie/vertaling/schaling.
 */
public function saveGS();

/**
 * De laatst opgeslagen grafische staat herstellen.
 */
public function restoreGS();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.clipping">
        <title>Clipping draw area.</title>
        <para>
		PDF en de Zend_Pdf module ondersteunen clippen van een teken area.
		De aktieve clip area begrenst de regios van de pagina die door tekenoperaties worden beïnvloed.
		Initieel is het de volledige pagina.
        </para>
        <para>
        De <code>Zend_Pdf_Page</code> klasse verstrekt een set methodes voor clipoperaties.
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Rechthoekig clippen.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function clipRectangle($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Polygoon clippen.
 *
 * @param array $x  - array of float (the X co-ordinates of the vertices)
 * @param array $y  - array of float (the Y co-ordinates of the vertices)
 * @param integer $fillMethod
 */
public function clipPolygon($x, $y, $fillMethod = Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Cirkel clippen.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipCircle($x, $y, $radius, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Ellips clippen.
 *
 * Method signatures:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 *
 * @todo process special cases with $x2-$x1 == 0 or $y2-$y1 == 0
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipEllipse($x1, $y1, $x2, $y2, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.styles">
        <title>Stijlen.</title>
        <para>
        De <code>Zend_Pdf_Style</code> klasse voorziet in stijlen
        </para>
        <para>
		Stijlen kunnen gebruikt worden om een set grafische parameters op te slaan en ze toe te brengen op een
		PDF pagina in één operatie:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Zet de stijl voor de komende tekenoperaties voor deze pagina
 *
 * @param Zend_Pdf_Style $style
 */
public function setStyle(Zend_Pdf_Style $style);

/**
 * Geef de stijl terug en breng ze op de pagina aan.
 *
 * @return Zend_Pdf_Style|null
 */
public function getStyle();]]>
            </programlisting>
        </para>

        <para>
        De <code>Zend_Pdf_Style</code> klasse voorziet in een set methodes om verschillende grafische
		staat parameters te zetten of te bekomen:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Zet de lijnkleur.
 *
 * @param Zend_Pdf_Color $color
 */
public function setLineColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom de lijnkleur.
 *
 * @return Zend_Pdf_Color|null
 */
public function getLineColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Zet de lijndikte.
 *
 * @param float $width
 */
public function setLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom de lijndikte.
 *
 * @return float
 */
public function getLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Zet het lijnstippenpatroon
 *
 * @param array $pattern
 * @param float $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom het lijnstippenpatroon
 *
 * @return array
 */
public function getLineDashingPattern();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom de lijnstippenfaze
 *
 * @return float
 */
public function getLineDashingPhase();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Zet de vulkleur
 *
 * @param Zend_Pdf_Color $color
 */
public function setFillColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom de vulkleur
 *
 * @return Zend_Pdf_Color|null
 */
public function getFillColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Zet aktief lettertype
 *
 * @param Zend_Pdf_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Wijzig huidige lettertype grootte
 *
 * @param float $fontSize
 */
public function setFontSize($fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom huidig lettertype
 *
 * @return Zend_Pdf_Font $font
 */
public function getFont();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Bekom huidige lettertype grootte
 *
 * @return float $fontSize
 */
public function getFontSize();]]>
            </programlisting>
        </para>
    </sect2>

</sect1>

<sect1 id="zend.pdf.usage">
    <title>Een gebruiksvoorbeeld voor de Zend_Pdf module.</title>
    <para>
	Deze sektie geeft een voorbeeld van het gebruik van de Zend_Pdf module.
    </para>

    <para>
	Dit voorbeeld kan teruggevonden worden in een <filename>demos/Zend/Pdf/demo.php</filename> bestand.
    </para>
    <para>
	Er is ook een <filename>test.pdf</filename> bestand dat met dit voorbeeld kan gebruikt worden om te testen.
    </para>

    <example>
        <title>Zend_Pdf module voorbeeld.</title>
        <programlisting role="php"><![CDATA[<?php
/**
 * @package Zend_Pdf
 * @subpackage demo
 */

/** Zend_Pdf */
require_once 'Zend/Pdf.php';

if (!isset($argv[1])) {
    echo "USAGE: php demo.php <pdf_file> [<output_pdf_file>]\n";
    exit;
}

if (file_exists($argv[1])) {
    $pdf = Zend_Pdf::load($argv[1]);
} else {
    $pdf = new Zend_Pdf();
}

//------------------------------------------------------------------------------------
// Draai pagina orde om
$pdf->pages = array_reverse($pdf->pages);

// Maak een nieuwe stijl
$style = new Zend_Pdf_Style();
$style->setFillColor(new Zend_Pdf_Color_RGB(0, 0, 0.9));
$style->setLineColor(new Zend_Pdf_Color_GrayScale(0.2));
$style->setLineWidth(3);
$style->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
$style->setFont(new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA_BOLD), 32);

// Maak een nieuw beeldobjekt
$stampImage = new Zend_Pdf_Image_JPEG(dirname(__FILE__) . '/stamp.jpg');

// Markeer de pagina als gewijzigd
foreach ($pdf->pages as $page){
    $page->saveGS();
    $page->setStyle($style);
    $page->rotate(0, 0, M_PI_2/3);

    $page->saveGS();
    $page->clipCircle(550, -10, 50);
    $page->drawImage($stampImage, 500, -60, 600, 40);
    $page->restoreGS();

    $page->drawText('Modified by Zend Framework!', 150, 0);
    $page->restoreGS();
}

// Voeg een door het Zend_Pdf objekt aangemaakte nieuwe pagina toe (de pagina wordt aan het
// gespecifieerde dokument gelinkt)
$pdf->pages[] = ($page1 = $pdf->newPage('A4'));

// Voeg een door het Zend_Pdf_Page objekt aangemaakte pagina toe (de pagina is niet aan het
// gespecifieerde dokument gelinkt)
$pdf->pages[] = ($page2 = new Zend_Pdf_Page(Zend_Pdf_Const::PAGESIZE_LETTER_LANDSCAPE));

// Maak een nieuw lettertype
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA);

// Maak het lettertype aktief en schrijf tekst
$page1->setFont($font, 36);
$page1->drawText('Helvetica 36 text string', 60, 500);

// Gebruik het lettertype objekt voor een andere pagina
$page2->setFont($font, 24);
$page2->drawText('Helvetica 24 text string', 60, 500);

// Gebruik een ander lettertype
$page2->setFont(new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_TIMES_ROMAN), 32);
$page2->drawText('Times-Roman 32 text string', 60, 450);

// Teken een rechthoek
$page2->setFillColor(new Zend_Pdf_Color_GrayScale(0.8));
$page2->setLineColor(new Zend_Pdf_Color_GrayScale(0.2));
$page2->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
$page2->drawRectangle(60, 400, 400, 350);

// Teken een cirkel
$page2->setLineDashingPattern(Zend_Pdf_Const::LINEDASHING_SOLID);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 0));
$page2->drawCircle(85, 375, 25);

// Teken sektoren
$page2->drawCircle(200, 375, 25, 2*M_PI/3, -M_PI/6);
$page2->setFillColor(new Zend_Pdf_Color_CMYK(1, 0, 0, 0));
$page2->drawCircle(200, 375, 25, M_PI/6, 2*M_PI/3);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 1, 0));
$page2->drawCircle(200, 375, 25, -M_PI/6, M_PI/6);

// Teken een ellips
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 0));
$page2->drawEllipse(250, 400, 400, 350);
$page2->setFillColor(new Zend_Pdf_Color_CMYK(1, 0, 0, 0));
$page2->drawEllipse(250, 400, 400, 350, M_PI/6, 2*M_PI/3);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 1, 0));
$page2->drawEllipse(250, 400, 400, 350, -M_PI/6, M_PI/6);

// Teken en vul een polygoon
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 1));
$x = array();
$y = array();
for ($count = 0; $count < 8; $count++) {
    $x[] = 140 + 25*cos(3*M_PI_4*$count);
    $y[] = 375 + 25*sin(3*M_PI_4*$count);
}
$page2->drawPolygon($x, $y,
                    Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE,
                    Zend_Pdf_Const::FILLMETHOD_EVENODD);

// Teken een lijn
$page2->setLineWidth(0.5);
$page2->drawLine(60, 375, 400, 375);
//------------------------------------------------------------------------------------

if (isset($argv[2])) {
    $pdf->save($argv[2]);
} else {
    $pdf->save($argv[1], true /* update */);
}
]]></programlisting>
    </example>

</sect1>


<!--
vim:se ts=4 sw=4 et:
-->