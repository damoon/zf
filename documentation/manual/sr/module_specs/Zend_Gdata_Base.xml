<sect1 id="zend.gdata.base">
    <title>Using Google Base</title>

    <para>
        The Google Data API interface to Google Base allows developers to
        write applications to perform search queries against the
        Google Base database of products, services, and events.
        You can also input and manage Google Base entries programmatically.
    </para>

    <para>
        See
        <ulink url="http://code.google.com/apis/base/">http://code.google.com/apis/base/</ulink>
        for more information on the Google Base API.
    </para>

    <sect2 id="zend.gdata.base.query">
        <title>Querying Base data</title>

        <para>
            You can use the <code>setQuery()</code> method to specify
            full-text search terms for a Google Base query.
        </para>

    <programlisting role="php"><![CDATA[<?php
$gdataBase = new Zend_Gdata_Base();
$gdataBase->setQuery('digital camera');
$feed = $gdataBase->getBaseFeed();
?>]]></programlisting>

        <para>
            See the documentation for <link linkend="zend.feed.introduction">Zend_Feed</link>
            for more information on how to use this object.
        </para>

        <para>
            Google Base also supports attribute-based query terms.
            You can specify additional terms using the
            <code>addAttribute()</code> method.
            The parameters of this method are attribute name,
            attribute value, and an optional operator.
            The default operator is ':' which is interpreted as string
            equality.
        </para>

        <para>
            Attribute queries can be combined with full-text queries.
        </para>

    <programlisting role="php"><![CDATA[<?php
$gdataBase = new Zend_Gdata_Base();
$gdataBase->setQuery('digital camera');
$gdataBase->addAttributeQuery('price', '50 USD', '<');
$feed = $gdataBase->getBaseFeed();
?>]]></programlisting>

        <para>
            You can add multiple attributes using the <code>addAttributeQuery()</code>
            method, even multiple attribute terms for the same attribute name.
        </para>

        <para>
            You can clear attribute query terms using the
            <code>unsetAttributeQuery()</code> method.  The parameter is the
            attribute name.  If you have added multiple terms for the same 
            attribute name, all of them are cleared.  If you specify no
            attribute name in the parameter to this method, all attribute
            query terms are cleared.
        </para>

        <para>
            The <code>addAttribute()</code> method does not
            support advanced expression syntax including parentheses, 
            negation, and boolean operators.  You can enter such
            expressions as a string, using the <code>setQuery()</code> method.
        </para>

    <programlisting role="php"><![CDATA[<?php
$gdataBase = new Zend_Gdata_Base();
$gdataBase->setQuery('digital camera ( [price < 50 USD] | [location: @"Mountain View, CA 94043"] )');
$feed = $gdataBase->getBaseFeed();
?>]]></programlisting>

        <para>
            You can sort the results of feeds by different criteria.
            You can specify other sorting criteria using the
            <code>setOrderby()</code> method.
            Typical values are <code>modification-time</code>,
            <code>name</code>, or <code>relevancy</code>.
            You can also specify advanced ranking logic, using the
            <ulink url="http://code.google.com/apis/base/ranking-lang-spec.html">Ranking Language</ulink>.
            By default, the order entries are returned is by
            <code>relevancy</code>.
        </para>

    </sect2>

    <sect2 id="zend.gdata.base.post">
        <title>Updating Base data</title>

        <para>
            Updating data requires you to establish two things in your
            Zend_Gdata_Base object:  an authenticated Http Client,
            and a developer key.
        </para>

        <para>
            A developer key is typically a 54-character alphanumeric string.
            See <ulink url="http://code.google.com/apis/base/starting-out.html#authDev">http://code.google.com/apis/base/starting-out.html#authDev</ulink>
            for instructions on acquiring a developer key.
        </para>

        <para>
            You can set the developer key using the optional second parameter
            in the constructor for Zend_Gdata_Base.  You can also set the
            developer key of an existing object, using the
            <code>setDeveloperKey()</code> method.
            Once you set the developer key for the Zend_Gdata_Base object,
            the key is sent automatically in subsequent requests.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdataBase = new Zend_Gdata_Base($authenticatedHttpClient);
$gdataBase->setDeveloperKey($myDeveloperKey);
?>]]></programlisting>

        <para>
            Posting enties to Google Base is done using the <code>post()</code>
            method that is common to Zend_Gdata classes.  See the documentation
            for the Google Base Data API for details on the correct elements
            of the XML entries.
        </para>

    </sect2>

    <sect2 id="zend.gdata.base.metadata">
        <title>Querying Base metadata</title>

        <para>
            You can query feeds of Google Base itemtypes using the
            <code>getItemTypesFeed()</code> method.  The first parameter
            to this method is a locale, for instance "en_US".
            The second parameter is optional; it names an item type.
            If you specify an item type, the method returns a feed of
            attributes for that item type.  If you do not specify an
            item type, the method returns a feed of all item types.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdataBase = new Zend_Gdata_Base();

// Get list of all item types
$itemTypes = $gdataBase->getItemTypesFeed('en_US');

// Get list of attributes for the 'jobs' item type.
$jobsAttributes = $gdataBase->getItemTypesFeed('en_US', 'jobs');
?>]]></programlisting>

        <para>
            You can query statistics about a given item type, such as
            the number of Google Base entries that use individual values
            for each attribute.  Use the <code>getItemTypeAttributesFeed()</code>
            method for this type of query.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdataBase = new Zend_Gdata_Base();
$jobsAttributesStatistics = $gdataBase->getItemTypeAttributesFeed('jobs');
?>]]></programlisting>

    </sect2>


</sect1>
