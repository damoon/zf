<sect1 id="zend.controller.providedsubclasses">
    <title>提供されるサブクラス群</title>

    <sect2 id="zend.controller.providedsubclasses.introduction">
        <title>導入</title>

        <para>
            Zend Framework では、デフォルトで提供されるクラス以外の選択肢も用意しています。
            たとえばリクエストオブジェクト、ルータ、
            そしてレスポンスオブジェクトなどについて別の選択肢があります。
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.request.http">
        <title>Zend_Controller_Request_Http</title>

        <sect3 id="zend.controller.providedsubclasses.request.http.introduction">
            <title>導入</title>

            <para>
                <code>Zend_Controller_Request_Http</code> は、HTTP
                環境で使用するリクエストオブジェクトです
                <code>Zend_Controller_Request_Http</code> はデフォルトのリクエストクラスであり、
                <code>Zend_Controller_Dispatcher</code> で用いられます。
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.dataaccess">
            <title>リクエストデータへのアクセス</title>

            <para>
                <code>Zend_Controller_Request_Http</code> は、関連する値へのアクセスをカプセル化します。
                たとえばコントローラやアクションルータの変数のキー名や値、
                URI からパースした追加のパラメータの値などにアクセスできます。
                <code>Zend_Controller_Request_Http</code> のプロキシとして動作することで、
                スーパーグローバルの値にパブリックメンバとしてアクセスしたり、
                現在のベース URL やリクエスト URI を管理することもできます。
                スーパーグローバルの値はリクエストオブジェクトに設定することはできません。
                そのかわりに setParam/getParam メソッドを使用して、
                パラメータを設定あるいは取得します。
            </para>

            <note>
                <title>スーバーグローバルデータ</title>
                <para>
                    <code>Zend_Controller_Request_Http</code> のパブリックプロパティを使用して
                    スーパーグローバルデータにアクセスする際に注意すべき点は、
                    プロパティ名 (スーバーグローバル配列のキー)
                    は以下の優先順位でマッチするということです。
                    1. GET, 2. POST, 3. COOKIE, 4. SERVER, 5. ENV.
                </para>
            </note>

            <para>
                特定のスーパーグローバルにアクセスするには、
                パブリックメソッドを使用する方法もあります。たとえば、
                <code>$_POST['user']</code> の値を取得するには、リクエストオブジェクト上で
                <code>getPost('user')</code> をコールします。
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.baseurl">
            <title>ベース URL およびサブディレクトリ</title>

            <para>
                <code>Zend_Controller_Request_Http</code> は、
                サブディレクトリで Zend_Controller_Router_Rewrite を使用することができます。
                Zend_Controller_Request_Http は自動的にベース URL を検出し、
                それを適切に設定します。
            </para>

            <para>
                たとえば、<code>index.php</code> をウェブサーバのサブディレクトリ
                <code>/projects/myapp/index.php</code> においた場合は、ベース URL
                (rewrite base) は <code>/projects/myapp</code> にしなければなりません。
                マッチするルートを見つける前に、この文字列がパスの先頭から取り除かれます。
                これにより、すべてのルートに余計な文字を追加する必要がなくなります。
                ルート <code>'user/:username'</code> は、
                <code>http://localhost/projects/myapp/user/martel</code> および
                <code>http://example.com/user/martel</code> の両方にマッチするようになります。
            </para>

            <note>
                <title>URL の検出は大文字小文字を区別します</title>
                <para>
                    自動的なベース URL の検出処理は大文字小文字を区別します。そのため、
                    URL とファイルシステムのサブディレクトリ名が確実に一致する必要があります
                    (たとえ Windows マシンであっても同様です)。大文字小文字が一致しなかった場合は
                    noRoute アクションがコールされます。
                </para>
            </note>

            <para>
                ベース URL の検出に失敗する場合は、
                <code>Zend_Controller_Request_Http</code> クラス、あるいは
                <code>Zend_Controller_Front</code> クラスの
                <code>setBaseUrl()</code> メソッドを使用して
                ベースパスを上書き指定することができます。
                一番簡単な方法は <code>Zend_Controller_Front</code> で設定することです。
                この設定はリクエストオブジェクトに引き継がれます。
                独自のベース URL を設定する例を示します。
            </para>

            <programlisting role="php"><![CDATA[
/**
 * Zend_Controller_Front で独自のベース URL を指定することによるリクエストのディスパッチ
 */
$router     = new Zend_Controller_Router_Rewrite();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // ベース URL を指定します!
$response   = $controller->dispatch();]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.rewriterouter">
        <title>Zend_Controller_Router_Rewrite</title>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Controller_Router_Rewrite</code> は、標準のルータです。
                ルーティングとは、URI (ベース URL から取得した URI の一部)
                を展開し、どのコントローラのどのアクションが
                リクエストを処理するのかを決める処理のことです。
                コントローラの値やアクション、そしてその他のパラメータが
                <code>Zend_Controller_Request_Http</code> オブジェクトにまとめられます。
                このオブジェクトを処理するのが <code>Zend_Controller_Dispatcher_Standard</code> です。
                ルーティングが行われるのは一度だけ、すなわちリクエストを最初に受け取ってから
                最初のコントローラに処理が渡される際だけです。
            </para>

            <para>
                <code>Zend_Controller_Router_Rewrite</code> は、mod_rewrite 風の機能を
                PHP だけで実現できるように設計されています。
                この処理は Ruby on Rails のルーティングを多少参考にしており、
                ウェブサーバの URL 書き換えに関する前提知識を必要としません。
                以下の単純な mod_rewrite ルール (のいずれか) で動作するように設計されています。
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

            <para>
            あるいは
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>

            <para>
                Rewrite ルータを IIS ウェブサーバで使用するには
                <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink>
                を Isapi 拡張モジュールとしてインストールします。そして次のようなルールを記述します。
            </para>

            <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

            <note>
                <title>IIS Isapi_Rewrite</title>
                <para>
                    IIS を使用すると、<code>$_SERVER['REQUEST_URI']</code>
                    が存在しないか空の文字列に設定されます。このような場合、
                    <code>Zend_Controller_Request_Http</code> は
                    <code>$_SERVER['HTTP_X_REWRITE_URL']</code> の値を使用します。これは
                    Isapi_Rewrite 拡張モジュールが設定します。
                </para>
            </note>

            <para>Lighttpd の場合は、次のようなルールを使用します。</para>

            <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.usage">
            <title>ルータの使用法</title>

            <para>
                Rewrite ルータを適切に使用するには、まずそのインスタンスを作成し、
                次にユーザ定義のルーティングを追加し、それをコントローラに注入しなければなりません。
                以下にコードの例を示します。
            </para>

            <programlisting role="php"><![CDATA[
/* ルータを作成します */

$router = $ctrl->getRouter(); // デフォルトで rewrite ルータを返します
$router->addRoute(
    'user',
    new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.basic">
            <title>基本的なルーティング</title>

            <para>
                RewriteRouter で最も重要なのが、ユーザ定義のルーティングです。
                これは、RewriteRouter の addRoute メソッドをコールして作成します。
                このメソッドに、<code>Zend_Controller_Router_Route</code>
                の新しいインスタンスを渡します。
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

            <para>
                最初のパラメータがこのルートの名前です。現在は多少冗長性が残ってしまっていますが、
                将来は、URL ビューヘルパーの中でこれを使用し、ビュー内で簡単に
                URL を生成できるようになる予定です。
                ここで定義したルートを使用する方法も知っておく必要があるでしょう。
                事前に定義したルートを取得するには、RewriteRouter の getRoute
                メソッドを使用します。二番目のパラメータは、
                <code>Zend_Controller_Router_Route</code> のインスタンスです。
            </para>

            <para>
                <code>Zend_Controller_Router_Route</code> のコンストラクタの最初のパラメータは、
                その URL に関連付けるルートです。
                例えば、上の例で示したルートは <code>http://example.com/user/martel</code>
                に対応します。ルート内のコロンは URL 変数を意味します。ルーティングに成功すると、
                これらの変数は Zend_Controller_Request に注入されます。
                その後は Zend_Controller_Request::getParam や
                Zend_Controller_Action::_getParam メソッドでアクセスできるようになります。
                今回の例では、username という名前のパラメータに
                'martel' という値が設定されます。
            </para>

            <note>
                <title>定義の順番</title>
                <para>
                    一番最後にマッチしたルートが適用されるので、
                    汎用的なルートは最初に定義するようにしましょう。
                </para>
            </note>

            <note>
                <title>許可される文字</title>
                <para>
                    現在の実装では、変数の識別子としてスラッシュ (/)
                    以外のあらゆる文字を使用可能ですが、できるだけ PHP
                    の変数で使用可能な範囲の文字のみを使用することを強く推奨します。
                    この実装は将来変更される予定ですので、(PHP
                    の変数で使用できない文字を用いていると)
                    バグを引き起こす可能性があります。
                </para>
            </note>

            <para>
                ルートで使用される変数のうち、':controller' および ':action'
                のふたつは特別な扱いとなります。これらの特殊変数は、URL から
                コントローラとアクションを決定するために使用されます。
                ':action' 変数は、そのルートあるいはデフォルトパラメータとして
                常に定義されていなければなりません。
                ':controller' 変数がもし定義されていない場合は、デフォルト値として
                IndexController が使用されます。
            </para>

            <note>
                <title>特殊変数</title>
                <para>
                    これらの特殊変数の名前を変更することもできます。その場合は
                    <code>Zend_Controller_Request_Http</code> の
                    setControllerKey メソッドや setActionKey メソッドを使用します。
                </para>
            </note>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'user', new Zend_Controller_Router_Route(':controller/:action')
);]]></programlisting>

            <para>
                このルートが定義されているときにブラウザで
                'http://example.com/news/latest' を選択すると、
                <code>Zend_Controller_Dispatcher</code> は NewsController クラスの
                latestAction を起動します。
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.variable-defaults">
            <title>変数のデフォルト値</title>

            <para>
                ルートの中の変数には、すべてデフォルト値を設定することができます。
                デフォルト値を設定するには、<code>Zend_Controller_Router_Route</code>
                のコンストラクタの二番目のパラメータを使用します。
                このパラメータは配列形式となります。配列のキーに変数名、
                そのキーに対応する値としてデフォルト値を設定します。
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive', new Zend_Controller_Router_Route('archive/:year', array('year' => 2006))
);]]></programlisting>

            <para>
                ちょっとわかりにくいかもしれませんが、このルートは例えば
                'http://example.com/archive/2005' および
                'http://example.com/archive' にマッチします。後者の場合、変数 year
                の値は 2006 となります。
            </para>

            <para>
                上の例は、単に year 変数の内容をリクエストに注入するだけのものです。
                コントローラやアクションを設定していないので、ルーティングは行われません。
                この例が使い物になるようにするには、
                コントローラとアクションのデフォルト値を設定しなければなりません。
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive',
    new Zend_Controller_Router_Route('archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show')
);]]></programlisting>

            <para>
                このルートは、ArchiveController の showAction を実行します。
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.variable-requirements">
            <title>変数の制限</title>

            <para>
                <code>Zend_Controller_Router_Route</code> に三番目のパラメータを追加し、
                変数に関する制限事項を設定することができます。
                この制限は、正規表現で設定します。
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive',
    new Zend_Controller_Router_Route('archive/:year', array('year' => 2006), array('year' => '\d+'))
);]]></programlisting>

            <note>
                <title>ルートのマッチング</title>
                <para>
                    Ruby on Rails とは異なり、ZF の RewriteRouter は
                    三番目のパラメータの制限を満たさない場合にもルートにマッチし、
                    デフォルト値を使用するようになっています。
                    そのため、URL 'http://example.com/archive/test' は上のルートにマッチし、
                    year は 2006 に設定されます。この機能は将来変更される予定で、
                    このマニュアルを書いている時点ではまだ議論中です。
                </para>
            </note>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.rewritebase">
            <title>ベース URL およびサブディレクトリ</title>

            <para>
                Rewrite ルータはサブディレクトリ内でも使用可能です。
                ベース URL の自動検出が <code>Zend_Controller_Request_Http</code>
                によって行われます。
            </para>

            <para>
                ベース URL の検出に失敗する場合は、
                <code>Zend_Controller_Request_Http</code> のメソッド <code>setBaseUrl()</code>
                を使用してベースパスを上書き指定することができます
                (<xref linkend="zend.controller.providedsubclasses.request.http.baseurl" /> を参照ください)。
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.default-routes">
            <title>デフォルトのルート</title>

            <para>
                Zend_Controller_Router_Rewrite では、デフォルトのルートがひとつ事前に定義されています。
                これは <code>'controller/action'</code> 形式の URI にマッチします。
                さらに、モジュール名を最初のパス要素として指定することができます。これにより、
                <code>'module/controller/action</code> 形式の URI が使用できます。
                また、URI に追加されたパラメータにもデフォルトでマッチします。
            </para>

            <para>
                ルートがどのようにマッチするのか、例を見てみましょう。
            </para>

            <programlisting role="php"><![CDATA[
// 以下のようになっているものとします
// $ctrl->setControllerDirectory(array(
//     'default' => '/path/to/default/controllers',
//     'news'    => '/path/to/blog/controllers',
//     'blog'    => '/path/to/blog/controllers'
// ));

モジュールのみ:
http://example/news
    module == news

無効なモジュールとコントローラとの対応:
http://example/foo
    controller == foo

モジュール + コントローラ:
http://example/blog/archive
    module     == blog
    controller == archive

モジュール + コントローラ + アクション:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

モジュール + コントローラ + アクション + パラメータ:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]></programlisting>

            <para>
                デフォルトのルータは、
                <code>Zend_Controller_Router_Route_Module</code>
                オブジェクトに何も設定せずに作成したインスタンスです。
            </para>

            <programlisting role="php"><![CDATA[
// ルータ v1 との互換性のためのルート
$compat = new Zend_Controller_Router_Route_Module();
$this->addRoute('default', $compat);]]></programlisting>

            <note>
                <title>マッチする URI</title>
                <para>
                    <code>Zend_Controller_Router_Rewrite</code> は、過去との互換性を考慮して設定されています。
                    <code>controller/action</code> 形式の URI
                    にパラメータが付加されたパターンにも自動的にマッチします。
                    デフォルト値や必須値を持っている限り、
                    パラメータを付加したからといって新しいルートを追加する必要はありません。
                    これらの追加パラメータにアクセスするには
                    <code>Zend_Controller_Action::_getParam()</code> メソッドを使用します。
                </para>
            </note>

            <para>
                デフォルトのルートを使用したくない場合は、
                <code>removeDefaultRoutes()</code> で削除します。
            </para>

            <programlisting role="php"><![CDATA[
// 互換性のためのデフォルトルートを削除します
$router->removeDefaultRoutes();]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.static-routes">
            <title>静的なルート</title>

            <para>
                これまでの例では、すべて動的なルートを使用していました。
                つまり、特定のパターンにマッチするものについてのルートです。
                しかし、時には特定のルートを固定してしまい、
                わざわざ正規表現エンジンを動かしたくない場合もあるでしょう。
                そんなときには静的なルートを使用します。
            </para>

            <programlisting role="php"><![CDATA[
$loginRoute = new Zend_Controller_Router_Route_Static('login', array('controller' => 'login', 'action' => 'form'));
$router->addRoute('login', $loginRoute);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.regex-routes">
            <title>正規表現のルート</title>

            <para>
                デフォルトのルートや静的なルートに加えて、正規表現によるルートも使用可能です。
                このルートは他のものに比べてより強力で柔軟なものですが、
                多少パフォーマンスは低下します。これは PCRE エンジンを使用していることが原因です。
            </para>

            <para>
                <code>Zend_Controller_Router_Route_Regex</code>
                は正規表現をもとにしたルートを提供します。これは rewrite
                ルータと組み合わせて使用します。いくつかの例を見てみましょう。
            </para>

            <itemizedlist>
                <listitem><para>
                    <code>#</code> を区切り文字として使用します。つまり、
                    スラッシュ ('/') をエスケープする必要はありませんが、
                    ハッシュ文字 ('#') はエスケープしなければなりません。
                </para></listitem>

                <listitem><para>
                    行頭と行末を表す文字 (それぞれ '^' および '$')
                    が、すべての式の前後に自動的に付加されます。
                    したがって、これらは正規表現で指定する必要はありません。
                    またこれは、URL 全体にマッチする式を書かなければならないということも意味します。
                    たとえば、指定した URL 'http://example.com/foo/bar/baz/bat'
                    を 'foo/bar' でマッチさせたければ、
                    'foo/bar(/.*)?' のように書かなければなりません。
                </para></listitem>

                <listitem><para>
                    最初と最後のスラッシュを取り除いてからマッチングを行います。
                    その結果、URL "http://example.com/foo/bar/"
                    は "foo/bar" でマッチするようになります。
                </para></listitem>
            </itemizedlist>

            <para>
                正規表現を使用する利点のひとつに、
                マッチした要素を取得して後で再利用できることがあります。
                <code>Zend_Controller_Router_Regex_Route</code>
                は、二通りの方法でこれを使用できます。以下に例を示します。
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        リクエストオブジェクトのパラメータとして、
                        「インデックス (integer) =&gt; マッチした内容」
                        形式で設定します。
                    </para>

                    <programlisting role="php"><![CDATA[<?php
// パスの /foo/bar 以降の部分が、リクエストオブジェクトの
// キー '1' として取得できます
$route = new Zend_Controller_Router_Route_Regex(
    'foo/bar(/.*)?', 
    array('controller' => 'foo', 'action' => 'bar')
);

// ルーティングの後で、
$fooPath = $request->getParam('1');
]]></programlisting>
                </listitem>

                <listitem>
                    <para>
                        ルートのコンストラクタの三番目の引数としてマップを渡し、
                        インデックスに対応するパラメータのキーを指定します。
                    </para>

                    <programlisting role="php"><![CDATA[<?php
// パスの /foo/bar 以降の部分を、リクエストのキー 'fooPath' に格納します
$route = new Zend_Controller_Router_Route_Regex(
    'foo/bar(/.*)?', 
    array('controller' => 'foo', 'action' => 'bar'),
    array(1 => 'fooPath')
);
]]></programlisting>
                </listitem>
            </itemizedlist>

            <para>
                正規表現のルートをルータで使用する例を示します。
            </para>

            <programlisting role="php"><![CDATA[
// http://example.com/blog/archive/01-Using_the_Regex_Router.html
// のような url でブログの過去記事を閲覧します。ここで
// '01' の部分がキー 'id'、そして 'Using_the_Regex_Router' の部分がキー 'title' となります。
$blogArchive = new Zend_Controller_Router_Route_Regex(
    'blog/archive/(\d+)-(.*)\.html',
    array('controller' => 'blog', 'action' => 'view'), 
    array(1 => 'id', 2 => 'title')
);
$router->addRoute('blogArchive', $blogArchive);

// http://example.com/news/1193328
// のような url でニュースを閲覧します。ここで
// '1193328' の部分がキー 'id' となります。
$newsItem = new Zend_Controlelr_Router_Route_Regex(
    'news/(\d+)',
    array('controller' => 'news', 'action' => 'view'),
    array(1 => 'id')
);
$router->addRoute('newsItem', $newsItem);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.add-config">
            <title>RewriteRouter での Zend_Config の使用法</title>

            <para>
                新しいルートを追加する際に、
                いちいちコードを書き換えるのではなく設定ファイルの変更で対応できると便利でしょう。
                そんなときには <code>addConfig()</code> メソッドを使用します。基本的な使用法は、
                まず Zend_Config 互換の設定を作成し、それをコードに読み込み、
                そして RewriteRouter に渡すことです。
            </para>

            <para>
                例として、次のような INI ファイルを考えてみましょう。
            </para>

            <programlisting role="php"><![CDATA[
[production]
routes.archive.route = "archive/:year/*"
routes.archive.defaults.controller = archive
routes.archive.defaults.action = show
routes.archive.defaults.year = 2000
routes.archive.reqs.year = "\d+"

routes.news.type = "Zend_Controller_Router_Route_Static"
routes.news.route = "news"
routes.news.defaults.controller = "news"
routes.news.defaults.action = "list"
]]></programlisting>

            <para>
                上の INI ファイルを、次のようにして
                <code>Zend_Config</code> オブジェクトに読み込みます。
            </para>

            <programlisting role="php"><![CDATA[
$config = new Zend_Config_Ini('/path/to/config.ini', 'production');
$router = new Zend_Controller_Router_Rewrite();
$router->addConfig($config, 'routes');
]]></programlisting>

            <para>
                上の例では、INI ファイルの 'routes' セクションを使用してルートを決めるよう、
                ルータに指定しています。このセクションの第一レベルのキーがルート名に対応します。
                上の例だと 'archive' と 'news' がこれにあたります。
                ルートの各エントリには、最低限 'route' エントリとひとつ以上の 'defaults'
                エントリが必要となります。また、オプションでひとつ以上の 'reqs'
                ('required' の略) も指定できます。ここで指定したものが、それぞれ
                <code>Zend_Controller_Router_Route_Interface</code>
                オブジェクトに対する引数となります。オプションのキー 'type' を使用すると、
                特定のルートで使用するルートクラスの型を指定できます。デフォルトでは、これは
                <code>Zend_Controller_Router_Route</code> となります。上の例では、
                'news' ルートで
                <code>Zend_Controller_Router_Route_Static</code>
                を使用するようにしています。
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.http">
        <title>Zend_Controller_Response_Http</title>

        <para>
            <code>Zend_Controller_Response_Http</code> は、
            HTTP 環境での使用に適したレスポンスオブジェクトです。
            ヘッダの設定/取得/消去の機能があります。また、
            <code>__toString()</code> メソッドを使用して、
            レスポンス本体の前に全ヘッダを一括送信することもできます。
        </para>

        <para>
            <code>setHeader()</code> は、二つの引数を受け取ります。
            最初がヘッダの型で、次がヘッダの値です。三番目のオプションのパラメータを
            true にすると、同じ型の既存のヘッダを強制的に上書きします。
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.cli">
        <title>Zend_Controller_Response_Cli</title>

        <para>
            <code>Zend_Controller_Response_Cli</code> は、
            CLI 環境での使用に適したレスポンスオブジェクトです。
            ヘッダの処理などの機能は持たず、
            <code>__toString()</code> が起動された際には単純に本文のみを返します。
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
