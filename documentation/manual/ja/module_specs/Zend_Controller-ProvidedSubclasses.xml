<sect1 id="zend.controller.providedsubclasses">
    <title>提供されるサブクラス群</title>

    <sect2 id="zend.controller.providedsubclasses.introduction">
        <title>導入</title>

        <para>
            Zend Framework では、デフォルトで提供されるクラス以外の選択肢も用意しています。
            たとえばリクエストオブジェクト、ルータ、
            そしてレスポンスオブジェクトなどについて別の選択肢があります。
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.request.http">
        <title>Zend_Controller_Request_Http</title>

        <sect3 id="zend.controller.providedsubclasses.request.http.introduction">
            <title>導入</title>

            <para>
                <code>Zend_Controller_Request_Http</code> は、HTTP
                環境で使用するリクエストオブジェクトです
                <code>Zend_Controller_Request_Http</code> はデフォルトのリクエストクラスであり、
                <code>Zend_Controller_Dispatcher</code> で用いられます。
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.dataaccess">
            <title>リクエストデータへのアクセス</title>

            <para>
                <code>Zend_Controller_Request_Http</code> は、関連する値へのアクセスをカプセル化します。
                たとえばコントローラやアクションルータの変数のキー名や値、
                URI からパースした追加のパラメータの値などにアクセスできます。
                <code>Zend_Controller_Request_Http</code> のプロキシとして動作することで、
                スーパーグローバルの値にパブリックメンバとしてアクセスしたり、
                現在のベース URL やリクエスト URI を管理することもできます。
                スーパーグローバルの値はリクエストオブジェクトに設定することはできません。
                そのかわりに setParam/getParam メソッドを使用して、
                パラメータを設定あるいは取得します。
            </para>

            <note>
                <title>スーバーグローバルデータ</title>
                <para>
                    <code>Zend_Controller_Request_Http</code> のパブリックプロパティを使用して
                    スーパーグローバルデータにアクセスする際に注意すべき点は、
                    プロパティ名 (スーバーグローバル配列のキー)
                    は以下の優先順位でマッチするということです。
                    1. GET, 2. POST, 3. COOKIE, 4. SERVER, 5. ENV.
                </para>
            </note>

            <para>
                特定のスーパーグローバルにアクセスするには、
                パブリックメソッドを使用する方法もあります。たとえば、
                <code>$_POST['user']</code> の値を取得するには、リクエストオブジェクト上で
                <code>getPost('user')</code> をコールします。
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.baseurl">
            <title>ベース URL およびサブディレクトリ</title>

            <para>
                <code>Zend_Controller_Request_Http</code> は、
                サブディレクトリで Zend_Controller_Router_Rewrite を使用することができます。
                Zend_Controller_Request_Http は自動的にベース URL を検出し、
                それを適切に設定します。
            </para>

            <para>
                たとえば、<code>index.php</code> をウェブサーバのサブディレクトリ
                <code>/projects/myapp/index.php</code> においた場合は、ベース URL
                (rewrite base) は <code>/projects/myapp</code> にしなければなりません。
                マッチするルートを見つける前に、この文字列がパスの先頭から取り除かれます。
                これにより、すべてのルートに余計な文字を追加する必要がなくなります。
                ルート <code>'user/:username'</code> は、
                <code>http://localhost/projects/myapp/user/martel</code> および
                <code>http://example.com/user/martel</code> の両方にマッチするようになります。
            </para>

            <note>
                <title>URL の検出は大文字小文字を区別します</title>
                <para>
                    自動的なベース URL の検出処理は大文字小文字を区別します。そのため、
                    URL とファイルシステムのサブディレクトリ名が確実に一致する必要があります
                    (たとえ Windows マシンであっても同様です)。大文字小文字が一致しなかった場合は
                    noRoute アクションがコールされます。
                </para>
            </note>

            <para>
                ベース URL の検出に失敗する場合は、
                <code>Zend_Controller_Request_Http</code> クラス、あるいは
                <code>Zend_Controller_Front</code> クラスの
                <code>setBaseUrl()</code> メソッドを使用して
                ベースパスを上書き指定することができます。
                一番簡単な方法は <code>Zend_Controller_Front</code> で設定することです。
                この設定はリクエストオブジェクトに引き継がれます。
                独自のベース URL を設定する例を示します。
            </para>

            <programlisting role="php"><![CDATA[
/**
 * Zend_Controller_Front で独自のベース URL を指定することによるリクエストのディスパッチ
 */
$router     = new Zend_Controller_Router_Rewrite();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // ベース URL を指定します!
$response   = $controller->dispatch();]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.rewriterouter">
        <title>Zend_Controller_Router_Rewrite</title>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Controller_Router_Rewrite</code> は、標準のルータです。
                ルーティングとは、URI (ベース URL から取得した URI の一部)
                を展開し、どのコントローラのどのアクションが
                リクエストを処理するのかを決める処理のことです。
                コントローラの値やアクション、そしてその他のパラメータが
                <code>Zend_Controller_Request_Http</code> オブジェクトにまとめられます。
                このオブジェクトを処理するのが <code>Zend_Controller_Dispatcher_Standard</code> です。
                ルーティングが行われるのは一度だけ、すなわちリクエストを最初に受け取ってから
                最初のコントローラに処理が渡される際だけです。
            </para>

            <para>
                <code>Zend_Controller_Router_Rewrite</code> は、mod_rewrite 風の機能を
                PHP だけで実現できるように設計されています。
                この処理は Ruby on Rails のルーティングを多少参考にしており、
                ウェブサーバの URL 書き換えに関する前提知識を必要としません。
                以下の単純な mod_rewrite ルール (のいずれか) で動作するように設計されています。
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

            <para>
            あるいは
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>

            <para>
                Rewrite ルータを IIS ウェブサーバで使用するには
                <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink>
                を Isapi 拡張モジュールとしてインストールします。そして次のようなルールを記述します。
            </para>

            <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

            <note>
                <title>IIS Isapi_Rewrite</title>
                <para>
                    IIS を使用すると、<code>$_SERVER['REQUEST_URI']</code>
                    が存在しないか空の文字列に設定されます。このような場合、
                    <code>Zend_Controller_Request_Http</code> は
                    <code>$_SERVER['HTTP_X_REWRITE_URL']</code> の値を使用します。これは
                    Isapi_Rewrite 拡張モジュールが設定します。
                </para>
            </note>

            <para>Lighttpd の場合は、次のようなルールを使用します。</para>

            <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.usage">
            <title>ルータの使用法</title>

            <para>
                Rewrite ルータを適切に使用するには、まずそのインスタンスを作成し、
                次にユーザ定義のルーティングを追加し、それをコントローラに注入しなければなりません。
                以下にコードの例を示します。
            </para>

            <programlisting role="php"><![CDATA[
/* ルータを作成します */

$router = $ctrl->getRouter(); // デフォルトで rewrite ルータを返します
$router->addRoute(
    'user',
    new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.basic">
            <title>基本的な RewriteRouter の操作法</title>

            <para>
                RewriteRouter で最も重要なのが、ユーザ定義のルーティングです。
                これは、RewriteRouter の addRoute メソッドをコールして追加します。
                このメソッドに、<code>Zend_Controller_Router_Route_Interface</code>
                を実装したクラスの新しいインスタンスを渡します。
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

            <para>
                Rewrite ルータには、4 種類の基本的なルーティング方式があります
                (そのうちのひとつは特別なものです)。
            </para>

            <itemizedlist mark="opencircle">
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.standard-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.static-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.regex-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.default-routes" /> *</para></listitem>
            </itemizedlist>
            
            <para>
                これらのルーティングは、チェインやユーザ定義のルーティング方式を作成する際に何度も使用します。
                任意の設定でお好みの数のルーティングを使用することができますが、
                Module ルートだけは例外です。これを使用するのは一度だけで、
                もっとも汎用的なルート (デフォルト) として使用します。
                個々のルーティング方式については、後ほど詳細に説明します。
            </para>

            <para>
                addRoute への最初のパラメータはルートの名前です。
                これを使用して、ルータがルートを処理します。
                たとえば URL の生成などに使用します。
                二番目のパラメータはルート自身となります。
            </para>

            <note>
                <para>
                    ルート名のもっとも一般的な使用例は、
                    Zend_View の url ヘルパーです。
                </para>
                    
                <programlisting role="php"><![CDATA[
<a href="<?= $this->url('user', array('username' => 'martel')) ?>">Martel</a>]]></programlisting>

                <para>
                    これは <code>user/martel</code> へのリンクとなります。
                </para>

            </note>

            <para>
                ルーティング処理は、定義されたすべてのルートから
                リクエスト URI にマッチする定義を探すことによって行います。
                マッチするものが見つかれば、ルートのインスタンスから変数の値が返され、
                それを Zend_Controller_Request オブジェクトに注入します。
                これを、後にディスパッチャやユーザが作成したコントローラで使用します。
                マッチするものが見つからない場合は、チェイン内の次のルートを調べます。
            </para>
                
            <note>
                <title>定義の順番</title>
                <para>
                    一番最後にマッチしたルートが適用されるので、
                    汎用的なルートは最初に定義するようにしましょう。
                </para>
            </note>

            <note>
                <title>返される値</title>
                ルーティングの結果返される値は、URL パラメータあるいは
                ユーザ定義のルータのデフォルト値です。これらの値は、後ほど
                Zend_Controller_Request::getParam あるいは Zend_Controller_Action::_getParam
                メソッドでアクセスできます。
            </note>

            <para>
                ルートで使用される変数のうち、'module'、'controller' および 'action'
                の 3 つは特別な扱いとなります。これらの特殊変数は、Zend_Controller_Dispatcher
                がディスパッチ先のコントローラとアクションを決定するために使用されます。
            </para>

            <note>
                <title>特殊変数</title>
                <para>
                    これらの特殊変数の名前を変更することもできます。その場合は
                    <code>Zend_Controller_Request_Http</code> の
                    setControllerKey メソッドや setActionKey メソッドを使用します。
                </para>
            </note>

        </sect3>
        
        <sect3 id="zend.controller.providedsubclasses.rewriterouter.default-routes">
            <title>デフォルトのルート</title>

            <para>
                Zend_Controller_Router_Rewrite がデフォルトのルートとして設定されています。
                これは <code>controller/action</code> 形式の URI にマッチします。
                さらに、パス要素の最初の部分にモジュール名を指定することができます。つまり
                <code>module/controller/action</code> のような URI も可能です。
                また、URI にパラメータを追加した形式、つまり
                <code>controller/action/var1/value1/var2/value2</code>
                のような URI にもデフォルトで対応しています。
            </para>

            <para>
                ルータのマッチ処理についての例を示します。
            </para>

            <programlisting role="php"><![CDATA[
// 以下の設定を前提とします
$ctrl->setControllerDirectory(
    array(
        'default' => '/path/to/default/controllers',
        'news'    => '/path/to/blog/controllers',
        'blog'    => '/path/to/blog/controllers'
    )
);

モジュールのみ
http://example/news
    module == news

無効なモジュール名は、コントローラ名として扱われます
http://example/foo
    controller == foo

モジュール + コントローラ
http://example/blog/archive
    module     == blog
    controller == archive

モジュール + コントローラ + アクション
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

モジュール + コントローラ + アクション + パラメータ
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]></programlisting>

            <para>
                デフォルトのルートは、<code>Zend_Controller_Router_Route_Module</code>
                オブジェクトを 'default' という名前 (インデックス) で
                RewriteRouter に保存したものです。
                これは、以下のようにして作成します。
            </para>

            <programlisting role="php"><![CDATA[
$compat = new Zend_Controller_Router_Route_Module(array(), $dispatcher, $request);
$this->addRoute('default', $compat);]]></programlisting>

            <para>
                このデフォルトルートが不要な場合は、独自の 'デフォルト' ルートで上書きします
                (つまり、'default' という名前で保存します)。
                あるいは、<code>removeDefaultRoutes()</code>
                で削除することもできます。
            </para>

            <programlisting role="php"><![CDATA[
// すべてのデフォルトルートを削除します
$router->removeDefaultRoutes();]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.rewritebase">
            <title>ベース URL およびサブディレクトリ</title>

            <para>
                Rewrite ルータはサブディレクトリ
                (例. <code>http://domain.com/~user/application-root/</code>>)
                内でも使用可能です。この場合、アプリケーションのベース URL
                (<code>/~user/application-root</code>) の自動検出が
                <code>Zend_Controller_Request_Http</code> によって行われ、適切に使用されます。
            </para>

            <para>
                ベース URL の検出に失敗する場合は、
                <code>Zend_Controller_Request_Http</code> のメソッド <code>setBaseUrl()</code>
                を使用してベースパスを上書き指定することができます
                (<xref linkend="zend.controller.providedsubclasses.request.http.baseurl" /> を参照ください)。
            </para>

            <programlisting role="php"><![CDATA[
$request->setBaseUrl(/~user/application-root/);]]></programlisting>

        </sect3>
        
        <sect3 id="zend.controller.providedsubclasses.rewriterouter.standard-routes">
            <title>Zend_Controller_Router_Route</title>
            
            <para>
            <code>Zend_Controller_Router_Route</code> はフレームワークの標準のルートです。
            簡単に利用でき、柔軟なルート定義が可能です。各ルートには、まず
            (静的および動的な) URL のマッピングが含まれ、
            そしてデフォルト値および変数についての制限を指定して初期化します。
            </para>
            
            <para>
                とある架空のアプリケーションで、コンテンツの作者情報のページが必要になったとしましょう。
                ブラウザで <code>http://domain.com/author/martel</code>
                にアクセスした際に、"martel" とかいう人についての情報を見たいわけです。
                この機能を実現するためのルートは、次のようになります。
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'author/:username', 
             array('controller' => 'profile', 'action' => 'userinfo')
         );

$router->addRoute('user', $route);]]></programlisting>            

            <para>
                <code>Zend_Controller_Router_Route</code>
                のコンストラクタの最初のパラメータは、ルートの定義です。
                これを URL にマッチさせます。ルート定義は静的な部分と動的な部分で構成され、
                それをスラッシュ ('/') で連結します。
                動的な部分を変数と予備、変数名の前にコロンをつけて
                (例. <code>:username</code>) 表します。
                静的な部分は単なるテキスト (例. <code>author</code>) です。
            </para>

            <note>
                <title>文字の使用法</title>
                <para>
                    現在の実装では、(スラッシュ以外の)
                    任意の文字を変数名として使用できます。しかし、
                    PHP の変数名として使用できる文字だけを用いることを強く推奨します。
                    このようにしておくことで、
                    将来実装が変更されたときにバグを引き起こす可能性を抑えられます。
                </para>
            </note>

            <para>
                この例のルートは、ブラウザで
                <code>'http://domain.com/author/martel'</code> を指した際にマッチします。
                この場合、すべての変数の値が <code>Zend_Controller_Request</code>
                オブジェクトに注入され、ProfileController からアクセスできるようになります。
                この例が返す変数は、以下のようなキーと値のペアを持つ配列となります。
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'username' => 'martel',
  'controller' => 'profile',
  'action' => 'userinfo'
);]]></programlisting>            

            <para>
                その後、<code>Zend_Controller_Dispatcher</code> は
                (デフォルトモジュールの) ProfileController クラスにある
                userinfoAction メソッドを実行します。変数にアクセスするには、
                Zend_Controller_Action::_getParam あるいは Zend_Controller_Request::getParam
                メソッドを使用します。
            </para>
            
            <programlisting role="php"><![CDATA[
public function userinfoAction() 
{
    $request = $this->getRequest();
    $username = $request->getParam('username');
    
    $username = $this->_getParam('username');
}
]]></programlisting>    

            <para>
                ルート定義には、特殊文字 (ワイルドカード)
                を含めることができます。これは '*' 記号で表します。
                これを使用して、Module ルートと同様にパラメータを扱う
                (変数名 => 値 のペアを URI で定義する) ことができます。
                次のルートは、Module ルートの挙動をまねたものです。
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(':controller/:action/*');
$router->addRoute('default', $route);]]></programlisting>            
            

        <sect4 id="zend.controller.providedsubclasses.rewriterouter.variable-defaults">
            <title>変数のデフォルト</title>

            <para>
                ルートで使用するすべての変数についてデフォルト値を指定することができます。
                これは、 <code>Zend_Controller_Router_Route</code>
                のコンストラクタの 2 番目のパラメータで指定します。
                このパラメータは、変数名をキーとする配列で、
                対応する値にそのデフォルト値を指定します。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                上のルートは <code>'http://domain.com/archive/2005'</code> および
                <code>'http://example.com/archive'</code> 
                のような URL にマッチします。後者の場合、変数 year にはデフォルト値である
                2006 が設定されます。
            </para>

            <para>
                この例は、year 変数をリクエストオブジェクトに注入することになります。
                そしてルーティング情報が存在しない
                (コントローラやアクションのパラメータが定義されていない) ので、
                アプリケーションはデフォルトのコントローラのデフォルトアクションメソッド
                (ともに <code>Zend_Controller_Dispatcher_Abstract</code> で定義されています)
                にディスパッチします。より使いやすくするには、
                ルートのデフォルトとしてコントローラとアクションを定義しておく必要があります。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006, 
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                このルートは、ArchiveController の showAction を実行します。
            </para>

        </sect4>

        <sect4 id="zend.controller.providedsubclasses.rewriterouter.variable-requirements">
            <title>変数の制約</title>

            <para>
                <code>Zend_Controller_Router_Route</code> のコンストラクタの
                三番目のパラメータで、変数の制約を指定することができます。
                これは、正規表現で指定します。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006, 
                 'controller' => 'archive',
                 'action' => 'show'
             ),
             array('year' => '\d+')
         );
$router->addRoute('archive', $route);]]></programlisting>

        </sect4>

        <para>
            上の例のルートでは、year 変数の値が数値データである場合にのみ
            Rewrite ルータにマッチします。つまり
            <code>http://domain.com/archive/2345</code> はマッチしますが
            <code>http://example.com/archive/test</code> はマッチしません。
            この場合はチェイン内の次のルートに処理を移します。
        </para>

        </sect3>        

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.static-routes">
            <title>Zend_Controller_Router_Route_Static</title>

            <para>
                これまでの例では、すべて動的なルートを使用していました。
                つまり、特定のパターンにマッチするものについてのルートです。
                しかし、時には特定のルートを固定してしまい、
                わざわざ正規表現エンジンを動かしたくない場合もあるでしょう。
                そんなときには静的なルートを使用します。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Static(
             'login', 
             array('controller' => 'auth', 'action' => 'login')
         );
$router->addRoute('login', $route);]]></programlisting>

        <para>
            上のルートは <code>http://domain.com/login</code> という URL
            にマッチします。
        </para>
        
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.regex-routes">
            <title>Zend_Controller_Router_Route_Regex</title>

            <para>
                デフォルトのルートや静的なルートに加えて、正規表現によるルートも使用可能です。
                このルートは他のものに比べてより強力で柔軟なものですが、
                多少複雑になってしまいます。そして、より高速になります。
            </para>

            <para>
                標準のルートと同様、このルートを初期化する際にはルートの定義とデフォルトを指定する必要があります。
                サンプルとして、archive ルートを作成してみましょう。
                これは先ほど定義してものとほぼ同じですが、今回は Regex ルートを使用しています。
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array(
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>
            
            <para>
                定義された正規表現のパターンが、リクエストオブジェクトに注入されます。
                上の例では、<code>http://domain.com/archive/2006</code>
                がマッチした後の結果の値は次のような配列になります。
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  1 => '2006',
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <note>
                <para>
                    ルータとのマッチングを行う前に、URL の先頭と最後のスラッシュは取り除かれます。
                    結果として、URL <code>http://domain.com/foo/bar/</code>
                    は正規表現 <code>foo/bar</code> にマッチすることになります。
                </para>
            </note>

            <note>
                <para>
                    行頭と行末を表す文字 (それぞれ '^' および '$')
                    が、すべての式の前後に自動的に付加されます。
                    したがって、これらは正規表現で指定する必要はありません。
                </para>
            </note>

            <note>
                <para>
                    このルートクラスは、区切り文字として <code>#</code> を使用します。
                    つまり、ルート定義の中にハッシュ文字 ('#')
                    がある場合は、それをエスケープする必要があるということです。
                    しかし、この文字 (アンカー) は通常はウェブサーバに渡されることはないので、
                    エスケープが必要になることはまずないでしょう。
                </para>
            </note>

            <para>
                定義されたサブパターンの内容は、通常通りの方法で取得できます。
            </para>

            <programlisting role="php"><![CDATA[
public function showAction() 
{
    $request = $this->getRequest();
    $year = $request->getParam(1); // $year = '2006';
}
]]></programlisting>    

            <note>
                <para>このキーは、文字列 ('1') ではなく数値の 1 であることに注意しましょう。</para>
            </note>
            
            <para>
                このルートは、標準のルートとまったく同様に動作するわけではありません。
                'year' のデフォルトが設定されていないからです。
                また、year のデフォルトを設定してこれをオプション扱いにしたとしても、
                最後のスラッシュをどうするかという問題が残ります。
                これを解決するには、year 部をスラッシュを含めてオプションにし、
                その数値部のみを取得するようにします。
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive(?:/(\d+))?', 
             array(
                 'year' => '2006',
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>
            
            <para>
                まだ問題が残っていることにおそらくお気づきでしょう。
                パラメータとして数値のキーを使用するのはなかなか難しく、
                長い目で見れば問題を引き起こす可能性が高くなります。
                そこで三番目のパラメータの登場です。
                このパラメータは、正規表現サブパターンとパラメータ名のキーを関連付けます。
                簡単な例を見てみましょう。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array(
                 'controller' => 'archive',
                 'action' => 'show'
             ),
             array(
                1 => 'year'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                これは、リクエストオブジェクトに以下のように注入されます。
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'year' => '2006',
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <para>
                関連付けは両方の方法で定義でき、任意の環境 (例. Zend_Config) で動作します。
                キーには変数名あるいはサブパターン番号のいずれかを含めることができます。
            </para>
            
            <note>
                <para>
                    サブパターンのキーは整数値でなければなりません。
                </para>
            </note>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                1 => 'year'
             )
         );

// あるいは
         
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             )
         );       
]]></programlisting>
           
            <para>
                リクエストの値から数値キーが消え、代わりに名前がつけられたことに注目しましょう。
                もちろん、お望みなら数値での指定と名前での指定を共用することもできます。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)/page/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             )
         );       
]]></programlisting>

            <para>
                この結果、リクエスト内には数値キーと名前つきキーが共存することになります。
                たとえば、URL <code>http://domain.com/archive/2006/page/10</code>
                は次のような値になります。
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'year' => '2006',
  2 => 10,
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <para>
                正規表現を簡単に反転させることはできないので、
                url ヘルパーやこのクラスのメソッドを使用するには
                逆の URL を準備しておく必要があります。
                逆方向のパスは sprintf() 形式の文字列で表し、
                コンストラクタの四番目のパラメータとして指定します。
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             ),
             'archive/%s'
         );       
]]></programlisting>

            <para>
                これまで説明してきたことは、すべて標準のルートオブジェクトでも可能なことです。
                それでは、Regex ルートを使用するメリットはいったい何なのでしょう?
                これを使用すると、あらゆる形式の URL を制約なしに定義することができます。
                仮に、あなたが blog を持っており
                <code>http://domain.com/blog/archive/01-Using_the_Regex_Router.html</code>
                のような URL を作成したいと考えたとしましょう。
                これまでの内容を組み合わせると、答えはこのようになります。
            </para>


            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'blog/archive/(\d+)-(.+)\.html',
             array('controller' => 'blog', 'action' => 'view'), 
             array(1 => 'id', 2 => 'description'),
             'blog/archive/%d-%s.html'
         );
$router->addRoute('blogArchive', $route);
]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.add-config">
            <title>RewriteRouter での Zend_Config の使用法</title>

            <para>
                新しいルートを追加する際に、
                いちいちコードを書き換えるのではなく設定ファイルの変更で対応できると便利でしょう。
                そんなときには <code>addConfig()</code> メソッドを使用します。基本的な使用法は、
                まず Zend_Config 互換の設定を作成し、それをコードに読み込み、
                そして RewriteRouter に渡すことです。
            </para>

            <para>
                例として、次のような INI ファイルを考えてみましょう。
            </para>

            <programlisting role="php"><![CDATA[
[production]
routes.archive.route = "archive/:year/*"
routes.archive.defaults.controller = archive
routes.archive.defaults.action = show
routes.archive.defaults.year = 2000
routes.archive.reqs.year = "\d+"

routes.news.type = "Zend_Controller_Router_Route_Static"
routes.news.route = "news"
routes.news.defaults.controller = "news"
routes.news.defaults.action = "list"

routes.archive.type = "Zend_Controller_Router_Route_Regex"
routes.archive.route = "archive/(\d+)"
routes.archive.defaults.controller = "archive"
routes.archive.defaults.action = "show"
routes.archive.map.1 = "year" 
; あるいは: routes.archive.map.year = 1
]]></programlisting>

            <para>
                上の INI ファイルを、次のようにして
                <code>Zend_Config</code> オブジェクトに読み込みます。
            </para>

            <programlisting role="php"><![CDATA[
$config = new Zend_Config_Ini('/path/to/config.ini', 'production');
$router = new Zend_Controller_Router_Rewrite();
$router->addConfig($config, 'routes');
]]></programlisting>

            <para>
                上の例では、INI ファイルの 'routes' セクションを使用してルートを決めるよう、
                ルータに指定しています。このセクションの第一レベルのキーがルート名に対応します。
                上の例だと 'archive' と 'news' がこれにあたります。
                ルートの各エントリには、最低限 'route' エントリとひとつ以上の 'defaults'
                エントリが必要となります。また、オプションでひとつ以上の 'reqs'
                ('required' の略) も指定できます。ここで指定したものが、それぞれ
                <code>Zend_Controller_Router_Route_Interface</code>
                オブジェクトに対する引数となります。オプションのキー 'type' を使用すると、
                特定のルートで使用するルートクラスの型を指定できます。デフォルトでは、これは
                <code>Zend_Controller_Router_Route</code> となります。上の例では、
                'news' ルートで
                <code>Zend_Controller_Router_Route_Static</code>
                を使用するようにしています。
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.http">
        <title>Zend_Controller_Response_Http</title>

        <para>
            <code>Zend_Controller_Response_Http</code> は、
            HTTP 環境での使用に適したレスポンスオブジェクトです。
            ヘッダの設定/取得/消去の機能があります。また、
            <code>__toString()</code> メソッドを使用して、
            レスポンス本体の前に全ヘッダを一括送信することもできます。
        </para>

        <para>
            <code>setHeader()</code> は、二つの引数を受け取ります。
            最初がヘッダの型で、次がヘッダの値です。三番目のオプションのパラメータを
            true にすると、同じ型の既存のヘッダを強制的に上書きします。
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.cli">
        <title>Zend_Controller_Response_Cli</title>

        <para>
            <code>Zend_Controller_Response_Cli</code> は、
            CLI 環境での使用に適したレスポンスオブジェクトです。
            ヘッダの処理などの機能は持たず、
            <code>__toString()</code> が起動された際には単純に本文のみを返します。
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
