<sect1 id="zend.cache.introduction">
    <title>導入</title>
    <para>
        <code>Zend_Cache</code> は、任意のデータをキャッシュするための一般的な手法を提供します。
    </para>
    <para>
      Zend Framework におけるキャッシュ処理はフロントエンドで行われ、キャッシュレコードの保存には
      バックエンドのアダプタ (<code>File</code>、<code>Sqlite</code>、<code>Memcache</code>...)
      を使用します。ID およびタグを使用した柔軟な仕組みが用いられています。これらを使用することで、
      キャッシュデータの一部だけを削除する (「指定したタグがつけられているキャッシュレコードをすべて削除する」
      など) といったことも簡単にできるようになります。
    </para>
    <para>
        このモジュールの中心となる部分 (<code>Zend_Cache_Core</code>) は、標準的で柔軟なものとなっています。
        設定変更も可能です。とは言え、
        特定の目的のためには、より適切な実行結果を得るためのフロントエンド
        <code>Zend_Cache_Core</code> を拡張する
        (たとえば <code>Output</code>、<code>File</code>、<code>Function</code>、<code>Class</code> など)
        こともできます。
    </para>
    <example>
        <title><code>Zend_Cache::factory()</code> によるフロントエンドの取得</title>
        <para>
            <code>Zend_Cache::factory()</code> は、適切なオブジェクトを作成してそれらを互いに結び付けます。
            この最初の例では、フロントエンドに <code>Core</code>、バックエンドに <code>File</code>
            を使用します。
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Cache.php';

$frontendOptions = array(
   'lifeTime' => 7200, // キャッシュの有効期限を 2 時間とします
   'automaticSerialization' => true
);

$backendOptions = array(
    'cacheDir' => './tmp/' // キャッシュファイルを書き込むディレクトリ
);

// Zend_Cache_Core オブジェクトを取得します
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);

?>]]></programlisting>
       </para>
       <para>
            これでフロントエンドが得られました。あらゆる種類のデータを保存することができます
            (そのために、シリアライズを有効にしました)。例えば、非常に時間がかかるデータベースクエリの結果を
            キャッシュすることが可能です。いったんキャッシュしてしまえば、
            あとはデータベースに接続する必要さえありません。キャッシュから取得したレコードを
            アンシリアライズしてデータを取得すればよいのです。
            <programlisting role="php"><![CDATA[<?php

// $cache は先ほどの例で作成したものです

// キャッシュがすでに存在するかどうかを調べます
if(!$result = $cache->get('myresult')) {

    // キャッシュが見つかりませんでした。データベースに接続します
    
    $db = Zend_Db::factory( [...] );
    
    $result = $db->fetchAll('SELECT * FROM huge_table');
    
    $cache->save($result, 'myresult');
    
} else {

    // キャッシュが見つかりました! 大声で叫びましょう
    echo "これはキャッシュからのデータです!\n\n";
    
}

print_r($result);

?>]]></programlisting>
       </para>
    </example>
    <example>
        <title><code>Zend_Cache</code> 出力フロントエンドによる出力のキャッシュ</title>
        <para>
            まず、出力をキャッシュしたい部分を何らかの条件式で「マークアップ」し、
            その前後を <code>start()</code> メソッドおよび <code>end()</code>
            メソッドで囲みます (これは最初の例に似ており、キャッシュ処理の基本となる考え方です)。
        </para><para>
            内部では、通常通りに出力を行います。出力内容は、 <code>end()</code>
            メソッドに到達するまでずっとキャッシュされます。次回の実行時には、
            このセクションが読み飛ばされ、その代わりにキャッシュから取得したデータが使用されます
            (キャッシュレコードが有効なものである限ります)。
            <programlisting role="php"><![CDATA[<?php

$frontendOptions = array(
   'lifeTime' => 30,                  // キャッシュの有効期間は 30 秒です
   'automaticSerialization' => false  // これはデフォルト値です
);n

$backendOptions = array('cacheDir' => './tmp/');

$cache = Zend_Cache::factory('Output', 'File', $frontendOptions, $backendOptions);

// start() メソッドに一意な ID を渡します
if(!$cache->start('mypage')) {
    // 通常通りに出力します
    
    echo 'Hello world! ';
    echo 'これはキャッシュされます ('.time().') ';
    
    $cache->end(); // 出力が保存され、ブラウザに送信されます
}

echo 'これはキャッシュされません ('.time().').';

?>]]>       </programlisting>
       </para>
       <para>
           <code>time()</code> の結果を二度出力していることに注目しましょう。
           動作説明のため、何らかの動的な出力がほしかったのです。これを実行し、
           さらに何度か「最新の情報に更新」してみましょう。
           ふたつめの値が時とともに変化していくのに対して、
           最初の方の値は変化しないことに気づかれるでしょう。
           なぜなら、最初の値はキャッシュされたセクションの出力であり、
           その他の内容とともにキャッシュに保存されているからです。
           30 秒経過すると (有効期限を 30 秒に設定したので)、
           ふたつの値は再び一致するようになります。これはキャッシュレコードが
           有効期限切れになり、もう一度キャッシュしなおされたからです。
           この例は、ブラウザあるいはコンソールで試してみてください。
       </para>
    </example>
    <note><para>
        Zend_Cache を使用する際には、キャッシュ ID (<code>save()</code> および
        <code>start()</code> で使用します) に十分な注意を払うようにしましょう。
        これは、キャッシュしようとしているリソース内で一意である必要があります。
        さもないと、無関係なレコードによってキャッシュを削除されてしまったり、
        さらに悪いことにはまったく無関係な場所に表示されてしまったりなどという問題が起こります。
    </para></note>
</sect1>


<sect1 id="zend.cache.theory">
    <title>キャッシュの仕組み</title>
    <para>
        Zend_Cache には、3 つのポイントがあります。まず最初は一意な ID (文字列) で、
        これによってキャッシュレコードを識別します。二番目は、例に含まれる
        <code>'lifeTime'</code> ディレクティブです。これは、キャッシュされたリソースの
        「賞味期限」を定義するものです。三番目のポイントとなるのが条件付きの実行処理で、
        不要なコードを完全に読み飛ばすことで処理速度を向上させることになります。
        フロントエンドの主となる関数 (例えば <code>Zend_Cache_Core::get()</code>)
        は、キャッシュがヒットしなかった場合には常に false を返すよう設計されています。
        そのため、キャッシュしたい (そして読み飛ばしたい) 部分を
        <code>if(){ ... }</code> 文で囲む際に、条件式として Zend_Cache
        のメソッド自身を使用できるようになっています。
        このブロックの最後では、出力内容を
        (例えば <code>Zend_Cache_Core::save()</code> などで)
        保存する必要があります。
    </para>
    <note><para>
        条件付きの実行処理を必ず記述しなければならないわけではありません。
        フロントエンドの種類によっては (例えば <code>Function</code> など)、
        すべてのロジックがフロントエンドの中で実装されています。
    </para></note>
    <note><para>
        'Cache hit (キャッシュにヒットした)' とは、キャッシュレコードが見つかり、
        かつそのレコードが 'fresh (新鮮)' (言い換えると、まだ有効期限が切れていない)
        状態であることを表す言葉です。'Cache miss (キャッシュが見つからなかった)'
        はその正反対です。キャッシュが見つからなかった場合は、
        データを (通常どおりに) 作成し、それをキャッシュしなければなりません。
        一方、キャッシュにヒットした場合は、
        バックエンドが自動的にキャッシュレコードを取得してくれます。
    </para></note>
    <sect2 id="zend.cache.factory">
        <title><code>Zend_Cache</code> ファクトリメソッド</title>
        <para>
            使用可能な <code>Zend_Cache</code> フロントエンドのインスタンスを作成する方法を、
            以下の例で示します。
            <programlisting role="php"><![CDATA[<?php
        
# Zend_Cache ファクトリを読み込みます
require 'Zend/Cache.php'; 

# バックエンドを選びます (例えば 'File' や 'Sqlite'...)
$backendName = '[...]';

# フロントエンドを選びます (例えば 'Core'、'Output'、'Page'...)
$frontendName = '[...]';

# 選択したフロントエンド用のオプションを配列に設定します
$frontendOptions = array([...]);

# 選択したバックエンド用のオプションを配列に設定します
$backendOptions = array([...]);

# インスタンスを作成します
# (もちろん、最後の 2 つの引数は必須ではありません)
$cache = Zend_Cache::factory($frontendName, $backendName, $frontendOptions, $backendOptions);

?>]]></programlisting> 
        </para> 
        <para>
            これ以降のドキュメントでは、<code>$cache</code>
            の中身が有効なフロントエンドになっているものとします。また、
            選択したバックエンドにパラメータを渡す方法は理解できているものとします。
        </para>
        <note><para>
            常に <code>Zend_Cache::factory()</code> を使用してフロントエンドの
            インスタンスを作成するようにしてください。フロントエンドやバックエンドを
            自前で作成しようとしても、期待通りには動作しないでしょう。
        </para></note>
    </sect2>
    
    <sect2 id="zend.cache.tags">
        <title>レコードのタグ付け</title>
        <para>
            タグは、キャッシュレコードを分類するための仕組みです。
            <code>save()</code> メソッドでキャッシュを保存する際に、
            適用するタグを配列で指定することができます。これを使用すると、
            指定したタグが設定されているキャッシュレコードのみを削除するといったことが可能となります。
        <programlisting role="php"><![CDATA[<?php
             
$cache->save($huge_data, 'myUniqueID', array('tagA', 'tagB', 'tagC'));
            
?>]]></programlisting></para>
    </sect2>
    <sect2 id="zend.cache.clean">
        <title>キャッシュの削除</title>
        <para>
            特定のキャッシュ ID を削除/無効化するには、<code>remove()</code>
            メソッドを使用します。
             <programlisting role="php"><![CDATA[<?php 
             
$cache->remove('削除するID');
            
?>]]></programlisting>            
        </para>
        <para>
            一回の操作で複数のキャッシュ ID を削除/無効化するには、<code>clean()</code>
            メソッドを使用します。例えば、すべてのキャッシュレコードを削除するには次のようにします。
              <programlisting role="php"><![CDATA[<?php 

// すべてのレコードを削除します
$cache->clean(Zend_Cache::CLEANING_MODE_ALL);

// 有効期限切れのレコードのみ削除します
$cache->clean(Zend_Cache::CLEANING_MODE_OLD);
            
?>]]>       </programlisting>    
            タグ 'tagA' および 'tagC' に該当するキャッシュエントリを削除するには、このようにします。
              <programlisting role="php"><![CDATA[<?php 
             
$cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG, array('tagA', 'tagC'));
            
?>]]>       </programlisting>
        </para>
        <para>
            削除モードとして指定可能な値は <code>CLEANING_MODE_ALL</code>、<code>CLEANING_MODE_OLD</code>、
            <code>CLEANING_MODE_MATCHING_TAG</code> および <code>CLEANING_MODE_NOT_MATCHING_TAG</code>
            です。後者は値は、その名が示すとおり、タグの配列と組み合わせて使用します。
        </para>
    </sect2>
</sect1>

<sect1 id="zend.cache.frontends">
    <title>Zend_Cache のフロントエンド</title>
    
    <sect2 id="zend.cache.core">
        <title>Zend_Cache_Core</title>
        <sect3 id="zend.cache.core.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Cache_Core</code> は特別なフロントエンドであり、
                モジュールのコアに含まれています。これはキャッシュフロントエンドの
                基本機能を実装したものであり、他のクラスによってオーバーライドされます。
            </para>
            <note><para>
                その他のフロントエンドクラスは、すべて <code>Zend_Cache_Core</code>
                を継承しており、以下で説明しているメソッドおよびオプションは
                他のフロントエンドでも使用可能です。そのため、ここではこれらについての
                詳しい説明は省略します。
            </para></note>
        </sect3>
        <sect3 id="zend.cache.core.options">
            <title>使用可能なオプション</title>
            <para>
                これらのオプションを、先の例で示したようにファクトリメソッドに渡します。
            </para>
            <table>
                <title>使用可能なオプション</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>オプション</entry>
                            <entry>データ型</entry>
                            <entry>デフォルト値</entry>
                            <entry>説明</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>caching</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  キャッシングを有効/無効にします
                                  (キャッシュされたスクリプトのデバッグ時に有用です)。
                              </entry>
                          </row>
                          <row>
                              <entry><code>lifeTime</code></entry>
                              <entry><code>int</code></entry>
                              <entry><code>3600</code></entry>
                              <entry>
                                キャッシュの有効期間 (秒)。<code>null</code>
                                を指定すると、有効期間が無期限となります。
                              </entry>
                          </row>
                          <row>
                              <entry><code>logging</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                true を指定すると、<code>Zend_Log</code> によるロギングが有効になります
                                (しかし、処理速度は低下します)。
                              </entry>
                          </row>
                          <row>
                              <entry><code>writeControl</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                書き込み制御を有効/無効にします (壊れたエントリを検出するため、
                                書き込んだ直後にそのキャッシュを読み込みます)。
                                writeControl を有効にすると、キャッシュの書き込みがやや遅くなりますが、
                                読み込みの速度は変わりません
                                (これはキャッシュファイルが壊れているかどうかを調べるものですが、
                                完全に判断できるわけではありません)。
                              </entry>
                          </row>
                          <row>
                              <entry><code>automaticSerialization</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                自動シリアライズを有効/無効にします。
                                文字列でないデータを直接保存する際に使用します
                                (しかし、処理速度は低下します)。
                              </entry>
                          </row>
                          <row>
                              <entry><code>automaticCleaningFactor</code></entry>
                              <entry><code>int</code></entry>
                              <entry><code>0</code></entry>
                              <entry>
                                自動クリーンアッププロセス (ガベージコレクタ) の設定を行います。
                                0 を指定すると、自動キャッシュクリーニングを行いません。
                                1 を指定すると計画的にキャッシュのクリーニングを行い、また
                                x (1 より大きな整数) を指定すると、
                                x 回のキャッシュ書き込みについて 1 回の頻度で
                                ランダムに自動クリーニングを行います。
                              </entry>
                          </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>
        
        <sect3 id="zend.cache.core.examples">
            <title>例</title>
            <para>
                マニュアルのいちばんはじめのほうに、例を示しています。
            </para>
            <para>
                もしキャッシュに文字列しか保存しないのなら
                ("automaticSerialization" オプションを使用すると boolean も保存できるので)、
                このようにもう少しコンパクトに作成することが可能です。
                 <programlisting role="php"><![CDATA[<?php  
             
// すでに $cache が存在するものとします

$id = 'myBigLoop'; //「キャッシュしたい内容」のキャッシュ ID

if (!($data = $cache->get($id))) {
    // キャッシュが存在しませんでした
    
    $data = '';
    for ($i = 0; $i < 10000; $i++) {
        $data = $data . $i;
    }
    
    $cache->save($data);
    
} 

// [...] $data を用いて何かをします (echo したり、何かに渡したりなど)
             
    ?>]]>       </programlisting> 
            </para>  
            <para>
                複数のブロックやデータのインスタンスをキャッシュしたい場合も、考え方は同じです。
                 <programlisting role="php"><![CDATA[<?php  
             
// 一意な ID を使用するようにしましょう
$id1 = 'foo';
$id2 = 'bar';

// ブロック 1
if (!($data = $cache->get($id1))) {
    // キャッシュが存在しませんでした
    
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    }
    
    $cache->save($data);
    
} 
echo($data);

// これは、キャッシュ処理の影響を受けません
echo('キャッシュされません !');

// ブロック 2
if (!($data = $cache->get($id2))) {
    // キャッシュが存在しませんでした
    
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . '!';
    }
    
    $cache->save($data);
    
} 
echo($data);

?>]]>       </programlisting>             
            </para>            
        </sect3>   
    </sect2>
    
    <sect2 id="zend.cache.frontend.output">
        <title>Zend_Cache_Frontend_Output</title>
        <sect3 id="zend.cache.frontend.output.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Cache_Frontend_Output</code> は、出力を横取りするフロントエンドです。
                これは PHP の出力バッファリング処理を使いやすくしたもので、
                <code>start()</code> メソッドと
                <code>end()</code> メソッドの間の出力を横取りします。
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.output.options">
            <title>使用可能なオプション</title>
            <para>
                <code>Zend_Cache_Core</code> のオプション以外に、
                このフロントエンドが独自に使用するオプションはありません。
            </para>
        </sect3>
        
        <sect3 id="zend.cache.frontend.output.examples">
            <title>例</title>
            <para>
                このマニュアルの冒頭に示した例とほとんど同じですが、少しだけ変更を加えています。
                 <programlisting role="php"><![CDATA[<?php

// キャッシュが見つからなかった場合に、出力バッファリングが起動します
if(!$cache->start('mypage')):

// すべてをいつもどおりに出力します
echo 'Hello world! ';
echo 'これはキャッシュされます ('.time().') ';

$cache->end(); // 出力バッファリングを終了します
endif;

echo 'これはキャッシュされません ('.time().')';

?>]]>       </programlisting>
            </para>
            <para>
                この形式を使用すると、既存のプロジェクトに簡単に出力キャッシュ処理を追加することができます。
                コードのリファクタリングもほとんど行わずにすませられるでしょう。
            </para>
        </sect3>   
    </sect2>
    
    <sect2 id="zend.cache.frontend.function">
        <title>Zend_Cache_Frontend_Function</title>
        <sect3 id="zend.cache.frontend.function.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Cache_Frontend_Function</code> は、関数コールの結果をキャッシュします。
                <code>call()</code> というメソッドを保持しており、
                関数名とパラメータを配列にしてこのメソッドに渡します。
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.function.options">
            <title>使用可能なオプション</title>
            <table>
                <title>使用可能なオプション</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>オプション</entry>
                            <entry>データ型</entry>
                            <entry>デフォルト値</entry>
                            <entry>説明</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>cacheByDefault</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  true の場合は、関数のコール結果がデフォルトでキャッシュされます。
                              </entry>
                         </row>
                         <row>
                              <entry><code>cachedFunctions</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  常にキャッシュされる関数の名前。
                              </entry>
                         </row>
                         <row>
                              <entry><code>nonCachedFunctions</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  決してキャッシュされない関数の名前。
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>
        
        <sect3 id="zend.cache.frontend.function.examples">
            <title>例</title>
            <para>
                <code>call()</code> 関数の使用法は、PHP の
                <code>call_user_func_array()</code> と同じです。
                 <programlisting role="php"><![CDATA[<?php

$cache->call('veryExpensiveFunc', $params);

# $params は配列です。
# 例えば、veryExpensiveFunc(1, 'foo', 'bar') のコールをキャッシュするには
# $cache->call('veryExpensiveFunc', array(1, 'foo', 'bar')) とします。

?>]]>       </programlisting>
            </para>
            <para>
                <code>Zend_Cache_Frontend_Function</code> は、
                関数の返り値だけでなく関数内部での出力もキャッシュします。
            </para>
            <note><para>
                <code>array()</code>、<code>echo()</code>、<code>empty()</code>、<code>eval()</code>、
                <code>exit()</code>、<code>isset()</code>、<code>list()</code>、<code>print()</code>
                および <code>unset()</code> 以外なら、
                任意の組み込み関数やユーザ定義関数を渡すことができます。
            </para></note>
        </sect3>   
    </sect2>
    
    <sect2 id="zend.cache.frontend.class">
        <title>Zend_Cache_Frontend_Class</title>
        <sect3 id="zend.cache.frontend.class.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Cache_Frontend_Class</code> は、<code>Zend_Cache_Frontend_Function</code>
                と異なり、オブジェクトおよびスタティックメソッドのコールをキャッシュします。
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.class.options">
            <title>使用可能なオプション</title>
            <table>
                <title>使用可能なオプション</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>オプション</entry>
                            <entry>データ型</entry>
                            <entry>デフォルト値</entry>
                            <entry>説明</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>cachedEntity</code> (必須)</entry>
                              <entry><code>mixed</code></entry>
                              <entry></entry>
                              <entry>
                                  クラス名を設定すると、抽象クラスおよびスタティックコールをキャッシュします。
                                  オブジェクトを設定すると、そのオブジェクトのメソッドをキャッシュします。
                              </entry>
                         </row>
                         <row>
                              <entry><code>cacheByDefault</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  true を設定すると、デフォルトでキャッシュされます。
                              </entry>
                         </row>
                         <row>
                              <entry><code>cachedMethods</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  常にキャッシュされるメソッドの名前。
                              </entry>
                         </row>
                         <row>
                              <entry><code>nonCachedMethods</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  決してキャッシュされないメソッドの名前。
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>
        
        <sect3 id="zend.cache.frontend.class.examples">
            <title>例</title>
            <para>
                例えば、スタティックメソッドのコールをキャッシュするには次のようにします。
                 <programlisting role="php"><![CDATA[<?php

class test {
   
    # スタティックメソッド
    public static function foobar($param1, $param2) {
        echo "foobar_output($param1, $param2)";
        return "foobar_return($param1, $param2)";   
    }

}

// [...]
$frontendOptions = array(
    'cachedEntity' => 'test' // クラス名を指定します
);
// [...]

# これはキャッシュされます
$res = $cache->foobar('1', '2');

?>]]>           </programlisting>
                通常のメソッドのコールをキャッシュするには次のようにします。
                <programlisting role="php"><![CDATA[<?php

class test {
   
    private $_string = 'hello !';
      
    public function foobar2($param1, $param2) {
        echo($this->_string);
        echo "foobar2_output($param1, $param2)";
        return "foobar2_return($param1, $param2)";   
    }

}

// [...]
$frontendOptions = array(
    'cachedEntity' => new test() // クラスのインスタンスを指定します
);
// [...]

# これはキャッシュされます
$res = $cache->foobar2('1', '2');

?>]]>           </programlisting>
            </para>
        </sect3>   
    </sect2>
    
    <sect2 id="zend.cache.frontends.file">
        <title>Zend_Cache_Frontend_File</title>
        <sect3 id="zend.cache.frontends.file.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Cache_Frontend_File</code> は、マスタファイルの
                「更新時刻」にもとづいて動作するフロントエンドです。
                これは、例えば設定ファイルやテンプレートなどで有効に使えるでしょう。
            </para>
            <para> 
                例えば、XML の設定ファイルを使用しており、それが「設定オブジェクト」
                (<code>Zend_Config</code> など) を返す関数でパースされるとしましょう。
                <code>Zend_Cache_Frontend_File</code> を使用すると、その「設定オブジェクト」
                をキャッシュすることができ (これにより、
                XML ファイルを毎回パースする必要がなくなります)、さらに「マスタファイル」
                との間で強力な依存性を保持することができます。そのため、XML
                設定ファイルが更新されると、即時にキャッシュが無効になります。
            </para>
        </sect3>
        <sect3 id="zend.cache.frontends.file.options">
            <title>使用可能なオプション</title>
            <table>
                <title>使用可能なオプション</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>オプション</entry>
                            <entry>データ型</entry>
                            <entry>デフォルト値</entry>
                            <entry>説明</entry>
                        </row>
                     </thead>
                     <tbody>
                         <row>
                              <entry><code>masterFile (必須)</code></entry>
                              <entry><code>string</code></entry>
                              <entry><code></code></entry>
                              <entry>
                                  マスタファイルへのフルパス。
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>   
        <sect3 id="zend.cache.frontends.file.examples">
            <title>例</title>
            <para>
                このフロントエンドの使用法は <code>Zend_Cache_Core</code> と同じです。
                そのため、特に例は用意していません。唯一しなければならないことは、
                ファクトリを使用する際に、バックエンドのオプションとして
                <code>masterFile</code> を設定することだけです。
            </para>
        </sect3>
    </sect2>
    
    <sect2 id="zend.cache.frontends.page">
        <title>Zend_Cache_Frontend_Page</title>
        <sect3 id="zend.cache.frontends.page.introduction">
            <title>導入</title>
            <para>
                <code>Zend_Cache_Frontend_Page</code> は <code>Zend_Cache_Frontend_Output</code>
                と似ていますが、ページ全体をキャッシュする目的で設計されています。
                <code>Zend_Cache_Frontend_Page</code> を使用して、
                ページの一部だけをキャッシュすることはできません。
            </para>
            <para>
                一方、「キャッシュ ID」は自動的に生成されます。この ID は、
                <code>$_SERVER['REQUEST_URI']</code> および (オプションの設定によっては) 
                <code>$_GET</code>、<code>$_POST</code>、<code>$_SESSION</code>、
                <code>$_COOKIE</code>、<code>$_FILES</code> をもとにして生成されます。
                さらに、ひとつのメソッド (<code>start()</code>) をコールするだけで使用できます。
                <code>end()</code> は、ページの終了時に自動的にコールされます。
            </para>
            <para>
                現時点ではまだ実装されていませんが、将来は HTTP conditional システムを追加する予定です。
                これにより、ネットワークの帯域を節約できるようになります
                (キャッシュにヒットし、かつブラウザがそのバージョンを既に持っている場合に
                HTTP 304 Not Modified を送信するようにします)。
            </para>
            <note><para>
                Zend_Cache_Frontend_Page は「アルファ版」であり、
                実用できるようになるまでにはまだまだ時間がかかるでしょう。
            </para></note>
        </sect3>
        <sect3 id="zend.cache.frontends.page.options">
            <title>(Zend_Cache ファクトリで、このフロントエンドを使用する際に) 使用可能なオプション</title>
            <table>
                <title>使用可能なオプション</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>オプション</entry>
                            <entry>データ型</entry>
                            <entry>デフォルト値</entry>
                            <entry>説明</entry>
                        </row>
                     </thead>
                     <tbody>
                         <row>
                              <entry><code>httpConditional</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                  httpConditional システムを使用します (現時点ではまだ実装されていません)。
                              </entry>
                         </row>
                         <row>
                              <entry><code>debugHeader</code></entry>
                              <entry><code>boolean</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                  true の場合は、キャッシュされた各ページの先頭に
                                  デバッグ用テキストが追加されます。
                              </entry>
                         </row>
                         <row>
                              <entry><code>defaultOptions</code></entry>
                              <entry><code>array</code></entry>
                              <entry><code>array(...説明を参照ください...)</code></entry>
                              <entry>
                                  デフォルトのオプションを表す連想配列です。
                                  <itemizedlist>
                                      <listitem><code>(boolean, デフォルトは true) cache</code> :
                                        true の場合はキャッシュが有効になります。</listitem>
                                      <listitem><code>(boolean, デフォルトは false) cacheWithGetVariables</code> :
                                        true の場合は、<code>$_GET</code> 配列に変数が含まれていてもキャッシュがオンのままになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは false) cacheWithPostVariables</code> :
                                        true の場合は、<code>$_POST</code> 配列に変数が含まれていてもキャッシュがオンのままになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは false) cacheWithSessionVariables</code> :
                                        true の場合は、<code>$_SESSION</code> 配列に変数が含まれていてもキャッシュがオンのままになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは false) cacheWithFilesVariables</code> :
                                        true の場合は、<code>$_FILES</code> 配列に変数が含まれていてもキャッシュがオンのままになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは false) cacheWithCookieVariables</code> :
                                        true の場合は、<code>$_COOKIE</code> 配列に変数が含まれていてもキャッシュがオンのままになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは true) makeIdWithGetVariables</code> :
                                        true の場合は、キャッシュ ID が <code>$_GET</code> 配列の内容に依存するようになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは true) makeIdWithPostVariables</code> :
                                        true の場合は、キャッシュ ID が <code>$_POST</code> 配列の内容に依存するようになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは true) makeIdWithSessionVariables</code> :
                                        true の場合は、キャッシュ ID が <code>$_SESSION</code> 配列の内容に依存するようになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは true) makeIdWithFilesVariables</code> :
                                        true の場合は、キャッシュ ID が <code>$_FILES</code> 配列の内容に依存するようになります。</listitem>
                                      <listitem><code>(boolean, デフォルトは true) makeIdWithCookieVariables</code> :
                                        true の場合は、キャッシュ ID が <code>$_COOKIE</code> 配列の内容に依存するようになります。</listitem>
                                  </itemizedlist>
                              </entry>
                         </row>
                         <row>
                              <entry><code>regexps</code></entry>
                              <entry><code>array</code></entry>
                              <entry><code>array()</code></entry>
                              <entry>
                                  特定の REQUEST_URI に対してのみ適用するオプションを設定する連想配列です。
                                  キーが (PCRE の) 正規表現、対応する値は連想配列となります。
                                  この連想配列には、正規表現が $_SERVER['REQUEST_URI']
                                  にマッチした場合に設定されるオプションを設定します
                                  (使用可能なオプションについては defaultOptions を参照ください)。
                                  複数の正規表現が $_SERVER['REQUEST_URI'] にマッチした場合は、
                                  一番最後にマッチしたもののみが使用されます。
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>   
        <sect3 id="zend.cache.frontends.page.examples">
            <title>例</title>
            <para>
                Zend_Cache_Frontend_Page の使用法は、きわめて簡単です。
                <programlisting role="php"><![CDATA[<?php
               
// [...] // require、設定そしてファクトリ
    
$cache->start();
// キャッシュにヒットした場合はその結果がブラウザに送信され、処理はここで停止します
    
// ページの残りの部分 ...
    
?>]]>       </programlisting>
            </para>
            <para>
                もう少し複雑な例を見てみましょう。これは、起動ファイル
                (例えば Zend_Controller など) 内でキャッシュを集中管理する方法を示したものです。
                <programlisting role="php"><![CDATA[<?php

// [...] キャッシュセクションの前には、あまり多くの行を書かないようにしましょう。
// [...] 例えば、処理速度を最適化するためには "require_once" や "Zend::loadClass"
// [...] をキャッシュセクションの後におくべきです。

require_once 'Zend/Cache.php';

$frontendOptions = array(
   'lifeTime' => 7200,
   'debugHeader' => true, // デバッグ用
   'regexps' => array(
       '^/$' => array('cache' => true),         // IndexController 全体をキャッシュします
       '^/index/' => array('cache' => true),    // IndexController 全体をキャッシュします
       '^/article/' => array('cache' => false), // ArticleController はキャッシュしません
       '^/article/view/' => array(              // ……が、ArticleController の "view" アクションは
           'cache' => true,                     // キャッシュします。また、たとえ $_POST に何らかの
           'cacheWithPostVariables' => true,    // 変数が含まれていてもキャッシュを行います
           'makeIdWithPostVariables' => true,   // (しかし、そのキャッシュは $_POST 配列に依存します)。
       )
   )      
);
$backendOptions = array(
    'cacheDir' => '/tmp/' 
);

// Zend_Cache_Frontend_Page オブジェクトを取得します
$cache = Zend_Cache::factory('Page', 'File', $frontendOptions, $backendOptions);

$cache->start();
// キャッシュにヒットした場合はその結果がブラウザに送信され、スクリプトの処理はここで停止します。

// [...] 起動ファイルの終点 (これらの行は、キャッシュにヒットした場合は実行されません)。
                
?>]]>           </programlisting>
            </para>
        </sect3>
    </sect2>
</sect1>

<sect1 id="zend.cache.backends">
    <title>Zend_Cache のバックエンド</title>
    
    <sect2 id="zend.cache.backends.file">
        <title>Zend_Cache_Backend_File</title>
        <para>
            このバックエンドは、キャッシュレコードを
            (指定したディレクトリの) ファイルに保存します。
        </para>
        <para>
            使用可能なオプションは次のとおりです。
        </para>          
        <table>
            <title>使用可能なオプション</title>
            <tgroup cols="4">
                 <thead>
                      <row>
                        <entry>オプション</entry>
                        <entry>データ型</entry>
                        <entry>デフォルト値</entry>
                        <entry>説明</entry>
                    </row>
                 </thead>
                 <tbody>
                      <row>
                          <entry><code>cacheDir</code></entry>
                          <entry><code>string</code></entry>
                          <entry><code>'/tmp/'</code></entry>
                          <entry>
                              キャッシュファイルを書き込むディレクトリ。
                          </entry>
                      </row>
                      <row>
                          <entry><code>fileLocking</code></entry>
                          <entry><code>boolean</code></entry>
                          <entry><code>true</code></entry>
                          <entry>
                            ファイルロックを有効/無効にします。
                            不慮の事故でキャッシュが破壊されることを防げますが、
                            マルチスレッドなウェブサーバ環境や NFS ファイルシステム上では役に立ちません。
                          </entry>
                      </row>
                      <row>
                          <entry><code>readControl</code></entry>
                          <entry><code>boolean</code></entry>
                          <entry><code>true</code></entry>
                          <entry>
                            読み込み制御を有効/無効にします。有効にすると
                            キャッシュファイルに制御キーが埋め込まれます。
                            キャッシュの読み込み後、計算した結果とキャッシュのキーを比較します。
                          </entry>
                      </row>
                      <row>
                          <entry><code>readControlType</code></entry>
                          <entry><code>string</code></entry>
                          <entry><code>'crc32'</code></entry>
                          <entry>
                            読み込み制御の方式 (読み込み制御が有効な場合にのみ使用します)。
                            使用可能な値は
                            'md5' (一番安全だが、最も遅い)、
                            'crc32' (安全性には劣るが、より高速。悪くない選択肢です)、
                            'strlen' (最も高速。長さのみをチェックします)
                            のいずれかです。
                        </entry>
                      </row>
                      <row>
                          <entry><code>hashedDirectoryLevel</code></entry>
                          <entry><code>int</code></entry>
                          <entry><code>0</code></entry>
                          <entry>
                            ディレクトリ構造のレベルを指定します。0 は "ディレクトリ階層を作らない"、
                            1 は "一段階のサブディレクトリを作る"、2 は "二段階の……" を意味します。
                            何千ものキャッシュファイルを使用する場合にのみ、
                            このオプションによる高速化を実感できるでしょう。
                            適切な設定値を決めるには、実際にベンチマークを取得するしかありません。
                            たいていの場合は 1 または 2 でよいでしょう。
                          </entry>
                      </row>
                      <row>
                          <entry><code>hashedDirectoryUmask</code></entry>
                          <entry><code>int</code></entry>
                          <entry><code>0700</code></entry>
                          <entry>
                              ディレクトリ構造の umask を指定します。
                        </entry>
                      </row>
                  </tbody>
              </tgroup>
          </table>
    </sect2>
    <sect2 id="zend.cache.backends.sqlite">
        <title>Zend_Cache_Backend_Sqlite</title>
        <para>
            このバックエンドは、キャッシュレコードを
            SQLite データベースに保存します。
        </para>
        <para>
            使用可能なオプションは次のとおりです。
        </para>
        <table>
            <title>使用可能なオプション</title>
            <tgroup cols="4">
                 <thead>
                      <row>
                        <entry>オプション</entry>
                        <entry>データ型</entry>
                        <entry>デフォルト値</entry>
                        <entry>説明</entry>
                    </row>
                 </thead>
                 <tbody>
                      <row>
                          <entry><code>cacheDBCompletePath (mandatory)</code></entry>
                          <entry><code>string</code></entry>
                          <entry><code>null</code></entry>
                          <entry>
                              SQLite データベースへの (ファイル名も含めた) フルパス。
                          </entry>
                      </row>
                  </tbody>
              </tgroup>
          </table>
    </sect2>
    <sect2 id="zend.cache.backends.memcached">
        <title>Zend_Cache_Backend_Memcached</title>
        <para>
            このバックエンドは、キャッシュレコードを memcached サーバに保存します。
            <ulink url="http://www.danga.com/memcached/">memcached</ulink> は、
            高性能な分散メモリオブジェクトキャッシュシステムです。このバックエンドを使用するには、
            memcached デーモンおよび
            <ulink url="http://pecl.php.net/package/memcache">memcache PECL 拡張モジュール</ulink>
            が必要です。
        </para>
        <para>
            注意: このバックエンドでは、今のところ "タグ" がサポートされていません。
            また、引数 "doNotTestCacheValidity=true" もサポートされていません。
        </para>
        <para>
            使用可能なオプションは次のとおりです。
        </para>
        <table>
            <title>使用可能なオプション</title>
            <tgroup cols="4">
                 <thead>
                      <row>
                        <entry>オプション</entry>
                        <entry>データ型</entry>
                        <entry>デフォルト値</entry>
                        <entry>説明</entry>
                    </row>
                 </thead>
                 <tbody>
                      <row>
                          <entry><code>servers</code></entry>
                          <entry><code>array</code></entry>
                          <entry><code>array(array('host' => 'localhost','port' => 11211, 'persistent' => true))</code></entry>
                          <entry>
                              memcached サーバの配列です。各 memcached サーバの情報は、
                              以下のような連想配列で指定します。
                              'host' => (string) : memcached サーバのサーバ名
                              'port' => (int) : memcached サーバのポート番号
                              'persistent' => (bool) : この memcached サーバに対して持続的な接続を使用するかどうか
                          </entry>
                      </row>
                      <row>
                          <entry><code>compression</code></entry>
                          <entry><code>boolean</code></entry>
                          <entry><code>flase</code></entry>
                          <entry>
                             その場での圧縮処理を行いたい場合に true を指定します。
                          </entry>
                      </row>
                  </tbody>
              </tgroup>
          </table>
    </sect2>
    <sect2 id="zend.cache.backends.apc">
        <title>Zend_Cache_Backend_APC</title>
        <para>
            このバックエンドは、キャッシュレコードを共有メモリに保存する際に
            <ulink url="http://pecl.php.net/package/APC">APC</ulink> (Alternative PHP Cache)
            拡張モジュールを使用します
            (当然、このバックエンドを使用するにはこの拡張モジュールが必要です)。
        </para>
        <para>
            注意: このバックエンドでは、今のところ "タグ" がサポートされていません。
            また、引数 "doNotTestCacheValidity=true" もサポートされていません。
        </para>
        <para>
            このバックエンドではオプションを使用しません。
        </para>
    </sect2>
</sect1> 
  
<!--
vim:se ts=4 sw=4 et:
-->