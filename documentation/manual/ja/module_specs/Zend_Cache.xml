<sect1 id="zend.cache.introduction">
    <title>導入</title>
    <para>
        <code>Zend_Cache</code> は、データをキャッシュするための一般的な手法を提供します。
    </para>
    <para>
        キャッシュレコードは、"id" および "タグ" という柔軟な仕組みを用いてバックエンド
        (<code>File</code>、<code>Sqlite</code>...) に格納されます。そのため、
        キャッシュデータの一部だけ (「指定したタグがつけられているキャッシュレコードのみ」など)
        を削除することも簡単です。
    </para>
    <para>
        このモジュールの中心となる部分は、標準的で柔軟なものとなっています。とは言え、
        特定の目的のためには、より適切な実行結果を得るためのフロントエンド
        (<code>Output</code>、<code>Function</code>...)
        を使用することもできます。
    </para>
    <example>
        <title>Zend_Cache の最初の例</title>
        <para>
            まず最初の例として、Zend_Cache_Core を直接使用します。バックエンドには
            <code>File</code> を使用します。
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Cache.php';

$frontendOptions = array(
    'lifeTime' => 7200 // キャッシュの有効期限を 2 時間とします
);

$backendOptions = array(
    'cacheDir' => '/tmp/' // キャッシュファイルを書き込むディレクトリ
                          // (最後のスラッシュを忘れないようにしましょう)
);

// Zend_Cache_Core オブジェクトを作成します
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);

$id = 'foo'; // 「キャッシュしたい内容」のキャッシュ ID

if (!($cache->test($id))) {
    // キャッシュが存在しませんでした
    
    // require_once ... パフォーマンス上の理由により、"require_once" を行うのは
    //                  キャッシュがなかった場合にのみにしなければなりません
    // require_once ...
    
    // 「キャッシュしたい内容」を作成します
    // 例えば以下のような内容です
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    } 
    
    // 結果をキャッシュに保存します
    $cache->save($data);

} else {
    // キャッシュにヒットしました
    
    $data = $cache->get($id);

}

// $data を用いて何かをします :)
// [...]
?>]]>       </programlisting>
       </para>
    </example>
    <note>
        Zend_Cache_Core を使用する場合は「キャッシュ ID」を自分で管理しなければなりません。
    </note>
</sect1>

<sect1 id="zend.cache.factory">
    <title>Zend_Cache ファクトリ</title>
    <para>
        <code>Zend_Cache_*</code> オブジェクトを作成する方法はひとつだけです。
        どんな場合であっても (バックエンドあるいはフロントエンドにかかわらず)、
        <code>Zend_Cache</code> のファクトリを使用しなければなりません。
        フロントエンドのコンストラクタを直接使用しないようにしてください。
        これは正常に動作しません!
    </para>
    <para>
        使用可能な <code>Zend_Cache_*</code> のインスタンスを作成する方法を、
        以下の例で示します。
        <programlisting role="php"><![CDATA[<?php
        
# Zend_Cache ファクトリを読み込みます
require 'Zend/Cache.php'; 

# バックエンドを選びます (例えば 'File' や 'Sqlite'...)
$backendName = '[...]';

# フロントエンドを選びます (例えば 'Core'、'Output'、'Page'...)
$frontendName = '[...]';

# 選択したフロントエンド用のオプションを配列に設定します
$frontendOptions = array([...]);

# 選択したバックエンド用のオプションを配列に設定します
$backendOptions = array([...]);

# インスタンスを作成します
# (もちろん、最後の 2 つの引数は必須ではありません)
$cache = Zend_Cache::factory($frontendName, $backendName, $frontendOptions, $backendOptions);

[...]

?>]]>   </programlisting> 
    </para> 
    <para>
        これ以降のドキュメントでは、<code>$cache</code>
        の中身がこの例のとおりに設定されているものとします。
    </para> 
</sect1>

<sect1 id="zend.cache.core">
    <title>Zend_Cache_Core</title>
    <sect2 id="zend.cache.core.introduction">
        <title>導入</title>
        <para>
            <code>Zend_Cache_Core</code> は特別なフロントエンドであり、
            モジュールのコアに含まれています。その他のフロントエンドクラスは、
            すべてこのクラスを継承します。
            そのため、以下で説明しているメソッドおよびオプションの大半は、
            他のフロントエンドでも使用可能です。
        </para>
    </sect2>
    <sect2 id="zend.cache.core.options">
        <title>(Zend_Cache ファクトリで、このフロントエンド用に) 使用可能なオプション</title>
        <table>
            <title>使用可能なオプション</title>
            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>オプション</entry>
                        <entry>データ型</entry>
                        <entry>デフォルト値</entry>
                        <entry>説明</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>caching</code></entry>
                        <entry><code>boolean</code></entry>
                        <entry><code>true</code></entry>
                        <entry>
                            キャッシングを有効/無効にします
                            (キャッシュされたスクリプトのデバッグ時に有用です)。
                        </entry>
                    </row>
                    <row>
                        <entry><code>lifeTime</code></entry>
                        <entry><code>int</code></entry>
                        <entry><code>3600</code></entry>
                        <entry>
                            キャッシュの有効期限 (秒)。<code>null</code>
                            を指定すると、無期限で有効となります。
                        </entry>
                    </row>
                    <row>
                        <entry><code>logging</code></entry>
                        <entry><code>boolean</code></entry>
                        <entry><code>false</code></entry>
                        <entry>
                            true を指定すると、<code>Zend_Log</code> によるロギングが有効になります
                            (しかし、処理速度は低下します)。
                        </entry>
                    </row>
                    <row>
                        <entry><code>writeControl</code></entry>
                        <entry><code>boolean</code></entry>
                        <entry><code>true</code></entry>
                        <entry>
                            書き込み制御を有効/無効にします (壊れたエントリを検出するため、
                            書き込んだ直後にそのキャッシュを読み込みます)。
                            writeControl を有効にすると、キャッシュの書き込みがやや遅くなりますが、
                            読み込みの速度は変わりません
                            (これはキャッシュファイルが壊れているかどうかを調べるものですが、
                            完全に判断できるわけではありません)。
                        </entry>
                    </row>
                    <row>
                        <entry><code>automaticSerialization</code></entry>
                        <entry><code>boolean</code></entry>
                        <entry><code>false</code></entry>
                        <entry>
                            自動シリアライズを有効/無効にします。
                            文字列でないデータを直接保存する際に使用します
                            (しかし、処理速度は低下します)。
                        </entry>
                    </row>
                    <row>
                        <entry><code>automaticCleaningFactor</code></entry>
                        <entry><code>int</code></entry>
                        <entry><code>0</code></entry>
                        <entry>
                            自動クリーンアッププロセス (ガベージコレクタ) の設定を行います。
                            0 を指定すると、自動キャッシュクリーニングを行いません。
                            1 を指定すると計画的にキャッシュのクリーニングを行い、また
                            x (1 よりおおきな整数) を指定すると、
                            x 回のキャッシュ書き込みについて 1 回の頻度で
                            ランダムに自動クリーニングを行います。
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect2>
    <sect2 id="zend.cache.core.examples">
        <title>例</title>
        <para>
            最初の例は、いちばんはじめに示したチュートリアルに含まれています。
        </para>
        <para>
            もしキャッシュに文字列しか保存しないのなら
            ("automaticSerialization" オプションを使用すると boolean も保存できるので)、
            このようにもう少しコンパクトに作成することが可能です。
            <programlisting role="php"><![CDATA[<?php  
            
// [...] // require、設定そしてファクトリ

$id = 'foo'; // 「キャッシュしたい内容」のキャッシュ ID

if (!($data = $cache->get($id))) {
    // キャッシュが存在しませんでした
    
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    }
    
    $cache->save($data);
    
} 

// [...] $data を用いて何かをします (例えば "echo $data;")
            
?>]]>       </programlisting> 
        </para>  
        <para>
            複数のブロックやデータをキャッシュしたい場合も考え方は同じです。
            <programlisting role="php"><![CDATA[<?php  
            
// [...] // require、設定そしてファクトリ

$id1 = 'foo'; // ブロック 1 のキャッシュ ID
$id2 = 'bar'; // ブロック 2 のキャッシュ ID

// ブロック 1
if (!($data = $cache->get($id1))) {
    // キャッシュが存在しませんでした
    
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    }
    
    $cache->save($data);
    
} 
echo($data);

// 決してキャッシュされないブロック
echo('キャッシュされません !');

// ブロック 2
if (!($data = $cache->get($id2))) {
    // キャッシュが存在しませんでした
    
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . '!';
    }
    
    $cache->save($data);
    
} 
echo($data);


?>]]>       </programlisting>           
        </para>         
    </sect2>   
    <sect2 id="zend.cache.core.idandtags">
        <title>キャッシュ ID およびタグ</title>
        <para>
            "キャッシュ ID" は、キャッシュレコードを識別するための一意なキーです。
            フロントエンド (Core、Output...) の種類によっては、"キャッシュ ID"
            を自分で指定しなければならないものもあります。
            指定したページやブロックに対して一意な ID を使用するように注意しましょう。
        </para>
        <para>
            "タグ" は、キャッシュレコードを分類するための仕組みです。
            <code>save()</code> メソッドでキャッシュを保存する際に、
            適用するタグを配列で指定することができます。これを使用すると、
            指定したタグが設定されているキャッシュレコードのみを削除するといったことが可能となります。
            キャッシュレコードをグループ化して扱えるので、これはとても便利です。
        </para>
        <para>
            <code>save()</code> メソッドの完全な構文は以下のとおりです。
            <programlisting role="php"><![CDATA[<?php
            
    /**
     * Save some data in a cache 
     * 
     * @param mixed $data data to put in cache (can be another type than string if automaticSerialization is on)
     * @param cache $id cache id (if not set, the last cache id will be used)
     * @param array $tags cache tags
     * @return boolean true if no problem
     */
    public function save($data, $id = null, $tags = array()) {}
            
?>]]>       </programlisting>        
            つまり、例えば次のように使用できるということです。
            <programlisting role="php"><![CDATA[<?php
            
// [...]
$cache->save('保存するデータ', '一意なID', array('タグ1', 'タグ4', 'タグ5'));
// [...]    
            
?>]]>       </programlisting>                           
        </para>
    </sect2>
    <sect2 id="zend.cache.core.clean">
        <title>キャッシュの削除</title>
        <para>
            特定のキャッシュ ID を削除/無効化するには、<code>remove()</code>
            メソッドを使用します。
            <programlisting role="php"><![CDATA[<?php 
            
// [...]
$cache->remove('削除するID');
// [...]
            
?>]]>       </programlisting>           
        </para>
        <para>
            一回の操作で複数のキャッシュ ID を削除/無効化するには、<code>clean()</code>
            メソッドを使用します。例えば、すべてのキャッシュレコードを削除するには次のようにします。
            <programlisting role="php"><![CDATA[<?php 
            
// [...]
$cache->clean(Zend_Cache::CLEANING_MODE_ALL);
// [...]
            
?>]]>       </programlisting>           
            有効期限が過ぎたキャッシュレコードのみを削除するには、このようにします。
            <programlisting role="php"><![CDATA[<?php 
            
// [...]
$cache->clean(Zend_Cache::CLEANING_MODE_OLD);
// [...]
            
?>]]>       </programlisting>    
            タグ 'tag1' および 'tag3' に該当するキャッシュエントリを削除するには、このようにします。
            <programlisting role="php"><![CDATA[<?php 
            
// [...]
$cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG, array('tag1', 'tag3'));
// [...]
            
?>]]>       </programlisting>
            [...]   
        </para>
    </sect2>
</sect1>
<sect1 id="zend.cache.output">
    <title>Zend_Cache_Output</title>
    <para>
        あとで書く
    </para>
</sect1>    
<sect1 id="zend.cache.page">
    <title>Zend_Cache_Page</title>
    <para>
        あとで書く
    </para>
</sect1>  
<sect1 id="zend.cache.file">
    <title>Zend_Cache_File</title>
    <para>
        あとで書く
    </para>
</sect1> 
<sect1 id="zend.cache.function">
    <title>Zend_Cache_Function</title>
    <para>
        あとで書く
    </para>
</sect1> 
<sect1 id="zend.cache.class">
    <title>Zend_Cache_Class</title>
    <para>
        あとで書く
    </para>
</sect1> 
<sect1 id="zend.cache.backends">
    <title>Available backends for Zend_Cache</title>
    <sect2 id="zend.cache.backends.file">
        <title>Zend_Cache_Backend_File</title>
        <para>
            このバックエンドは、キャッシュレコードを
            (指定したディレクトリの) ファイルに保存します。
        </para>
        <para>
            使用可能なオプションは次のとおりです。
        </para>         
        <table>
            <title>使用可能なオプション</title>
            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>オプション</entry>
                        <entry>データ型</entry>
                        <entry>デフォルト値</entry>
                        <entry>説明</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>cacheDir</code></entry>
                        <entry><code>string</code></entry>
                        <entry><code>'/tmp/'</code></entry>
                        <entry>
                            キャッシュファイルを書き込むディレクトリ
                            (最後のスラッシュを忘れないようにしましょう)。
                        </entry>
                    </row>
                    <row>
                        <entry><code>fileLocking</code></entry>
                        <entry><code>boolean</code></entry>
                        <entry><code>true</code></entry>
                        <entry>
                            ファイルロックを有効/無効にします。
                            不慮の事故でキャッシュが破壊されることを防げますが、
                            マルチスレッドなウェブサーバ環境や NFS ファイルシステム上では役に立ちません。
                        </entry>
                    </row>
                    <row>
                        <entry><code>readControl</code></entry>
                        <entry><code>boolean</code></entry>
                        <entry><code>true</code></entry>
                        <entry>
                            読み込み制御を有効/無効にします。有効にすると
                            キャッシュファイルに制御キーが埋め込まれます。
                            キャッシュの読み込み後、計算した結果とキャッシュのキーを比較します。
                        </entry>
                    </row>
                    <row>
                        <entry><code>readControlType</code></entry>
                        <entry><code>string</code></entry>
                        <entry><code>'crc32'</code></entry>
                        <entry>
                            読み込み制御の方式 (読み込み制御が有効な場合にのみ使用します)。
                            使用可能な値は
                            'md5' (一番安全だが、最も遅い)、
                            'crc32' (安全性には劣るが、より高速。悪くない選択肢です)、
                            'strlen' (最も高速。長さのみをチェックします)
                            のいずれかです。
                        </entry>
                    </row>
                    <row>
                        <entry><code>hashedDirectoryLevel</code></entry>
                        <entry><code>int</code></entry>
                        <entry><code>0</code></entry>
                        <entry>
                            ディレクトリ構造のレベルを指定します。0 は "ディレクトリ階層を作らない"、
                            1 は "一段階のサブディレクトリを作る"、2 は "二段階の……" を意味します。
                            何千ものキャッシュファイルを使用する場合にのみ、
                            このオプションによる高速化を実感できるでしょう。
                            適切な設定値を決めるには、実際にベンチマークを取得するしかありません。
                            たいていの場合は 1 または 2 でよいでしょう。
                        </entry>
                    </row>
                    <row>
                        <entry><code>hashedDirectoryUmask</code></entry>
                        <entry><code>int</code></entry>
                        <entry><code>0700</code></entry>
                        <entry>
                            ディレクトリ構造の umask を指定します。
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect2>
    <sect2 id="zend.cache.backends.sqlite">
        <title>Zend_Cache_Backend_Sqlite</title>
        <para>
            このバックエンドは、キャッシュレコードを
            SQLite データベースに保存します。
        </para>
        <para>
            使用可能なオプションは次のとおりです。
        </para>
        <table>
            <title>使用可能なオプション</title>
            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>オプション</entry>
                        <entry>データ型</entry>
                        <entry>デフォルト値</entry>
                        <entry>説明</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>cacheDBCompletePath (必須)</code></entry>
                        <entry><code>string</code></entry>
                        <entry><code>null</code></entry>
                        <entry>
                            SQLite データベースへの (ファイル名も含めた) フルパス。
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect2>
</sect1> 
  
<!--
vim:se ts=4 sw=4 et:
-->