<sect1 id="zend.measure.creation">

    <title>計測値の作成</title>

    <para>
        計測値を表すオブジェクトを作成する際には、
        <code>Zend_Measure</code> のメソッドの最初のパラメータに
        入力値あるいは元の値を指定します。これは、
        <link linkend="zend.measure.creation.number"><code>数値の引数</code>
        </link>
        あるいは単位を含まない
        <link linkend="zend.measure.creation.string"><code>文字列</code>
        </link>、
        あるいは単位を指定した
        <link linkend="zend.measure.creation.localized"><code>各国固有の文字列</code>
        </link>
        のいずれかとなります。
        二番目の引数には、計測値の型を指定します。どちらのパラメータも必須です。
        三番目のパラメータは任意で、言語を指定します。
    </para>

    <sect2 id="zend.measure.creation.number">

        <title>変数をもとにした計測値</title>

        <example>
            <title>整数値を使用しての作成</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure/Length.php';

$integer = 1234;
$unit = new Zend_Measure_Length($integer,Zend_Measure_Length::STANDARD);

echo $unit;
// 出力は '1234 m' となります
?>]]></programlisting>
        </example>

        <note>
            <title>浮動小数点数の使用</title>
            <para>
                整数ではなく浮動小数点数を使用することもできます。しかし、
                <ulink url="http://www.php.net/float">"0.1 や 0.7 のようなシンプルな小数であっても、
                それを内部的な二進数表現に変換する際には、どうしても多少精度が落ちてしまいます。"</ulink>
                そのため、予期せぬ結果を引き起こすことがあります。
                また、ふたつの "浮動小数点数" が等しいかどうかを調べないようにしましょう。
            </para>
        </note>

    </sect2>

    <sect2 id="zend.measure.creation.string">

        <title>文字列をもとにした計測値</title>

        <para>
            ZF アプリケーションが入力として受け取って <code>Zend_Measure</code>
            クラスに渡す値の多くは、文字列としてしか渡せません。
            たとえば
            <ulink url="http://en.wikipedia.org/wiki/Roman_numerals">ローマ数字</ulink>
            の値は、PHP の整数型・浮動小数点型の制限を越える値などがこれにあたります。
            整数値は文字列として表すことも可能です。
            PHP の数値処理用関数の制限によって値の精度が損なわれる可能性がある場合は、
            代わりに文字列を使用するようにしましょう。
            <code>Zend_Measure_Number</code> は、BCMath 拡張モジュールを使用して
            任意の精度をサポートしています。以下の例に示すとおり、
            <ulink url="http://php.net/bin2dec"><code>bin2dec()</code>
            </ulink>
            のような多くの PHP 関数の制限を避けるようになっています。
        </para>

        <example>
            <title>文字列を使用しての作成</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure/Number.php';

$mystring = "10010100111010111010100001011011101010001";
$unit = new Zend_Measure_Number($mystring,Zend_Measure_Number::BINARY);

echo $unit;
?>]]></programlisting>
        </example>

        <para>
            計測値が、任意の文字列の中の一部であってもかまいません。通常は
            <code>Zend_Measure</code> が自動的に計測値を抽出します。
            数値として認識可能な値が最初に見つかった時点で、それを用いて値を作成します。
            文字列内に数値が複数あった場合は、それ以降のものは無視されます。
        </para>

        <example>
            <title>任意のテキスト</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure/Area.php';

$mystring = "My house is 125m² in size";
$unit = new Zend_Measure_Area($mystring,Zend_Measure_Area::STANDARD);

echo $unit;
?>]]></programlisting>
        </example>

        <example>
            <title>任意のテキスト</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure/Area.php';

$mystring = "My house is 125m² in size, it has 5 rooms of 25m² each.";
$unit = new Zend_Measure_Area($mystring,Zend_Measure_Area::STANDARD);

echo $unit;
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.measure.creation.localized">

        <title>ローカライズされた文字列をもとにした計測値</title>

        <para>
            各国固有の記法で文字列を入力した場合は、
            正しいロケールを知らない限りそれを正確に解釈できません。
            小数点に "." を用い、三桁ごとの桁区切り文字に ","
            を用いるのは英語では一般的です。しかし、その他の言語でもそうだとは限りません。
            例えば、英語の "1,234.50" は、ドイツ語では "1.2345" という意味になります。
            このような問題に対処するために、ロケールを考慮した
            <code>Zend_Measure</code> 系のクラスが用意されています。
            これは、言語や地域を指定することによって入力内容の曖昧さをなくし、
            意図した値として適切に解釈されるようにします。
        </para>

        <example>
            <title>ローカライズされた文字列</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Measure/Length.php';
Zend::loadClass('Zend_Measure');

$locale = new Zend_Locale('de');
$mystring = "1.234.567,89 Meter";
$unit = new Zend_Measure_Length($mystring,Zend_Measure_Length::STANDARD, $locale);

echo $unit;
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
