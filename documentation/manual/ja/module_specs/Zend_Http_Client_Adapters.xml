<sect1 id="zend.http.client.adapters">
    <title>Zend_Http_Client - 接続アダプタ</title>
    
    <sect2 id="zend.http.client.adapters.overview">
        <title>概要</title>
        <para>
            Zend_Http_Client は、接続アダプタとして設計されています。
            接続アダプタは実際にサーバへの接続を行うオブジェクトで、
            リクエストやレスポンスの処理も行います。
            この接続アダプタは置き換えることができます。
            つまり、デフォルトの接続アダプタを継承して自分の好みにあうように変更することができます。
            HTTP クライアントクラス全体を書き換える必要はありません。
            同じインターフェイスを実装しているだけでいいのです。
        </para>
        <para>
            現在、Zend_Http_Client クラスは三つの組み込み接続アダプタを提供しています。
            <itemizedlist>
                <listitem>
                    <para>
                        <code>Zend_Http_Client_Adapter_Socket</code> (デフォルト)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Http_Client_Adapter_Proxy</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>Zend_Http_Client_Adapter_Test</code>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Zend_Http_Client オブジェクトの接続アダプタを指定するには、
            設定オプション 'adapter' を使用します。
            クライアントオブジェクトのインスタンスを作成する際に、オプション
            'adapter' にアダプタの名前 (たとえば 'Zend_Http_Client_Adapter_Socket' など)
            を指定することができます。あるいは、アダプタオブジェクトの変数
            (たとえば <code>new Zend_Http_Client_Adapter_test</code> など) を指定することもできます。
            Zend_Http_Client->setConfig() メソッドを使用し、
            アダプタを後で設定することも可能です。
        </para>
        <para>
            デフォルトの接続アダプタは Zend_Http_Client_Adapter_Socket
            です。明示的に接続アダプタを指定しない場合は、これが使用されます。
            Socket アダプタは PHP の組み込み関数 fsockopen()
            を使用しており、特別な拡張モジュールやコンパイルオプションは必要ありません。
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.adapter.proxy">
        <title>プロキシアダプタ</title>
        <para>
            Zend_Http_Client_Adapter_Proxy アダプタはデフォルトのソケットアダプタとほぼ同じです。
            ただし、対象となるサーバに直接接続するのではなく
            HTTP プロキシサーバを経由して接続するという点が異なります。
            これにより、Zend_Http_Client をプロキシサーバの中から使用できるようになります。
            セキュリティやパフォーマンス上の理由により、これが必要となる場合もあるでしょう。
        </para>
        
        <para>
            プロキシアダプタを使用するには、
            デフォルトの 'adapter' オプション以外に
            いくつか追加のパラメータを設定する必要があります。
            <table>
                <title>Zend_Http_Client の設定パラメータ</title>
                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>パラメータ</entry>
                            <entry>説明</entry>
                            <entry>想定している型</entry>
                            <entry>値の例</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>proxy_host</entry>
                            <entry>プロキシサーバのアドレス</entry>
                            <entry>string</entry>
                            <entry>'proxy.myhost.com' あるいは '10.1.2.3'</entry>
                        </row>
                        <row>
                            <entry>proxy_port</entry>
                            <entry>プロキシサーバの TCP ポート</entry>
                            <entry>integer</entry>
                            <entry>8080 (デフォルト) あるいは 81</entry>
                        </row>
                        <row>
                            <entry>proxy_user</entry>
                            <entry>必要に応じて、プロキシのユーザ名</entry>
                            <entry>string</entry>
                            <entry>'shahar' あるいは指定しない場合は '' (デフォルト)</entry>
                        </row>
                        <row>
                            <entry>proxy_pass</entry>
                            <entry>必要に応じて、プロキシのパスワード</entry>
                            <entry>string</entry>
                            <entry>'secret' あるいは指定しない場合は '' (デフォルト)</entry>
                        </row>
                        <row>
                            <entry>proxy_auth</entry>
                            <entry>プロキシの HTTP 認証形式</entry>
                            <entry>string</entry>
                            <entry>Zend_Http_Client::AUTH_BASIC (デフォルト)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>
        <para>
            proxy_host は常に設定しなければなりません。指定しなかった場合は、
            自動的に Zend_Http_Client_Adapter_Socket による直接接続に切り替わります。
            proxy_port のデフォルトは '8080' です。もし別のポートをプロキシで使用している場合は、
            適切に設定する必要があります。
        </para>
        <para>
            proxy_user および proxy_pass は、
            プロキシサーバが認証を必要とする場合にのみ設定します。
            これらを指定すると、'Proxy-Authentication'
            ヘッダがリクエストに追加されます。プロキシで認証を必要としない場合は、
            このふたつのオプションはそのままにしておきます。
        </para>
        <para>
            proxy_auth は、プロキシが認証を必要としている場合に、
            その認証形式を指定します。設定できる値は
            Zend_Http_Client::setAuth() メソッドと同じです。現在はベーシック認証
            (Zend_Http_Client::AUTH_BASIC) のみをサポートしています。
        </para>
        <example>
            <title>プロキシサーバを使用した Zend_Http_Client の使用法</title>
            <programlisting role="php">
<![CDATA[<?php
    // 接続パラメータを設定します
    $config = array(
        'adapter'    => 'Zend_Http_Client_Adapter_Proxy',
        'proxy_host' => 'proxy.int.zend.com',
        'proxy_port' => 8000,
        'proxy_user' => 'shahar.e',
        'proxy_pass' => 'bananashaped'
    );
    
    // クライアントオブジェクトのインスタンスを作成します
    $client = Zend_Http_Client('http://www.example.com', $config);
    
    // 作業を続けます...
?>]]></programlisting>
        </example>
        <para>
            説明したとおり、もし proxy_host を省略したり空文字列を設定したりすると、
            自動的に直接接続に切り替わります。これにより、設定パラメータによって
            オプションでプロキシを使用できるようなアプリケーションを書くことが可能となります。
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.adapter.test">
        <title>テストアダプタ</title>
        <para>
            HTTP 接続に依存するテストコードを書くのは非常に難しいものです。
            たとえば、リモートサーバから RSS を取得するアプリケーションをテストするには、
            ネットワークにつながっている必要があります。常にネットワークが使用できるとは限りません。
        </para>
        <para>
            このようなときのためにあるのが Zend_Http_Client_Adapter_Test アダプタです。
            Zend_Http_Client を使用するアプリケーションを作成し、それをテストしたい場合には、
            デフォルトのアダプタを Test アダプタに変更します。
            これで、サーバに接続せずにテストを行えるようになります。
        </para>
        <para>
            Zend_Http_Client_Adapter_Test には setResponse() というメソッドがあります。
            このメソッドのパラメータには、HTTP レスポンスをテキストか
            Zend_Http_Response オブジェクトで指定することができます。
            レスポンスを設定すると、Test アダプタは常にこのレスポンスを返すようになります。
            実際の HTTP リクエストは行いません。
        </para>
        <example>
            <title>ネットワーク接続をせずにコードをテストする</title>
            <programlisting role="php">
<![CDATA[<?php
    // 新しいアダプタとクライアントのインスタンスを作成します
    $adapter = new Zend_Http_Client_Adapter_Test();
    $client = Zend_Http_Client('http://www.example.com', array(
        'adapter' => $adapter
    ));
    
    // 想定するレスポンスを設定します
    $adapter->setResponse(
        "HTTP/1.1 200 OK"        . "\r\n" .
        "Content-type: text/xml" . "\r\n" .
                                   "\r\n" . 
        '<?xml version="1.0" encoding="UTF-8"?>' . 
        '<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"' . 
        '     xmlns:wfw="http://wellformedweb.org/CommentAPI/"' . 
        '     xmlns:dc="http://purl.org/dc/elements/1.1/">' . 
        '  <channel>' . 
        '    <title>Premature Optimization</title>' . 
        // などなど...
        '</rss>');
    
    $response = $client->request('GET');
    // .. $response の処理を続けます...
?>]]></programlisting>
        </example>
        <para>
            上の例のようにすると、HTTP クライアントにお望みのレスポンスを返させることができます。
            その際にネットワーク接続は使用しません。また、実際のサーバからのレスポンスも使用しません。
            この場合、このテストでテストするのは、
            レスポンス本文の XML をアプリケーションが正しくパースできるかどうかということです。
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.adapter.extending">
        <title>独自の接続アダプタの作成</title>
        <para>
            独自の接続アダプタを作成し、それを使用することもできます。
            たとえば持続的なソケットを使用するアダプタを作成したり、
            キャッシュ機能を追加したアダプタを作成したりなど、
            作成するアプリケーションの要件にあわせたものを作成することが可能です。
        </para>
        <para>
            そのためには、Zend_Http_Client_Adapter_Interface
            を実装したクラスを作成する必要があります。
            以下の例は、ユーザ定義のアダプタクラスの雛形となります。
            この例で定義されているすべてのパブリック関数を、
            アダプタで定義する必要があります。
        </para>
        <example>
            <title>独自の接続アダプタの作成</title>
            <programlisting role="php">
<![CDATA[<?php
class MyApp_Http_Client_Adapter_BananaProtocol implements Zend_Http_Client_Adapter_Interface
{    
    /**
     * アダプタの設定配列を設定する
     *
     * @param array $config
     */
    public function setConfig($config = array())
    {
        // ここはほとんど変更することはありません -
        // 通常は Zend_Http_Client_Adapter_Socket の実装をコピーします
    }
    
    /**
     * リモートサーバに接続する
     *
     * @param string  $host
     * @param int     $port
     * @param boolean $secure
     */
    public function connect($host, $port = 80, $secure = false)
    {
        // リモートサーバとの接続を確立します
    }
    
    /**
     * リクエストをリモートサーバに送信する
     *
     * @param string        $method
     * @param Zend_Uri_Http $url
     * @param string        $http_ver
     * @param array         $headers
     * @param string        $body
     * @return string Request as text
     */
    public function write($method, $url, $http_ver = '1.1', $headers = array(), $body = '')
    {
        // リクエストをリモートサーバに送信します。
        // この関数は、リクエスト全体 (ヘッダおよび本文) を文字列で返します。
    }
    
    /**
     * サーバからのレスポンスを読み込む
     *
     * @return string
     */
    public function read()
    {
        // リモートサーバからのレスポンスを読み込み、それを文字列で返します。
    }
    
    /**
     * サーバとの接続を閉じる
     *
     */
    public function close()
    {
        // リモートサーバとの接続を閉じます。最後にコールされます。
    }
}    

// そして、このアダプタを使用します
$client = new Zend_Http_Client(array(
    'adapter' => 'MyApp_Http_Client_Adapter_BananaProtocol'
));
]]></programlisting>
        </example>
    </sect2>
</sect1>
