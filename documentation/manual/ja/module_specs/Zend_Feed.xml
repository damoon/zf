<sect1 id="zend.feed.introduction">
    <title>導入</title>
    <para>
        <code>Zend_Feed</code> は、RSS や Atom のフィードを扱う機能を提供します。
        フィードの要素や属性、そしてエントリの属性に、自然な方法でアクセスできるようになります。
        また、<code>Zend_Feed</code> でフィードやエントリの構造を変更し、
        その結果を XML に書き戻すという拡張機能もあります。将来的には Atom Publishig Protocol
        (AtomPP) にも対応させる予定です。
    </para>

    <para>
        <code>Zend_Feed</code> の構成は、基底クラス <code>Zend_Feed</code>、
        フィードやエントリを扱うための基底抽象クラス <code>Zend_Feed_Abstract</code>
        および <code>Zend_Feed_EntryAbstract</code>、RSS や Atom
        用のフィードクラスとエントリクラスの実装、
        そして自然な方法でそれらを操作するためのヘルパーから成り立っています。
    </para>

    <para>
        以下では、RSS フィードの取得、
        フィードデータの PHP 配列への変換、データの表示、
        データベースへの保存などの簡単な使用例を示します。
    </para>

    <note>
        RSS フィードによって、使用できるチャネルやアイテムのプロパティが違います。
        RSS の仕様ではオプションのプロパティが多く定義されているので、
        RSS データを扱うコードを書く際にはこのことに注意しましょう。
    </note>

    <example>
        <title>Zend_Feed による RSS フィードデータの使用</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Feed.php';

// 最新の Slashdot ヘッドラインを取得します
try {
    $slashdotRss = Zend_Feed::import('http://rss.slashdot.org/Slashdot/slashdot');
} catch (Zend_Feed_Exception $e) {
    // フィードの読み込みに失敗しました
    echo "フィードの読み込み中に例外が発生: {$e->getMessage()}\n";
    exit;
}

// チャネルデータの配列を初期化します
$channel = array(
    'title'       => $slashdotRss->title(),
    'link'        => $slashdotRss->link(),
    'description' => $slashdotRss->description(),
    'items'       => array()
    );

// チャネルの各項目をループし、関連するデータを保存します
foreach ($slashdotRss as $item) {
    $channel['items'][] = array(
        'title'       => $item->title(),
        'link'        => $item->link(),
        'description' => $item->description()
        );
}

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.importing">
    <title>Zend_Feed によるフィードの読み込み</title>
    <para>
        <code>Zend_Feed</code> を使用すると、フィードの取得が非常に簡単に行えます。
        フィードの URI がわかれば、単に <code>Zend_Feed::import()</code>
        メソッドを使用すればよいのです。
        <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]>   </programlisting>
    </para>
    <para>
        <code>Zend_Feed</code> を使用して、ファイルや PHP
        文字列変数からフィードを読み込むこともできます。
        <programlisting role="php"><![CDATA[
<?php

// テキストファイルからフィードを読み込みます
$feedFromFile = Zend_Feed::importFile('feed.xml');

// PHP の文字列変数からフィードを読み込みます
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
    </para>
    <para>
        上のすべての例では、成功した場合に返されるのは
        <code>Zend_Feed_Abstract</code> を実装したクラスのオブジェクトで、
        フィードの形式によって異なります。もし上のメソッドで RSS フィードを取得したのなら、
        返されるオブジェクトは <code>Zend_Feed_Rss</code> です。一方、Atom
        フィードを読み込んだのなら <code>Zend_Feed_Atom</code>
        オブジェクトが返されます。読み込みに失敗したりフィードの形式がおかしかったりした場合は
        <code>Zend_Feed_Exception</code> がスローされます。
    </para>
</sect1>

<sect1 id="zend.feed.findFeeds">
    <title>ウェブページからのフィードの取得</title>
    <para>
        ウェブページの中には、そのページの内容に関連するフィードを参照する
        <code>&lt;link&gt;</code> タグが含まれていることがあります。
        <code>Zend_Feed</code> を使用すると、
        単純にひとつのメソッドをコールするだけでこのようなフィードを取得できます。
        <programlisting role="php"><![CDATA[
<?php

$feedArray = Zend_Feed::findFeeds('http://www.example.com/news.html');

?>]]></programlisting>
        <code>findFeeds()</code> メソッドは <code>Zend_Feed_Abstract</code>
        オブジェクトの配列を返します。その内容は、news.html の中の
        <code>&lt;link&gt;</code> が指しているものとなります。
        各フィードの形式によって、<code>$feedArray</code>
        の対応するエントリは <code>Zend_Feed_Rss</code> あるいは
        <code>Zend_Feed_Atom</code> のインスタンスとなります。
        HTTP 404 が返された場合やフィードの形式がおかしかった場合など、失敗した場合には
        <code>Zend_Feed</code> は <code>Zend_Feed_Exception</code>
        をスローします。
    </para>
</sect1>

<sect1 id="zend.feed.consuming-rss">
    <title>RSS フィードの使用</title>
    <para>
        RSS フィードの読み込みは、フィードの URL を指定して
        <code>Zend_Feed_Rss</code> のインスタンスを作成するのと同じくらい簡単です。
        <programlisting role="php"><![CDATA[
<?php

$channel = new Zend_Feed_Rss('http://rss.example.com/channelName');

?>]]></programlisting>
        フィードの取得時にエラーが発生した場合は
        <code>Zend_Feed_Exception</code> がスローされます。
    </para>

    <para>
        フィードオブジェクトを取得すると、標準的な RSS の "channel"
        プロパティに対して直接アクセスできるようになります。
        <programlisting role="php"><![CDATA[
<?php

echo $channel->title();

?>]]></programlisting>
        関数の構文に注意しましょう。"getter" 方式の構文 (<code>$obj->property</code>)
        をした場合は、<code>Zend_Feed</code> はプロパティを XML オブジェクトとして扱います。
        一方、メソッドの構文 (<code>$obj->property()</code>)
        を使用した場合は文字列として扱います。
        これにより、特定のノードを取得したあとで、さらにその子要素にもアクセスできるようになります。
    </para>

    <para>
        チャネルのプロパティが属性を保持している場合、PHP
        の配列構文を使用してそれらにアクセスすることができます。
        <programlisting role="php"><![CDATA[
<?php

echo $channel->category['domain'];

?>]]></programlisting>
        XML の属性は子を持つことができないので、
        属性値へアクセスする際にメソッド構文を使用する必要はありません。
    </para>

    <para>
        たいていの場合は、フィードをループさせたうえで、
        個々のエントリに対して何かをすることになるでしょう。
        <code>Zend_Feed_Abstract</code> は PHP の <code>Iterator</code>
        インターフェイスを実装しているので、
        例えばチャネル内の全記事のタイトルを表示するには単にこのようにするだけです。
        <programlisting role="php"><![CDATA[
<?php

foreach ($channel as $item) {
    echo $item->title() . "\n";
}

?>]]></programlisting>
        RSS にあまり詳しくない方のために、RSS チャネルおよび個々の RSS
        アイテム (エントリ) で利用できる標準的な要素をまとめます。
    </para>

    <para>
        必須のチャネル要素
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - チャネルの名前</para>
            </listitem>
            <listitem>
                <para><code>link</code> - チャネルに対応するウェブサイトの URL</para>
            </listitem>
            <listitem>
                <para><code>description</code> - チャネルについての説明</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        よく使用されるオプションのチャネル要素
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>pubDate</code> - 
                コンテンツの発行日を RFC 822 の日付書式で表したもの</para>
            </listitem>
            <listitem>
                <para><code>language</code> - チャネルで使用している言語</para>
            </listitem>
            <listitem>
                <para><code>category</code> - 
                チャネルの所属するカテゴリ (複数の場合は複数のタグで指定)</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        RSS の <code>&lt;item&gt;</code> 要素には必須要素はありません。
        しかし <code>title</code> あるいは <code>description</code>
        が存在しなければなりません。
    </para>

    <para>
        よく使用されるアイテム要素
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - アイテムのタイトル</para>
            </listitem>
            <listitem>
                <para><code>link</code> - アイテムの URL</para>
            </listitem>
            <listitem>
                <para><code>description</code> - アイテムの概要</para>
            </listitem>
            <listitem>
                <para><code>author</code> - 著者のメールアドレス</para>
            </listitem>
            <listitem>
                <para><code>category</code> - アイテムが所属するカテゴリ</para>
            </listitem>
            <listitem>
                <para><code>comments</code> - このアイテムに関連するコメントの URL</para>
            </listitem>
            <listitem>
                <para><code>pubDate</code> - アイテムの発行日を RFC 822 の日付書式で表したもの</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        要素が空要素であるかどうかは、以下のようにして調べられます。
        <programlisting role="php"><![CDATA[
<?php

if ($item->propname()) {
    // ... 続行できます
}

?>]]></programlisting>
    </para>

    <para>
        <code>$item->propname</code> 形式を使用した場合は、
        空のオブジェクトについても <code>TRUE</code> と評価されてしまうので、
        このように調べることはできません。
    </para>

    <para>
        詳細な情報は、
        <ulink url="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</ulink>
        にある RSS 2.0 の公式仕様を参照ください。
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom">
<title>Atom フィードの使用</title>

    <para>
        <code>Zend_Feed_Atom</code> の使用法は <code>Zend_Feed_Rss</code>
        と似ていで、フィードのプロパティへのアクセス、
        フィード内のエントリの順次処理などができるようになります。大きな違いは
        Atom プロトコルの構造自体によるものです。Atom は RSS の後継として作成されたもので、
        より一般的なプロトコルです。
        フィード内に全コンテンツを含めるような形式をより簡単に扱うように設計されており、
        RSS の <code>description</code> タグに該当するものが
        <code>summary</code> と <code>content</code> の 2 つの要素に分割されています。
    </para>

    <example>
        <title>Atom フィードの基本的な使用法</title>
        <para>
            Atom フィードを読み込み、各エントリの <code>title</code> と
            <code>summary</code> を表示します。
        </para>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/');
echo 'このフィードには ' . $feed->count() . ' 件のエントリが含まれます。' . "\n\n";
foreach ($feed as $entry) {
    echo 'タイトル: ' . $entry->title() . "\n";
    echo '概要: ' . $entry->summary() . "\n\n";
}

?>]]>   </programlisting>
    </example>

    <para>
        Atom フィードでは、フィードのプロパティとして以下のようなものが使用できます。
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - フィードのタイトル。RSS チャネルの title と同じです</para>
            </listitem>
            <listitem>
                <para><code>id</code> -
                Atom では、すべてのフィードやエントリが ID を持っています</para>
            </listitem>
            <listitem>
                <para><code>link</code> - フィードには複数のリンクを含めることができ、
                それらは <code>type</code> 属性によって識別されます</para>
                <para>
                    <code>type="text/html"</code> とすると、RSS チャネルの link
                    と同等になります。リンク先がこのフィードのコンテンツの別バージョンである場合は、
                    <code>rel="alternate"</code> 属性を使用します。
                </para>
            </listitem>
            <listitem>
                <para><code>subtitle</code> - フィードの説明。RSS チャネルの description
                と同じです
                </para>
                <para><code>author->name()</code> - フィードの著者の名前</para>
                <para><code>author->email()</code> - フィードの著者のメールアドレス</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Atom エントリでよく使用されるプロパティは以下のようになります。
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>id</code> - エントリの ID</para>
            </listitem>
            <listitem>
                <para><code>title</code> - エントリのタイトル。RSS アイテムの title と同じです</para>
            </listitem>
            <listitem>
                <para><code>link</code> - このエントリの別フォーマットの文書へのリンク</para>
            </listitem>
            <listitem>
                <para><code>summary</code> - エントリの概要</para>
            </listitem>
            <listitem>
                <para><code>content</code> - エントリの完全なテキスト。
                概要のみを提供するフィードの場合は省略可能です</para>
            </listitem>
            <listitem>
                <para><code>author</code> - フィードと同様に <code>name</code> および <code>email</code>
                を配下に保持します</para>
            </listitem>
            <listitem>
                <para><code>published</code> - エントリの公開日 (RFC 3339 形式)</para>
            </listitem>
            <listitem>
                <para><code>updated</code> - エントリの最終更新日 (RFC 3339 形式)</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Atom についての詳細な情報やリソースについては
        <ulink url="http://www.atomenabled.org/">http://www.atomenabled.org/</ulink>
        を参照ください。
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom-single-entry">
    <title>単一の Atom エントリの処理</title>

    <para>
        Atom の個々の <code>&lt;entry&gt;</code> 要素は、それ単体でも有効です。通常、
        エントリの URL はフィードの URL に <code>/&lt;エントリId&gt;</code>
        を続けたものになります。先に使用した例の場合は、
        <code>http://atom.example.com/feed/1</code> となります。
    </para>

    <para>
        単一のエントリを読み込む場合にも <code>Zend_Feed_Atom</code>
        オブジェクトを使用しますが、この場合は「無名 (anonymous)」
        フィードが自動的に作成され、エントリがその中に含まれる形式になります。
    </para>

    <example>
        <title>Atom フィードからの単一のエントリの読み込み</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
echo 'このフィードには ' . $feed->count() . ' 件のエントリが含まれます。';

$entry = $feed->current();

?>]]>   </programlisting>
    </example>

    <para>
        <code>&lt;entry&gt;</code> のみのドキュメントにアクセスすることがわかっている場合は、
        エントリオブジェクトを直接作成することもできます。
    </para>

    <example>
        <title>単一エントリの Atom フィードに対する、エントリオブジェクトを直接使用したアクセス</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom('http://atom.example.com/feed/1');
echo $entry->title();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.modifying-feed">
    <title>フィードおよびエントリの構造の変更</title>

    <para>
        フィードやエントリを読み込むだけでなく、それらを作成したり変更したりする場合にも
        <code>Zend_Feed</code> の自然な構文が使用できます。
        作成したり変更したりしたオブジェクトを、
        妥当な形式の XML でファイルに保存したりサーバに送信したりといったことが簡単にできます。
    </para>

    <example>
        <title>既存のフィードエントリの変更</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = '新しいタイトルです';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
            これは、必要な XML 名前空間も含めた完全な
            (最初の <code>&lt;?xml ... &gt;</code> も含めた)
            XML 表記で新しいエントリを出力します。
        </para>
        <para>
            既存のエントリが author タグを保持していない場合にも、
            上の例は正しく動作することに注意しましょう。
            代入する場所を指定するために、いくらでも <code>-&gt;</code>
            をつなげることができます。その途中の段階の要素は、
            必要に応じて自動的に作成されます。
        </para>
    </example>

    <para>
        <code>atom:</code>、<code>rss:</code>、<code>osrss:</code>
        以外の名前空間をエントリで使用したい場合は、<code>Zend_Feed::registerNamespace()</code>
        を使用して <code>Zend_Feed</code> で名前空間を登録する必要があります。
        既存の要素を書き換えた場合は、常にもとの名前空間が維持されます。
        新しい要素を追加する場合には、
        明示的に名前空間を指定しない限りデフォルトの名前空間に配置されます。
    </para>

    <example>
        <title>独自の名前空間の要素としての Atom エントリの作成</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom();
// Atom では id は常にサーバから割り当てられます
$entry->title = 'カスタムエントリ';
$entry->author->name = '著者名';
$entry->author->email = 'me@example.com';

// 独自の部分です
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'はじめての独自の値';
$entry->{'myns:container_elt'}->part1 = '入れ子になった独自部分、その1';
$entry->{'myns:container_elt'}->part2 = '入れ子になった独自部分、その2';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.custom-feed">
    <title>独自のフィードクラスおよびエントリクラス</title>

    <para>
        独自のフォーマットを提供したい、
        あるいは要素が自動的に所定の名前空間に配置されるなどの素敵な機能を追加したい、
        といった場合は <code>Zend_Feed</code> クラスを拡張して対応します。
    </para>

    <para>
        以下に Atom エントリクラスを拡張する例を示します。
        このクラスでは、独自の名前空間 <code>myns:</code> を使用しています。
        また、<code>registerNamespace()</code> がコールされていることに注意しましょう。
        このクラスの使用者は、名前空間について心配する必要がなくなります。
    </para>

    <example>
        <title>独自の名前空間を使用しての Atom エントリクラスの拡張</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * この独自エントリクラスは、自動的にフィード URI を識別 (オプション) して
 * 名前空間を追加します
 */
class MyEntry extends Zend_Feed_EntryAtom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // myUpdated を myns:updated に変換します
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // myUpdated を myns:updated に変換します
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
            そしてこのクラスを使用すると、インスタンスを作成したらすぐに
            <code>myUpdated</code> プロパティを設定することができます。
            <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>       </programlisting>
        </para>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->