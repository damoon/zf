<sect1 id="zend.session.advancedusage">

    <title>高度な使用法</title>

    <para>
        基本的な使用法の例で Zend Framework のセッションを完全に使用することができますが、
        よりよい方法もあります。
        <link linkend="zend.auth.introduction.using"><code>Zend_Auth</code> のサンプル</link>
        を見てみましょう。これは、デフォルトで Zend_Session_Namespace を使用することにより、
        認証トークンを持続的に保持している例です。
        この例は、Zend_Session_Namespace および Zend_Auth
        を手早く簡単に統合するためのひとつの方法を示すものです。
    </para>

    <sect2 id="zend.session.startingasession">

        <title>セッションの開始</title>

        <para>
            すべてのリクエストで Zend Framework のセッションを使用してセッション管理したい場合は、
            起動ファイルでセッションを開始します。
        </para>

        <example>
            <title>グローバルセッションの開始</title>
<programlisting role="php">
<![CDATA[<?php
...
require_once 'Zend/Session.php';
Zend_Session::start();
...
?>]]></programlisting>
        </example>

        <para>
            起動ファイルでセッションを開始する際には、
            ヘッダがブラウザに送信される前に確実にセッションが始まるようにします。
            そうしないと例外が発生してしまい、おそらくユーザが見るページは崩れてしまうでしょう。
            さまざまな高度な機能を使用するには、まず <code>Zend_Session::start()</code>
            が必要です (高度な機能の詳細については後で説明します)。
        </para>

        <para>
            Zend_Session を使用してセッションを開始する方法は四通りありますが、
            そのうち二つは間違った方法です。
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    1. 間違い: PHP の session.auto_start
                    (http://www.php.net/manual/ja/ref.session.php#ini.session.auto-start)
                    を、php.ini や .htaccess で設定してはいけません。
                    もし mod_php (やそれと同等のもの) を使用しており、
                    php.ini でこの設定が有効になっている、かつそれを無効にすることができない
                    という場合は、.htaccess ファイル (通常は HTML のドキュメントルートにあります)
                    に <code>php_value session.auto_start 0</code> を追加します。
                </para>
            </listitem>
            <listitem>
                <para>
                    2. 間違い: PHP の <code>
                    <ulink url="http://www.php.net/session_start">session_start()</ulink>
                    </code> 関数を直接使用してはいけません。
                    <code>session_start()</code> を直接使用した後で Zend_Session_Namespace を使用した場合は、
                    <code>Zend_Session::start()</code> が例外 ("session has already been started")
                    をスローします。Zend_Session_Namespace を使用するか
                    明示的に <code>Zend_Session::start()</code> で開始した後で
                    <code>session_start()</code> をコールすると、E_NOTICE
                    が発生し、そのコールは無視されます。
                </para>
            </listitem>
            <listitem>
                <para>
                    3. 正解: <code>Zend_Session::start()</code> を使用します。
                    すべてのリクエストでセッションを使用したい場合は、
                    この関数コールを ZF の起動コードの最初のほうで無条件に記述します。
                    セッションにはある程度のオーバーヘッドがあります。
                    セッションを使用したいリクエストとそうでないリクエストがある場合は、
                </para>
                <itemizedlist mark='opencircle'>
                    <listitem>
                        <para>
                            起動コード内で、無条件にオプション <code>strict</code> を true にします (
                            <link
                        linkend="zend.session.startingasession"><code>Zend_Session::setOptions()</code>
                            </link> を参照ください
                            )。
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            セッションを必要とするリクエスト内で、
                            最初に <code>new Zend_Session_Namespace()</code>
                            をコールする前に、<code>Zend_Session::start()</code> をコールします。
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            通常どおり、必要に応じて <code>new Zend_Session_Namespace()</code>
                            を使用します。事前に <code>Zend_Session::start()</code>
                            がコールされていることを確認しておきましょう。
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    <code>strict</code> オプションにより、<code>new Zend_Session_Namespace()</code>
                    が自動的に <code>Zend_Session::start()</code> でセッションを開始することがなくなります。
                    したがって、このオプションを使用すると、ZF アプリケーションの開発者が
                    特定のリクエストにはセッションを使用しないという設計をおこなうことができます。
                    このオプションを使用すると、明示的に
                    <code>Zend_Session::start()</code> をコールする前に Zend_Session_Namespace
                    のインスタンスを作成しようとしたときに例外がスローされます。
                    ZF のコアライブラリのコードではこのオプションを使用しないでください。
                    このような設計上の決断をくだすのは、アプリケーションの開発者だからです。
                    同様に、"ライブラリ" の開発者も、<code>Zend_Session::setOptions()</code>
                    の使用がユーザにどれだけの影響を与えるかを注意するようにしましょう。
                    これらのオプションは
                    (もととなる ext/session のオプションと同様)、
                    全体に副作用を及ぼすからです。
                </para>
            </listitem>
            <listitem>
                <para>
                    4. 正解: 必要に応じて <code>new Zend_Session_Namespace()</code> を使用します。
                    セッションは、Zend_Session の内部で自動的に開始されます。
                    これはもっともシンプルな使用法で、たいていの場合にうまく動作します。
                    しかし、デフォルトであるクッキーベースのセッション (強く推奨します)
                    を使用している場合には、PHP がクライアントに何らかの出力
                    (<ulink url="http://www.php.net/headers_sent">HTTP ヘッダ</ulink> など)
                    をする <emphasis role="strong">前に</emphasis>、確実に
                    最初の <code>new Zend_Session_Namespace()</code> をコールしなければなりません。
                    詳細は <xref linkend="zend.session.errors.headerssent" />
                    を参照ください。
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.session.locking">

        <title>セッション名前空間のロック</title>

        <para>
            セッション名前空間をロックし、
            それ以降その名前空間のデータに手を加えられないようにすることができます。
            特定の名前空間を読み取り専用にするには
            Zend_Session_Namespace の <code>lock()</code> を、そして
            読み取り専用の名前空間を読み書きできるようにするには <code>unLock()</code>
            を使用します。<code>isLocked()</code> を使用すると、
            その名前空間がロックされているかどうかを調べることができます。
            このロックは一時的なものであり、そのリクエスト内でのみ有効となります。
            名前空間をロックしても、その名前空間に保存されているオブジェクトの
            セッターメソッドには何の影響も及ぼしません。
            しかし、名前空間自体のセッターメソッドは使用できず、
            名前空間に直接格納されたオブジェクトの削除や置換ができなくなります。同様に、
            Zend_Session_Namespace の名前空間をロックしたとしても、
            同じデータをさすシンボルテーブルの使用をとめることはできません
            (<ulink url="http://www.php.net/references">PHP
            のリファレンスについての説明</ulink>も参照ください)。
        </para>

        <example>
            <title>セッション名前空間のロック</title>
<programlisting role="php">
<![CDATA[<?php
    // このように仮定します
    $userProfileNamespace = new Zend_Session_Namespace('userProfileNamespace');

    // このセッションに読み取り専用ロックをかけます
    $userProfileNamespace->lock();

    // 読み取り専用ロックを解除します
    if ($userProfileNamespace->isLocked()) {
        $userProfileNamespace->unLock();
    }
?>]]></programlisting>
        </example>

        <para>
            ウェブの世界で、MVC のモデルをどのように管理するかについては、
            さまざまな考え方があります。その中のひとつに、
            ビューで使用するプレゼンテーションモデルを作成するというものもあります。
            ドメインモデルの中にある既存のデータで十分ということもあるでしょう。
            ビューの中でこれらのデータに処理ロジックが書きくわえられてしまうことのないように、
            セッション名前空間をロックしてからその「プレゼンテーション」
            モデルをビューに渡すようにしましょう。
        </para>

        <example>
            <title>ビューにおけるセッションのロック</title>
<programlisting role="php">
<![CDATA[<?php
class FooModule_View extends Zend_View
{
    public function show($name)
    {
        if (!isset($this->mySessionNamespace)) {
            $this->mySessionNamespace = Zend::registry('FooModule');
        }

        if ($this->mySessionNamespace->isLocked()) {
            return parent::render($name);
        }

        $this->mySessionNamespace->lock();
        $return = parent::render($name);
        $this->mySessionNamespace->unLock();

        return $return;
    }
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.expiration">

        <title>名前空間の有効期限</title>

        <para>
            名前空間およびその中の個々のキーについて、その寿命を制限することができます。
            これは、たとえばリクエスト間で一時的な情報を渡す際に使用します。
            これにより、認証内容などの機密情報へアクセスできないようにし、
            セキュリティリスクを下げます。有効期限の設定は経過秒数によって決めることもできますし、
            "ホップ" 数によって決めることもできます。ホップ数とは、
            一連のリクエストにおいて、最低でも一度の
            <code>$space = new Zend_Session_Namespace('myspace');</code>
            で名前空間をアクティブにした回数を表します。
        </para>

        <example>
            <title>有効期限切れの例</title>
<programlisting role="php">
<![CDATA[<?php
$s = new Zend_Session_Namespace('expireAll');
$s->a = 'apple';
$s->p = 'pear';
$s->o = 'orange';

$s->setExpirationSeconds(5, 'a'); // キー "a" だけは 5 秒で有効期限切れとなります

// 名前空間全体は、5 "ホップ" で有効期限切れとなります
$s->setExpirationHops(5);

$s->setExpirationSeconds(60);                  
// "expireAll" 名前空間は、60 秒が経過するか
// 5 ホップに達するかのどちらかが発生した時点で
// "有効期限切れ" となります
?>]]></programlisting>
        </example>

        <para>
            現在のリクエストで期限切れになったデータを扱うにあたり、
            データを取得する際には注意が必要です。
            データは参照で返されますが、それを変更したとしても
            期限切れのデータを現在のリクエストから持ち越すことはできません。
            有効期限を "リセット" するには、取得したデータをいったん一時変数に格納し、
            名前空間上の内容を削除し、あらためて適切なキーで再設定します。
        </para>

    </sect2>

    <sect2 id="zend.session.controllers">

        <title>コントローラでのセッションのカプセル化</title>

        <para>
            名前空間を使用すると、コントローラによるセッションへのアクセスの際に
            変数の汚染を防ぐこともできます。
            たとえば、'Zend_Auth' コントローラでは、そのセッション状態データを
            他のコントローラとは別に管理することになるでしょう。
        </para>

        <example>
            <title>コントローラでの名前空間つきセッションによる有効期限の管理</title>
<programlisting role="php">
<![CDATA[<?php
require_once 'Zend/Session.php';
// 質問を表示するコントローラ
$testSpace = new Zend_Session_Namespace('testSpace');
$testSpace->setExpirationSeconds(300, "accept_answer"); // $test_session->setExpirationSeconds(300, "accept_answer"); // この変数にだけ有効期限を設定します
$testSpace->accept_answer = true;


--

// 回答を処理するコントローラ
$testSpace = new Zend_Session_Namespace('testSpace');

if ($testSpace->accept_answer === true) {
    // 時間内
}
else {
    // 時間切れ
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.limitinginstances">

        <title>名前空間内での Zend_Session_Namespace のインスタンスをひとつに制限する</title>

        <para>
            ここで説明する機能を使用するよりも、セッションのロック (上を参照ください)
            を使うことを推奨します。ここで説明する機能は、
            各名前空間へのアクセスが必要なすべての関数およびオブジェクトに
            Zend_Session_Namespace のインスタンスを渡さなければならず、
            開発者への負担が大きくなります。
        </para>

        <para>
            特定の名前空間用に Zend_Session_Namespace の最初のインスタンスを作成する際に、
            その名前空間ではこれ以上別の Zend_Session_Namespace を作成しないよう指示することができます。
            こうすると、その後同じ名前空間で Zend_Session_Namespace
            のインスタンスを作成しようとした際にエラーが発生します。
            これはオプションの設定であり、デフォルトではありません。ひとつの名前空間に対しては
            ひとつのインスタンスだけを使用したいという人のために残しています。
            これは、特定のセッション名前空間を
            コンポーネントが不意に書き換えてしまう危険性を減らします。
            セッションへのアクセスが容易ではなくなるからです。
            しかし、名前空間に対してひとつのインスタンスに限定してしまうと、
            コードの量が増え、より複雑になってしまいます。なぜなら、便利な
            <code>$aNamespace = new Zend_Session_Namespace('aNamespace');</code>
            が最初の一度しか使えなくなるからです。それ以降は、以下の例のようになります。
        </para>

        <example>
            <title>単一のインスタンスへの制限</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $authSpaceAccessor1 = new Zend_Session_Namespace('Zend_Auth');
    $authSpaceAccessor2 = new Zend_Session_Namespace('Zend_Auth', Zend_Session_Namespace::SINGLE_INSTANCE);
    $authSpaceAccessor1->foo = 'bar';
    assert($authSpaceAccessor2->foo, 'bar'); // 通過します
    doSomething($options, $authSpaceAccessor2); // 必要に応じてアクセサを渡します
    .
    .
    .
    $aNamespaceObject = new Zend_Session_Namespace('Zend_Auth'); // これはエラーとなります
?>]]></programlisting>
        </example>

        <para>
            上の例で Zend_Session_Namespace のコンストラクタの第二パラメータで指定しているのは、
            今後 'Zend_Auth' 名前空間で新たに Zend_Session を作成することができないということです。
            作成しようとすると、例外がスローされます。
            上のコードを実行した後は <code>new Zend_Session_Namespace('Zend_Auth')</code> 
            ができなくなります。そのため、
            同一リクエスト内でその名前空間のセッションを使用するには、
            最初に作成したインスタンス
            (上の例では <code>$authSpaceAccessor2</code>)
            をどこかに保存しておく必要があります。
            たとえば静的変数にこのインスタンスを格納したり、
            この名前空間のセッションを必要とするメソッドに直接渡したりします。
            セッションのロック (上を参照ください) のほうが、
            名前空間へのアクセスを制限する方法としてはより便利で簡単です。
        </para>

    </sect2>

    <sect2 id="zend.session.modifyingarray">

        <title>名前空間での配列の使用</title>

        <para>
            名前空間内の配列を変更することはできません。
            最も簡単な対応法は、必要な値をすべて設定してから配列を保存することです。
            <ulink url="http://framework.zend.com/issues/browse/ZF-800">ZF-800</ulink>
            で、マジックメソッドと配列を使用している多くの PHP
            アプリケーションに影響する既知の問題を説明しています。
        </para>

        <example>
            <title>配列に関する既知の問題</title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array();
    $sessionNamespace->array['testKey'] = 1; // PHP 5.2.1 より前のバージョンでは動作しません
?>]]></programlisting>
        </example>

        <para>
            セッション名前空間に代入した後で配列を変更する必要が出てきた場合は、
            まずいったん配列を取得します。
        </para>

        <example>
            <title>回避策: 取得して変更し、そして保存する</title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array('tree' => 'apple');
    $tmp = $sessionNamespace->array;
    $tmp['fruit'] = 'peach';
    $sessionNamespace->array = $tmp;
?>]]></programlisting>
        </example>

        <para>
            あるいは、目的の配列への参照を保持する配列をセッションに保存し、
            間接的にアクセスします。
        </para>

        <example>
            <title>回避策: 参照を含む配列を保存する</title>
<programlisting role="php">
<![CDATA[<?php
    $myNamespace = new Zend_Session_Namespace('mySpace');

    // バグのあるバージョンの PHP でも動作します
    $a = array(1,2,3);
    $myNamespace->someArray = array( & $a ) ;
    $a['foo'] = 'bar';
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.auth">

        <title>セッションと認証の共用</title>

        <para>
            <code>Zend_Auth</code> 用の認証アダプタが返す承認結果がオブジェクトであって
            (非推奨です) 配列ではなかった場合は、セッションを開始する前に
            承認クラスを require しておく必要があります。
            そのかわりに、セッション名前空間の既知のキーをもとに認証アダプタ内で計算した値を
            保存しておくことを推奨します。
            たとえば、<code>Zend_Auth</code> のデフォルトの動作は、
            これを名前空間 'Zend_Auth' のキー 'storage' に配置します。
        </para>

        <para>
            <code>Zend_Auth</code> に対して認証トークンをセッション間で持続させないよう指示し、
            手動で承認 ID をセッション名前空間に格納することもできます。
            そうすれば、セッション名前空間内のよく知られた場所を使用できます。
            アプリケーションによっては、使用する権限情報や承認情報を
            特定の場所に保存しなければならないこともあるでしょう。
            多くのアプリケーションは、認証時
            つまり Zend_Auth の <code>authenticate()</code> メソッド実行時の
            ID (たとえばユーザ名) を特定の ID (一意に割り当てた整数値など) に関連付けています。
        </para>

        <example>
            <title>例: 単純化した承認 ID へのアクセス</title>
<programlisting role="php">
<![CDATA[<?php
    // 認証前のリクエスト
    require_once 'Zend/Auth/Adapter/Digest.php';
    $adapter = new Zend_Auth_Adapter_Digest($filename, $realm, $username, $password);
    $result = $adapter->authenticate();
    require_once 'Zend/Session/Namespace.php';
    $namespace = new Zend_Session_Namespace('Zend_Auth');
    if ($result->isValid()) {
        $namespace->authorizationId = $result->getIdentity();
        $namespace->date = time();
    } else {
        $namespace->attempts++;
    }

    // それ以降のリクエスト
    require_once 'Zend/Session.php';
    Zend_Session::start();
    $namespace = new Zend_Session_Namespace('Zend_Auth');

    echo "Valid: ", (empty($namespace->authorizationId) ? 'No' : 'Yes'), "\n"';
    echo "Authorization / user Id: ", (empty($namespace->authorizationId)
        ? 'none' : print_r($namespace->authorizationId, true)), "\n"';
    echo "Authentication attempts: ", (empty($namespace->attempts)
        ? '0' : $namespace->attempts), "\n"';
    echo "Authenticated on: ",
        (empty($namespace->date) ? 'No' : date(DATE_ATOM, $namespace->date), "\n"';
?>]]></programlisting>
        </example>

        <para>
            承認 ID をクライアント側に保存すると、
            それをサーバ側で使用する場合に権限昇格の脆弱性を引き起こします。
            これを防ぐには、ID をサーバ側で複製し (セッションを利用するなどして)、
            クライアントから送られた認証 ID との間でクロスチェックするなどの方法があります。
            "認証 (authentication) ID" (たとえばユーザ名) と
            "承認 (authorization) ID" (たとえばデータベースのユーザテーブルの ID 101 番)
            をきちんと区別するようにしましょう。
        </para>

        <para>
            後者については、パフォーマンス上の理由からそれほど珍しくありません。
            つまり、サーバに保存しておいたセッション情報を取得することで、
            いわゆる「ニワトリが先かタマゴが先か」の問題を解決するような場合です。
            「クッキーに承認 ID そのものを保存するのか、
            あるいは本物の承認 ID (またはユーザのセッション/
            プロファイル情報を保持する何か) の代用となる別のものを保存するのか」
            ということがよく議論の対象となります。
            システムのセキュリティ担当者の中には、
            「DB の主キー」が外部に漏らされることを好まない人たちもいるようです。
            彼らは、SQL インジェクション脆弱性が発見された場合の被害を抑えようとしているのです。
            だれもが承認 ID に自動インクリメント形式を使用しているわけではありません。
        </para>

    </sect2>

    <sect2 id="zend.session.testing">

        <title>ユニットテストでのセッションの使用</title>

        <para>
            Zend Framework 自体のテストには PHPUnit を使用しています。
            多くの開発者は、このテストスイートを拡張して自分のアプリケーションのコードをテストしています。
            ユニットテスト中で、セッションの終了後に書き込み関連のメソッドを使用すると
            "<emphasis role="strong">Zend_Session is currently marked as read-only</emphasis>"
            という例外がスローされます。しかし、Zend_Session を使用するユニットテストには要注意です。
            セッションを閉じたり (<code>Zend_Session::writeClose()</code>)
            破棄したり (<code>Zend_Session::destroy()</code>) したら、
            それ以降は Zend_Session_Namespace へのキーの設定や削除ができなくなります。
            これは、ext/session や、PHP の
            PHP <code>session_destroy()</code> および <code>session_write_close()</code>
            の仕様によるものです, これらには、ユニットテストの setup/teardown
            時に使用できるような、いわゆる "undo" 機能が備わっていないのです。
        </para>

        <para>
            この問題の回避策は、
            <code>tests/Zend/Session/SessionTest.php および SessionTestHelper.php</code>
            のユニットテストテスト <code>testSetExpirationSeconds()</code> を参照ください。
            これは、PHP の <code>exec()</code> によって別プロセスを起動しています。
            新しいプロセスが、ブラウザからの二番目以降のリクエストをシミュレートします。
            この別プロセスの開始時にはセッションを "初期化" します。
            ちょうど、ふつうの PHP スクリプトがウェブリクエストを実行する場合と同じような動作です。
            また、呼び出し元のプロセスで <code>$_SESSION[]</code> を変更すると、
            子プロセスでそれが反映されます。親側では
            <code>exec()</code> を使用する前にセッションを閉じています。
        </para>

        <example>
            <title>PHPUnit による、Zend_Session* を使用したコードのテスト</title>
<programlisting role="php">
<![CDATA[<?php
        // setExpirationSeconds() をテストします
        require 'tests/Zend/Session/SessionTestHelper.php'; // trunk/ の SessionTest.php も参照ください
        $script = 'SessionTestHelper.php';
        $s = new Zend_Session_Namespace('space');
        $s->a = 'apple';
        $s->o = 'orange';
        $s->setExpirationSeconds(5);

        Zend_Session::regenerateId();
        $id = Zend_Session::getId();
        session_write_close(); // セッションを開放し、これ以降で使用できるようにします
        sleep(4); // 無効となるほどの時間ではありません
        exec($script . "expireAll $id expireAll", $result);
        $result = $this->sortResult($result);
        $expect = ';a === apple;o === orange;p === pear';
        $this->assertTrue($result === $expect,
            "iteration over default Zend_Session namespace failed; expecting result === '$expect', but got '$result'");

        sleep(2); // 無効になります (全部で 6 秒待機していますが、有効期限は 5 秒です)
        exec($script . "expireAll $id expireAll", $result);
        $result = array_pop($result);
        $this->assertTrue($result === '',
            "iteration over default Zend_Session namespace failed; expecting result === '', but got '$result')");
        session_start(); // 人為的にサスペンドしたセッションを復活させます

        // これを別のテストに分割するることもできます。しかし実際のところ、
        // 上のテストの残骸が以下のテストに影響を及ぼすとしたら、それはバグでしょう。
        // バグは、ここで発見しておくべきものです。
        $s = new Zend_Session_Namespace('expireGuava');
        $s->setExpirationSeconds(5, 'g'); // 名前空間内のキーひとつだけを無効にしようとします
        $s->g = 'guava';
        $s->p = 'peach';
        $s->p = 'plum';

        session_write_close(); // セッションを開放し、これ以降で使用できるようにします
        sleep(6); // 無効となるほどの時間ではありません
        exec($script . "expireAll $id expireGuava", $result);
        $result = $this->sortResult($result);
        session_start(); // 人為的にサスペンドしたセッションを復活させます
        $this->assertTrue($result === ';p === plum',
            "iteration over named Zend_Session namespace failed (result=$result)");
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
