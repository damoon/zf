<sect1 id="zend.date.additional">

    <title>日の出と日没</title>

    <para>
        <code>Zend_Date</code> には、太陽の動きに関する情報を取得するための関数も組み込まれています。
        たとえば、指定した日の日の出時刻や日没時刻を取得する際に必要となります。
        <code>Zend_Date</code> を使用すると、指定した日の指定した場所における
        日の出時刻や日没時刻を簡単に取得できます。
    </para>

    <para>
        ほとんどの人は、自分が住んでいる場所の位置データを知らないことでしょう。
        ということで、位置データを取得するヘルパークラスも用意しました。
        このクラスは、各国の首都や大都市など、世界中の約 250 の都市についての位置データを提供します。
        ほとんどの人は、これらの中に自分の住む場所の近所の都市を見つけられるでしょう。
        というのも、これらの都市は、お互い数秒 (訳注: 角度の単位) 間隔で配置されているからです。
    </para>

    <para>
        リストボックスでどこかの都市を選ばせるには、関数 <code>Zend_Date_Cities::getCityList</code>
        を使用します。これは、ヘルパークラスで使用可能な定義済みの都市名の一覧を返します。
    </para>

    <example>
        <title>利用可能な都市の取得</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date/Cities.php';

// 利用可能な都市の一覧を出力します
print_r (Zend_Date_Cities::getCityList());
?>]]></programlisting>
    </example>

    <para>
        位置データ自体を取得するには、関数 <code>Zend_Date_Cities::City()</code> を使用します。
        この関数に、<code>Zend_Date_Cities::getCityList()</code> が返す都市名を渡します。
        また、オプションの二番目のパラメータで、水平線の種類を設定します。
    </para>

    <para>
        定義済みの水平線は四種類です。これらと位置情報を組み合わせることで、日の出や日没の正確な時刻を取得します。
        すべての関数について、オプションのパラメータとして '<code>horizon</code>' を指定できます。
        省略した場合は '<code>effective</code>' を使用します。
    </para>

    <table>
        <title>日の出や日没のためにサポートしている水平線の形式</title>
        <tgroup cols="3">
            <thead>
                <row>
                    <entry>水平線</entry>
                    <entry>説明</entry>
                    <entry>使用例</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>effective</entry>
                    <entry>標準の水平線</entry>
                    <entry>世界が完全な球体であると仮定します。何も指定しない場合には常にこれを使用します。</entry>
                </row>
                <row>
                    <entry>civil</entry>
                    <entry>一般的な水平線</entry>
                    <entry>テレビやラジオなどのメディアで一般に使用します。</entry>
                </row>
                <row>
                    <entry>nautic</entry>
                    <entry>航海時の水平線</entry>
                    <entry>航海時によく使用します。</entry>
                </row>
                <row>
                    <entry>astronomic</entry>
                    <entry>天文学上の水平線</entry>
                    <entry>天体観測でよく使用します。</entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <para>
        もちろん、位置情報を自分で指定して計算することも可能です。
        その場合は '<code>latitude</code>' (緯度) と
        '<code>longitude</code>' (経度) を指定し、そしてオプションで '<code>horizon</code>'
        を指定します。
    </para>

    <example>
        <title>都市の位置の取得</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date/Cities.php';

// 定義済みの都市の位置を取得します
// 水平線を指定していないので、effective horizon を使用します
print_r (Zend_Date_Cities::City('Vienna'));

// nautic horizon を使用します
print_r (Zend_Date_Cities::City('Vienna', 'nautic'));

// 位置情報を指定します
$mylocation = array('latitude' => 41.5, 'longitude' => 13.2446);
?>]]></programlisting>
    </example>

    <para>
        これで、必要なデータがすべて設定できました。次に行うことは、
        日の出や日没に関する情報を取得したい日付を表す <code>Zend_Date</code>
        オブジェクトの作成です。算出用の関数は三つあります。
        日没情報を算出するのが '<code>getSunset()</code>'、日の出の情報は '<code>getSunrise()</code>'、
        そして太陽に関するすべての情報を取得するのが '<code>getSunInfo()</code>' です。
        算出した結果は、その時刻を保持する <code>Zend_Date</code>
        オブジェクトとして返されます。
    </para>

    <example>
        <title>太陽の情報の算出</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Date/Cities.php';

// 定義済みの都市の位置を取得します
$city = Zend_Date_Cities::City('Vienna');

// 太陽の情報を算出したい日付についての date オブジェクトを作成します
$date = new Zend_Date('10.03.2007', Zend_Date::ISO_8601, 'de');

// 日没時刻を算出します
$sunset = $date->getSunset($city);
print $sunset->get(Zend_Date::ISO_8601);

// 太陽に関するすべての情報を算出します
$info = $date->getSunInfo($city);
foreach ($info as $sun) {
    print "\n" . $sun->get(Zend_Date::ISO_8601);
}
?>]]></programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
