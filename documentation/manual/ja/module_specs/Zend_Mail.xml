<sect1 id="zend.mail.introduction">
    <title>導入</title>
    <para>
        <code>Zend_Mail</code> は、テキストメールや MIME
        マルチパートメールを作成・送信するための一般的な機能を提供します。
        <code>Zend_Mail</code> を使用すると、PHP の組み込みの
        <ulink url="http://php.net/mail"><code>mail()</code></ulink>
        関数あるいは SMTP 接続を直接使用してメールを送信することが可能です。
    </para>
    <example>
        <title>Zend_Mail を使用したシンプルなメール</title>
        <para>
            受信者、表題、本文および送信者を指定しただけの単純なメールです。
            このようなメールを送信するには、PHP の
            <ulink url="http://php.net/mail"><code>mail()</code></ulink>
            関数を使用して次のようにします。
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('This is the text of the mail.');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>   </programlisting>
    </example>
    <note>
        <code>Zend_Mail</code> でメールを送信するには、
        最低 1 か所以上の受信者、送信者 (<code>setFrom()</code> を使用します)、
        そして本文 (テキストや HTML) を指定しなければなりません。
    </note>
    <para>
        大半の属性については、その情報を読み込むための "get"
        メソッドが用意されています。詳細は、API ドキュメントを参照ください。
        <code>getRecipients()</code> だけは特別で、
        これまでに追加されたすべての受信者アドレスを配列で返します。
    </para>
    <para>
        セキュリティの観点から、<code>Zend_Mail</code>
        はすべてのヘッダフィールドの改行文字 (<code>\n</code>) を取り除きます。
        これにより、ヘッダインジェクションを防ぎます。
    </para>
</sect1>
<sect1 id="zend.mail.sending">
    <title>SMTP 経由での送信</title>
    <para>
        SMTP 経由でメールを送信するには、<code>send()</code> をコールする前に
        <code>Zend_Mail_Transport_Smtp</code> を作成し、それを
        <code>Zend_Mail</code> に登録しなければなりません。スクリプト内でその後に
        <code>Zend_Mail::send()</code> がコールされると、
        SMTP による転送が使用されます。
    </para>
    <example>
        <title>SMTP によるメールの送信</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
?>]]>   </programlisting>
    </example>
    <para>
        <code>setDefaultTransport()</code> メソッドや
        <code>Zend_Mail_Transport_Smtp</code> のコンストラクタは、
        そんなに大げさなものではありません。この 2 行をスクリプトのセットアップ時
        (config.inc など) に設定し、スクリプト内での <code>Zend_Mail</code>
        の挙動を決めることができます。
        これにより、メール送信を SMTP 経由で行うのか
        <ulink url="http://php.net/mail"><code>mail()</code></ulink> を使用するのか、
        そしてどのメールサーバを使用するのかなどといった設定情報を、
        アプリケーションから分離することができます。
    </para>
</sect1>
<sect1 id="zend.mail.multiple-emails">
    <title>SMTP 接続による複数のメールの送信</title>
    <para>
        デフォルトでは、メールを送信するたびに新しい SMTP 接続が確立されます。
        ひとつの SMTP 接続で複数のメールを送信したい場合は、<code>connect()</code>
        を自分自身で処理します。<code>send()</code> がコールされる前に接続が確立していた場合は、
        その接続がそのまま用いられ、接続はオープンしたままになります。
    </para>
    <example>
        <title>SMTP 雪像による複数のメールの送信</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// メッセージを作成します...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
$tr->connect();
for ($i = 0; $i < 5; $i++) {    
$mail->send();
}
$tr->disconnect();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.different-transports">
    <title>異なる転送手段の使用</title>
    <para>
        複数のメールをそれぞれ別の接続を使用して送信したい場合は、
        <code>setDefaultTransport()</code> をコールするかわりに
        <code>send()</code> にトランスポートオブジェクトを直接わたすことができます。
        実際の  <code>send()</code> の際に、
        渡されたオブジェクトがデフォルトのトランスポートを上書きします。
    </para>
    <example>
        <title>異なる転送手段の使用</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// メッセージを作成します...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr1 = new Zend_Mail_Transport_Smtp('server@example.com');
$tr2 = new Zend_Mail_Transport_Smtp('other_server@example.com');
$mail->send($tr1);
$mail->send($tr2);
$mail->send();  // もう一度デフォルトを使用します
?>]]>   </programlisting>
    </example>
    <note>
        別の転送手段を用意するには、<code>Zend_Mail_Transport_Interface</code>
        を実装します。
    </note>
</sect1>
<sect1 id="zend.mail.html-mails">
    <title>HTML メール</title>
    <para>
        HTML 形式のメールを送信するには、本文を作成する際に
        <code>setBodyText()</code> ではなく <code>setBodyHTML()</code> を使用します。
        すると、MIME content type が自動的に <code>text/html</code> に設定されます。
        HTML とプレーンテキストの両方を使用した場合は、
        multipart/alternative な MIME メッセージが自動的に生成されます。
    </para>
    <example>
        <title>HTML メールの送信</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('My Nice Test Text');
$mail->setBodyHtml('My Nice <b>Test</b> Text');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.attachments">
    <title>ファイルの添付</title>
    <para>
        メールにファイルを添付するには <code>addAttachment()</code> メソッドを使用します。
        <code>Zend_Mail</code> のデフォルト設定では、添付ファイルは
        base64 エンコードされたバイナリオブジェクト (application/octet-stream)
        として添付されます。この挙動を変更するには、
        <code>addAttachment()</code> に追加のパラメータを指定します。
    </para>
    <example>
        <title>ファイルを添付したメール</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// メッセージを作成します...
$mail->addAttachment($someBinaryString);
$mail->addAttachment($myImage, 'image/gif', Zend_Mime::DISPOSITION_INLINE, Zend_Mime::ENCODING_8BIT);
?>]]>   </programlisting>
    </example>
    <para>
        添付ファイル用の MIME パートを細かく制御するには、
        <code>addAttachment()</code> の返す値を使用してその属性を変更します。
        <code>addAttachment()</code> メソッドの返す値は
        <code>Zend_Mime_Part</code> オブジェクトです。
    </para>
    <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();

$at = $mail->addAttachment($myImage);
$at->type        = 'image/gif';
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_8BIT;
$at->filename    = 'test.gif';

$mail->send();
?>]]></programlisting>
</sect1>
<sect1 id="zend.mail.adding-recipients">
    <title>受信者の追加</title>
    <para>
        受信者を追加するには、次のようにします。
        <itemizedlist>
        <listitem>
        <para><code>addTo()</code>: メールの "To" ヘッダに受信者を追加します</para>
        </listitem>
        <listitem>
        <para><code>addCc()</code>: メールの "Cc" ヘッダに受信者を追加します</para>
        </listitem>
        <listitem>
        <para><code>addBcc()</code>: ヘッダに表示されない受信者をメールに追加します</para>
        </listitem>
        </itemizedlist>
    </para>
    <note>
        <code>addTo()</code> および <code>addCc()</code> では、
        2 番目の引数として、人間が読みやすい形式のあて先を指定することができます。
    </note>
</sect1>
<sect1 id="zend.mail.boundary">
    <title>MIME バウンダリの制御</title>
    <para>
        マルチパートメッセージで個々のパートを区切るための
        MIME バウンダリは、通常はランダムに生成される文字列となります。
        しかし、使用する MIME バウンダリを指定したくなる場合もあるでしょう。
        <code>setMimeBoundary()</code> メソッドを次の例のように使用すれば、
        これが実現できます。
    </para>
    <example>
        <title>MIME バウンダリの変更</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setMimeBoundary('=_' . md5(microtime(1) . $someId++);
// メッセージを作成します...
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.additional-headers">
    <title>追加のヘッダ</title>
    <para>
        <code>addHeader()</code> メソッドを使用して、
        任意のヘッダを指定することができます。ヘッダフィールドの名前、
        そして設定する値の 2 つのパラメータが必須となります。
        3 番目のパラメータはオプションで、ヘッダが複数の値をとるかどうかを指定します。
    </para>
    <example>
        <title>メールヘッダの追加</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->addHeader('X-MailGenerator', 'MyCoolApplication');
$mail->addHeader('X-greetingsTo', 'Mom', true); // 複数の値
$mail->addHeader('X-greetingsTo', 'Dad', true);
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.character-sets">
    <title>文字セット</title>
    <para>
        <code>Zend_Mail</code> はメールの現在の文字セットをチェックしません。
        <code>Zend_Mail</code> のインスタンスを作成する際に、メールの文字セットを指定します。
        デフォルトは <code>iso-8859-1</code> です。メールに追加する内容は、
        すべて正しい文字セットでエンコードされている必要があります。
        新しいメールパートを作成する際には、
        個々のパートについて異なる文字セットを指定することができます。
    </para>
    <note>
        文字セットは、プレーンテキストのメッセージについてのみ適用されます。
    </note>
</sect1>
<sect1 id="zend.mail.encoding">
    <title>エンコーディング</title>
    <para>
        テキストおよび HTML メッセージの本文は、デフォルトでは
        quotedprintable 方式でエンコードされます。その他の添付ファイルは、デフォルトでは
        base64 でエンコードされますが、<code>addAttachment()</code> のコール時に変更したり
        MIME パートオブジェクトに後から代入して変更することもできます。
        7Bit エンコーディングおよび 8Bit エンコーディングは、
        現在はバイナリデータにのみ適用可能です。
    </para>
    <para>
        <code>Zend_Mail_Transport_Smtp</code> は、行頭がドット 1 文字あるいはドット
        2 文字の場合にその行をエンコードします。これにより、
        SMTP プロトコルに違反するメールを作成しないようにします。
    </para>
</sect1>
<sect1 id="zend.mail.smtp-authentication">
    <title>SMTP 認証</title>
    <para>
        さまざまな SMTP 認証メソッドが将来追加される予定ですが、
        現時点ではサポートされていません。
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
