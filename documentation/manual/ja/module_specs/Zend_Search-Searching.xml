<sect1 id="zend.search.searching">
    <title>インデックスの検索</title>

    <sect2 id="zend.search.searching.query-parser">
        <title>クエリの作成</title>

        <para>
            インデックスを検索するには 2 通りの方法があります。
            クエリパーサを使用して文字列からクエリを作成する方法と、
            Zend_search_Lucene API を使用して独自のクエリを作成する方法です。
        </para>

        <para>
        提供されているクエリパーサを使用する前に、以下の点を考慮してください。

            <orderedlist>
                <listitem>
                    プログラムで生成したクエリ文字列をクエリパーサに渡そうとしているなら、
                    クエリ API を使用してクエリを直接作成すべきです。言い換えると、
                    クエリパーサというのは人間が入力したテキストのために設計されたものであり、
                    プログラムが生成したテキストのためのものではないのです。
                </listitem>
                <listitem>
                    トークン化されていないフィールドについては、
                    クエリパーサを使用するよりも直接クエリに追加するほうが適しています。
                    フィールドの値がアプリケーションによって生成されるのなら、
                    フィールドのクエリ条件についても自動処理で作成すべきです。
                    クエリパーサが使用している解析器は、人間が入力したテキストを
                    単語に分解するために設計されています。
                    日付やキーワードなどのプログラムが生成した値は、
                    そのままにしておくべきでしょう。
                </listitem>
                <listitem>
                    検索フォームにおいては、
                    テキストで入力された内容はクエリパーサを使用すべきでしょう。
                    その他のフィールド、例えば範囲指定やキーワードなどについては、
                    クエリ API に直接渡すようにしましょう。
                    限られた内容、例えばプルダウンメニューで選択するフィールドは、
                    クエリ文字列に追加すべきではありません。
                    その代わりに、TermQuery 条件として使用します。
                </listitem>
            </orderedlist>

        </para>

        <para>
            どちらの方法を使用したとしても、インデックスを検索する API メソッドは同じです。
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$index->find($query);

?>]]></programlisting>
        <para>
            <code>Zend_Search_Lucene::find()</code> メソッドは、
            入力の型を自動的に判別し、クエリパーサを使用して文字列から
            Zend_Search_Lucene_Search_Query オブジェクトを作成します。
        </para>

        <para>
            重要な点として注意すべきなのは、<code>find()</code>
            が大文字小文字を区別するということです。デフォルトでは、
            LuceneIndexCreation.jar はすべてのドキュメントを小文字に変換します。
            コマンドライン引数により、この機能を無効にすることができます
            (何も引数を指定せずに LuceneIndexCreation.jar とタイプすれば、
            ヘルプが得られます)。<code>find()</code> に渡すテキストは、
            インデックスに一致しなければなりません。
            インデックスが小文字に変換されているのなら、
            <code>find()</code> に指定するテキストは <code>strtolower()</code>
            しておかなければいけません。そうしないと条件にマッチしません。
        </para>
    </sect2>

    <sect2 id="zend.search.searching.results">
        <title>検索結果</title>
        <para>
            検索結果は Zend_Search_Lucene_Search_QueryHit オブジェクトの配列となります。
            各オブジェクトは、2 つのプロパティを保持しています。
            <code>$hit->document</code> がインデックス内のドキュメント番号、
            <code>$hit->score</code> が検索結果のスコアを表します。
            結果はスコア順に並べられます (スコアの高い結果が最初になります)。
        </para>

        <para>
            Zend_Search_Lucene_Search_QueryHit オブジェクトでは、
            検索結果としてヒットした Zend_Search_Lucene_Document
            の各フィールドも公開しています。
            この例で、ヒットしたドキュメントには
            title と author の 2 つのフィールドが含まれています。
        </para>
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$hits = $index->find($query);

foreach ($hits as $hit) {
    echo $hit->score;
    echo $hit->title;
    echo $hit->author;
}

?>]]></programlisting>

        <para>
        オプションで、
        Zend_Search_Lucene_Search_QueryHit から元の Zend_Search_Lucene_Document
        を取得することができます。

        インデックス化されているドキュメントを取得するには、
        インデックスオブジェクトの <code>getDocument()</code>
        メソッドを使用し、その <code>getFieldValue()</code>
        メソッドでフィールドの値を取得します。
        </para>
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$hits = $index->find($query);
foreach ($hits as $hit) {
    // ヒットした結果の Zend_Search_Lucene_Document オブジェクトを返します
    echo $document = $hit->getDocument();

    // Zend_Search_Lucene_Document から
    // Zend_Search_Lucene_Field オブジェクトを返します
    echo $document->getField('title');

    // Zend_Search_Lucene_Field オブジェクトを値を文字列で返します
    echo $document->getFieldValue('title');

    // getFieldValue() と同じです
    echo $document->title;
}

?>]]></programlisting>
        <para>
        Zend_Search_Lucene_Document オブジェクトで使用可能なフィールドは、
        インデックス化の際に決まります。ドキュメントのフィールドは、
        インデックス化用アプリケーション (例えば LuceneIndexCreation.jar)
        によってインデックス化、あるいはインデックス化して保存されます。
        </para>

        <para>
        ドキュメントを識別するフィールド (例では 'path')
        もインデックス化して取得できるようにしなければならないことに注意しましょう。
        </para>

    </sect2>


    <sect2 id="zend.search.searching.results-scoring">
        <title>結果の重み付け</title>
        <para>
            Zend_Search_Lucene は、Java Lucene と同じ重み付けアルゴリズムを使用します。
            検索結果は重み順に並べ替えられます。スコアの高いものが先頭となり、
            スコアの高いもののほうが低いものよりクエリにマッチするようになります。
        </para>

        <para>
            大雑把に言うと、文書の中に検索語句が頻繁に登場するほどスコアが高くなります。
        </para>

        <para>
            検索結果のスコアを取得するには <code>score</code> プロパティを使用します。
        </para>
        <programlisting role="php"><![CDATA[<?php
$hits = $index->find($query);

foreach ($hits as $hit) {
    echo $hit->id;
    echo $hit->score;
}

?>]]></programlisting>

        <para>
            重みを計算するために使用されるのが
            Zend_Search_Lucene_Search_Similarity クラスです。詳細は
            <link linkend="zend.search.extending.scoring">拡張性 - 重み付けのアルゴリズム</link>
            を参照ください。
        </para>

    </sect2>

</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
