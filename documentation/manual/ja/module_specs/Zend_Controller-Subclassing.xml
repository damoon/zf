<sect1 id="zend.controller.subclassing">
	<title>サブクラス化</title>
	
	<sect2 id="zend.controller.subclassing.introduction">
		<title>導入</title>
		<para>
			<code>Zend_Controller</code> システムは、拡張性を考慮して作成されています。
			拡張方法としては、既存のクラスを継承する以外にも
			<code>Zend_Controller_Router_Interface</code> および
			<code>Zend_Controller_Dispatcher_Interface</code>
			を実装した新しいクラスを作成する方法があります。
		</para>
		
		<para>
			新しいルータやディスパッチャを実装する理由としては、
			以下のようなものが考えられるでしょう。
			
			<itemizedlist>
				<listitem>
					<para>
						既存の URI ルーティングが何らかの理由で適用できない場合。
						例えば、既存のウェブサイトと統合する予定であるが、
						そこで採用している規約が Zend Framework
						のルーティング機構と合致しないなど。
					</para>
				</listitem>
				<listitem>
					<para>
						まったく別のルーティングを実装しなければならない場合。
						<code>Zend_Controller_Router</code> クラスは URI のみを対象としています。
						例えばコンソールアプリケーションなどの別の形式のプログラムにも
						MVC パターンを使用したくなることもあるでしょう。
						コンソールアプリケーションの場合なら、
						独自のルータを実装してコマンドライン引数によるルーティングを行うことになるでしょう。
					</para>
				</listitem>
				<listitem>
					<para>
						<code>Zend_Controller_Dispatcher</code>
						の提供する機能がうまく当てはまらない場合。
						デフォルト設定では、コントローラはクラスであり、
						アクションはクラスのメソッドであることを前提としています。
						しかし、これ以外にもいろいろなやり方があるでしょう。
						例えば、ディレクトリをコントローラ、
						ディレクトリ内のファイルをアクションと考えることもできます。
					</para>
				</listitem>
				<listitem>
					<para>
						すべてのコントローラで使用するための機能を追加したい場合。
						例えば、デフォルトでは <code>Zend_Controller_Action</code> は
						<code>Zend_View</code> と統合されていません。しかし、
						コントローラを継承したクラスでこの機能を持たせることができます。
						そうすれば、もとの <code>Zend_Controller_Router</code> や
						<code>Zend_Controller_Dispatcher</code> に手を加えずにすみます。
					</para>
				</listitem>
			</itemizedlist>
				
			システムの主要な部分、特にディスパッチャをオーバーライドする際には十分注意してください。
			<code>Zend_Controller</code> を使用する利点のひとつに、
			共通の規約に従ったアプリケーションを作成できるということがあります。
			デフォルトの振る舞いをあまりにも変更してしまうと、この利点が失われてしまいます。
			しかしながら、世の中にはさまざまな需要があるわけですし、
			ひとつのソリューションですべて解決できるわけがありません。
			そのために、必要なら変更できるようにしています。
		</para>
	</sect2>
	
	<sect2 id="zend.controller.subclassing.conventions">
		<title>規約</title>
		
		<para>
			Zend_Controller のクラスを継承する場合は、
			その命名や保存場所はできるだけ次の規約に従うようにしてください。
			そうすることで、Zend Framework になじみのある他のプログラマが、
			あなたのプロジェクトの内容を簡単に理解できるようになります。
		</para>
		
		<sect3 id="zend.controller.subclassing.prefix">
			<title>プレフィックス</title>
				
			<para>
				Zend Framework に含まれるクラスの名前は、すべて "Zend_"
				で始まっています。これがプレフィックスです。
				あなたが作成するクラスも同じようにしておくことを推奨します。
				例えば、もしあなたの所属する会社名が Widget, Inc. なら、
				プレフィックスを "Widget_" とします。
			</para>
		</sect3>
		
		<sect3 id="zend.controller.directory.layout">
			<title>ディレクトリ構成</title>
			
			<para>
				<code>Zend_Controller</code> クラスは、
				ライブラリディレクトリに以下のように格納されます。

    <programlisting role="php"><![CDATA[
/library
  /Zend
    /Controller
      Action.php
      Dispatcher.php
      Router.php
]]></programlisting>			

				<code>Zend_Controller</code> クラスを継承する場合は、
				作成したクラスを (あなたのプレフィックスのもとで)
				同じ構造で格納することを推奨します。こうすることで、
				あなたのプロジェクトのコードをレビューする人たちがそれを見つけやすくなるでしょう。
			</para>
			
			<para>
				例えば Widget, Inc. のプロジェクトがルータのみを独自に実装した場合は、
				次のようになるでしょう。
				
<programlisting role="php"><![CDATA[
/library
  /Zend
  /Widget
    /Controller
      Router.php
      README.txt
]]></programlisting>			

				この例では、<code>Widget/Controller/</code> ディレクトリが
				<code>Zend/Controller/</code> ディレクトリと同じ構造になっていることに注意しましょう。
				この場合、このファイルでは <code>Widget_Controller_Router</code>
				というクラスが提供されます。このクラスは
				<code>Zend_Controller_Router</code> を継承したものか、あるいは
				<code>Zend_Controller_Router_Interface</code> を実装した独自のクラスとなります。
			</para>
			
			<para>
				また、上の例で <code>Widget/Controller/</code> ディレクトリに
				<code>README.txt</code> があることにも注意してください。
				あなたのプロジェクトを顧客に提供する際には、
				それに関する単体テストや文書も作成するよう、Zend は強く推奨します。
				そこまではいかなくても、同じディレクトリにシンプルな
				<code>README.txt</code> ファイルを置き、
				変更点や動作内容を簡単に説明しておくようにしましょう。
			</para>
		</sect3>
	</sect2>
	
	<sect2 id="zend.controller.router.interface">
		<title>ルータのインターフェイス</title>
		
		<para>
			<code>Zend_Controller_Router_Interface</code> で定義されているメソッドは
			1 つだけです。

			<programlisting role="php"><![CDATA[<?php
				
  /**				
   * @param  Zend_Controller_Dispatcher_Interface
   * @throws Zend_Controller_Router_Exception
   * @return Zend_Controller_Dispatcher_Token|boolean
   */
  public function route(Zend_Controller_Dispatcher_Interface $dispatcher);

?>]]></programlisting>
			
			ルーティングが発生するのは、システムが最初にリクエストを受け取ったときだけです。
			ルータの役割は、<code>Zend_Controller_Dispatch_Token</code>
			を生成してコントローラとアクションを指定することです。
			その後、これをディスパッチャに渡します。
			もしディスパッチトークンが作成できなかった場合は
			<code>FALSE</code> を返さなければなりません。
		</para>
		
		<para>
			ディスパッチャの中には、生成されたディスパッチトークンが本当にディスパッチ可能なのかを、
			動的な要因をもとにして事前に調べるものもあります。
			このため、ルータは、<code>route()</code>
			の唯一の引数としてディスパッチャのオブジェクトハンドルを受け取ります。
			ディスパッチャは、これを確かめるためのメソッドとして
			<code>isDispatchable()</code> を提供しています。
		</para>
	</sect2>
	
	<sect2 id="zend.controller.dispatcher.interface">
		<title>ディスパッチャのインターフェイス</title>
		
		<para>
			<code>Zend_Controller_Front</code> は、
			まず最初にルータをコールしてディスパッチトークンを取得し、
			それをディスパッチャに渡します。ディスパッチャはアクションを起動
			(コントローラのインスタンスを作成し、そのアクションをコール)
			し、論理型の FALSE あるいは別のディスパッチトークンのどちらかを返します。
		</para>
		
		<para>
			<code>Zend_Controller_Front</code> は、
			ディスパッチトークンが返されなくなるまで、
			ディスパッチャを繰り返しコールします。これが、いわゆるディスパッチループです。
			これにより、アクションが処理を順にすすめていけるようになります。
		</para>
		
		<para>
			<code>Zend_Controller_Dispatcher_Interface</code> では
			2 つのメソッドが定義されています。
			
			<programlisting role="php"><![CDATA[<?php
				
/**
 * @param  Zend_Controller_Dispatcher_Token $route
 * @return boolean
 */
public function isDispatchable(Zend_Controller_Dispatcher_Token $route);

?>]]></programlisting>

		<code>isDispatchable()</code> は、
		ディスパッチトークンが実際にディスパッチ可能かどうかを調べます。
		ディスパッチ可能な場合に <code>TRUE</code>、それ以外の場合に
		<code>FALSE</code> を返します。ディスパッチ可能かどうかを判断する基準は、
		インターフェリスを実装したクラスで記述します。
		デフォルトの実装である <code>Zend_Controller_Dispatcher</code> では、
		コントローラのファイルが存在するかどうか、
		そのファイルでクラスが定義されているかどうか、
		そしてそのクラスでアクションメソッドが定義されているかどうかを調べます。
		
		<programlisting role="php"><![CDATA[<?php
			
/**
 * @param  Zend_Controller_Dispatcher_Token $route
 * @return Zend_Controller_Dispatcher_Token|boolean
 */
public function dispatch(Zend_Controller_Dispatcher_Token $route);

?>]]></programlisting>
		
		<code>dispatch()</code> は、実際の処理を行うところです。
		このメソッドは、コントローラのアクションを実行しなければなりません。
		また、ディスパッチトークンあるいは論理型の FALSE のいずれかを返さなければなりません。
		FALSE は、この後でやるべきことがもうないということを意味します。
		
		</para>
	</sect2>
		
</sect1>