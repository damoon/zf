<sect1 id="zend.controller.migration">
    <title>以前のバージョンからの移行</title>

    <para>
        MVC コンポーネントの API は以前とは変更されました。
        初期のバージョンから Zend Framework を使用しておられるかたは、
        以下のガイドラインにしたがってスクリプトを変更し、
        新しい仕組みに対応させてください。
    </para>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>0.2.0 以前のバージョンから 0.6.0 への移行</title>

        <para>
            MVC コンポーネントの基本的な部分は変わっていません。
            次のいずれの方法も使用可能です。
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- ルータを作成します -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- ルータをコントローラに設定します -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- コントローラのディレクトリを設定し、ディスパッチします -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            しかし、<xref linkend="zend.controller.overview.response" />
            が追加されたことにより、後者のサンプルの最後の行をこのようにしたくなることでしょう。
        </para>

        <programlisting role="php"><![CDATA[
echo $ctrl->dispatch();
]]></programlisting>
        
        <para>
            レスポンスオブジェクトを使用して、コンテンツとヘッダを取得することを推奨します。
            これにより、アプリケーション内で
            より柔軟な出力書式の切り替え (たとえば XHTML ではなく
            JSON や XML を使用するなど) ができるようになります。
            <code>dispatch()</code> の返り値には、
            レスポンスオブジェクトの内容とヘッダが含まれます。
        </para>

        <para>
            これまでの API に加え、多くの機能が追加されています。
            追加された機能についてはドキュメントを参照ください。
        </para>

        <para>
            最大の変更点は、多くのコンポーネントで
            サブクラス化による拡張が可能になったことです。以下にポイントを整理します。
        </para>

        <itemizedlist>
            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                は、ディスパッチャトークンではなく
                <xref linkend="zend.controller.overview.request" />
                オブジェクトを使用するようになりました。
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                は、ディスパッチャトークンではなく
                <xref linkend="zend.controller.overview.request" />
                オブジェクトを使用するようになりました。
            </para></listitem>

            <listitem>
                <para><code>Zend_Controller_Action</code> の変更点は以下のようになります。</para>

                <itemizedlist>
                    <listitem><para>
                        コンストラクタが受け付ける引数は
                        <code>Zend_Controller_Request_Abstract $request</code>、
                        <code>Zend_Controller_Response_Abstract $response</code>
                        および <code>array $params (optional)</code> の三つになりました。
                        <code>Zend_Controller_Action::__construct()</code>
                        は、これらを使用してリクエストやレスポンス、
                        そしてオブジェクトの invokeArgs プロパティを指定します。
                        コンストラクタをオーバーライドすることで、
                        この挙動をお望みのように変更することができます。
                        さらによいことに、<code>init()</code>
                        メソッドを使用してインスタンスの設定を自由に行うことができます。
                        このメソッドは、コンストラクタでの処理の最後にコールされます。
                    </para></listitem>

                    <listitem><para>
                        <code>run()</code> は final メソッドではなくなりました。
                        しかし、このメソッドはもはやフロントコントローラでは使用されません。
                        これは、クラスをページコントローラとして使用する場合にのみ使用します。
                        オプションの引数
                        <code>Zend_Controller_Request_Abstract $request</code> 
                        および <code>Zend_Controller_Response_Abstract $response</code>
                        を受け取ります。
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> を定義する必要はなくなりました。
                        しかし、デフォルトのアクションとして定義しておくことを推奨します。
                        これにより、RewriteRouter とアクションコントローラで
                        デフォルトのアクションメソッドを別々に指定できるようになります。
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> をオーバーライドして、
                        未定義のアクションが自動的に処理されるようにする必要があります。
                    </para></listitem>

                    <listitem><para>
                        <code>_redirect()</code> にはオプションで二番目、三番目の引数が追加されました。
                        二番目の引数はリダイレクト時に返す HTTP コードです。
                        三番目の引数 <code>$prependBase</code>
                        を使用すると、リクエストオブジェクトに登録したベース URL
                        を URL の前に連結することを指示できます。
                    </para></listitem>

                    <listitem>
                        <para>
                            プロパティ <code>_action</code> は設定されなくなりました。
                            このプロパティの内容は <code>Zend_Controller_Dispatcher_Token</code>
                            でしたが、これは現在のバージョンにはもう存在しません。
                            トークンの唯一の目的は、要求されたコントローラやアクション、
                            URL パラメータについての情報を提供することでした。
                            これらは現在はリクエストオブジェクトから次のようにして取得できるようになっています。
                        </para>

                        <programlisting role="php"><![CDATA[
// 要求されたコントローラ名を取得します。
// その際には $this->_action->getControllerName() を使用します。
// 以下の例では getRequest() を使用していますが、直接 $_request プロパティに
// アクセスしてもかまいません。ただ getRequest() を使用することを推奨します。
// とういのは、親クラスがこのメソッドをオーバーライドして挙動を変更しているかもしれないからです。
$controller = $this->getRequest()->getControllerName();

// 要求されたアクション名を取得します。
// その際には $this->_action->getActionName() を使用します。
$action = $this->getRequest()->getActionName();

// リクエストパラメータを取得します。
// これは変わっていません。_getParams() メソッドおよび _getParam() メソッドは
// 現在は単なるリクエストオブジェクトへのプロキシです。
$params = $this->_getParams();
$foo = $this->_getParam('foo', 'default'); // パラメータ 'foo' を取得します。見つからなかった場合は
                                           // デフォルト値 'default' を設定します。

]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code>
                は削除されました。かわりに
                <code>Zend_Controller_Front::setBaseUrl()</code> を使用してください
                (あるいは、リクエストクラスを使用している場合は
                Zend_Controller_Request_Http::setBaseUrl() を使用します)。
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Plugin_Interface</code> は
                <code>Zend_Controller_Plugin_Abstract</code> に置き換えられました。
                すべてのメソッドは、ディスパッチャトークンではなく
                <xref linkend="zend.controller.overview.request" />
                をやり取りするようになりました。
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
