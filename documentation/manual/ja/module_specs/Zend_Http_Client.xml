<sect1 id="zend.http.client">
    <title>Zend_Http_Client</title>

    <sect2 id="zend.http.client.introduction">
        <title>導入</title>
        <para>
            Zend_Http_Client は、Hyper-Text Transfer Protocol (HTTP)
            リクエストを簡単に扱うためのインターフェイスを提供します。
            Zend_Http_Client は、HTTP クライアントとしての最低限の機能をサポートしているだけでなく、
            HTTP 認証やファイルのアップロードといった高度な機能もサポートしています。
            リクエストに成功すると (失敗しても) Zend_Http_Response
            オブジェクトを返します。これを使用すると、レスポンスのヘッダや本文にアクセスできます
            (<xref linkend="zend.http.response" /> を参照ください)。
        </para>
        <para>
            クラスのコンストラクタには、オプションの引数として URL を指定することができます
            (文字列か Zend_Uri_Http オブジェクトのどちらでも可能です)。
            また、オプションで設定パラメータの配列を指定することもできます。
            どちらも省略することが可能で、その場合は後から
            setUri() メソッドや setConfig() メソッドで指定します。
            <example>
                <title>Zend_Http_Client のインスタンスの作成</title>
                <programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Http/Client.php';

    $client = new Zend_Http_Client('http://example.org', array(
        'maxredirects' => 0,
        'timeout'      => 30));
        
    // これは、上とまったく同じことです
    $client = new Zend_Http_Client();
    $client->setUri('http://example.org');
    $client->setConfig(array(
        'maxredirects' => 0,
        'timeout'      => 30));

?>]]></programlisting>
            </example>
        </para>
    </sect2>
    <sect2 id="zend.http.client.configuration">
        <title>設定パラメータ</title>
        <para>
            コンストラクタおよび setConfig() メソッドでは
            設定パラメータの連想配列を受け取ります。
            これらのパラメータは、設定してもしなくてもかまいません。
            すべてのパラメータにはデフォルト値があります。
            <table>
                <title>Zend_Http_Client の設定パラメータ</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>パラメータ</entry>
                            <entry>説明</entry>
                            <entry>期待する値</entry>
                            <entry>デフォルト値</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>maxredirects</entry>
                            <entry>リダイレクトをたどる最大数 (0 = たどらない)</entry>
                            <entry>integer</entry>
                            <entry>5</entry>
                        </row>
                        <row>
                            <entry>strictredirects</entry>
                            <entry>リダイレクトの際に RFC に厳密に従うかどうか (<xref linkend="zend.http.client.redirections" /> を参照ください)</entry>
                            <entry>boolean</entry>
                            <entry>false</entry>
                        </row>
                        <row>
                            <entry>useragent</entry>
                            <entry>ユーザエージェントを表す文字列 (リクエストヘッダに付加されます)</entry>
                            <entry>string</entry>
                            <entry>'Zend_Http_Client'</entry>
                        </row>
                        <row>
                            <entry>timeout</entry>
                            <entry>接続タイムアウト秒数</entry>
                            <entry>integer</entry>
                            <entry>10</entry>
                        </row>
                        <row>
                            <entry>httpversion</entry>
                            <entry>HTTP プロトコルのバージョン</entry>
                            <entry>float (1.1 あるいは 1.0)</entry>
                            <entry>1.1</entry>
                        </row>
                        <row>
                            <entry>adapter</entry>
                            <entry>使用する接続アダプタクラス (<xref linkend="zend.http.client.adapters" /> を参照ください)</entry>
                            <entry>mixed</entry>
                            <entry>'Zend_Http_Client_Adapter_Socket'</entry>
                        </row>
                        <row>
                            <entry>keepalive</entry>
                            <entry>
                             サーバとの keep-alive 接続を有効にするかどうか。
                             同一サーバに連続してリクエストが発生する場合などに便利で、性能を向上させるでしょう。
                            </entry>
                            <entry>boolean</entry>
                            <entry>false</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>
    </sect2>
    <sect2 id="zend.http.client.basic-requests">
        <title>基本的な HTTP リクエストの処理</title>
        <para>
            シンプルな HTTP リクエストを実行するのは非常に簡単で、単に
            request() メソッドを実行するだけです。たったの三行ですんでしまいます。
            <example>
                <title>シンプルな GET リクエストの処理</title>
                <programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Http/Client.php';

    $client = new Zend_Http_Client('http://example.org');
    $response = $client->request();
?>]]></programlisting>
            </example>
            request() メソッドには、オプションでパラメータを指定することができます。
            このパラメータはリクエストメソッドで、HTTP プロトコルで定義されている
            GET、POST、PUT、HEAD、DELETE、TRACE、OPTIONS そして CONNECT
            のいずれかを指定可能です。
            <footnote>
              <para>
                RFC 2616 - <ulink url="http://www.w3.org/Protocols/rfc2616/rfc2616.html" /> を参照ください。
              </para>
            </footnote>. 
            利便性を高めるため、これらはすべてクラス定数として定義されています。たとえば
            Zend_Http_Request::GET、Zend_Http_Request::POST などのようになっています。
        </para>
        <para>
            メソッドを指定しない場合は、直近の setMethod() コールで指定されたメソッドを使用します。
            setMethod() もコールされていない場合は、デフォルトのリクエストメソッドとして
            GET を使用します (上の例を参照ください)。
            <example>
                <title>GET 以外のリクエストメソッドの使用</title>
                <programlisting role="php">
<![CDATA[<?php
    // POST リクエストを実行します
    $response = $client->request('POST');
    
    // POST リクエストを実行するためのもうひとつの方法です
    $client->setMethod(Zend_Http_Client::POST);
    $response = $client->request();
?>]]></programlisting>            
            </example>
        </para>
    </sect2>
        
    <sect2 id="zend.http.client.parameters">
        <title>GET や POST へのパラメータの追加</title>
        <para>
            GET パラメータを HTTP リクエストに追加するのは簡単です。
            URL の一部として指定するか、あるいは setParameterGet() メソッドを使用します。
            このメソッドは、GET パラメータの名前を最初の引数、そして
            GET パラメータの値を二番目の引数として受け取ります。
            さらに便利に使用するため、setParameterGet()
            メソッドでは name => value 形式の連想配列で GET 変数を指定することもできます。
            これは、複数の GET パラメータを指定する必要がある場合に便利です。
            <example>
                <title>GET パラメータの設定</title>
                <programlisting role="php">
<![CDATA[<?php
    // setParameterGet メソッドで GET パラメータを指定します
    $client->setParameterGet('knight', 'lancelot');

    // このような URL を指定するのと同じことです
    $client->setUri('http://example.com/index.php?knight=lancelot');
    
    // 複数のパラメータを一度に追加します
    $client->setParameterGet(array(
        'first_name'  => 'Bender',
        'middle_name' => 'Bending'
        'made_in'     => 'Mexico',
    ));
?>]]></programlisting>
            </example>
        </para>
        <para>
            GET パラメータはあらゆるリクエストメソッドで送信できますが、
            POST パラメータは POST リクエストの本文としてしか送信できません。
            POST パラメータをリクエストに追加する方法は、GET
            パラメータを追加する場合と非常に似ています。
            使用するのは setParameterPost() メソッドで、このメソッドの使用法は
            setParameterGet() メソッドと同じです。
            <example>
                <title>POST パラメータの設定</title>
                <programlisting role="php">
<![CDATA[<?php
    // POST パラメータを設定します
    $client->setParameterPost('language', 'fr');
    
    // 複数の POST パラメータを設定します。そのうちのひとつは複数の値を持ちます。
    $client->setParameterPost(array(
        'language'  => 'es',
        'country'   => 'ar',
        'selection' => array(45, 32, 80)
    ));
?>]]></programlisting>
            </example>
            POST リクエストを送信する際には、GET パラメータと POST
            パラメータの両方を設定できることに注意しましょう。
            一方、POST パラメータを POST 以外のリクエストで指定しても何のエラーも発生しませんが、
            これは無意味です。POST 以外のリクエストでは、
            POST パラメータを指定しても無視されます。
        </para>
    </sect2>

    <sect2 id="zend.http.client.redirections">
        <title>HTTP リダイレクト</title>
        <para>
            デフォルトでは、Zend_Http_Client は自動的に五段階までの
            HTTP リダイレクトを処理します。これを変更するには、設定パラメータ
            'maxredirects' を変更します。
        </para>
        <para>
            HTTP/1.1 の RFC によると、HTTP 301 および 302 レスポンスを受け取ったクライアントは、
            指定された場所に同じリクエストを再送する必要があります。
            この際には同じリクエストメソッドを使用しなければなりません。
            しかし、ほとんどのクライアントはこの機能を実装しておらず、
            リダイレクトの際には常に GET メソッドを使用するようになっています。
            デフォルトでは、Zend_Http_Client も同じように動作します。
            つまり、301 や 302 によるリダイレクト指示を受けると、
            GET パラメータや POST パラメータをすべてリセットした上で新しい場所に
            GET リクエストを送信します。この振る舞いを変更するには、設定パラメータ
            'strictredirects' を TRUE に設定します。
            <example>
                <title>301 や 302 のレスポンスに対する RFC 2616 準拠のリダイレクト</title>
                <programlisting role="php">
<![CDATA[<?php
    // 厳格なリダイレクト
    $client->setConfig(array('strictredirects' => true)
    
    // 厳格でないリダイレクト
    $client->setConfig(array('strictredirects' => false)
?>]]></programlisting>
            </example>
        </para>
        <para>
            リクエストを送信してからリダイレクトが行われた回数を取得するには
            getRedirectionsCount() メソッドを使用します。
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.cookies">
        <title>クッキーの追加および持続的なクッキーの使用</title>
        <para>
            Zend_Http_Client を使用すると、リクエストに簡単にクッキーを追加することができます。
            ヘッダを変更したりする必要はありません。クッキーを追加するには
            setCookie() メソッドを使用します。このメソッドにはいくつかの用法があります。
            <example>
                <title>setCookie() によるクッキーの設定</title>
                <programlisting role="php">
<![CDATA[<?php
    // 簡単でシンプルな方法: クッキーの名前と値を指定します。
    $client->setCookie('flavor', 'chocolate chips');
    
    // クッキー文字列 (name=value) を直接指定します。
    // 値を URL エンコードしておく必要があることに注意しましょう。
    $client->setCookie('flavor=chocolate%20chips');
    
    // Zend_Http_Cookie オブジェクトを指定します。
    $cookie = Zend_Http_Cookie::factory('flavor=chocolate%20chips');
    $client->setCookie($cookie);
?>]]></programlisting>
            </example>
            Zend_Http_Cookie オブジェクトについての詳細は
            <xref linkend="zend.http.cookies" /> を参照ください。
        </para>
        <para>
            Zend_Http_Client は、クッキーの持続性 (stickiness) も提供しています。
            送受信したクッキーをクライアントの内部で保持し、
            それ以降のリクエストで自動的に再送信します。
            これは、たとえばリモートサイトにログインして
            認証情報やセッション ID のクッキーを取得してから次のリクエストに進む場合などに便利です。
            <example>
                <title>クッキーの持続化</title>
                <programlisting role="php">
<![CDATA[<?php
    // クッキーの持続性を有効にし、ジャーに保存します
    $client->setCookieJar();
    
    // 最初のリクエスト: ログインし、セッションを開始します
    $client->setUri('http://example.com/login.php');
    $client->addParameterPost('user', 'h4x0r');
    $client->addParameterPost('password', '1337');
    $client->request('POST');
    
    // レスポンスに設定されたクッキー (たとえばセッション ID クッキーなど)
    // の内容は、自動的にジャーに保存されます。
    
    // 次のリクエストを送信します。この際に、
    // 先ほど保存されたクッキーが自動的に送信されます。
    $client->setUri('http://example.com/read_member_news.php');
    $client->request('GET');
?>]]></programlisting>
            </example>
            Zend_Http_CookieJar クラスについての詳細は
            <xref linkend="zend.http.cookies.cookiejar" /> を参照ください。
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.custom_headers">
        <title>独自のリクエストヘッダの設定</title>
        <para>
            独自のヘッダを指定するには setHeaders() メソッドを使用します。
            このメソッドには、さまざまな用法があります。それを以下の例で説明します。
            <example>
                <title>独自のリクエストヘッダの設定</title>
                <programlisting role="php">
<![CDATA[<?php
    // ひとつのヘッダを設定します。既存の値を上書きします。
    $client->setHeaders('Host', 'www.example.com');
    
    // 上とまったく同じことを別の方法で行います。
    $client->setHeaders('Host: www.example.com');
    
    // 同一のヘッダに対して複数の値を設定します (Cookie ヘッダなどに有用です)。
    $client->setHeaders('Cookie', array(
        'PHPSESSID=1234567890abcdef1234567890abcdef',
        'language=he'
    ));
?>]]></programlisting>
            </example>
        </para>
        <para>
            setHeader() は、複数のヘッダを一度に設定することも簡単にできます。
            その場合は、ヘッダの配列をパラメータとして指定します。
            <example>
                <title>複数の独自リクエストヘッダの設定</title>
                <programlisting role="php">
<![CDATA[<?php
    // 複数のヘッダを設定します。既存の値を上書きします。
    $client->setHeaders(array(
        'Host' => 'www.example.com',
        'Accept-encoding', 'gzip,deflate',
        'X-Powered-By' => 'Zend Framework'));
    
    // 配列には文字列を含めることができます。
    $client->setHeaders(array(
        'Host: www.example.com',
        'Accept-encoding: gzip,deflate',
        'X-Powered-By: Zend Framework'));
?>]]></programlisting>
            </example>
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.file_uploads">
        <title>ファイルのアップロード</title>
        <para>
            ファイルを HTTP でアップロードするには setFileUpload メソッドを使用します。
            このメソッドの最初の引数はファイル名、二番目の引数はフォーム名、
            そしてオプションの三番目の引数がデータとなります。
            三番目のパラメータが null の場合は、
            最初のパラメータに指定したファイル名のファイルがあるものとみなされ、
            Zend_Http_Client がそれを読み込んでアップロードしようとします。
            三番目のパラメータが null 以外の場合は、
            ファイル名は最初のパラメータを使用しますが実際の内容はディスク上に存在する必要がなくなります。
            二番目のパラメータのフォーム名は常に必須です。HTML フォームでアップロードする場合、これは
            &gt;input&lt; タグの "name" 属性と等しくなります。
            四番目のオプションのパラメータは、ファイルの content-type です。
            指定しなかった場合、Zend_Http_Client は、
            ディスクから読み込んだファイルに対して mime_content_type
            関数を使用して content-type を判定します。
            いずれの場合でも、デフォルトの MIME 型は
            application/octet-stream となります。
            <example>
                <title>setFileUpload によるファイルのアップロード</title>
                <programlisting role="php">
<![CDATA[<?php
    // 任意のデータをファイルとしてアップロードします。
    $text = 'this is some plain text';
    $client->setFileUpload('some_text.txt', 'upload', $text, 'text/plain');
    
    // 既存のファイルをアップロードします。
    $client->setFileUpload('/tmp/Backup.tar.gz', 'bufile');
    
    // ファイルを送信します。
    $client->submit('POST');
?>]]></programlisting>
            </example>
            最初の例では、変数 $text の内容がアップロードされ、サーバ上で
            $_FILES['upload'] として使用できるようになります。二番目の例では、
            既存のファイル /tmp/Backup.tar.gz をサーバにアップロードし、サーバ上で
            $_FILES['bufile'] として使用できるようになります。
            content-type は自動的に推測されます。推測に失敗した場合は、
            'application/octet-stream' に設定されます。
        </para>
        <note>
            <title>ファイルのアップロード</title>
            <para>
                ファイルをアップロードする際には、HTTP リクエストの content-type
                は自動的に multipart/form-data に設定されます。
                ファイルをアップロードするには、POST あるいは PUT
                リクエストを使用しなければならないことに注意しましょう。
                大半のサーバでは、それ以外のリクエストメソッドが使用された場合にはその本文を無視します。
            </para>
        </note>
    </sect2>
    <sect2 id="zend.http.client.raw_post_data">
        <title>生の POST データの送信</title>
        <para>
            Zend_Http_Client で生の POST データを送信するには
            setRawData() メソッドを使用します。このメソッドはふたつのパラメータを受け取ります。
            まず最初が、リクエスト本文で送信するデータです。
            二番目のパラメータはオプションで、データの content-type を指定します。
            このパラメータはオプションですが、リクエストを送信する前にはできるだけ設定しておくようにしましょう。
            setRawData() 以外にも、別のメソッド setEncType() を使用することもできます。
            <example>
                <title>生の POST データの送信</title>
                <programlisting role="php">
<![CDATA[<?php
    $xml = '<book>' . 
           '  <title>海流の中の島々</title>' . 
           '  <author>アーネスト・ヘミングウェイ</author>' . 
           '  <year>1970</year>' . 
           '</book>';
           
    $client->setRawData($xml, 'text/xml')->request('POST');
    
    // 同じことを、別の方法でもできます。
    $client->setRawData($xml)->setEncType('text/xml')->request('POST');
?>]]></programlisting>
            </example>
            このデータをサーバ側で使用するには、PHP の変数
            $HTTP_RAW_POST_DATA あるいは php://input ストリームを使用します。
        </para>
        <note>
            <title>生の POST データの使用</title>
            <para>
                リクエストに生の POST データを設定すると、その他の POST
                パラメータやアップロードするファイルの内容がすべて上書きされます。
                同一リクエストでこれらを共用しようとしないでください。
                大半のサーバは、POST リクエスト以外ではリクエスト本文を無視することも覚えておきましょう。
            </para>
        </note>
    </sect2>
    
    <sect2 id="zend.http.client.http_authentication">
        <title>HTTP 認証</title>
        <para>
            現在 Zend_Http_Client がサポートしているのは、ベーシック HTTP 認証のみです。
            この機能を利用するには setAuth() メソッドを使用します。
            このメソッドが受け取るパラメータは三つで、
            ユーザ名とパスワード、そしてオプションで認証タイプとなります。
            先ほど説明したように、現在はベーシック認証しかサポートしていません
            (将来的にはダイジェスト認証もサポートする予定です)。
            <example>
                <title>HTTP 認証用のユーザとパスワードの設定</title>
                <programlisting role="php">
<![CDATA[<?php
    // ベーシック認証を使用します。
    $client->setAuth('shahar', 'myPassword!', Zend_Http_Client::AUTH_BASIC);
    
    // ベーシック認証はデフォルトなので、このように省略することもできます。
    $client->setAuth('shahar', 'myPassword!');
?>]]></programlisting>
            </example>
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.multiple_requests">
        <title>同一クライアントでの複数リクエストの送信</title>
        <para>
            Zend_Http_Client は、複数の連続したリクエストを同一オブジェクトで処理できるようになっています。
            これは、スクリプト内で複数の場所からデータを取得する場合や、
            特定の HTTP リソースにアクセスする際にログインしてセッションクッキーを取得する必要がある場合などに便利です。
        </para>
        <para>
            同一ホストからの複数のリクエストを行う際には、設定フラグ
            'keepalive' を有効にすることを強く推奨します。
            こうすると、もしサーバが keep-alive をサポートしている場合に、
            すべてのリクエストが完了してクライアントオブジェクトが破棄されるまでは接続が保持されます。
            これにより、サーバとの TCP 接続を何度もオープンしなおす手間が省けます。
        </para>
        <para>
            同一クライアントから複数のリクエストを送信が、
            各リクエストのパラメータは完全に区別したいといった場合は、
            resetParameters() メソッドを使用します。これにより、GET や
            POST のパラメータ、リクエストの本文そしてリクエスト固有のヘッダがリセットされ、
            次のリクエストには持ち越されなくなります。
        </para>
        <note>
            <title>パラメータのリセット</title>
            <para>
                リクエスト固有でないヘッダは、resetParameters
                メソッドを使用してもリセットされません。実際のところ、リセットされるのは
                'Content-length' と 'Content-type' だけです。これにより、
                たとえば 'Accept-language' や 'Accept-encoding'
                のようなヘッダを付け忘れることを防ぎます。
            </para>
        </note>
        <para>
            連続したリクエストのために作られているもうひとつの機能が、
            クッキージャーオブジェクトです。クッキージャーを使用すると、
            最初のリクエストの際にサーバから受け取ったクッキーを自動的に保存することができます。
            そしてそれ以降のリクエストの際には保存したクッキーを自動的に送信するのです。
            これにより、たとえば実際のデータ取得リクエストの前に認証リクエストを行うことなどが可能となります。
        </para>
        <para>
            アプリケーションがユーザ単位の認証を必要としており、
            アプリケーション内の複数のスクリプトで連続したリクエストが発生する場合は、
            クッキージャーオブジェクトをセッションに格納することをお勧めします。
            こうすると、一度認証を受けるだけでそれをセッション全体で使いまわせるようになります。
        </para>
        <example>
            <title>単一のクライアントによる連続したリクエストの実行</title>
            <programlisting role="php">
<![CDATA[<?php
    // まず、クライアントのインスタンスを作成します。
    $client = new Zend_Http_Client('http://www.example.com/fetchdata.php', array(
        'keepalive' => true
    ));
    
    // セッションにクッキーが保存されていますか?
    if (isset($_SESSION['cookiejar']) && 
        $_SESSION['cookiejar'] instanceof Zend_Http_CookieJar)) {
        
        $client->setCookieJar($_SESSION['cookiejar']);
    } else {
        // いなければ、認証を行ってクッキーを保存します。
        $client->setCookieJar();
        $client->setUri('http://www.example.com/login.php');
        $client->setParameterPost(array(
            'user' => 'shahar',
            'pass' => 'somesecret'
        ));
        $client->request(Zend_Http_Client::POST);
        
        // さあ、パラメータを消去して URI を元のものに戻しましょう
        // (サーバによって設定されたクッキーは、ジャーに保存されている
        //  ことに注意しましょう)
        $client->resetParameters();
        $client->setUri('http://www.example.com/fetchdata.php');
    }
    
    $response = $client->request(Zend_Http_Client::GET);
    
    // クッキーをセッションに保存し、次のページで使用します。
    $_SESSION['cookiejar'] = $client->getCookieJar();
?>]]></programlisting>
        </example>
    </sect2>
    
    <sect2 id="zend.http.client.adapters">
        <title>接続アダプタ</title>
        <para>
            Zend_Http_Client は、接続アダプタとして設計されています。
            接続アダプタは実際にサーバへの接続を行うオブジェクトで、
            リクエストやレスポンスの処理も行います。
            この接続アダプタは置き換えることができます。
            つまり、デフォルトの接続アダプタを継承して自分の好みにあうように変更することができます。
            HTTP クライアントクラス全体を書き換える必要はありません。
            同じインターフェイスを実装しているだけでいいのです。
        </para>
        <para>
            現在、Zend_Http_Client クラスはふたつの組み込み接続アダプタを提供しています。
            <itemizedlist>
                <listitem>
                    <para><code>Zend_Http_Client_Adapter_Socket</code>:
                    デフォルトのアダプタで、ソケットベースで動作します。
                    使用するにあたり、特別な PHP 拡張モジュールは不要です。
                    </para>
                </listitem>
                <listitem>
                    <para><code>Zend_Http_Client_Adapter_Test</code>:
                    ダミーのアダプタです。テスト目的にのみ使用します。
                    実際の接続は行わず、あらかじめ定義済みのレスポンスを返します。
                    predefined response.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Zend_Http_Client オブジェクトの接続アダプタを指定するには、
            設定オプション 'adapter' を使用します。
            クライアントオブジェクトのインスタンスを作成する際に、オプション
            'adapter' にアダプタの名前 (たとえば 'Zend_Http_Client_Adapter_Socket' など)
            を指定することができます。あるいは、アダプタオブジェクトの変数
            (たとえば <code>new Zend_Http_Client_Adapter_test</code> など) を指定することもできます。
            Zend_Http_Client->setConfig() メソッドを使用し、
            アダプタを後で設定することも可能です。
        </para>
        <para>
            独自の接続アダプタを作成し、それを使用することもできます。
            そのためには、Zend_Http_Client_Adapter_Interface
            を実装したクラスを作成する必要があります。
            たとえば持続的なソケットを使用するアダプタを作成したり、
            キャッシュ機能を追加したアダプタを作成したりなど、
            作成するアプリケーションの要件にあわせたものを作成することが可能です。
        </para>
    </sect2>
    
    <sect2 id="zend.http.client.testing">
        <title>Zend_Http_Client オブジェクトのテストの作成</title>
        <para>
            HTTP 接続に依存するテストコードを書くのは非常に難しいものです。
            たとえば、リモートサーバから RSS を取得するアプリケーションをテストするには、
            ネットワークにつながっている必要があります。常にネットワークが使用できるとは限りません。
        </para>
        <para>
            このようなときのためにあるのが Zend_Http_Client_Adapter_Test アダプタです。
            Zend_Http_Client を使用するアプリケーションを作成し、それをテストしたい場合には、
            デフォルトのアダプタを Test アダプタに変更します。
            これで、サーバに接続せずにテストを行えるようになります。
        </para>
        <para>
            Zend_Http_Client_Adapter_Test には setResponse() というメソッドがあります。
            このメソッドのパラメータには、HTTP レスポンスをテキストか
            Zend_Http_Response オブジェクトで指定することができます。
            レスポンスを設定すると、Test アダプタは常にこのレスポンスを返すようになります。
            実際の HTTP リクエストは行いません。
        </para>
        <example>
            <title>ネットワーク接続をせずにコードをテストする</title>
            <programlisting role="php">
<![CDATA[<?php
    // 新しいアダプタとクライアントのインスタンスを作成します
    $adapter = new Zend_Http_Client_Adapter_Test();
    $client = Zend_Http_Client('http://www.example.com', array(
        'adapter' => $adapter
    ));
    
    // 想定するレスポンスを設定します
    $adapter->setResponse(
        "HTTP/1.1 200 OK"        . "\r\n" .
        "Content-type: text/xml" . "\r\n" .
                                   "\r\n" . 
        '<?xml version="1.0" encoding="UTF-8"?>' . 
        '<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"' . 
        '     xmlns:wfw="http://wellformedweb.org/CommentAPI/"' . 
        '     xmlns:dc="http://purl.org/dc/elements/1.1/">' . 
        '  <channel>' . 
        '    <title>Premature Optimization</title>' . 
        // and so on...
        '</rss>');
    
    $response = $client->request('GET');
    // .. $response の処理を続けます...
?>]]></programlisting>
        </example>
        <para>
            上の例のようにすると、HTTP クライアントにお望みのレスポンスを返させることができます。
            その際にネットワーク接続は使用しません。また、実際のサーバからのレスポンスも使用しません。
            この場合、このテストでテストするのは、
            レスポンス本文の XML をアプリケーションが正しくパースできるかどうかということです。
        </para>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->