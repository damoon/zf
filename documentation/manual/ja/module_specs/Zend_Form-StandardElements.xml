<!-- EN-Revision: 8360 -->
<sect1 id="zend.form.standardElements">
    <title>Zend Framework に同梱されている標準のフォーム要素</title>

    <para>
        Zend Framework には標準でいくつかの具象要素クラスが組み込まれており、
        HTML フォーム要素の大半を網羅しています。
        そのほとんどは特定のビューヘルパーを指定して要素をデコレートするだけのものですが、
        追加機能を提供しているものもあります。
        ここでは、標準の要素クラスとその機能についての説明をまとめます。
    </para>

    <sect2 id="zend.form.standardElements.button">
        <title>Zend_Form_Element_Button</title>

        <para>
            HTML の button 要素を作成する際に使用します。
            <code>Zend_Form_Element_Button</code> は <link
                linkend="zend.form.standardElements.submit">Zend_Form_Element_Submit</link>
            を継承して独自の機能を追加したものです。
            'formButton' ビューヘルパーでデコレートを行います。
        </para>

        <para>
            submit 要素と同様、要素のラベルを表示時の値として使用します。
            つまり、ボタンのテキストを設定するにはその要素の value を設定します。
            翻訳アダプタが存在するときは、ラベルも翻訳されます。
        </para>

        <para>
            ラベルも要素の一部なので、button 要素は
            <link
                linkend="zend.form.standardDecorators.viewHelper">ViewHelper</link>
            デコレータと <link
                linkend="zend.form.standardDecorators.dtDdWrapper">DtDdWrapper</link>
            デコレータのみを使用します。
        </para>

        <para>
            フォームの表示や検証の後で、
            そのボタンが押されたかどうかを調べたい場合は
            <code>isChecked()</code> メソッドを使用します。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.checkbox">
        <title>Zend_Form_Element_Checkbox</title>

        <para>
            HTML の checkbox は boolean 値を保持し、それぞれオン・オフを表します。
            <code>Zend_Form_Element_Checkbox</code> は、これを
            <code>setValue()</code> で保証します。null 値が渡された場合は
            その値を 0 として保存し、それ以外の場合は 1
            として保存します (HTML フォームのチェックボックスは、
            チェックされた場合にその要素のキーのみ (値は空) を送信します)。
            値が 0 の場合は <code>checked</code> 属性がオン、
            値が 1 の場合はその逆となります。デフォルトの値は 0
            です。
        </para>

        <para>
            <code>Zend_Form_Element_Checkbox</code> は 'formCheckbox'
            ビューヘルパーを使用します。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.hidden">
        <title>Zend_Form_Element_Hidden</title>

        <para>
            Hidden 要素はただ単にデータを送信するだけのもので、
            ユーザはその値を変更してはいけません。
            <code>Zend_Form_Element_Hidden</code>
            は、この機能を 'formHidden' ビューヘルパーで実現します。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.hash">
        <title>Zend_Form_Element_Hash</title>

        <para>
            この要素は CSRF 攻撃からフォームを保護するものです。
            送信されたデータがもとのフォームのユーザセッションからのものである
            (悪意のあるスクリプトからのものではない) ことを保証できるようにします。
            これを実現するために、フォームにハッシュ要素を追加して
            あとでそのハッシュを検証するようにしています。
        </para>

        <para>
            ハッシュ要素の名前は一意なものでなければなりません。
            この要素ではオプション <literal>salt</literal> を使うことを推奨します。
            名前が同じでも salt が異なればハッシュは衝突しません。
        </para>

        <programlisting role="php"><![CDATA[<?php
$form->addElement('hash', 'no_csrf_foo', array('salt' => 'unique'));
?>]]></programlisting>
        
        <para>
            salt は、後から <code>setSalt($salt)</code>
            メソッドを使って設定することもできます。
        </para>

        <para>
            内部的には、この要素は一意な ID を
            <code>Zend_Session_Namespace</code> を用いて保存しており、
            送信されたときにその内容
            (TTL が期限切れになっていないかどうか) をチェックしています
            そして、'Identical' バリデータを使用して、
            送信されたハッシュと保存されているハッシュを比較します。
        </para>

        <para>
            'formHidden' ビューヘルパーを使用して要素をフォームにレンダリングします。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.Image">
        <title>Zend_Form_Element_Image</title>

        <para>
            画像もフォーム要素として使用することができます。
            これを用いると、フォームのボタンにグラフィカルな要素を指定したりすることができます。
        </para>

        <para>
            この要素には、元となる画像が必要です。
            <code>Zend_Form_Element_Image</code>
            は要素の value を元画像として使用し、
            <link linkend="zend.form.standardDecorators.image">Image
            デコレータ</link> でレンダリングを行います
            (それ以外に標準のデコレータ Errors、HtmlTag および Label も使用します)。
            オプションのタグを <code>Image</code> デコレータに指定すると、
            それで image 要素をラップすることができます。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.multiCheckbox">
        <title>Zend_Form_Element_MultiCheckbox</title>

        <para>
            関連する複数のチェックボックスをひとまとめにし、
            結果をグループ化して扱いたいこともあるでしょう。ちょうど
            <link
                linkend="zend.form.standardElements.multiselect">Multiselect</link>
            に似ていますが、ドロップダウンリストではなく
            チェックボックス形式で表示させたいのです。
        </para>

        <para>
            <code>Zend_Form_Element_MultiCheckbox</code> は
            それを行うためのものです。Multi 要素を継承したその他の要素を同様に、
            選択肢のリストを指定してそれらを同じ方法で検証することができます。
            'formMultiCheckbox' ビューヘルパーを使用して、
            フォームの送信内容を配列で返すようにします。
        </para>

        <para>
            チェックボックスのオプションを操作するには、
            次のメソッドを使用します。
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (既存のオプションを上書きします)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.form.standardElements.multiselect">
        <title>Zend_Form_Element_Multiselect</title>

        <para>
            XHTML の <code>select</code> 要素には 'multiple'
            属性を指定することができます。
            これは、普通の要素ではなく複数項目を選択できる要素を表します。
            <code>Zend_Form_Element_Multiselect</code> は、
            <link
                linkend="zend.form.standardElements.select">Zend_Form_Element_Select</link>
            を継承して <code>multiple</code> 要素を 'multiple'
            に設定したものです。基底クラス <code>Zend_Form_Element_Multi</code>
            を継承したその他のクラスと同様、以下のメソッドでオプションを操作することができます。
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (既存のオプションを上書きします)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>

        <para>
            フォームや要素に翻訳アダプタが登録されている場合は、
            表示時にオプションの値が翻訳されます。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.password">
        <title>Zend_Form_Element_Password</title>

        <para>
            Password 要素は、基本的には通常の text 要素と同じです。
            しかし、フォームの再描画時やエラーメッセージなどに
            入力内容を表示させないようにします。
        </para>

        <para>
            <code>Zend_Form_Element_Password</code> は、これを実現するために
            各バリデータ上で <code>setObscureValue(true)</code>
            (検証エラーの際のメッセージでパスワードを表示させない)
            をコールし、'formPassword' ビューヘルパー (渡された値を表示しない)
            を使用します。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.radio">
        <title>Zend_Form_Element_Radio</title>

        <para>
            Radio 要素は、いくつかの選択肢を指定してその中から
            ひとつを選ばせるためのものです。
            <code>Zend_Form_Element_Radio</code> は規定クラス
            <code>Zend_Form_Element_Multi</code> を継承したもので、
            複数のオプションを指定することができます。そして、それを表示するために
            <code>formRadio</code> ビューヘルパーを使用します。
        </para>

        <para>
            Multi 要素基底クラスを継承したその他のクラスと同様、
            以下のメソッドでラジオボタンの表示オプションを操作することができます。
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (既存のオプションを上書きします)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.form.standardElements.reset">
        <title>Zend_Form_Element_Reset</title>

        <para>
            Reset ボタンはフォームの入力内容をクリアするために使用します。
            データは送信されません。しかし、表示時の役割があるため、
            標準要素のひとつとして組み込まれています。
        </para>

        <para>
            <code>Zend_Form_Element_Reset</code> は <link
                linkend="zend.form.standardElements.submit">Zend_Form_Element_Submit</link>
            を継承しています。ボタンの表示時にはラベルを使用し、
            翻訳アダプタが存在する場合はそれが翻訳されます。
            この要素が使用するデコレータは
            'ViewHelper' と 'DtDdWrapper' のみです。
            この要素にはエラーメッセージがなく、またラベルも必須ではないからです。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.select">
        <title>Zend_Form_Element_Select</title>

        <para>
            セレクトボックスは、指定したデータの中から選択させたいときに使用するものです。
            <code>Zend_Form_Element_Select</code> は、
            セレクトボックスをお手軽に作成します。
        </para>

        <para>
            Multi 要素継承したその他のクラスと同様、
            以下のメソッドでオプションを操作することができます。
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (既存のオプションを上書きします)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>

        <para>
            <code>Zend_Form_Element_Select</code> は 'formSelect'
            ビューヘルパーでデコレートを行います。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.submit">
        <title>Zend_Form_Element_Submit</title>

        <para>
            Submit ボタンはフォームの内容を送信するための要素です。
            複数の submit ボタンを使用することもできます。
            どの submit ボタンでデータを送信したかによって、
            どのアクションを実行するのかを切り替えることができます。
            <code>Zend_Form_Element_Submit</code> では、この判断をしやすくするために
            <code>isChecked()</code> メソッドを用意しています。
            フォームから送信される submit ボタンはひとつだけなので、
            各 submit 要素に対してこのメソッドをコールすることで
            どのボタンが押されたのかを判断することができます。
        </para>

        <para>
            <code>Zend_Form_Element_Submit</code> はラベルを submit ボタンの
            "値" として使用します。翻訳アダプタが存在する場合はこれを翻訳します。
            <code>isChecked()</code> は、送信された値をこのラベルと比較し、
            そのボタンが押されたのかどうかを判断します。
        </para>

        <para>
            <link
                linkend="zend.form.standardDecorators.viewHelper">ViewHelper</link>
            デコレータと <link
                linkend="zend.form.standardDecorators.dtDdWrapper">DtDdWrapper</link>
            デコレータを使用して要素をレンダリングします。label
            デコレータは使用しません。要素のレンダリング時にはボタンのラベルを使用するからです。
            また、一般的には submit 要素にはエラーを関連付けません。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.text">
        <title>Zend_Form_Element_Text</title>

        <para>
            最もよく用いられているフォーム要素は text 要素です。
            これはテキスト入力用の要素で、大半の入力項目に適しています。
            <code>Zend_Form_Element_Text</code> は、単純に
            'formText' ビューヘルパーを使用して要素を表示します。
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.textarea">
        <title>Zend_Form_Element_Textarea</title>

        <para>
            Textarea は大量のテキストを入力させるために使用します。
            テキストの量に制限を設けません (サーバや PHP
            の設定による制限は除きます)。
            <code>Zend_Form_Element_Textarea</code> は
            'textArea' ビューヘルパーを使用して要素とその値を表示します。
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 tw=80 et:
-->
