<sect1 id="zend.db.table.row">

    <title>Zend_Db_Table_Row</title>

    <sect2 id="zend.db.table.row.introduction">

        <title>導入</title>

        <para>
            Zend_Db_Table_Row は、Zend_Db_Table オブジェクトの個々の行を含むクラスです。
            テーブルクラスに対してクエリを実行すると、返される結果は
            Zend_Db_Table_Row オブジェクトのセットとなります。
            このオブジェクトを使用して新しい行を作成し、
            それをデータベースのテーブルに追加することもできます。
        </para>

        <para>
            Zend_Db_Table_Row は、
            <ulink url="http://www.martinfowler.com/eaaCatalog/rowDataGateway.html">行データゲートウェイ</ulink>
            パターンを実装したものです。
        </para>

    </sect2>

    <sect2 id="zend.db.table.row.read">

        <title>行の取得</title>

        <para>
            Zend_Db_Table_Abstract は <code>find()</code> や
            <code>fetchAll()</code> といったメソッドを提供します。
            これらはそれぞれ Zend_Db_Table_Rowset 型のオブジェクトを返します。
            また <code>fetchRow()</code> メソッドは、
            Zend_Db_Table_Row 型のオブジェクトを返します。
        </para>

        <example id="zend.db.table.row.read.example">
            <title>行の取得の例</title>
            <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$row = $bugs->fetchRow('bug_id = 1');

?>]]></programlisting>
            </example>

        <para>
            Zend_Db_Table_Rowset オブジェクトには、複数の
            Zend_Db_Table_Row オブジェクトが含まれます。
            <xref linkend="zend.db.table.rowset" /> を参照ください。
        </para>

        <example id="zend.db.table.row.read.example-rowset">
            <title>行セット内の行を読み込む例</title>
            <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$rowset = $bugs->fetchAll("bug_status = 'NEW'");
$row = $rowset->current();

?>]]></programlisting>
            </example>

        <sect3 id="zend.db.table.row.read.get">
            <title>行からのカラムの値の読み込み</title>

            <para>
                Zend_Db_Table_Row_Abstract にはアクセサがあり、
                行のカラムをオブジェクトのプロパティとして参照できます。
            </para>

            <example id="zend.db.table.row.read.get.example">
                <title>行からカラムを読み込む例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$row = $bugs->fetchRow('bug_id = 1');

// bug_description カラムの値を出力します
echo $row->bug_description;

?>]]></programlisting>
            </example>

            <note>
                <para>
                    初期のバージョンの Zend_Db_Table_Row では、
                    これらのアクセサをデータベースのカラムと対応させる際に
                    <emphasis>語尾変化 (inflection)</emphasis>
                    と呼ばれる文字列変換を行っていました。
                </para>
                <para>
                    現在の Zend_Db_Table_Row では語尾変化を実装していません。
                    使用するアクセサ名は、データベース内のカラム名と正確に一致します。
                </para>
            </note>

        </sect3>

        <sect3 id="zend.db.table.row.read.to-array">
            <title>行データの配列としての取得</title>

            <para>
                行のデータに対して配列としてアクセスするには、行オブジェクトの
                <code>toArray()</code> メソッドを使用します。
                これは、カラム名とその値を関連付けた連想配列を返します。
            </para>

            <example id="zend.db.table.row.read.to-array.example">
                <title>toArray() メソッドの使用例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$row = $bugs->fetchRow('bug_id = 1');

// 行オブジェクトから カラム名/値 の連想配列を取得します
$rowArray = $row->toArray();

// 通常の配列と同様に使用します
foreach ($rowArray as $column => $value) {
    echo "カラム: $column\n";
    echo "値:  $value\n";
}

?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.db.table.row.read.relationships">
            <title>関連するテーブルからのデータの取得</title>

            <para>
                Zend_Db_Table_Row_Abstract クラスには、関連するテーブルから
                行や行セットを取得するメソッドが存在します。
                テーブルのリレーションについての詳細な情報は
                <xref linkend="zend.db.table.relationships" /> を参照ください。
            </para>
        </sect3>

    </sect2>

    <sect2 id="zend.db.table.row.write">

        <title>データベースへの行の書き込み</title>

        <sect3 id="zend.db.table.row.write.set">
            <title>行のカラムの値の変更</title>

            <para>
                個々のカラムの値をアクセサで設定する方法は、
                カラムを読み込む場合と同様で、オブジェクトのプロパティを使用します。
            </para>

            <para>
                これは、アプリケーション内の行データのカラムの値は変更しますが、
                まだその変更はデータベースにコミットされていません。コミットするには
                <code>save()</code> メソッドを使用します。
            </para>

            <example id="zend.db.table.row.write.set.example">
                <title>行のカラムの内容を変更する例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$row = $bugs->fetchRow('bug_id = 1');

// ひとつあるいは複数のカラムの値を変更します
$row->bug_status = 'FIXED';

// データベース内の行を、新しい値で UPDATE します
$row->save();

?>]]></programlisting>
            </example>

            <note>
                <para>
                    現在は、主キーカラムの値を設定しようとすると
                    Zend_Db_Table_Row_Abstract は例外をスローします。
                    これは Zend Framework 1.0 までには変更するつもりです。
                    シーケンスや自然主キーに対応するため、
                    行クラスは主キーカラムの変更も受け入れるべきです。
                </para>
            </note>

        </sect3>

        <sect3 id="zend.db.table.row.write.insert">
            <title>新しい行の挿入</title>

            <para>
                指定したテーブルに新しい行を作成するには、テーブルクラスの
                <code>fetchNew()</code> メソッドを使用します。
            </para>

            <example id="zend.db.table.write.insert.example">
                <title>テーブルに新しい行を作成する例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$newRow = $bugs->fetchNew();

// アプリケーションに応じて適切にカラムの値を設定します
$newRow->bug_description = '...description...';
$newRow->bug_status = 'NEW';

// 新しい行をデータベースに INSERT します
$newRow->save();

?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.db.table.row.write.set-from-array">
            <title>複数のカラムの値の変更</title>

            <para>
                Zend_Db_Table_Row_Abstract の
                <code>setFromArray()</code> メソッドを使用すると、
                複数のカラムを一度に設定することができます。
                このメソッドには、カラム名と値を関連付けた連想配列を指定します。
                このメソッドは、新しい行の値を設定する場合や
                既存の行を更新する場合のどちらでも有用でしょう。
            </para>

            <example id="zend.db.table.write.set-from-array.example">
                <title>setFromArray() で新しい行の値を設定する例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$newRow = $bugs->fetchNew();

// データを連想配列形式にします
$data = array(
    'bug_description' => '...description...',
    'bug_status'      => 'NEW'
);

// すべてのカラムの値を一度に設定します
$newRow->setFromArray($data);

// 新しい行をデータベースに INSERT します
$newRow->save();

?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.db.table.row.write.delete">
            <title>行の削除</title>

            <para>
                行オブジェクトで <code>delete()</code> メソッドをコールすることができます。
                これは、その行オブジェクトの主キーに対応するデータベースの行を削除します。
            </para>

            <example id="zend.db.table.row.write.delete.example">
                <title>行の削除の例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$row = $bugs->fetchRow('bug_id = 1');

// この行を DELETE します
$row->delete();

?>]]></programlisting>
            </example>

            <para>
                変更を適用するのに <code>save()</code> をコールする必要はありません。
                これは、データベースに対して即時に適用されます。
            </para>

        </sect3>

    </sect2>

    <sect2 id="zend.db.table.row.serialize">

        <title>行のシリアライズと復元</title>

        <para>
            データベースの行の内容を保存しておき、
            あとで使用するということはよくありがちです。
            オブジェクトの内容を、オフラインで保存しやすい形式 (たとえばファイルなど)
            に変換するような処理のことを <emphasis>シリアライズ</emphasis> といいます。
            Zend_Db_Table_Row_Abstract 型のオブジェクトは、
            シリアライズをすることができます。
        </para>

        <sect3 id="zend.db.table.row.serialize.serializing">
            <title>行のシリアライズ</title>

            <para>
                <emphasis>あとで書く。</emphasis>
            </para>

            <example id="zend.db.table.row.serialize.serializing.example">
                <title>行のシリアライズの例</title>
                <programlisting role="php"><![CDATA[<?php

$bugs = new Bugs();
$row = $bugs->fetchRow('bug_id = 1');

// オブジェクトをシリアライズします
$serializedRow = serialize($row);

// これで、$serializedRow をファイルなどに書き出すことができます

?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.db.table.row.serialize.unserializing">
            <title>シリアライズした行データの復元</title>

            <para>
                <emphasis>あとで書く。</emphasis>
            </para>

            <example id="zend.db.table.row.serialize.unserializing.example">
                <title>シリアライズした行の復元の例</title>
                <programlisting role="php"><![CDATA[<?php

$rowClone = unserialize($serializedRow);

// これでオブジェクトのプロパティを使用できますが、読み込み専用です
echo $rowClone->bug_description;

?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.db.table.row.serialize.set-table">
            <title>生きたデータとしての行の復活</title>

            <para>
                <emphasis>あとで書く。</emphasis>
            </para>

            <example id="zend.db.table.row.serialize.set-table.example">
                <title>行の復活の例</title>
                <programlisting role="php"><![CDATA[<?php

$rowClone = unserialize($serializedRow);

$bugs = new Bugs();

// この行をテーブルに再接続し、
// データベースとの接続を復活させます
$rowClone->setTable($bugs);

// これで、行の内容を変更して保存することができます
$rowClone->bug_status = 'FIXED';
$rowClone->save();

?>]]></programlisting>
            </example>

        </sect3>

    </sect2>

    <sect2 id="zend.db.table.row.extending">

        <title>行クラスの拡張</title>

        <sect3 id="zend.db.table.row.extending.overriding">
            <title>Zend_Db_Table_Row における Insert、Update および Delete の独自ロジックの定義</title>

            <para>
                <emphasis>あとで書く。</emphasis>
            </para>

        </sect3>

        <sect3 id="zend.db.table.row.extending.inflection">
            <title>Zend_Db_Table_Row における語尾変化の定義</title>

            <para>
                テーブルのクラス名を RDBMS のテーブル名とあわせるために、
                <emphasis>inflection (語尾変化)</emphasis>
                と呼ばれる文字列変換を使用することを好む方もいます。
            </para>

            <para>
                Zend_Db クラス群は、デフォルトでは語尾変化をサポートしていません。
                この設計方針については
                <xref linkend="zend.db.table.extending.inflection" />
                を参照ください。
            </para>

            <para>
                語尾変化をさせたい場合は、変換処理を自前で実装する必要があります。そのためには、
                独自の行クラスで <code>_transformColumn()</code> メソッドをオーバーライドし、
                テーブルクラスでクエリを実行する際にその独自行クラスを使用します。
            </para>

            <example id="zend.db.table.row.extending.inflection.example">
                <title>語尾変化の変換処理の定義例</title>

                <para>
                    <emphasis>あとで書く。</emphasis>
                </para>

            </example>

        </sect3>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
