<sect1 id="zend.controller.overview">
    <title>概要</title>

    <sect2 id="zend.controller.overview.introduction">
        <title>導入</title>
        <para>
            <code>Zend_Controller</code> は、モデル - ビュー - コントローラ
            (MVC) パターンに基づいたウェブサイトを構築するための基本機能を提供します。
        </para>

        <para>
            <code>Zend_Controller</code> は軽量で部品化されており、拡張しやすいように設計されています。
            この設計は、柔軟性および利用者に対する自由度を確保するための最低限のものであり、
            <code>Zend_Controller</code> を使用して構築したシステムは、
            ほぼ同じようなコード配置・規約を共有することができます。
        </para>

        <para>
            <code>Zend_Controller</code> の処理の流れは、
            いくつかの部品にわかれて実装されています。
            これらの部品のすべてを完璧に理解する必要はありませんが、
            処理の概要を知っておくことは有用です。

            <itemizedlist>
                <listitem>
                    <para>
                        <code>Zend_Controller_Front</code> は、
                        <code>Zend_Controller</code> の処理全体を取りまとめます。
                        FrontController パターンであるといえます。
                        サーバから受け取ったすべてのリクエストを <code>Zend_Controller_Front</code>
                        が処理し、最終的にリクエストを ActionController
                        (<code>Zend_Controller_Action</code>) に委譲します。
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Request_Abstract</code>
                        はリクエスト環境を表し、コントローラ名やアクション名
                        そしてリクエストパラメータを設定したり取得したりする機能を提供します。
                        さらに、アクションが <code>Zend_Controller_Dispatcher</code>
                        でディスパッチされたかどうかを追跡する機能もあります。
                        この抽象リクエストオブジェクトを拡張し、
                        リクエスト情報をカプセル化します。それによって、
                        ルータはリクエストの情報を取得して
                        コントローラとアクションを決定できるようになります。
                    </para>

                    <para>
                        デフォルトでは <code>Zend_Controller_Request_Http</code>
                        が用いられます。これは、HTTP リクエスト環境全体へのアクセス機能を提供します。
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Router_Interface</code> を使用してルータを定義します。
                        ルーティングとは、リクエストの内容を調べて、
                        そのリクエストを処理するコントローラとアクションを決定する処理のことです。
                        このコントローラとアクション、そしてリクエストパラメータがリクエストオブジェクトに設定され、
                        <code>Zend_Controller_Dispatcher</code> で処理されます。
                        ルーティングが発生するのは一度だけ、
                        つまり最初にリクエストを受け取ってから
                        最初のコントローラにディスパッチされるまでの間だけです。
                    </para>

                    <para>
                        デフォルトのルータである <code>Zend_Controller_Router</code> は、
                        <code>Zend_Controller_Request_Http</code> で指定された URI
                        を受け取ってそれを分解し、コントローラや
                        アクション、そして URL に含まれたパスのパラメータを取得します。
                        たとえば、<code>http://localhost/foo/bar/key/value</code>
                        のような URL の場合は <code>foo</code> がコントローラ、
                        <code>bar</code> がアクション、そしてパラメータ
                        <code>key</code> の値として <code>value</code> を取得します。
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Dispatcher_Interface</code>
                        を使用してディスパッチャを定義します。ディスパッチとは、
                        コントローラとアクションをリクエストオブジェクトから受け取り、
                        それを実際のコントローラファイル/クラスとメソッドに対応させる処理のことです。
                        コントローラやアクションが存在しない場合は、
                        デフォルトのコントローラやアクションにディスパッチします。
                    </para>

                    <para>
                        実際のディスパッチ処理では、
                        コントローラクラスのインスタンスの作成と
                        そのクラスのアクションメソッドのコールを行います。
                        ルーティングは一度しか発生しませんが、
                        それとは異なりディスパッチは繰り返し発生します。
                        リクエストオブジェクトのディスパッチ状態がリセットされるとループが再開され、
                        現在リクエストオブジェクトに設定されているアクションがコールされます。
                        リクエストオブジェクトのディスパッチ状態が (true に)
                        設定された状態でループが終了すると、処理が終了します。
                    </para>

                    <para>
                        デフォルトのディスパッチャは
                        <code>Zend_Controller_Dispatcher</code> です。
                        これは、CamelCasedClasses 形式の名前の最後に
                        Controller がついたクラスをコントローラとして使用し、
                        アクションメソッドの名前は camelCasedMethods
                        形式 (最後に Action をつける) となります。たとえば
                        <code>SomeFooController::barAction</code>
                        のような場合、コントローラは
                        <code>somefoo</code>、アクションは <code>bar</code>
                        となります。
                    </para>

                    <para>
                        さらに、コントローラを読み込む際に使用する <code>module</code>
                        を指定することができます。モジュールは単に、
                        コントローラを読み込む際の
                        クラスプレフィックスを指定するためだけに使用されます。
                        また、クラスを探すサブディレクトリを指定するために使用することもあります。
                        モジュールを使用するには、フロントコントローラでパラメータ
                        <code>useModules</code> を設定します。
                    </para>

                    <programlisting role="php"><![CDATA[
$front->setParam('useModules', true);
]]></programlisting>

                    <para>
                        さらに、コントローラディレクトリを設定する際に
                        モジュールとディレクトリの対応を指定しなければなりません。
                        これはコントローラを初期化するときでも可能ですし、
                        あとで別のディレクトリを追加してもかまいません。
                    </para>

                    <programlisting role="php"><![CDATA[
$front->setControllerDirectory(array(
    0      => '/path/to/default/controllers',
    'user' => '/path/to/user/controllers'
));

// あるいは
$front->setControllerDirectory('/path/to/default/controllers');
$front->addControllerDirectory('/path/to/user/controllers', 'user');
]]></programlisting>

                    <para>
                        たとえば、次のような URL を考えてみましょう。
                    </para>

                    <programlisting role="php"><![CDATA[
http://example.com/user/news/action
]]></programlisting>

                    <para>
                        この例では、コントローラ 'news' に対してモジュール 'user'
                        が設定されています。ディスパッチャは
                        'user' という名前のモジュールがディレクトリに対応しているかどうかを調べます。
                        対応している場合はそのディレクトリから
                        <code>NewsController.php</code> というファイルを読み込みます。
                        この中で <code>User_NewsController</code>
                        というクラスが定義されているものと考えます。
                    </para>

                    <para>
                        モジュールは、関連するコードをディレクトリごとに分けて管理したい場合に便利です。
                        また、サードパーティのコードを使用したり、
                        同一コントローラをさまざまなアプリケーションで再利用したりする場合にも便利です。
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Action</code> はコントローラの基底コンポーネントです。
                        各コントローラはこの <code>Zend_Controller_Action</code>
                        クラスを継承して作成します。このクラスではアクションメソッドを定義します。
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Response_Abstract</code>
                        は基底レスポンスクラスで、アクションコントローラからの応答内容を収集し、
                        それをレスポンスとして返します。これはヘッダと本文の両方を収集します。
                        また、<code>__toString()</code> を実装しているので、
                        それを直接出力してヘッダと本文を一度に送信することができます。
                    </para>

                    <para>
                        デフォルトのレスポンスクラスは
                        <code>Zend_Controller_Response_Http</code> で、
                        これは HTTP 環境での使用に適しています。
                    </para>
                </listitem>
            </itemizedlist>

            <code>Zend_Controller</code> の処理の流れは比較的シンプルです。
            <code>Zend_Controller_Front</code> がリクエストを受け取り、
            <code>Zend_Controller_Router</code> をコールして、
            配送先となるコントローラ (そしてコントローラ内のアクション)
            を決定します。<code>Zend_Controller_Router</code> は URI
            を分解し、リクエストからコントローラ名とアクション名を取得します。
            その後、<code>Zend_Controller_Front</code> はディスパッチループに突入します。
            まず <code>Zend_Controller_Dispatcher</code> をコールしてそこにリクエストを渡し、
            リクエストで指定されたコントローラとアクションを取得します
            (あるいはデフォルトを使用します)。
            コントローラが終了すると、処理は <code>Zend_Controller_Front</code>
            に戻ります。リクエストのディスパッチ状態がリセットされ、
            別のコントローラをディスパッチするように指示された場合は、
            ループが続けられて次の配送処理が行われます。
            それ以外の場合は、処理がそこで終了します。それ以外の場合は、
            処理が終了します。
        </para>
    </sect2>

    <sect2 id="zend.controller.overview.request">
        <title>リクエストオブジェクト</title>

        <para>
            リクエストオブジェクトとは <code>Zend_Controller_Front</code> とルータ、
            ディスパッチャそしてコントローラクラスの間でやり取りされる単純なバリューオブジェクトです。
            これはコントローラ、アクションそして環境 (HTTP、CLI、PHP-GTK など)
            に応じたその他のパラメータの内容をまとめたものです。
        </para>

        <itemizedlist>
            <listitem><para>
                コントローラ名へのアクセスは <code>getControllerName()</code>
                および <code>setControllerName()</code> によって行います。
            </para></listitem>
            <listitem><para>
                コントローラ内からコールされるアクションの名前へのアクセスは
                <code>getActionName()</code> および <code>setActionName()</code>
                によって行います。
            </para></listitem>
            <listitem><para>
                アクションに渡されるパラメータは キー/値 の組み合わせからなる連想配列で、
                <code>getParams()</code> および <code>setParams()</code> によってアクセスします。
                あるいは、その個々のデータには
                <code>getParam()</code> および <code>setParam()</code> でアクセスします。
            </para></listitem>
        </itemizedlist>

        <para>
            リクエストの形式によっては、それ以外のメソッドも使用可能です。
            たとえば、デフォルトのリクエストで使用される <code>Zend_Controller_Request_Http</code>
            では、リクエスト URI やパス情報、$_GET や $_POST
            パラメータを取得するメソッドなどがあります。
        </para>

        <para>
            リクエストオブジェクトはフロントコントローラに渡されます。
            もしリクエストオブジェクトがなかった場合は、
            ディスパッチ処理の最初 (ルーティングが発生する前)
            にインスタンスが作成されます。これは、
            ディスパッチチェインのすべてのオブジェクトに渡されていきます。
        </para>

        <para>
            さらに、リクエストオブジェクトはテストの際にも有用です。
            開発者がリクエストを作成し、コントローラやアクション、
            パラメータや URI などを指定してそれをフロントコントローラに渡すことで、
            アプリケーションの流れをテストすることができます。
            レスポンスオブジェクトと組み合わせて使用すると、
            MVC アプリケーションの精密で正確な単体テストが可能となります。
        </para>
    </sect2>

    <sect2 id="zend.controller.overview.routing-process">
        <title>ルーティング処理</title>

        <para>
            はじめてのコントローラを作り始める前に、ルーティング処理が
            <code>Zend_Controller_Router</code> でどのように実装されているのかを知る必要があるでしょう。
            処理手順として、一度だけ発生するルーティングと繰り返し発生するディスパッチがあることを覚えておきましょう。
        </para>

        <para>
            <code>Zend_Controller_Front</code> は <code>Zend_Controller_Router</code>
            (あるいは別に登録されたルータ) をコールし、
            URI をコントローラとアクションに対応させます。
            <code>Zend_Controller_Router</code> は URI を受け取ってそれを分解し、
            コントローラとアクション、そしてパスに含まれた URL
            パラメータを取得します。そしてそれらをリクエストオブジェクトに格納します。
        </para>

        <para>
            <code>Zend_Controller_Router</code> は、
            非常にシンプルな対応ルールでコントローラ名とアクション名を取得します。
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
        </programlisting>
        <para>
            上の例で、最初の部分が常にコントローラの名前となり、
            二番目の部分が常にアクションの名前となります。
        </para>

        <para>
            オプションで、コントローラに渡すパラメータを URI に含めることができます。
            これは キー/値 の組み合わせの形式になります。
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
        </programlisting>

        <para>
            コントローラやアクションが URI パスに含まれない場合は、
            <code>Zend_Controller_Dispatcher</code>
            はリクエストオブジェクトのパラメータから値を取得しようとします。
            それも見つからなかった場合はデフォルト値を使用します。
            デフォルト値は、コントローラもアクションも "<code>index</code>"
            となります。以下に例を示します。
        </para>

        <programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
コントローラ: roadmap
アクション  : future

http://framework.zend.com/roadmap/
コントローラ: roadmap
アクション  : index

http://framework.zend.com/
コントローラ: index
アクション  : index]]>
        </programlisting>

        <para>
            さらに、サブディレクトリ内のコントローラやモジュールもいくつかの方法で指定できます。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    コントローラの名前にアンダースコア (_)
                    を使用できます。たとえば
                    <code>http://framework.zend.com/admin_roadmap/future</code>
                    は、コントローラクラス Admin_RoadmapController に対応します
                    (その他のパス区切り文字を指定するには、ディスパッチャの
                    setPathSeparator() メソッドを使用します)。
                </para>
            </listitem>
            <listitem>
                <para>
                    フロントコントローラで <code>useModules</code>
                    パラメータを設定すると、これをサブディレクトリを使用した
                    きれいな URI に対応させることができます。上の例の URL は
                    <code>http://framework.zend.com/admin/roadmap/future</code>
                    となります。こうするには、<code>useModules</code>
                    パラメータをフロントコントローラかルータで設定し、
                    コントローラのディレクトリを 'admin' モジュールとして追加します。
                </para>

                <programlisting><![CDATA[
$router->setParam('useModules', true);
// あるいは
$front->setParam('useModules', true);

// そして
$front->addControllerDirectory('/path/to/admin/controllers', 'admin');
]]></programlisting>

                <para>
                    これは、基本ルータおよび RewriteRouter のどちらでも動作します。
                </para>
            </listitem>
        </itemizedlist>

        <note>
            <title>柔軟性</title>
            <para>
                より柔軟な機能を使用したい場合は、
                <xref linkend="zend.controller.providedsubclasses.rewriterouter"/>
                を調べてみましょう。
            </para>
        </note>

        <para>
            コントローラの名前、コントローラ内のアクションの名前、
            そしてオプションのパラメータ (モジュールの名前を含む) の内容が、
            リクエストオブジェクトにまとめられます。
            <code>Zend_Controller_Front</code> がディスパッチループに入ると、
            リクエストオブジェクトが <code>Zend_Controller_Dispatcher</code> に渡されます。
        </para>
    </sect2>

    <sect2 id="zend.controller.overview.dispatching">
        <title>ディスパッチ処理</title>

        <para>
            ディスパッチ処理は、リクエストオブジェクトを受け取り、
            そこに含まれる情報 (コントローラ名、アクション名およびオプションのパラメータ)
            を展開し、コントローラのインスタンスを作成してそのコントローラのアクションをコールします。
            コントローラやアクションが見つからない場合は、
            デフォルト値を使用します。<code>Zend_Controller_Dispatcher</code>
            では、コントローラとアクションのデフォルトはどちらも
            <code>index</code> です。しかし、
            <code>setDefaultController()</code> メソッドや
            <code>setDefaultAction()</code> メソッドでこれらを変更することもできます。
        </para>

        <para>
            ディスパッチ処理が発生するのは、フロントコントローラでのループの内部です。
            ディスパッチ処理を行う前に、フロントコントローラはルーティングを行い、
            ユーザが指定したコントローラとアクション、そして追加のパラメータを取得します。
            それからディスパッチループに入り、リクエストを配送します。
        </para>

        <para>
            ループ内では、まず最初にリクエストオブジェクトのフラグを設定します。
            このフラグは、アクションがディスパッチされたことを示すものです。
            アクション内や pre/postDispatch プラグインでこのフラグをリセットすると、
            ディスパッチループがそのまま継続され、もう一度リクエストを処理しようとします。
            リクエスト内のコントローラやアクションを変更してフラグをリセットすることで、
            さまざまなリクエストを続けて実行させることができます。
        </para>

        <para>
            このようなディスパッチ処理を制御する
            アクションコントローラのメソッドが <code>_forward()</code> です。
            このメソッドを pre/postDispatch() やアクションメソッドでコールし、
            コントローラやアクション、
            そして新しいアクションに送りたい追加のパラメータを指定します。
        </para>
        
        <programlisting role="php"><![CDATA[
public function myAction()
{
    // 何かの処理をして...
    // 別のアクション FooController::barAction() に転送します
    $this->_forward('foo', 'bar', array('baz' => 'bogus'));
}
]]></programlisting>
    </sect2>

    <sect2 id="zend.controller.overview.response">
        <title>レスポンスオブジェクト</title>

        <para>
            レスポンスオブジェクトは、リクエストオブジェクトと対になるものです。
            その目的は、コンテンツやヘッダを収集し、それを返すことです。
            さらに、フロントコントローラで捕捉した例外はすべてレスポンスオブジェクトに渡されます。
            これにより、例外の処理がやりやすくなります。
            この挙動を変更するには
            <code>Zend_Controller_Front::throwExceptions(true)</code> を設定します。
        </para>

        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);
]]></programlisting>

        <para>
            レスポンスオブジェクトは <code>__toString()</code> を実装しているので、
            安全に出力することができます。つまり次のように使用できるということです。
        </para>

        <programlisting role="php"><![CDATA[
echo $controller->getResponse();

// あるいは
$response = $controller->getResponse();
echo $response;
]]></programlisting>
        
        <para>
            開発者は、アクションコントローラの中でレスポンスオブジェクトを使用しなければなりません。
            出力を直接レンダリングしたり直接ヘッダを送信したりするのではなく、
            それらをレスポンスオブジェクトに格納するようにします。
        </para>

        <programlisting role="php"><![CDATA[
// アクションコントローラのアクション内で、
// ヘッダを設定します
$this->getResponse()
    ->setHeader('Content-Type', 'text/html')
    ->appendBody($content);
]]></programlisting>

        <para>
            こうすることで、すべてのヘッダを一度に送信し、
            その後でコンテンツを表示することができます。
        </para>

        <para>
            アプリケーションで例外が発生したかどうかを調べるには、
            レスポンスオブジェクトの <code>isException()</code>
            フラグを調べます。例外を取得するには <code>getException()</code>
            を使用します。さらに、独自のレスポンスオブジェクトを作成して、
            エラーページへのリダイレクトや例外メッセージのログ出力、
            例外をわかりやすく表示する (開発用) などを行うことができます。
        </para>

        <para>
            レスポンスオブジェクトは、フロントコントローラの
            dispatch() から受け取ることになります。あるいは、
            出力のレンダリングを行わない状態のレスポンスオブジェクトを
            フロントコントローラから受け取ることもできます。
        </para>

        <programlisting role="php"><![CDATA[
// dispatch の後に取得します
$front->dispatch();
$response = $front->getResponse();
if ($response->isException()) {
    // ログへの記録、メール送信など...
}

// あるいは、フロントコントローラの dispatch() の返り値を使用します
$front->returnResponse(true);
$response = $front->dispatch();

// 何かの処理...

// 最後に結果を表示します
echo $response;
]]></programlisting>

        <para>
            デフォルトでは、例外メッセージは表示されません。
            この挙動をオーバーライドするには <code>renderExceptions()</code>
            メソッドを使用するか、あるいは上で示したようにフロントコントローラで
            throwExceptions() を有効にします。
        </para>

        <programlisting role="php"><![CDATA[
$response->renderExceptions(true);
$front->dispatch($request, $response);

// あるいは
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions();
echo $response;

// あるいは
$front->throwExceptions(true);
$front->dispatch();
]]></programlisting>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
