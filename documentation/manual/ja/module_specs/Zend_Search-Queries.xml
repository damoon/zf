<sect1 id="zend.search.queries">
	<title>クエリの形式</title>

	<sect2 id="zend.search.queries.term-query">
		<title>単一の単語のクエリ</title>
        <para>
        ひとつの単語を使用した検索を行うためのものです。
        </para>

        <para>
        以下の両方の方法が使用可能です。
        </para>

        <para>
        文字列によるクエリ
        <programlisting role="php"><![CDATA[
    $hits = $index->find('word1');]]>
        </programlisting>
        </para>

        <para>あるいは</para>

        <para>
        API で作成するクエリ
        <programlisting role="php"><![CDATA[<?php

    $term  = new Zend_Search_Lucene_Index_Term('word1');
    $query = new Zend_Search_Lucene_Search_Query_Term($term);
    $hits  = $index->find($query);

?>]]></programlisting>
        </para>
	</sect2>

	<sect2 id="zend.search.queries.multiterm-query">
		<title>複数の単語のクエリ</title>
        <para>
            単語の組み合わせによる検索を行うためのものです。
        </para>

        <para>
            各単語は、必須・禁止・どちらでもない(オプション)
            のいずれかを指定することができます。

            <itemizedlist>
                <listitem>
                    <para>
                    「必須」を指定した場合、
                    この単語を含まないドキュメントはクエリにマッチしません。
                    </para>
                </listitem>
                <listitem>
                    <para>
                    「禁止」を指定した場合、
                    この単語を含むドキュメントはクエリにマッチしません。
                    </para>
                </listitem>
                <listitem>
                    <para>
                    「どちらでもない」を指定した場合、
                    この単語を含むドキュメントは除外されるわけでもなく、
                    この単語を含まなければマッチしないというわけでもありません。
                    ただし、クエリにマッチするためには、
                    この単語のうち最低ひとつを含まなければなりません。
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            つまり、必須単語のみのクエリに「どちらでもない (オプション)」
            単語を追加しても、結果セットは変わりません。
            ただ、オプションの単語にマッチした結果が結果セットの先頭に移動します。
        </para>

        <para>
            以下の両方の方法が使用可能です。
        </para>

        <para>
            文字列によるクエリ
        <programlisting role="php"><![CDATA[<?php

$hits = $index->find('+word1 author:word2 -word3');

?>]]></programlisting>

        <itemizedlist>
            <listitem>必須の単語には '+' を使用します。</listitem>
            <listitem>禁止する単語には '-' を使用します。</listitem>
            <listitem>
            検索するドキュメントフィールドを指定するには 'field:'
            を先頭につけます。これが省略された場合は 'contents' が使用されます。
            </listitem>
        </itemizedlist>
        </para>

        <para>あるいは</para>

        <para>
        API で作成するクエリ
        <programlisting role="php"><![CDATA[<?php

    $query = new Zend_Search_Lucene_Search_Query_MultiTerm();

    $query->addTerm(new Zend_Search_Lucene_Index_Term('word1'), true);
    $query->addTerm(new Zend_Search_Lucene_Index_Term('word2'), null);
    $query->addTerm(new Zend_Search_Lucene_Index_Term('word3'), false);

    $hits  = $index->find($query);

?>]]></programlisting>
        </para>

        <para>
            <code>$signs</code> 配列に、単語の種別についての情報を含めます。
            <itemizedlist>
                <listitem>必須の単語には true を使用します。</listitem>
                <listitem>禁止する単語には false を使用します。</listitem>
                <listitem>
                 必須・禁止のどちらでもない場合は null を使用します。
                </listitem>
            </itemizedlist>
        </para>
	</sect2>

	<sect2 id="zend.search.queries.phrase-query">
		<title>フレーズクエリ</title>
        <para>
            熟語による検索を行うためのものです。
        </para>

        <para>
            フレーズクエリはとても柔軟性の高いもので、
            完全な熟語だけでなく曖昧な熟語の検索も可能になります。
            完全な熟語の場合、途中で隙間をあけたり複数の単語を同じ位置に指定したりもできます
            (これは、解析器によって別の目的で作成されます。
            例えば、単語の重みを増すためにある単語を重複させたり、
            類義語をひとつの位置にまとめたりします)。
            フレーズクエリは、現在は API によってのみ行うことができます。
        </para>

        <programlisting role="php"><![CDATA[<?php
$query1 = new Zend_Search_Lucene_Search_Query_Phrase();

// 'word1' を 0 番目の位置に追加します。
$query1->addTerm(new Zend_Search_Lucene_Index_Term('word1'));

// 'word2' を 1 番目の位置に追加します。
$query1->addTerm(new Zend_Search_Lucene_Index_Term('word2'));

// 'word3' を 3 番目の位置に追加します。
$query1->addTerm(new Zend_Search_Lucene_Index_Term('word3'), 3);

...

$query2 = new Zend_Search_Lucene_Search_Query_Phrase(
                array('word1', 'word2', 'word3'), array(0,1,3));

...

// 隙間をあけないクエリ
$query3 = new Zend_Search_Lucene_Search_Query_Phrase(
                array('word1', 'word2', 'word3'));

...

$query4 = new Zend_Search_Lucene_Search_Query_Phrase(
                array('word1', 'word2'), array(0,1), 'annotation');

?>]]></programlisting>


        <para>
            フレーズクエリを作成するには、コンストラクタで一気に構築してしまう方法と
            <code>Zend_Search_Lucene_Search_Query_Phrase::addTerm()</code>
            メソッドでひとつひとつ作成する方法に 2 通りがあります。
        </para>

        <para>
            Zend_Search_Lucene_Search_Query_Phrase クラスのコンストラクタで、
            オプションの 3 つの引数を指定することができます。
        <programlisting role="php"><![CDATA[Zend_Search_Lucene_Search_Query_Phrase([array $terms[, array $offsets[, string $field]]]);]]></programlisting>
        </para>

        <para>
            <code>$terms</code> は文字列の配列で、
            フレーズを構成する単語が含まれます。指定しなかったり
            null を渡したりした場合は、空のクエリが作成されます。
        </para>

        <para>
            <code>$offsets</code> は整数の配列で、
            フレーズ内の単語の位置を指定します。指定しなかったり
            null を渡したりした場合は、単語の位置は
            <code>array(0, 1, 2, 3, ...)</code> であると解釈されます。
        </para>

        <para>
            <code>$field</code> は文字列で、検索対象となるドキュメントのフィールドを指定します。
            指定しなかったり null を渡したりした場合は、デフォルトのフィールドが対象となります。
            このバージョンの Zend_Search_Lucene では、デフォルトのフィールドは
            'contents' となります。しかし、次のバージョンではこれを
            "any field" に変更する予定です。
        </para>

        <para>
            したがって、
        <programlisting role="php"><![CDATA[$query = new Zend_Search_Lucene_Search_Query_Phrase(array('zend', 'framework'));]]></programlisting>
            は 'zend framework' を検索します。

        <programlisting role="php"><![CDATA[<$query = new Zend_Search_Lucene_Search_Query_Phrase(array('zend', 'download'), array(0, 2));]]></programlisting>
            は 'zend ????? download' を検索し、'zend platform download' や 'zend studio download'、
            'zend core download'、'zend framework download' などがマッチします

        <programlisting role="php"><![CDATA[$query = new Zend_Search_Lucene_Search_Query_Phrase(array('zend', 'framework'), null, 'title');]]></programlisting>
            は 'title' フィールドから 'zend framework' を検索します。
        </para>


        <para>
            <code>Zend_Search_Lucene_Search_Query_Phrase::addTerm()</code> メソッドは
            2 つの引数をとります。<code>Zend_Search_Lucene_Index_Term</code>
            オブジェクトが必須で、position はオプションです。
        <programlisting role="php"><![CDATA[Zend_Search_Lucene_Search_Query_Phrase::addTerm(Zend_Search_Lucene_Index_Term $term[, integer $position]);]]></programlisting>
        </para>

        <para>
            <code>$term</code> はフレーズ内の次の単語を指定します。
            前の単語と同じフィールドを指していなければなりません。
            そうでない場合は例外がスローされます。
        </para>

        <para>
            <code>$position</code> は単語の位置を指定します。
        </para>

        <para>
            したがって、
        <programlisting role="php"><![CDATA[$query = new Zend_Search_Lucene_Search_Query_Phrase();
$query->addTerm(new Zend_Search_Lucene_Index_Term('zend'));
$query->addTerm(new Zend_Search_Lucene_Index_Term('framework'));]]></programlisting>
            は 'zend framework' を検索します。

        <programlisting role="php"><![CDATA[$query = new Zend_Search_Lucene_Search_Query_Phrase();
$query->addTerm(new Zend_Search_Lucene_Index_Term('zend'), 0);
$query->addTerm(new Zend_Search_Lucene_Index_Term('framework'), 2);]]></programlisting>
            は 'zend ????? download' を検索し、'zend platform download' や 'zend studio download'、
            'zend core download'、'zend framework download' などがマッチします

        <programlisting role="php"><![CDATA[$query = new Zend_Search_Lucene_Search_Query_Phrase();
$query->addTerm(new Zend_Search_Lucene_Index_Term('zend', 'title'));
$query->addTerm(new Zend_Search_Lucene_Index_Term('framework', 'title'));]]></programlisting>
            は 'title' フィールドから 'zend framework' を検索します。
        </para>


        <para>
            曖昧度は、フレーズの間に別の単語が何個まで入ることを許すのかを設定します。
            ゼロの場合は、完全な熟語検索となります。大きな値を指定すると、
            WITHIN 演算子や NEAR 演算子と同様な動作となります。
        </para>
        <para>
            曖昧度とは、クエリの中で各単語の位置を何段階移動させられるかを表します。
            例えば、2 つの単語の順番を入れ替えるには 2 段階の移動が必要です
            (最初の単語を、次の単語のもうひとつ先まで移動させます)。
            そのため、語順を入れ替えることを許可したいのなら、曖昧度は少なくとも
            2 以上にしなければなりません。
        </para>
        <para>
            正確にマッチしているほうが、曖昧に (sloppy)
            マッチしているものより高スコアとなります。そのため、
            検索結果は正確度の順に並べ替えられます。曖昧度のデフォルトはゼロで、
            これは完全に一致するもののみを対象とします。
        </para>
        <para>
            曖昧度は、クエリを作成した後で設定することができます。
        </para>
        <programlisting role="php"><![CDATA[<?php

// 隙間をあけないクエリ
$query = new Zend_Search_Lucene_Search_Query_Phrase(array('word1', 'word2'));

// 'word1 word2'、'word1 ... word2' を検索します
$query->setSlop(1);
$hits1 = $index->find($query);

// 'word1 word2'、'word1 ... word2'、
// 'word1 ... ... word2'、'word2 word1' を検索します
$query->setSlop(2);
$hits2 = $index->find($query);

?>]]></programlisting>

	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
