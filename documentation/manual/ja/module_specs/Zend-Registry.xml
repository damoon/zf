<sect1 id="zend.registry">

    <title>Zend::registry($index = null)</title>

    <para>
        レジストリ内でオフセット $index に保存された値、あるいはレジストリ自身を返します。
    </para>

    <example>
        <title>registry() / offsetGet() の例</title>
<programlisting role="php"><![CDATA[<?php
Zend::registry($index=null)

// あるいは

$registry = Zend::registry();
$value = $registry->offsetGet($index);
?>]]></programlisting>
    </example>

    <para>
        値がオフセット <code>$index</code> に保存されている場合は、それが返されます。
        引数 <code>$index</code> が <code>NULL</code> の場合は、
        レジストリ自身
        (<ulink url="http://www.php.net/~helly/php/ext/spl/classArrayObject.html">ArrayObject</ulink>
        のサブクラス) が返されます。このメソッドは、単に
        <ulink url="http://www.php.net/manual/ja/function.arrayobject-offsetget.php">
        offsetGet() メソッド</ulink> をラップし、さらに
        $index を指定しない場合にレジストリを返すよう機能追加したものです。
    </para>

    <para>
        インデックスがレジストリに登録されているかどうかを手っ取り早く調べるには、
        Zend::isRegistered() を使用します。
    </para>

    <example>
        <title>isRegistered() / offsetExists() の例</title>
<programlisting role="php"><![CDATA[<?php
Zend::isRegistered($index=null)

// あるいは

$registry = Zend::registry();
echo $registry->offsetExists($index) ? '存在します' : '存在しません';
?>]]></programlisting>
    </example>

    <para>
        ほんの少しの手間で、順次処理も可能です。
    </para>

    <example>
        <title>レジストリの順次処理</title>
<programlisting role="php"><![CDATA[<?php
foreach (Zend::registry() as $index => $value) {
    echo "$index => $value<br />\n";
}
?>]]></programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->