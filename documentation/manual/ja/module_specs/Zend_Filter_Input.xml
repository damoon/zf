<sect1 id="zend.filter.input">

    <title>Zend_Filter_Input</title>

    <sect2 id="zend.filter.input.introduction">

        <title>導入</title>

        <para>
            <literal>Zend_Filter_Input</literal> は、
            入力フィルタリングを行うための構造化された機能を提供します。
            さまざまな目的のために使用可能です。なぜなら、これは以下の
            三種類の異なるグループにとっての要求を満たすものだからです。
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    開発者
                </para>
                <para>
                    何もしないことに比べたら、
                    入力のフィルタリングが簡単なことであるはずがありません。
                    しかし開発者としては、
                    コードを不必要に複雑にすることなしにデータの完全性を保証する必要があります。
                </para>
            </listitem>
            <listitem>
                <para>
                    管理者
                </para>
                <para>
                    大規模な開発者グループを管理しなければならない管理者は、
                    <literal>Zend_Filter_Input</literal> を使用することにより、
                    生の入力データへのアクセスを制限/排除して、
                    入力フィルタリングのための構造化されたアプローチを実施することができます。
                </para>
            </listitem>
            <listitem>
                <para>
                    監査者
                </para>
                <para>
                    アプリケーションのコードを監査する際には、
                    開発者が生の入力データをそのまま使用していないかどうかを、
                    すばやく確実に調べる必要があります。
                    わかりやすいコードを書けるようになるという <literal>Zend_Filter_Input</literal>
                    の特性により、もし通常とは異なるアプローチをとっていれば、
                    監査者はすぐにそれを識別できるようになるでしょう。
                </para>
            </listitem>
        </itemizedlist>

        <para>
            入力のフィルタリングにはさまざまな手法があり、
            PHP 開発者が使用できる機能にもさまざまなものがあります。
            ホワイトリストフィルタリング、ブラックリストフィルタリング、
            正規表現、条件文、通常の PHP 関数、…これらは、
            いろいろあるうちのほんの一部に過ぎません。
        </para>

    </sect2>

    <sect2 id="zend.filter.input.theory_of_operation">

        <title>動作の原理</title>

        <para>
            入力フィルタリングについての構造化された手段を提供するために、
            デフォルトでは、<literal>Zend_Filter_Input</literal>
            入力データへのアクセスを制御しようとします。これは、
            もとのデータ配列への参照を <code>null</code>
            に設定することで行います。
        </para>

        <para>
            デフォルトの (厳格な) 方法は、
            ひとつの引数をコンストラクタに渡します。この引数は、
            フィルタリングするデータの配列です。フィルタリングされていないデータには
            <code>getRaw()</code> メソッドでしかアクセスできません。
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// $_POST データの配列をフィルタリングします
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST);

// これで、$_POST は null となります
echo null === $_POST ? 'yes' : 'no'; // 'yes' と表示されます

// 生のメールアドレスを取得します
echo $filterPost->getRaw('email'); // 'webmaster@example.com' と表示されます]]></programlisting>

        <para>
            <literal>Zend_Filter_Input</literal> は、渡された配列 (<literal>$_POST</literal>)
            の内容を <literal>null</literal> に設定します。つまり、
            直接アクセスすることができなくなります (生のデータにアクセスするには
            <literal>getRaw()</literal> メソッドを使用します。
            このメソッドの使用状況をチェックしたり、使用を避けたりするのが簡単になります)。
        </para>

        <para>
            オプションの (厳格でない) 方法は、コンストラクタの二番目の引数に
            <literal>false</literal> を渡します。
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// $_POST データの配列をフィルタリングします
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST, false);

// $_POST は null にはなりません
echo null === $_POST ? 'yes' : 'no'; // 'no' と表示されます

// 生のメールアドレスを取得します
echo $filterPost->getRaw('email'); // 'webmaster@example.com' と表示されます]]></programlisting>

        <para>
            フィルタの使用法はまったく同じですが、<literal>Zend_Filter_Input</literal>
            は元の配列 (<literal>$_POST</literal>) の内容を <literal>null</literal>
            に設定しません。つまり、その後も直接そこにアクセスできるようになります。
            この方式はお勧めしません。厳格な方式を使用するようにしましょう。
        </para>

        <para>
            <literal>Zend_Filter_Input</literal> は、配列を念頭において設計されています。
            入力の多くは PHP のスーパーグローバル配列 (<literal>$_GET</literal>、
            <literal>$_POST</literal>、<literal>$_COOKIE</literal> など)
            で網羅されており、たいていの入力の保存形式は配列構造となっています。
            スカラーに対するフィルタリングをしたい場合は
            <xref linkend="zend.filter" /> を参照ください。
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->