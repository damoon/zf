<sect1 id="zend.locale.functions">

    <title>Zend_Locale の使用法</title>

    <para>
        <code>Zend_Locale</code> は、各ロケールについての情報も、
        自分自身のロケールに合わせた形式で提供します。
        たとえば他のロケールの名前や曜日名、月名などがこれにあたります。
    </para>

    <sect2 id="zend.locale.copying">

        <title>ロケールオブジェクトのコピー、クローン作成およびシリアライズ</title>

        <para>
            <ulink url="http://php.net/language.oop5.cloning">オブジェクトのクローンを作成</ulink>し、
            ロケールオブジェクトを正確かつ効率的に複製することができます。
            ロケール対応のメソッドのほとんどは、<code>$locale->toString()</code>
            が返す文字列表現のロケールを受け付けます。
        </para>

        <example>
            <title>clone</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('ar');

// $locale オブジェクトをシリアライズして保存します
$serializedLocale = $locale->serialize();
// もとのオブジェクトを再度作成します
$localeObject = unserialize($serializedLocale);

// ロケールの文字列表記を取得します
$stringLocale = $locale->toString();

// $local オブジェクトの複製を作成します
$copiedLocale = clone $locale;

print "copied: ", $copiedLocale->toString();
print "copied: ", $copiedLocale; // PHP は、__toString() 経由で自動的に toString() をコールします
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.equals">

        <title>isEqual() - 同等</title>

        <para>
            <code>Zend_Locale</code> は、
            二つのロケールを比較するための便利な関数も提供しています。
            ロケール対応のクラスはすべて、これと同等の同一性チェック機能を提供しなければなりません。
        </para>

        <example>
            <title>ロケールが同一かどうかの調査</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();
$mylocale = new Zend_Locale('en_US');

// ロケールが同一かどうかを調べます
if ($locale->isEqual($mylocale) { 
    print "これらのロケールは同一です";
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getdefault">

        <title>デフォルトのロケール</title>

        <para>
            <code>getDefault()</code> メソッドは、関連するロケールの配列を返します。
            これは、ユーザのウェブブラウザからの情報 (取得できる場合)、
            ホストサーバの環境変数および ZF の設定をもとに取得します。
            <code>Zend_Locale</code> のコンストラクタの最初のパラメータで、
            <link linkend="zend.locale.selection">
              (<code>BROWSER</code>、<code>ENVIRONMENT</code> あるいは <code>FRAMEWORK</code> のうちの)
            </link>
            どの情報を優先するかを選択します。
            二番目のパラメータでは、マッチしたロケールをすべて返すのか
            あるいは最初にマッチした/一番マッチしたものを返すのかを指定します。
            ロケール対応のコンポーネントは、通常は最初のロケールのみを使用します。
            優先度が指定されている場合は、それも考慮します。
        </para>

        <example>
            <title>デフォルトロケールの取得</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// すべてのデフォルトロケールを返します
$found = $locale->getDefault();
print_r($found);

// ブラウザのロケールのみを返します
$found2 = $locale->getDefault(Zend_Locale::BROWSER,TRUE);
print_r($found2);
?>]]></programlisting>
        </example>

        <para>
            <link linkend="zend.locale.selection"><code>BROWSER</code>、<code>ENVIRONMENT</code> あるいは <code>FRAMEWORK</code>
            </link> のいずれかに対応するデフォルトロケールを取得するには、
            それぞれ対応するメソッドを使用します。
            <itemizedlist>
                <listitem>
                    <para>
                        <code>getEnvironment()</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getBrowser()</code>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getLocale()</code>
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.locale.setlocale">

        <title>新しいロケールの設定</title>

        <para>
            新しいロケールを設定するには、関数 <code>setLocale()</code>
            を使用します。この関数は、ロケール文字列をパラメータとして受け取ります。
            ロケールを省略した場合は、ロケールが
            <link linkend="zend.locale.selection">自動的に選択</link>
            されます。Zend_Locale オブジェクトは "light"
            なので、このメソッドは既存のインスタンスを参照しているすべてのコードに影響をおよぼします。
        </para>

        <example>
            <title>setLocale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// 実際のロケール
print $locale->toString();

// 新しいロケール
$locale->setLocale('aa_DJ');
print $locale->toString();
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getlocale">

        <title>言語および地域の取得</title>

        <para>
            <code>getLanguage()</code> を使用して、二文字の言語コード文字列を
            ロケール識別文字列から取得します。また、
            <code>getRegion()</code> を使用して、二文字の地域コード文字列を
            ロケール識別文字列から取得します。
        </para>

    </sect2>

    <sect2 id="zend.locale.getlanguage">

        <title>各地域での言語、地域、カレンダーの名前の取得</title>

        <para>
            <code>getLanguageDisplay($language, $locale)</code>
            を使用して、ある言語の名前を指定した $locale
            (デフォルトは、そのオブジェクトのロケール)
            で表した文字列を取得します。また、
            <code>getLanguageList($locale)</code> を使用して、既知の言語名をすべて $locale
            (デフォルトは、そのオブジェクトのロケール)
            に翻訳した文字列の配列を取得します。
        </para>

        <example>
            <title>getLanguageDisplay</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('en_US');
print $locale->getLanguageDisplay('de'); // "German" と表示されます
?>]]></programlisting>
        </example>

        <para>
            Zend_Locale で使用できるすべての言語の一覧を、それぞれの言語での表記で取得するには、
            以下の例をウェブページで使用してみましょう
            同様に <code>getRegionList()</code> および
            <code>getRegionDisplay()</code> を使用すると、
            あなたのネイティブ言語での地域名と別の言語での地域名の対応表を作成できます。
            また、<code>getCalendarList()</code> および
            <code>getCalendarDisplay()</code> も同様に動作します。
            <code>try .. catch</code> ブロックで、
            存在しないロケールを使用した場合の例外を処理するようにしましょう。
            すべての言語がすべてのロケールに対応しているわけではありません。
            この例では、例外を無視することで、
            スクリプトが途中で終わってしまうことを防いでいます。
        </para>

        <example>
            <title>すべての言語を、その国のネイティブ言語で書き出す</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$sourceLanguage = null; // あなたのネイティブ言語のコードを設定します
$locale = new Zend_Locale($sourceLanguage);
$list = $locale->getLanguageList();

foreach($list as $language => $content) {
    try {
        $output = $locale->getLanguageDisplay($language, $language);
        if (is_string($output)) {
            print "\n<br>[".$language."] ".$output;
        }
    } catch (Exception $e) {
        continue;
    }
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getscriptdisplay">

        <title>翻訳された文字名の取得</title>

        <para>
            <code>getScriptDisplay()</code> は、指定した言語の文字名を翻訳したものを返します。
            getLanguageDisplay() 関数と同様、この関数は別のロケールで結果を出力することもできます。
            その場合はオプションの引数 $locale を指定します。
        </para>

        <example>
            <title>getScriptDisplay</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// 文字
print $locale->getScriptDisplay('Latn');
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getscriptlist">

        <title>文字一覧の取得</title>

        <para>
            <code>getScriptList()</code>
            を使用して、既知の文字名をすべて $locale
            (デフォルトは、そのオブジェクトのロケール)
            に翻訳した文字列の配列を取得します。
            L10N の観点から、ここでいう文字とは
            ある言語を表示するために使用する文字セットとなります。
            英語を表示するための文字の名前はラテン文字 (Latin)
            で、ISO-15924 における短縮形は "Latn" となります。
        </para>

        <example>
            <title>getScriptList</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// 文字の一覧
print_r($locale->getScriptList());
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.getquestion">

        <title>"yes" および "no" に対応する翻訳の取得</title>

        <para>
            プログラム上で、ユーザに "はい" あるいは "いいえ"
            で答えてもらうことがよくあります。
            <code>getQuestion()</code> を使用すると、
            ユーザに問い合わせるときに使用する単語を含む配列を、特定の $locale
            (デフォルトは、そのオブジェクトのロケール)
            にあわせて返します。この配列には四つの要素が含まれます。それぞれが
            "はい"、"いいえ" とその省略形を現します。以下の例を参照ください。
        </para>

        <example>
            <title>getQuestion()</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale();

// 設問の文字列
print_r($locale->getQuestion());

- - - 出力 - - -

Array
(
    [yes] => yes
    [yesabbr] => y
    [no] => no
    [noabbr] => n
)
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
