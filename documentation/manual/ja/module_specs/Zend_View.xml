<sect1 id="zend.view.introduction">

    <title>導入</title>
    
    <para>
        Zend_View は、モデル - ビュー - コントローラ パターンにおける
        「ビュー」として働くクラスです。
        ビューのスクリプトを、モデルおよびコントローラから分離するために存在します。
        このクラスでは、
        ヘルパーシステム、出力のフィルタリングおよび変数のエスケープ機能を提供します。
    </para>
    
    <para>
        Zend_View は、テンプレートシステムに対しては特にこだわりはありません。
        テンプレート言語として PHP を使用するか、
        あるいは他のテンプレートエンジンのインスタンスを作成して、
        それをビュースクリプトの中で操作することができます。
    </para>

    <para>
        基本的に、Zend_View を使用する際には 2 つの段階をとることになります。
        
        1.  コントローラスクリプトが Zend_View のインスタンスを作成し、
        そのインスタンスに変数を代入します。
        
        2. コントローラが Zend_View に対して適切なビューをレンダリングするように指示し、
        それによってコントローラがビュースクリプトを制御します。
        そこでビューの出力が作成されます。
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>コントローラスクリプト</title>
        
        <para>
            単純な例として、本の一覧を扱うコントローラがあることにしましょう。
            そのデータをビューに表示することを考えます。
            コントローラスクリプトは、おそらくこのようになるでしょう。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// 本の著者およびタイトルを取得するためにモデルを使用します
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// 本のデータを Zend_View インスタンスに代入します
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// "booklist.php" というビュースクリプトをレンダリングします
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>ビュースクリプト</title>
        
        <para>
            次に必要なのは、関連付けるビュースクリプト "booklist.php" です。
            これは一般的な PHP スクリプトと同じですが、ひとつだけ違いがあります。
            Zend_View インスタンスのスコープで実行されるということです。
            つまり $this への参照は、Zend_View
            のインスタンスのプロパティやメソッドを指すことになるのです
            (コントローラによってインスタンスに代入された変数は、
            Zend_View インスタンスの public プロパティとなります)。
            したがって、基本的なビュースクリプトはこのようになります。
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- 本の一覧 -->
    <table>
        <tr>
            <th>著者</th>
            <th>タイトル</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>表示する本がありません。</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            変数の出力時に、"escape()"
            メソッドでエスケープ処理をしていることに注意しましょう。
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>コントローラスクリプト</title>
    
    <para>
        Zend_View のインスタンスを作成して設定を行うのがコントローラの役目です。
        その後でビューに変数を代入し、
        適切なスクリプトを使用して出力をレンダリングするように指示します。
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>変数の代入</title>
        
        <para>
            ビュースクリプトに制御を移す前に、
            必要な変数をコントローラスクリプトからビューに代入しなければなりません。
            通常は、ビューインスタンスのプロパティへの代入を行います。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>
            しかし、代入する値がすでに配列やオブジェクトの形式になっている場合は、
            このような方法は面倒です。
        </para>
        
        <para>
            assign() メソッドを使用すると、配列やオブジェクトの内容を
            「一括して」代入できます。以下の例は、
            上でひとつひとつプロパティを代入していたのと同じように動作します。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// キー/値 の組み合わせからなる配列を作成します。
// 変数名がキー、その変数に代入する値が配列の値となります。
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// オブジェクトのプロパティも同じように扱えます。
// 代入の際に、配列形式にキャストしていることに注意しましょう。
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
            別の方法として、assign メソッドを使用してひとつひとつ代入することもできます。
            この場合は最初の引数が変数名、そしてその次に変数の値を指定します。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>ビュースクリプトのレンダリング</title>
        
        <para>
            必要な変数にすべて値を代入したら、コントローラは Zend_View に、
            適切なビュースクリプトをレンダリングするよう指示しなければなりません。
            そのためには render() メソッドをコールします。
            このメソッドは、ビューを表示するのではなく、
            レンダリング後の結果を返すだけであることに注意しましょう。
            適切な時点で、返された結果を print あるいは echo
            する必要があります。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>ビュースクリプトのパス</title>
        
        <para>
            デフォルトでは、Zend_View は、
            ビュースクリプトが呼び出し元スクリプトからの相対パス上にあることを想定しています。
            例えばコントローラスクリプトが "/path/to/app/controllers"
            にあった場合に、そこで $view->render('someView.php')
            をコールすると、Zend_View は
            "/path/to/app/controllers/someView.php" を探します。
        </para>
        
        <para>
            たいていの場合、ビュースクリプトはどこかほかの場所にあることは明らかでしょう。
            Zend_View にビュースクリプトの場所を教えるには、
            setScriptPath() メソッドを使用します。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            こうすると、$view->render('someView.php') がコールされた場合に
            "/path/to/app/views/someView.php" を探すようになります。
        </para>
        
        <para>
            実は、addScriptPath() メソッドを使用すると、検索パスを
            「積み重ねる」ことができます。これを使用すると、Zend_View
            は一番最後に追加されたパスからビュースクリプトを探し始めます。
            この仕組みを利用すると、デフォルトのビューを独自のビューで上書きできるようになります。
            いくつかのビューに対して独自の「テーマ」あるいは「スキン」
            を作成し、その他のビューはそのままにしておくことが可能となります。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// $view->render('booklist.php') をコールすると、Zend_View は
// まず最初に "/path/to/custom/booklist.php" を探し、
// 次に "/path/to/app/views/booklist.php"、そして最後に
// カレントディレクトリから "booklist.php" を探します。
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>ビュースクリプト</title>
        
    <para>
        コントローラが変数を代入して render() をコールすると、
        指定されたビュースクリプトを Zend_View が読み込み、Zend_View
        インスタンスのスコープでそれを実行します。したがって、
        ビュースクリプトの中で $this を参照すると、
        実際には Zend_View のインスタンスを指すことになります。
    </para>
    
    <para>
        コントローラからビューに代入された変数は、
        ビューインスタンスのプロパティとして参照できます。例えば、
        コントローラで変数 'something' を代入したとすると、
        ビュースクリプト内ではそれを $this->something で取得できます
        (これにより、どの値がコントローラから代入されたもので、
        どの値がスクリプト内部で作成されたものなのかを追いかけられるようになります)。
    </para>
    
    <para>
        Zend_View の導入の部分で示したビュースクリプトの例を思い出してみましょう。
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- 本の一覧 -->
    <table>
        <tr>
            <th>著者</th>
            <th>タイトル</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>表示する本がありません。</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>出力のエスケープ</title>
        
        <para>
            ビュースクリプトで行うべき仕事のうち最も重要なもののひとつは、
            出力を適切にエスケープすることです。これは、
            クロスサイトスクリプティング攻撃を防ぐのを助けます。
            それ自身がエスケープを行ってくれるような関数、メソッド、
            あるいはヘルパーを使用しているのでない限り、
            変数を出力する際には常にそれをエスケープしなければなりません。
        </para>
        
        <para>
            Zend_View の escape() というメソッドが、このエスケープを行います。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// ビュースクリプトの悪い例
echo $this->variable;

// ビュースクリプトのよい例
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            デフォルトでは、escape() メソッドは PHP の htmlspecialchars()
            関数でエスケープを行います。しかし環境によっては、
            別の方法でエスケープしたくなることもあるでしょう。
            コントローラから setEscape() メソッドを実行することで、
            エスケープに使用するコールバックを Zend_View に通知することができます。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// Zend_View のインスタンスを作成します
$view = new Zend_View();

// エスケープに htmlentities を使用するように通知します
$view->setEscape('htmlentities');

// あるいは、クラスの静的メソッドを使用するように通知します
$view->setEscape(array('SomeClass', 'methodName'));

// あるいは、インスタンスメソッドを指定することもできます
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// そして、ビューをレンダリングします
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            コールバック関数あるいはメソッドは、
            エスケープする値を最初のパラメータとして受け取ります。
            それ以外のパラメータはオプションとなります。
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>テンプレートシステム</title>
        
        <para>
            PHP 自身も強力なテンプレートシステムではありますが、
            開発者の多くは、テンプレートを設計するには高機能すぎる/複雑すぎる
            と感じているようです。
            そこでビュースクリプトでは、PHPLIB 形式のテンプレートのような
            独立したテンプレートオブジェクトを使用できるようになっています。
            この場合のビュースクリプトは、次のようなものになるでしょう。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            関連するテンプレートファイルは、このようになります。
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>著者</th>
        <th>タイトル</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>表示する本がありません。</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>ビューヘルパー</title>
    
    <para>
        ビュースクリプトの中で、複雑な関数を繰り返し実行しなければならないこともあるでしょう
        (例えば日付のフォーマット、フォーム要素の作成、リンクの作成など)。
        このような作業を行うために、ヘルパークラスを使用することができます。
    </para>
    
    <para>
        ビュースクリプト内でヘルパーを使用するには、
        $this->helperName() をコールします。これをコールすると、裏側では
        Zend_View が Zend_View_Helper_HelperName クラスを読み込み、
        そのクラスのインスタンスを作成して helperName() メソッドをコールします。
        オブジェクトのインスタンスは Zend_View インスタンスの中に残り続け、
        後で $this->helperName() がコールされたときには再利用されます。
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>付属のヘルパー</title>
        
        <para>
            Zend_View には、はじめからいくつかのヘルパークラスが付属しています。
            これらはすべて、フォーム要素の生成に関するものです。
            それぞれのヘルパーは、適切なエスケープ処理を自動的に行います。
            以下に一覧を示します。
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): &lt;input
                type="button" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options):
                &lt;input type="checkbox" /&gt; 要素を作成します。
                $options パラメータは配列で、最初の値が
                "checked" に対応する値、2 番目が "unchecked" に対応する値となります
                (デフォルトは '1' および '0' です)。$value が
                "checked" の値に一致すると、チェックボックスがチェックされた状態になります。
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): &lt;input
                type="file" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): &lt;input
                type="hidden" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): &lt;input
                type="password" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options):
                一連の &lt;input type="radio" /&gt; 要素を、
                $options の要素ごとに作成します。$options は、
                ラジオボタンの値をキー、ラベルを値とする配列となります。
                $value はラジオボタンの初期選択状態を設定します。
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): &lt;input
                type="reset" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options):
                &lt;select&gt;...&lt;/select&gt; ブロックを作成します。
                $options の要素ごとに &lt;option&gt; を作成します。
                $options は、選択肢の値をキー、
                ラベルを値とする配列となります。$value
                は初期選択状態を設定します。
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): &lt;input
                type="submit" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): &lt;input
                type="text" /&gt; 要素を作成します。
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): 
                &lt;textarea&gt;...&lt;/textarea&gt; ブロックを作成します。
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            これらをビュースクリプト内で使用するのはとても簡単です。
            以下に例を示します。ただ単に、ヘルパーをコールするだけでよいことに注意しましょう。
            読み込みやインスタンス作成は、必要に応じて自動的に行われます。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// ビュースクリプト内では、$this は Zend_View のインスタンスを指します。
// 
// select の選択肢を、変数 $countries に
// array('us' => 'United States', 'il' => 'Israel', 'de' => 'Germany')
// として設定済みであることにします。
?>
<form action="action.php" method="post">
    <p><label>メールアドレス:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>国:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>メールを受け取りますか?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no')) ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            ビュースクリプトの出力結果は、次のようになります。
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>メールアドレス:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>国:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>メールを受け取りますか?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>ヘルパーのパス</title>
        
        <para>
            ビュースクリプトと同様、
            Zend_View がヘルパークラスを探すパスをコントローラから積み重ねて指定することができます。
            デフォルトでは、Zend_View は "Zend/View/Helper/*" からヘルパークラスを探します。
            Zend_View に別の場所を探すように指定するには
            setHelperPath() および addHelperPath() メソッドを使用します。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            addHelperPath() メソッドを使用すると、検索パスを「積み重ねる」
            ことができます。これを使用すると、Zend_View
            は一番最後に追加されたパスからヘルパークラスを探し始めます。
            これにより、付属しているヘルパーの内容を上書きしたり、
            新しいヘルパーを追加したりすることができるようになります。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// $this->helperName() をコールすると、Zend_View は
// まず最初に "/other/path/to/helpers/HelperName.php" を探し、
// 次に "/path/to/some/helpers/HelperName"、そして最後に
// "Zend/View/Helpers/HelperName.php" を探します。
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>独自のヘルパーを書く</title>
        
        <para>
            独自のヘルパーを書くのは簡単です。以下の規則に従ってください。
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                クラス名は Zend_View_Helper_* でなければなりません。*
                の部分はヘルパーの名前になります。例えば、"specialPurpose"
                という名前のヘルパーを作成した場合は、そのクラス名は
                "Zend_View_Helper_SpecialPurpose" となります
                (大文字の使用法に注意してください)。
            </para></listitem>
            
            <listitem><para>
                クラスは、ヘルパーと同じ名前の public メソッドを持っている必要があります。
                テンプレートが "$this->specialPurpose()" をコールした際に、
                このメソッドがコールされます。"specialPurpose" ヘルパーの例では、
                "public function specialPurpose()" というメソッドが必要です。
            </para></listitem>
            
            <listitem><para>
                一般に、クラスでは echo や print その他の出力を行ってはいけません。
                その代わりに、print あるいは echo される内容を返します。
                返り値は、適切にエスケープしなければなりません。
            </para></listitem>
            
            <listitem><para>
                クラスは、ヘルパーメソッドと同じ名前のファイルに作成しなければなりません。
                再び "specialPurpose" ヘルパーを例にとると、ファイル名は
                "SpecialPurpose.php" でなければなりません。
            </para></listitem>
        </itemizedlist>
        
        <para>
            指定したヘルパーパスのどこかにヘルパークラスのファイルを配置すると、
            Zend_View は自動的にそれを読み込んでインスタンスを作成し、
            必要に応じて実行します。
        </para>
        
        <para>
            SpecialPurpose ヘルパーのコードの例を示します。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "'The Jerk' を {$this->_count} 回見ました。";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            そして、ビュースクリプト内で SpecialPurpose
            ヘルパーを必要なだけコールします。いちどインスタンスが作成された後は、
            Zend_View インスタンスの中でそれが持続します。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// ビュースクリプト内では、$this は Zend_View インスタンスを指すことを覚えておきましょう。
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            出力結果は、次のようになります。
        </para>
        <programlisting role="php"><![CDATA['The Jerk' を 1 回見ました。
'The Jerk' を 2 回見ました。
'The Jerk' を 3 回見ました。]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
