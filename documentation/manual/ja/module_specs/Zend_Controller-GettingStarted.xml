<sect1 id="zend.controller.getting-started">
    <title>さあ、はじめましょう</title>

    <sect2 id="zend.controller.getting-started.introduction">
        <title>導入</title>
        <para>
            <code>Zend_Controller</code> システムは、拡張性を考慮して作成されています。
            拡張方法としては、既存のクラスを継承する以外にも、
            コントローラファミリを構成するさまざまなインターフェイスや抽象クラスを実装した
            新しいクラスを作成する方法があります。
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.server-configuration">
        <title>サーバの設定</title>
        <para>
            Zend_Controller は、クリーンな (クエリ文字列をほとんど使用しない) URI
            をサポートするように作成されています。この推奨設定を使用するためには、ウェブサーバが
            URI の書き換えをサポートしており、全てのリクエストを単一のファイル
            (ここでは "index.php" とします。これは単に
            <code>Zend_Controller_Front</code> を呼び出すだけです)
            にリダイレクトできなければなりません。
            Apache では、この機能はオプションのモジュール mod_rewrite でサポートされています。
        </para>

        <para>
            サーバを設定するための第一歩は、まずきちんとインストールして
            mod_rewrite を有効にすることです。次に、.htaccess と index.php
            の 2 つのファイルをドキュメントルートに配置します。
            .htaccess は Apache が使用するファイルで、
            すべてのリクエストを index.php にリダイレクトさせるための
            mod_rewrite のルールをここに記述します。開発中なら、
            特定の拡張子のファイル以外をすべて index.php
            にリダイレクトさせるような単純なルールを設定しておけばよいでしょう。
            例えばこのようになります。
        </para>
        <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php
]]></programlisting>
        <para>
            上の例では、指定した拡張子以外のすべてのファイルに対するリクエストが
            index.php に渡されます。開発中にはこれで十分ですが、
            実運用環境では、リダイレクトしないディレクトリを指定するなどの記述が必要でしょう。
        </para>

        <note>
            <title>起動用ファイルの場所</title>
            <para>
                ドキュメントルートに配置する PHP ファイルは、
                この起動用ファイルだけにしておくべきです。
            </para>
        </note>

        <para>
            Zend_Controller の基本機能として、クエリパラメータを含む URL
            もサポートしています。たとえば
            <code>index.php?controller=foo&amp;action=bar</code> のような形式です。
            さらに、同梱されているもうひとつのルータである
            <code>Zend_Controller_RewriteRouter</code>
            は、多くの環境で (mod_rewrite 的な機能を持たない環境でも) 動作します。
            mod_rewrite を使用できない場合でも、あなたのサイトで
            Zend_Controller を使用することが可能です。
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.bootstrap">
        <title>起動用ファイル</title>

        <para>
            .htaccess ファイルの設定が終われば、次に <code>index.php</code>
            という新しいファイルを作成します。これが起動用ファイルとなります。
            index.php は、単に Zend_Controller_Front を起動するためだけに使用します。
            Zend_Controller_Front はドキュメントルートの外に配置します。
        </para>

        <note>
            <para>
                ドキュメントルートに配置する PHP ファイルは、
                この起動用ファイルだけにしておくべきです。
            </para>
        </note>

        <para>
            セキュリティ上、他の PHP ファイルはウェブサーバからアクセスできない場所
            (ドキュメントルートの配下ではない場所) に置くことを Zend として強く推奨します。
            共有ホスティング環境など思い通りにいかない環境もあることは理解しますが、
            可能な限り推奨設定に従うようにしてください。
        </para>

        <para>
            Zend_Controller_Front を起動するための起動用ファイル
            <code>index.php</code> をドキュメントルートに作成します。
        </para>
        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Controller/Front.php';

Zend_Controller_Front::run('/path/to/your/controllers');

?>]]></programlisting>
        <para>
            <code>/path/to/your/controllers</code> の部分に関しては、次の節を参照ください。

            <code>README.txt</code> に記述されているように、
            Zend Framework ライブラリのディレクトリは <code>include_path</code>
            に置かなければなりません。<code>include_path</code> が <code>php.ini</code>
            で設定されていない場合は、このファイルで <code>require_once()</code>
            する前に <code>set_include_path()</code> をコールして設定することができます。
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.directory-structure">
        <title>ディレクトリ構造</title>

        <para>
            Zend Framework で構築したウェブサイトは、
            共通のディレクトリ構造を共有することを推奨します。
            すべてとは言いませんが、できるだけこの構造にあわせるようにしましょう。
            そうすることで、Zend Framework の規約に慣れている人々にとって、
            あなたのコードがより理解しやすいものとなります。
        </para>

        <para>
            推奨する構造は、(Zend およびその他の) ライブラリ用のディレクトリと
            アプリケーションのディレクトリを別に分けるものです。
        </para>

        <programlisting role="php"><![CDATA[
/application
  /models
  /views
  /controllers
/document_root
  /images
  /styles
  .htaccess
  index.php
/library
  /Zend
]]></programlisting>
        
        <note>
            <para>
                この節は未完成です。現在作成中であり、今後変わる可能性があります。
            </para>
        </note>
    </sect2>

    <sect2 id="zend.controller.overview.defaultcontroller">
        <title>デフォルトのコントローラ</title>

        <para>
            デフォルトのコントローラは、必ず指定しなければなりません。
            URI にコントローラが指定されなかった場合、例えば次のような
            URI が指定された場合に、このコントローラが使用されます。
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/
]]></programlisting>

        <para>
            初期設定では、デフォルトのコントローラは
            <code>IndexController</code> という名前のクラスで、
            <code>IndexController.php</code> というファイルで定義されなければなりません。
            内部的には、これは 'index' コントローラとして参照されます。
        </para>

        <para>
            フロントコントローラでのディスパッチに先立ってデフォルトのコントローラを変更するには、
            フロントコントローラあるいはディスパッチャオブジェクトで
            <code>setDefaultController()</code> メソッドをコールします。
            その際には、内部の命名規約を使用します。つまり、クラス
            <code>HomeController</code> (ファイル <code>HomeController.php</code>
            に記述されたもの) を参照するには <code>home</code> と指定します。
        </para>

        <para>
            コントローラは <code>Zend_Controller_Action</code>
            クラスをを継承し、コントローラのディレクトリになければなりません。
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Controller/Action.php';

class IndexController extends Zend_Controller_Action
{
    public function indexAction()
    {
        echo 'IndexController からこんにちは';
    }

    public function noRouteAction()
    {
        $this->_redirect('/');
    }
}

?>]]></programlisting>

        <para>
            デフォルトのコントローラおよびアクションについての詳細、
            そしてアクションコントローラクラスの作成方法については
            後の章で説明します。
        </para>

        <note>
            <para>
                この節は未完成です。現在作成中であり、今後変わる可能性があります。
            </para>
        </note>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
