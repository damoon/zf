<sect1 id="zend.db.adapter">

    <title>Zend_Db_Adapter</title>

    <sect2 id="zend.db.adapter.introduction">

        <title>Einführung</title>

        <para>
            <code>Zend_Db_Adapter</code> ist die Datenbankabstraktionsschicht für das Zend 
            Framework. Basierend auf PDO kannst Du <code>Zend_Db_Adapter</code> verwenden, um unter 
            Verwendung der gleichen API zu jedem der unterstützten SQL Datenbanksysteme eine 
            Verbindung aufzubauen bzw. damit zu arbeiten. Diese beinhalten Microsoft SQL Server, 
            MySQL, PostgreSQL, SQLite und andere.
        </para>

        <para>
            Um eine Instanz von <code>Zend_Db_Adapter</code> für dein spezielles Datenbank Backend
            zu erstellen, mußt du <code>Zend_Db::factory()</code> mit dem Namen des Adapters und 
            einem Array mit Parametern aufrufen, welche die Verbindung beschreiben. Hier ein 
            Beispiel für einen Verbindungsaufbau zu einer MySQL Datenbank mit Namen "camelot" auf 
            deinem lokalen Server als Benutzer mit Namen "malory":
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Db.php';

$params = array ('host'     => '127.0.0.1',
                 'username' => 'malory',
                 'password' => '******',
                 'dbname'   => 'camelot');

$db = Zend_Db::factory('PDO_MYSQL', $params);

?>]]></programlisting>

        <para>
            Ähnlich erfolgt der Verbindungsaufbau zu einer SQlite Datenbank mit Namen "camelot.sq3":
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Db.php';

$params = array ('dbname' => 'camelot.sq3');

$db = Zend_Db::factory('PDO_SQLITE', $params);

?>]]></programlisting>

        <para>
            Ähnlich erfolgt der Verbindungsaufbau zu einer SQLite2 Datenbank mit Namen 
            "camelot.sq2": Für eine speicherbasierende SQlite Datenbank gebe keinen DSN Präfix an 
            und verwende einen Datenbanknamen ":memory:".
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Db.php';

$params = array ('dbname' => 'camelot.sq2',
                 'dsnprefix' => 'sqlite2');

$db = Zend_Db::factory('PDO_SQLITE', $params);

?>]]></programlisting>

        <para>
            So oder so kannst Du die exakt selbe API verwenden, um die Datenbank abzufragen.
        </para>
    </sect2>

    <sect2 id="zend.db.adapter.quoting">

        <title>Quoting gegen SQL Injection</title>

        <para>
            Du solltest die Werte immer in Anführungszeichen setzen, die in einer SQL Anweisung 
            verwendet werden; dies hilft dabei, Attacken per SQL Injection zu vermeiden.    
            <code>Zend_Db_Adapter</code> stellt zwei Methoden (über das zugrunde liegende PDO 
            Objekt) bereit, um dir zu helfen, werte manuell in Anführungszeichen zu setzen.
        </para>

        <para>
            Die erste davon ist die <code>quote()</code> Methode. Sie wird einen skalaren Wert
            entsprechend für deinen Datenbank Adapter in Anführungszeichen setzen; wenn du 
            versuchst, ein Array in Anführungszeichen zu setzen, gibt es einen durch Komma 
            getrennten String mit den Arraywerten zurück, wobei jeder richtig in Anführungszeichen
            gesetzt wird (dies ist hilfreich für Funktionen, die einen Listenparameter entgegen
            kommen)).
        </para>

        <programlisting role="php"><![CDATA[<?php

// Erstelle ein $db Objekt unter der Annahme eines Mysql Adapters

// setze einen Skalar in Anführungszeichen
$value = $db->quote('St John"s Wort');
// $value ist nun '"St John\"s Wort"' (beachte die umschließenden Anführungszeichen)

// setze ein Array in Anführungszeichen
$value = $db->quote(array('a', 'b', 'c');
// $value ist nun '"a", "b", "c"' (ein durch Komma getrennter String)

?>]]></programlisting>

        <para>
            Die zweite ist die <code>quoteInto()</code> Methode. Du stellst einen Basisstring mit 
            einem Fragezeichen als Platzhalter bereit und dann einen Skalar oder ein Array, um es
            in dem String mit Anführungszeichen zu versehen. Dies ist nützlich für die Konstruktion
            von Abfragen oder Klauseln "as-you-go". Skalare und Arrays verhalten sich genauso wie 
            bei der <code>quote()</code> Methode.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// Erstelle ein $db Objekt unter der Annahme eines Mysql Adapters

// setze einen Skalar in einer WHERE Klausel in Anführungszeichen
$where = $db->quoteInto('id = ?', 1);
// $where ist nun 'id = "1"' (beachte die umschließenden Anführungszeichen)

// setze ein Array in einer WHERE Klausel in Anführungszeichen
$where = $db->quoteInto('id IN(?)', array(1, 2, 3));
// $where ist nun 'id IN("1", "2", "3")' (ein durch Komma getrennter String)

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.adapter.queries">

        <title>Direkte Abfragen</title>

        <para>
            Sobald du eine <code>Zend_Db_Adapter</code> Instanz hast, kannst du Abfragen direkt in
            SQL ausführen. <code>Zend_Db_Adapter</code> übergibt diese Abfragen an das zugrunde
            liegende PDO Objekt, welches sie aufbereitet und ausführt, und gibt dann ein 
            PDOStatement Objekt zurück, um die Ergebnisse (soweit vorhanden) zu verarbeiten.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// Erstelle ein $db Objekt und frage dann die Datenbank
// mit einer korrekt quotierten SQL Abfrage ab.
$sql = $db->quoteInto(
    'SELECT * FROM example WHERE date > ?',
    '2006-01-01'
);
$result = $db->query($sql);

// verwende das PDOStatement $result, um alle Zeilen als Array zu erhalten
$rows = $result->fetchAll();

?>]]></programlisting>

        <para>
            Du kannst Daten automatisch mit einer Abfrage verbinden. Dies bedeutet, dass du mehrere
            benannte Platzhalter in der Abfrage setzen und dann ein Array mit den Daten übergeben 
            kannst, welche diese Platzhalter ersetzen. Die ersetzten Werte werden für dich 
            automatisch in Anführungszeichen gesetzt, um größere Sicherheit gegen Attacken per SQL 
            Injection zu bieten.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// Erstelle ein $db Objekt und frage dann die Datenbank ab.
// Dieses Mal verwende Platzhalter.
$result = $db->query(
    'SELECT * FROM example WHERE date > :placeholder',
    array('placeholder' => '2006-01-01')
);

// verwende das PDOStatement $result, um alle Zeilen als Array zu erhalten
$rows = $result->fetchAll();

?>]]></programlisting>

        <para>
            Optional möchtest du vielleicht Daten manuell aufbereiten und mit der SQL Abfrage 
            verbinden. Hierfür verwende die <code>prepare()</code> Methode, um ein aufbereitetes
            <code>PDOStatement</code> zu erhalten, das du direkt verarbeiten kannst.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// Erstelle ein $db Objekt und frage dann die Datenbank ab.
// Dieses Mal bereite ein PDOStatement auf für das manuelle Verbinden.
$stmt = $db->prepare('SELECT * FROM example WHERE date > :placeholder');
$stmt->bindValue('placeholder', '2006-01-01');
$stmt->execute();

// verwende das PDOStatement $result, um alle Zeilen als Array zu erhalten
$rows = $stmt->fetchAll();

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.adapter.transactions">

        <title>Transaktionen</title>

        <para>
            Standardmäßig sind PDO (und damit auch <code>Zend_Db_Adapter</code>) im "auto-commit"
            Modus. Das heißt, dass alle Abfragen abgearbeitet werden, wenn sie ausgeführt werden.
            Wenn du sie innerhalb einer Transaktion ausführen möchtest, rufe einfach die 
            <code>beginTransaction()</code> Methode auf und danach entweder <code>commit()</code> 
            oder <code>rollBack()</code> für deine Änderungen. <code>Zend_Db_Adapter</code> kehrt 
            in den "auto-commit" Modus zurück, bis du <code>beginTransaction()</code> wieder 
            aufrufst.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// Erstelle ein $db Objekt und starte dann eine Transaktion
$db->beginTransaction();

// Versuche eine Abfrage
// wenn erfolgreich, verarbeite die Änderungen
// wenn nicht erfolgreich, setze Änderungen zurück
try {
    $db->query(...);
    $db->commit();
} catch (Exception $e) {
    $db->rollBack();
    echo $e->getMessage();
}

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.adapter.insert">

        <title>Zeilen einfügen</title>

        <para>
            Der Einfachheit halber kannst du die <code>insert()</code> Methode verwenden, um für 
            dich eine INSERT Anweisung zu erstellen und mit den einzufügenden Daten zu verknüpfen. 
            (Die verknüpften Daten werden automatisch in Anführungszeichen gesetzt, um Attacken per 
            SQL Injection zu vermeiden.)
        </para>

        <para>
            Der Rückgabewert ist <emphasis>nicht</emphasis> die zuletzt eingefügte ID, da eine
            Tabelle keine automatisch inkrementierte Spalte haben muß. Stattdessen enthält der
            Rückgabewert die Zahl der beeinflussten Zeilen (normalerweise 1). Wenn du die ID des
            zuletzt eingefügten Datensatzes haben möchtest, rufe die <code>lastInsertId()</code> 
            Methode nach dem Einfügen auf.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
//
// INSERT INTO round_table
//     (noble_title, first_name, favorite_color)
//     VALUES ("King", "Arthur", "blue");
//

// Erstelle ein $db Objekt und dann...
// die einzufügenden Daten im Spalte => Wert Format
$row = array (
    'noble_title'    => 'King',
    'first_name'     => 'Arthur',
    'favorite_color' => 'blue',
);

// die Tabelle, in der die Daten eingefügt werden sollen
$table = 'round_table';

// füge die Daten ein und hole die ID der eingefügten Zeile
$rows_affected = $db->insert($table, $row);
$last_insert_id = $db->lastInsertId();

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.adapter.update">

        <title>Zeilen aktualisieren</title>

        <para>
            Der Einfachheit halber kannst du die <code>update()</code> Methode verwenden, um für 
            dich eine UPDATE Anweisung zu erstellen und mit den zu aktualisierenden Daten zu 
            verknüpfen. (Die verknüpften Daten werden automatisch in Anführungszeichen gesetzt, um 
            Attacken per SQL Injection zu vermeiden.)
        </para>

        <para>
            Du kannst eine optionale WHERE Klausel übergeben um anzugeben, welche Zeilen 
            aktualisiert werden sollen. (Beachte, dass die WHERE Klausel kein verknüpfter Parameter
            ist, so dass du die Werte selber in Anführungszeichen setzen musst.)
        </para>

        <programlisting role="php"><![CDATA[<?php
	
//
// UPDATE round_table
//     SET favorite_color = "yellow"
//     WHERE first_name = "Robin";
//

// Erstelle ein $db Objekt und dann...
// die neuen Werte, die aktualisiert werden sollen, im Spalte => Wert Format.
$set = array (
    'favorite_color' => 'yellow',
);

// die zu aktualisierende Tabelle
$table = 'round_table';

// die WHERE Klausel
$where = $db->quoteInto('first_name = ?', 'Robin');

// aktualisiere die Tabelle und hole die Anzahl der beeinflussten Zeilen
$rows_affected = $db->update($table, $set, $where);

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.adapter.delete">

        <title>Zeilen löschen</title>

        <para>
            Der Einfachheit halber kannst du die <code>delete()</code> Methode verwenden, um für 
            dich eine DELETE Anweisung zu erstellen. Du kannst eine optionale WHERE Klausel 
            übergeben um anzugeben, welche Zeilen gelöscht werden sollen. (Beachte, dass die WHERE 
            Klausel kein verknüpfter Parameter ist, so dass du die Werte selber in 
            Anführungszeichen setzen musst.)
        </para>

        <programlisting role="php"><![CDATA[<?php
	
//
// DELETE FROM round_table
//     WHERE first_name = "Patsy";
//

// Erstelle ein $db Objekt und dann...
// die Tabelle, aus der gelöscht werden soll
$table = 'round_table';

// die WHERE Klausel
$where = $db->quoteInto('first_name = ?', 'Patsy');

// aktualisiere die Tabelle und hole die Anzahl der beeinflussten Zeilen
$rows_affected = $db->delete($table, $where);

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.adapter.fetch">

        <title>Zeilen holen</title>

        <para>
            Obwohl du die Datenbank direkt mit der <code>query()</code> Methode abfragen kannst, 
            wirst du häufig nur Zeilen selektieren und die Ergebnisse zurückerhalten wollen. Der 
            Satz von <code>fetch*()</code> Methoden macht dies für dich. Für jede der 
            <code>fetch*()</code> Methoden, übergibst du eine SQL SELECT Anweisung; wenn du 
            benannte Platzhalter in der Anweisung verwendest, kannst du zudem ein Array mit zu 
            verknüpfenden Werte übergeben, die in Anführungszeichen gesetzt und in der Anweisung 
            ausgetauscht werden. Die <code>fetch*()</code> Methoden lauten:
        </para>

        <itemizedlist>
            <listitem><para><code>fetchAll()</code></para></listitem>
            <listitem><para><code>fetchAssoc()</code></para></listitem>
            <listitem><para><code>fetchCol()</code></para></listitem>
            <listitem><para><code>fetchOne()</code></para></listitem>
            <listitem><para><code>fetchPairs()</code></para></listitem>
            <listitem><para><code>fetchRow()</code></para></listitem>
        </itemizedlist>

        <programlisting role="php"><![CDATA[<?php
	
// Erstelle ein $db Objekt und dann...

// hole alle Spalten aller Zeilen als sequentielles Array
$result = $db->fetchAll(
    "SELECT * FROM round_table WHERE noble_title = :title",
    array('title' => 'Sir')
);

// hole alle Spalten aller Zeilen als assoziatives Array
// die erste Splate wird als Array Schlüssel verwendet
$result = $db->fetchAssoc(
    "SELECT * FROM round_table WHERE noble_title = :title",
    array('title' => 'Sir')
);

// hole die erste Splate aller Zeilen
$result = $db->fetchCol(
    "SELECT first_name FROM round_table WHERE noble_title = :title",
    array('title' => 'Sir')
);

// hole nur den ersten Wert
$result = $db->fetchOne(
    "SELECT COUNT(*) FROM round_table WHERE noble_title = :title",
    array('title' => 'Sir')
);

// hole einen Satz von Schlüssel-Wert Paaren; die erste Spalte ist 
// der Array Schlüssel, die zweite Spalte ist der Array Wert
$result = $db->fetchPairs(
    "SELECT first_name, favorite_color FROM round_table WHERE noble_title = :title",
    array('title' => 'Sir')
);

// hole nur die erste Zeile
$result = $db->fetchRow(
    "SELECT * FROM round_table WHERE first_name = :name",
    array('name' => 'Lancelot')
);

?>]]></programlisting>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
