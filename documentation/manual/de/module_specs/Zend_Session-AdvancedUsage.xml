<sect1 id="zend.session.advancedusage">

    <title>Gehobene Benutzung</title>

    <para>
        Wärend die Beispiele für die Basisnutzung völlig akzeptierbar sind, in ihrem Weg Zend Framework Sessions
        zu Benutzen, ist auch etwas beste Praxis zu bedenken. Bedenkt man etwa das
        <link linkend="zend.auth.introduction.using"><code>Zend_Auth</code> Beispiel</link>
        das Zend_Session_Namespace standardmäßig transparent benutzt um Authentifizierungs Teile zu fixieren.
        Dieses Beispiel zeigt einen Ansatz um schnell und einfach Zend_Session_Namespace und Zend_Auth zu integrieren.
    </para>

    <sect2 id="zend.session.startingasession">

        <title>Starten einer Session</title>

        <para>
            Wenn alle Anfragen eine Session besitzen und Zend Framework Sessions benutzen sollen,
            muß die Session in der Bootstrap Datei gestartet werden:
        </para>

        <example>
            <title>Starten einer globalen Session</title>
<programlisting role="php">
<![CDATA[<?php
...
require_once 'Zend/Session.php';
Zend_Session::start();
...
?>]]></programlisting>
        </example>

        <para>
            Durch das Starten der Session in der Bootstrap Datei verhindert man das die Session gestartet werden
            könnte nachdem die Header an den Browser gesendet wurde, was zu einer Ausnahme und möglicherweise
            zu einer fehlerhaften Seiten im Browser führen würde. Viele gehobenen Features benötigen zuerst
            <code>Zend_Session::start()</code>. (Mehr dazu später in den gehobenen Features)
        </para>

        <para>
            Es gibt vier Wege eine Session zustarten wenn Zend_Session verwendet wird. Zwei sind falsch.
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    1. Falsch: PHP's session.auto.start Ini-Einstellung darf nicht gesetzt sein, weder in der
                    php.ini noch in .htaccess (http://www.php.net/manual/en/ref.session.php#ini.session.auto-start).
                    Wenn keine Möglichkeit besteht diese Einstellung in php.ini zu deaktivieren, und mod_php
                    (oder ähnliches) verwendet wird, und die Einstellung schon in php.ini aktiviert ist, kann
                    <code>php_value session.auto_start 0</code> in der .htaccess Datei hinzugefügt werden
                    (normalerweise im HTML Dokument Haupt-Verzeichnis).
                </para>
            </listitem>
            <listitem>
                <para>
                    2. Falsch: PHP's <code><ulink url="http://www.php.net/session_start">session_start()</ulink></code>
                    Funktion darf nicht direkt verwendet werden. Wenn <code>session_start()</code> direkt, und
                    anschließend Zend_Session_Namespace verwendet wird, wird von <code>Zend_Session::start()</code>
                    eine Ausnahme geworfen ("session has already been started"). Wenn
                    <code>Zend_Session::start()</code> ausgerufen wird, nachdem Zend_Session_Namespace verwendet
                    wird oder <code>Zend_Session::start()</code> explizit verwendet wird, wird ein Fehler vom
                    Level E_NOTICE erzeugt und der Aufruf wird ignoriert.
                </para>
            </listitem>
            <listitem>
                <para>
                    3. Richtig: Verwenden von <code>Zend_Session::start()</code>. Wenn es gewünscht ist, das alle
                    Anfragen eine Session haben und verwenden, sollte diese Funktion sehr früh, direkt und
                    entscheidungslos in der ZF Bootstrap Datei aufgerufen werden. Session haben einigen Overhead.
                    Wenn einige Anfragen Sessions benötigen aber andere Anfragen keine Sessions verwenden, dann:
                </para>
                <itemizedlist mark='opencircle'>
                    <listitem>
                        <para>
                            Entscheidungslos, die <code>strict</code> Option auf wahr setzen (siehe
                            <link
                        linkend="zend.session.startingasession"><code>Zend_Session::setOptions()</code>
                            </link>
                            ) im eigenen Bootstrap.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Aufruf von <code>Zend_Session::start()</code>, nur für die Anfragen die eine Session
                            verwenden müssen, bevor das erste Mal <code>new Zend_Session_Namespace()</code> aufgerufen
                            wird.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Normales verwenden von <code>new Zend_Session_Namespace()</code> wo es benötigt wird,
                            aber sicherstellen das davor <code>Zend_Session::start()</code> ausgerufen wurde.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Die Option <code>strict</code> verhindert das <code>new Zend_Session_Namespace()</code>
                    automatisch eine Session startet und dabei <code>Zend_Session::start()</code> verwendet.
                    Deshalb hilft diese Option Entwicklern bei eigenen ZF Anwendungen, sich für ein Design entscheiden
                    zu können welches verhindert das für bestimmte Anfragen Sessions verwendet werden, da ein
                    Fehler geworfen würde wenn diese Option verwendet und Zend_Session_Namespace instanziiert wird,
                    bevor <code>Zend_Session::start()</code> explizit aufgerufen wird. Diese Option sollte nicht in
                    ZF Kern-Bibliotheks-Code verwendet werden, da nur Entwickler diese Designentscheidung treffen
                    sollten. Gleichfalls sollten alle "Bibliotheks" Entwickler vorsichtig entscheiden welchen Einfluß
                    die Verwendung von <code>Zend_Session::setOptions()</code> auf Benutzern in deren
                    Bibliothekscode hat, da diese Optionen globale Seiteneffekte hat (genauso wie die
                    darunterliegende Option für ext/session).
                </para>
            </listitem>
            <listitem>
                <para>
                    4. Richtig: Einfach <code>new Zend_Session_Namespace()</code> verwenden wo dies auch immer
                    notwendig ist, und die Session wird automatisch innerhalb von Zend_Session gestartet. Das bietet
                    eine extrem simple Handhabung die in den meisten Situationen gut funktioniert. Trotzdem ist man
                    dann dafür verantwortlich darauf zu schauen das das erste <code>new Zend_Session_Namespace()</code>
                    passiert <emphasis role="strong">bevor</emphasis> irgendeine Ausgabe (z.B.
                    <ulink url="http://www.php.net/headers_sent">HTTP headers</ulink> ) von PHP an den Client
                    gesendet wird, wenn standardmäßige, Cookie-basierte Sessions verwendet werden (sehr
                    empfehlenswert). Siehe <xref linkend="zend.session.errors.headerssent" /> für mehr Informationen.
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.session.locking">

        <title>Gesperrte Session Namensräume</title>

        <para>
            Session Namensräume können gesperrt werden um weitere Veränderungen der Daten in diesem Namensraum
            zu verhindern. Die Verwendung von <code>Zend_Session_Namespace's lock()</code> macht einen speziellen
            Namensraum nur-lesbar, <code>unLock()</code> macht einen nur-lesbaren Namensraum les- und schreibbar,
            und <code>isLocked()</code> prüft ob ein Namensraum vorher gesperrt wurde. Sperren sind flüchtig und
            bestehen nicht von einer Anfrage zur nächsten. Die Sperre des Namensraumes hat keinen Effekt auf
            Setz-Methoden von Objekten welche im Namensraum gespeichert sind, aber sie verhindert die Verwendung
            der Setz-Methoden des Namensraumes welche das gespeicherte Objekt direkt im Namensraum löschen oder
            ersetzen. Gleichwohl verhindert das Sperren von Zend_Session_Namespace Namensräumen nicht die Verwendung
            von symbolischen Tabellen-Aliasen auf die gleichen Daten (siehe
            <ulink url="http://www.php.net/references">PHP references</ulink>).
        </para>

        <example>
            <title>Sperren von Session Namensräumen</title>
<programlisting role="php">
<![CDATA[<?php
    // Annahme:
    $userProfileNamespace = new Zend_Session_Namespace('userProfileNamespace');

    // Die Session als nur-lesbar gesperrt markieren
    $userProfileNamespace->lock();

    // Die nur-lesbar Sperre aufheben
    if ($userProfileNamespace->isLocked()) {
        $userProfileNamespace->unLock();
    }
?>]]></programlisting>
        </example>

        <para>
            Es gibt eine Vielzahl von Ideen wie Modelle im MVC Paradigma für das Web gehandhabt werden, welche die
            Erstellung von Präsentations Modellen für Views inkludieren. Manchmal sind bestehende Daten, egal ob
            Teil des Domain Modells oder nicht, adequat für diese Aufgabe. Um Views vom Hinzufügen von irgendeiner
            ausführenden Logik abzuraten, die solche Daten verändert, sollte der Session Namensraum gesperrt werden
            bevor es Views gestattet wird auf dieses Subset des "Präsentations" Modells zuzugreifen.
        </para>

        <example>
            <title>Sperren von Sessions in Views</title>
<programlisting role="php">
<![CDATA[<?php
class FooModule_View extends Zend_View
{
    public function show($name)
    {
        if (!isset($this->mySessionNamespace)) {
            $this->mySessionNamespace = Zend::registry('FooModule');
        }

        if ($this->mySessionNamespace->isLocked()) {
            return parent::render($name);
        }

        $this->mySessionNamespace->lock();
        $return = parent::render($name);
        $this->mySessionNamespace->unLock();

        return $return;
    }
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.expiration">

        <title>Verfall von Namensräumen</title>

        <para>
            Limits können plaziert werden an der Lebensdauer von beidem, Namensräumen und individuellen Schlüsseln
            in Namensräumen. Normale Anwendungsfälle beinhalten das durchlaufen von temporären Informationen zwischen
            Anfragen, und das vermindern der Aufdeckung von vielfältigen Sicherheitsrisiken durch das Entfernen des
            Zugangs zu potentiell sensitiven Informationen, manchmal nachdem Authentifizierung stettgefunden hat.
            Das Ende kann auf abgelaufenen Sekunden, oder auf dem Konzept von "Sprüngen" basieren, wobei ein Sprung
            für jede nachfolgende Anfrage stattfindet die den Namensraum aktiviert, durch mindestens ein
            <code>$space = new Zend_Session_Namespace('myspace');</code>.
        </para>

        <example>
            <title>Beispiel für den Verfall</title>
<programlisting role="php">
<![CDATA[<?php
$s = new Zend_Session_Namespace('expireAll');
$s->a = 'Apfel';
$s->p = 'Pfirsich';
$s->o = 'Orange';

$s->setExpirationSeconds(5, 'a'); // Der Schlüssel "a" läuft in 5 Sekunden ab

// Der komplette Namensraum läuft in 5 "Sprüngen"
$s->setExpirationHops(5);

$s->setExpirationSeconds(60);
// Der "expireAll" Namensraum wird als "abgelaufen" markiert
// sobald der erste Aufruf empfangen wurde und 60 Sekunden
// vergangen sind, oder in 5 Sprüngen, was auch immer zuerst stattfindet
?>]]></programlisting>
        </example>

        <para>
            Wenn mit Daten einer Session gearbeitet wird, die in der aktuellen Anfrage ablaufen, sollte Vorsicht
            beim Empfangen dieser Daten gehalten werden. Auch wenn diese Daten durch Referenz zurückgegeben werden,
            wird die Änderung derselben, diese Daten nicht über diese Abfrage hinweg gültig machen. Um die
            Zeit für das Ablaufen zu "resetieren", müssen die Daten in eine temporäre Variable geholt werden,
            diese im Namensraum entfernt und anschliessend der entsprechende Schlüssel wieder gesetzt werden.
        </para>

    </sect2>

    <sect2 id="zend.session.controllers">

        <title>Kapseln von Sessions und Kontroller</title>

        <para>
            Namensräume können auch verwendet werden um den Zugriff auf Sessions durch Kontroller zu seperieren
            um Variablen vor Kontaminierung zu schützen. Zum Beispiel könnte der 'Zend_Auth' Kontroller seine
            Session Daten von allen anderen Kontrollern seperat halten.
        </para>

        <example>
            <title>Session Namensräume für Kontroller mit automatischem Verfall</title>
<programlisting role="php">
<![CDATA[<?php
require_once 'Zend/Session.php';
// Abfrage des View Kontrollers
$testSpace = new Zend_Session_Namespace('testSpace');
$testSpace->setExpirationSeconds(300, "accept_answer"); // Nur diese Variable ablaufen lassen
$testSpace->accept_answer = true;

--

// Anwort des Ausführenden Kontrollers
$testSpace = new Zend_Session_Namespace('testSpace');

if ($testSpace->accept_answer === true) {
    // Innerhalb der Zeit
}
else {
    // Ausserhalb der Zend
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.limitinginstances">

        <title>Limitieren von Zend_Session_Namespace Instanzen auf eine pro Namensraum</title>

        <para>
            Die Verwendung der Session Absperrung wird empfohlen (siehe oberhalb) statt dem untigen Feature, welches
            dem Entwickler extra Management aufbürdet um Zend_Session_Namespace Instanzen zu beliebigen Funktionen
            und Objekten zu übergeben welche auf jeden Namensraum zugreifen müssen.
        </para>

        <para>
            Wenn die erste Instanz von Zend_Session_Namespace für einen speziellen Namensraum erstellt wird, kann
            Zend_Session_Namespace dazu instruiert werden keine weiteren Instanzen für diesen Namensraum zu machen.
            Jeder weitere Versuch eine Zend_Session_Namespace Instanz zu erstellen die den gleichen hat wird einen
            Fehler werfen. Dieses Verhalten ist optional, und nicht das Standardverhalten, bleibt aber verfügbar,
            für jene, die das Herumreichen eines einzigen Instanz Objektes für jeden Namensraum, bevorzugen.
            Das erhöht den Schutz vor Änderungen durch Komponenten welche einen speziellen Session Namensraum nicht
            ändern sollten, weil Sie keinen einfachen Zugriff haben. Trotzdem kann das limitieren eines
            Namensraumes an eine einzelne Instanz zu mehr und komplexerem Code führen, da der Zugriff auf
            das gewöhnliche <code>$aNamespace = new Zend_Session_Namespace('aNamespace');</code> entfernt wird,
            nachdem die Instanz erstellt wurde, wie im beiliegenden Beispiel gezeigt:
        </para>

        <example>
            <title>Limitierung auf einzelne Instanzen</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $authSpaceAccessor1 = new Zend_Session_Namespace('Zend_Auth');
    $authSpaceAccessor2 = new Zend_Session_Namespace('Zend_Auth', Zend_Session_Namespace::SINGLE_INSTANCE);
    $authSpaceAccessor1->foo = 'bar';
    assert($authSpaceAccessor2->foo, 'bar'); // gestattet
    doSomething($options, $authSpaceAccessor2); // gib den Zugriff auf wo immer er benötigt wird
    .
    .
    .
    $aNamespaceObject = new Zend_Session_Namespace('Zend_Auth'); // Das wird einen Fehler werfen
?>]]></programlisting>
        </example>

        <para>
            Der zweite Parameter oben im Konstruktor sagt Zend_Session_Namespace das jede zukünftige
            Zend_Session die mit dem 'Zend_Auth' Namensraum initiiert wird, nicht erlaubt ist, und eine
            Ausnahme hervorruft. Da <code>new Zend_Session_Namespace('Zend_Auth')</code> nicht erlaubt ist nachdem
            der obige Code ausgeführt wurde, wird der Entwickler darauf aufmerksam gemacht die Instanz des Objektes
            (<code>$authSpaceAccessor2</code> im obigen Beispiel) woanders zu speichern, wenn ein Zugriff auf diesen
            Session Namensraum später, wärend der gleichen Anfrage, benötigt wird. Ein Entwickler könnte, zum
            Beispiel, die Instanz in einer statischen Variable speichern, oder an eine andere Methode weiterreichen
            welche Zugriff auf diesen Session Namensraum benötigt. Die Sperre der Session (siehe oben) bietet einen
            gewöhnlicheren Weg, und ist weniger umständlicher im limitieren der Zugriffe auf Namensräume.
        </para>

    </sect2>

    <sect2 id="zend.session.modifyingarray">

        <title>Arbeiten mit Arrays in Namensräumen</title>

        <para>
            Ändern eines Array innerhalb eines Namensraumes funktioniert nicht. Die einfachste Lösung ist es
            das Array zu speichern nachdem alle gewünschten Werte geändert wurden.
            <ulink url="http://framework.zend.com/issues/browse/ZF-800">ZF-800</ulink>
            dokumentiert ein bekanntes Problem welches viele PHP Anwendungen betrifft die magische Methoden
            mit Arrays verwenden.
        </para>

        <example>
            <title>Bekannte Probleme mit Arrays</title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array();
    $sessionNamespace->array['testKey'] = 1; // funktioniert nicht vor PHP 5.2.1
?>]]></programlisting>
        </example>

        <para>
            Wenn ein Array geändert werden soll nachdem es einem Session Namensraum Schlüssel zugewiesen wurde,
            muß das Array geholt, anschließend geändert und das Array in den Session Namensraum zurück gespeichert.
        </para>

        <example>
            <title>Workaround: Holen, Ändern, Speichern</title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array('baum' => 'apfel');
    $tmp = $sessionNamespace->array;
    $tmp['frucht'] = 'pfirsich';
    $sessionNamespace->array = $tmp;
?>]]></programlisting>
        </example>

        <para>
            Alternativ kann ein Array, welches Referenzen enthält, in ein gewünschtes Array gespeichert und
            anschließend indirekt darauf zugegriffen werden.
        </para>

        <example>
            <title>Workaround: Speichern des Arrays welche Referenzen enthält</title>
<programlisting role="php">
<![CDATA[<?php
    $myNamespace = new Zend_Session_Namespace('mySpace');

    // funktioniert, selbst für fehlerhafte PHP Versionen
    $a = array(1,2,3);
    $myNamespace->someArray = array( & $a ) ;
    $a['foo'] = 'bar';
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.auth">

        <title>Verwenden von Session mit Authentifizierung</title>

        <para>
            Wenn der Authentifizierung Adapter für <code>Zend_Auth</code> ein Ergebnis zurückgibt wo die Identität der
            Authentifizierung ein Objekt (nicht benötigt) statt einem Array ist, sollte sichergestellt werden das
            die Definition der Klasse die die Identität der Authentifizierung enthält vor dem Starten der Session
            geladen wird. Stattdessen wird empfohlen die berechneten Authentifizierung Id's im Authentifizierungs
            Adapter innerhalb eines gut bekannten Schlüssels im Session Namensraum zu Speichern. Das Standardverhalten
            von <code>Zend_Auth</code>, zum Beispiel, plaziert ihn im 'storage' Schlüssel des 'Zend_Auth' Namensraumes.
        </para>

        <para>
            Wenn <code>Zend_Auth</code> mitgeteilt wird, nicht im Authentifizierungs Token der Session zu bleiben,
            kann die Authentifizierung Id manuell im Session Namensraum gespeichert werden, innerhalb einer
            gut bekannten Position in einem Session Namensraum der eigenen Wahl. Oft haben Anwendungen spezielle
            Notwendigkeiten darüber wo benötige Zeugnisse (wenn vorhanden) und "Authorisierungs" Identitäten
            abgespeichert werden. Anwendungen mappen oft Authentifizierungs Identitäten (z.B. Benutzernamen)
            an Authorisierungs Identitäten (z.B. einer eindeutigen zugeordneten Integerzahl) wärend der
            Authentifizierung, welche in der Zend_Auth Authentifizierungs Adapter Methode
            <code>authenticate()</code> stattfindet.
        </para>

        <example>
            <title>Beispiel: Einfacher Zugriff auf Authorisierungs Ids</title>
<programlisting role="php">
<![CDATA[<?php
    // Vor der Authentifizierungs Anfrage
    require_once 'Zend/Auth/Adapter/Digest.php';
    $adapter = new Zend_Auth_Adapter_Digest($filename, $realm, $username, $password);
    $result = $adapter->authenticate();
    require_once 'Zend/Session/Namespace.php';
    $namespace = new Zend_Session_Namespace('Zend_Auth');
    if ($result->isValid()) {
        $namespace->authorizationId = $result->getIdentity();
        $namespace->date = time();
    } else {
        $namespace->attempts++;
    }

    // Nachfolgende Anfragen
    require_once 'Zend/Session.php';
    Zend_Session::start();
    $namespace = new Zend_Session_Namespace('Zend_Auth');

    echo "Gültig: ", (empty($namespace->authorizationId) ? 'Nein' : 'Ja'), "\n"';
    echo "Authorisierung / Benutzer Id: ", (empty($namespace->authorizationId)
        ? 'keine' : print_r($namespace->authorizationId, true)), "\n"';
    echo "Authentifizierungs Versuche: ", (empty($namespace->attempts)
        ? '0' : $namespace->attempts), "\n"';
    echo "Authentifizierung am: ",
        (empty($namespace->date) ? 'Nein' : date(DATE_ATOM, $namespace->date), "\n"';
?>]]></programlisting>
        </example>

        <para>
            Authorisierungs Ids welche auf der Seite des Clienten gespeichert werden sind Angriffspunkte
            betreffend der Eskalation von Rechten wenn diese Ids verwendet und der Server diesen glaubt, solange bis
            zum Beispiel die Id auf Seite des Servers dupliziert (z.B. in der Session) und anschließend
            gegengeprüft wird mit der Authorisierungs Id welche durch den Client in der effektiven Session
            angefordert wird. Es wird unterschieden zwischen "Authentifizierungs Ids" (z.B. Benutzernamen) und
            "Authorisierungs Ids" (z.B. Benutzer ID #101 in der Benutzertabelle der Datenbank).
        </para>

        <para>
            Das Spätere ist nicht unüblich aus Gründen der Geschwindigkeit, wie etwa Hilfe bei der Auswahl aus einem
            Pool von Servern welche Session Informationen holen um bei dem Henne-und-Ei Problemen zu helfen. Oft
            werden Debatten darüber geführt ob die echte Authorisierungs Id in einem Cookie verwendet wird, oder
            eine Ableitung welche in die echte Authorisierungs Id gemappt werden kann (oder Session oder Server
            welche die Benutzersession/Profile etc. enthalten), da einige Systemsicherheits Architekten wünschen
            das Verhindert wird das echte "Datenbank Primärschlüssel" nicht in die Wildnis entlassen werden.
            Diese Architekten versuchen einige Level von Verschleierung zu erreichen im Fall eines SQL
            Angriffs auf Ihr System. Nicht jeder verwendet automatisch-addierte Strategien für Authorisierungs Ids.
        </para>

    </sect2>

    <sect2 id="zend.session.testing">

        <title>Verwenden von Sessions mit Unit Tests</title>

        <para>
            Der Zend Framework vertraut auf PHPUnit um das Testen von sich selbst zu ermöglichen. Viele
            Entwickler erweitern die existierende Sammlung von Unit Tests um den Code in deren Anwendungen
            anzudecken. Die Ausnahme "<emphasis role="strong">Zend_Session ist aktuell als nur-lesbar markiert</emphasis>"
            wird geworfen wärend Unit Tests durchgeführt werden, wenn irgendeine schreibende Methode verwendet wird
            nachdem Ende der Session. Trotzdem benötigen Unit Tests die Zend_Session verwenden besondere Aufmerksamkeit
            weil das Schließen (<code>Zend_Session::writeClose()</code>) oder Zerstören einer Session
            (<code>Zend_Session::destroy()</code>) weitere Änderungen oder Rücknahmen von Schlüsseln in jedem
            Zend_Session_Namespace verhindert. Dieses Verhalten ist ein direktes Resultat des darunterliegenden
            ext/session Mechanismus und PHP's <code>session_destroy()</code> und <code>session_write_close()</code>
            welche keinen "rückgängig machen" Mechanismus unterstützen um Setup/Teardown innerhalb der
            Unit Tests zu unterstützen.
        </para>

        <para>
            Um das Umzuarbeiten, siehe den Unit Test <code>testSetExpirationSeconds()</code> in
            <code>tests/Zend/Session/SessionTest.php und SessionTestHelper.php</code> welche PHP's
            <code>exec()</code> verwenden um einen eigenständigen Prozess zu starten. Der neue Prozess
            simuliert eine zweite Anfrage eines Browsers, viel genauer. Der separate Prozess beginnt mit einer
            "reinen" Session, genauso wie jede PHP Skript Ausführung für eine web Anfrage. Auch jede Änderung in
            <code>$_SESSION[]</code> welche im aufrufenden Prozess gemacht wurde, ist im Kind-Prozess
            verfügbar, ermöglicht wenn der Elternprozess die Session beendet hat, bevor <code>exec()</code>
            verwendet wird.
        </para>

        <example>
            <title>Verwenden von PHPUnit um Code zu testen der Zend_Session* verwendet</title>
<programlisting role="php">
<![CDATA[<?php
        // testen von setExpirationSeconds()
        require 'tests/Zend/Session/SessionTestHelper.php'; // siehe auch SessionTest.php in trunk/
        $script = 'SessionTestHelper.php';
        $s = new Zend_Session_Namespace('space');
        $s->a = 'apfel';
        $s->o = 'orange';
        $s->setExpirationSeconds(5);

        Zend_Session::regenerateId();
        $id = Zend_Session::getId();
        session_write_close(); // Session freigeben damit der untere Prozess Sie verwenden kann
        sleep(4); // nicht lange genug damit die Dinge ablaufen
        exec($script . "expireAll $id expireAll", $result);
        $result = $this->sortResult($result);
        $expect = ';a === apfel;o === orange;p === pfirsich';
        $this->assertTrue($result === $expect,
            "Iterierung durch standard Zend_Session Namensraum fehlgeschlagen; erwartet result === '$expect', aber '$result' bekommen");

        sleep(2); // lange genug damit die Dinge ablaufen (insgesamt 6 Sekunden warten, aber nach 5 Sekunden abgelaufen)
        exec($script . "expireAll $id expireAll", $result);
        $result = array_pop($result);
        $this->assertTrue($result === '',
            "Iterierung dirch standard Zend_Session Namensraum fehlgeschlagen; erwartet result === '', aber '$result' bekommen)");
        session_start(); // wiederherstellen der vorher eingefrorenen Session

        // Das könnte in einen seperaten Test abgeteilt werden, aber aktuell, wenn irgendwas vom darüberleigenden
        // Test den darunterliegenden Test kontaminiert, ist das auch ein Fehler den wir wissen wollen.
        $s = new Zend_Session_Namespace('expireGuava');
        $s->setExpirationSeconds(5, 'g'); // Versuch nur einen Schlüssel im Namensraum ablaufen zu lassen
        $s->g = 'guava';
        $s->p = 'peach';
        $s->p = 'plum';

        session_write_close(); // Session auflösen damit der untere Prozess sie verwenden kann
        sleep(6); // Nicht lange genug damit die Dinge ablaufen können
        exec($script . "expireAll $id expireGuava", $result);
        $result = $this->sortResult($result);
        session_start(); // Die bestimmte Session wiederherstellen
        $this->assertTrue($result === ';p === plum',
            "Iterierung durch benannte Zend_Session Namensräume fehlgeschlaten (result=$result)");
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
