<sect1 id="zend.config.introduction">
    <title>Einführung</title>
    <para>
        <code>Zend_Config</code> wurde designt um den Gebrauch von Konfigurationsdaten für Web Anwendungen
        zu vereinfachen. Es bietet ein Eigenschafts-basiertes Interface für das Lesen von Konfigurationsdaten
        von einer Vielzahl von Medien welche hierarchische Datenspeicherung unterstützen. Aktuell bietet
        <code>Zend_Config</code> Helfer Klassen für Konfigurationsdaten welche in Text Dateien gespeichert sind via
        <link linkend="zend.config.classes.array"><code>Zend_Config_Array</code></link>,
        <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>, und
        <link linkend="zend.config.classes.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <para>
        <code>Zend_Config</code> unterstützt ein einzelnes vererbungs Modell welches es ermöglicht,
        Konfigurations Daten von einem Abschnitt der Konfigurations Daten in einen anderen zu vererben. Obwohl
        <code>Zend_Config</code> Vererbungs Bäume beliebiger Höhe unterstützt, können Abschnitte von 
        Konfigurations Daten nur von einem Eltern Abschnitt vererbt werden.
    </para>
    <para>
        Intern implementiert <code>Zend_Config</code> das Countable und das Iterator Interface um den einfachen 
        Zugriff auf Konfigurations Daten abzubilden. Die Daten werden <code>Zend_Config</code> verfügbar gemacht,
        durch ein assoziatives Array, welches Mehrdimensional sein kann. Eine Helfer Klasse wie <code>Zend_Config_Ini</code>
        liefert dieses Array typischerweise an <code>Zend_Config</code>, aber das Interface muß sich nicht
        Zwingenderweise an diese Konvention halten.
    </para>
    <note>
        Obwohl <code>Zend_Config</code> die Änderung im-Speicher von geladenen Konfigurations Daten erlaubt, ist es 
        nicht dafür ausgelegt, um Konfigurations Daten in bestimmten Speicher Medien zu speichern. Tools für das 
        Erstellen und Ändern von Konfigurations Daten in bestimmten Speicher Medien sind aktuell ausserhalb des
        Zend Framework Rahmens. Third-Party Open Source Lösungen sind oft erhältlich, für den Zweck der Erstellung
        und Änderung von Konfigurations Daten für verschiedenste Speicher Medien.
    </note>
    <example>
        <title>Laden von Konfigurations Daten von einer INI Datei</title>
        <para>
            In dieser Bespiel werden Konfigurations Daten für eine Produktionsumgebung von einer INI Datei geladen,
            durch Benutzung von <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'production'));
?>]]>       </programlisting>
            Nun sind die Konfigurations Daten abrufbar durch die Objekt Eigenschaften von <code>$config</code>.
            Angenommen die Konfigurations Daten beinhalten Datenbank Verbindungs Parameter und die Daten werden in der
            INI Datei wie folgt gespeichert :
            <programlisting role="ini"><![CDATA[[production]
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname]]>
            </programlisting>
            Die Anwendung könnte eine Verbindung zur Datenbank wie folgt realisieren:
            <programlisting role="php"><![CDATA[<?php
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);
?>]]>       </programlisting>
            Wie oben gezeigt, sind die Konfigurations Daten mit Hilfe der Objekt Eigenschafts Syntax abrufbar.
       </para>
    </example>
    <para>
        Wie können also <code>Zend_Config</code> sehr einfach für die vielfältigsten Zwecke erweitern. Hier 
        stellt eine Erweiterungsklasse die öfentliche Methode <code>dump()</code> zur Verfügung, für das
        schnelle Ausdrucken von geladenen Konfigurations Daten:
        <programlisting role="php"><![CDATA[<?php
class MyConfig extends Zend_Config
{
    protected $_indent;

    public function dump()
    {
        $this->_indent = 0;
        echo "<pre>\n";
        $this->_dumpRecursor($this);
        echo "</pre>";
    }

    protected function _dumpRecursor($config)
    {
        foreach ($config as $key => $value) {
            echo str_repeat("    ", $this->_indent) . "$key =>";
            if ($value instanceof Zend_Config) {
                echo "\n";
                $this->_indent++;
                $this->_dumpRecursor($value);
                $this->_indent--;
            } else {
                echo " $value\n";
            }
        }
    }
}

$config = new MyConfig(Zend_Config_Ini::load('/path/to/config.ini', 'production'));

$config->dump();
?>]]>   </programlisting>
        Für die Konfigurations Daten im obigen Beispiel würde folgendes gedruckt werden:
        <programlisting role="text"><![CDATA[<pre>
database =>
    type => pdo_mysql
    host => db.example.com
    username => dbuser
    password => secret
    name => dbname
</pre>]]>
        </programlisting>
    </para>
</sect1>
<sect1 id="zend.config.classes.array">
    <title>Zend_Config_Array</title>
    <sect2 id="zend.config.classes.array.introduction">
        <title>Einführung</title>
        <code>Zend_Config_Array</code> ermöglicht es Entwicklern, auf  Konfigurations Daten, die in einem 
        mehrdimensionalen assoziativen PHP Array gespeichert sind, mit Hilfe der Objekt Eigenschaften durch 
        <code>Zend_Config</code> zuzugreifen.
        <example>
            <title>In einem PHP Array gespeicherte Konfigurations Daten</title>
            <para>
                Dieses Beispiel zeigt die einfache Nutzung von <code>Zend_Config_Array</code> für das Laden von
                Konfigurations Daten aus einem PHP Array. Zuerst, wird ein PHP Array erstellt welches die 
                Konfigurations Daten enthält:
                <programlisting role="php"><![CDATA[<?php
// Konfigurations Daten der Produktions Site
$config['production'] = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Staging Site Konfigurations Daten vererbt von der Produktions Site und
// Werte überladen wo notwenig
$config['staging'] = $config['production'];
$config['staging']['webhost'] = 'dev.example.com';
$config['staging']['database']['host'] = 'dev.example.com';
$config['staging']['database']['username'] = 'devuser';
$config['staging']['database']['password'] = 'devsecret';
?>]]>           </programlisting>
                <note>
                    Das Array mit den Konfigurations Daten muß im geladenen PHP Skript <code>$config</code> genannt werden.
                </note>
                Vererbung wird im obigen Beispiel durch eine Verknüpfung der <code>production</code> Sektionswerte zu der 
                <code>staging</code> Sektion unterstützt. Jetzt ist es eine einfache Angelegenheit die Konfigurations
                Daten mit <code>Zend_Config_Array</code> zu Laden:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';

$config = new Zend_Config(Zend_Config_Array::load('/path/to/config.php', 'staging'));

echo $config->database->host; // Druckt "dev.example.com"
?>]]>           </programlisting>
            </para>
        </example>
        <para>
            Es ist zu Beachten das alle Werte der Konfigurations Daten, weil diese direkt einem PHP Array 
            hinzugefügt werden, den selben Daten Typ haben, wie das im PHP Skript enthaltene
            <code>$config</code> Array.
            <programlisting role="php"><![CDATA[<?php
$config['staging']['debug']   = 'false'; // Der Wert ist ein String Typ
$config['staging']['console'] = false;   // Der Wert ist ein Boolean Typ
$config['staging']['timeout'] = 30;      // Der wert ist ein Integer Typ
?>]]>       </programlisting>
        </para>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.ini">
    <title>Zend_Config_Ini</title>
    <sect2 id="zend.config.classes.ini.introduction">
        <title>Einführung</title>
        <code>Zend_Config_Ini</code> ermöglicht es Entwicklern Konfigurations Daten im beliebten INI Format 
        zu speichern und über die Objekt Eigenschaften mithilfe von <code>Zend_Config</code> zu lesen.
        <example>
            <title>In einer INI Daten gespeicherte Konfigurations Daten</title>
            <para>
                Dieses Beispiel zeigt die einfache Nutzung von <code>Zend_Config_Ini</code> für das Laden von
                Konfigurations Daten aus einer INI Daten. Angenommen die Konfigurations Daten sind in 
                <code>/path/to/config.ini</code>:
                <programlisting role="ini"><![CDATA[; Produktions Site Konfigurations Daten
[production]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Staging Site Konfigurations Daten erben von Produktion und
; überladen Werte wenn notwenig
[staging]
extends = production
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]>
                </programlisting>
                <note>
                    Zu Beachten ist das die Syntax der INI Datei ähnlich ist wie durch die
                    <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink> PHP Funktion erwartete,
                    welche <code>Zend_Config_Ini</code> anwendet. Bitte dieses Dokument beachten um über das 
                    spezielle Verhalten von <code>Zend_Config_Ini</code> informiert zu sein, wie zum Beispiel die
                    speziellen Werte von <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, und
                    <code>null</code> übersetzt werden.
                </note>
                Vererbung wird in der INI Syntax unterstützt durch Verwendung des Schlüsselwortes <code>extends</code>. Der Wert des <code>extends</code> Schlüssels sollte im Namen der Sektion enthalten sein, von der die Erweiterte Sektion abgeleitet wird. Die Konfgurations Daten werden anschließend von der INI Datei geladen:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'staging'));

echo $config->database->host; // Druckt "dev.example.com"
?>]]>           </programlisting>
            </para>
        </example>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.xml">
    <title>Zend_Config_Xml</title>
    <sect2 id="zend.config.classes.xml.introduction">
        <title>Einführung</title>
        <code>Zend_Config_Xml</code> ermöglich es Entwicklern Konfigurationsdaten in einem einfachen XML Format
        zu Speichern und über Objekt Eigenschaften durch <code>Zend_Config</code> zu lesen.
        <example>
            <title>Konfigurationsdaten in XML Dateien gespeichert</title>
            <para>
                Dieses Beispiel zeigt die einfache Benutzung von <code>Zend_Config_Xml</code> für das Laden
                der Konfigurationsdaten aus einer XML Datei. Beispielsweise haben wir die folgende Konfiguration
                in <code>/path/to/config.xml</code>:
                <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<config>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="production">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</config>]]>    </programlisting>
                Vererbung wird in der XML Syntax unterstützt durch Benutzung des <code>extends</code> Atributes. Der Wert des <code>extends</code> Attributes sollte der Name des Abschnittes sein von welcher die abgeleitete Sektion vererbt wird. Die Konfigurationsdaten werden anschließend von der XML Datei geladen:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config(Zend_Config_Xml::load('/path/to/config.xml', 'staging'));

echo $config->database->host; // druckt "dev.example.com"
?>]]>           </programlisting>
            </para>
            <note>
                Werte der Konfigurationsdaten von <code>Zend_Config_Xml</code> werden immer als Strings behandelt.
            </note>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->