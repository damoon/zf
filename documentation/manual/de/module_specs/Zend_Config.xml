<sect1 id="zend.config.introduction">
    <title>Einführung</title>
    <para>
        <code>Zend_Config</code> wurde designt um die Nutzung von Konfigurationsdaten in Webanwendungen
        zu vereinfachen. Es beinhaltet ein eigenschaftsbasiertes Interface zum Lesen von Konfigurationsdaten aus einer 
        Vielzahl von Formaten mit Unterstützung für hierarchische Datenstrukturen. Aktuell bietet
        <code>Zend_Config</code> Hilfsklassen für Konfigurationsdaten, in Form von Textdateien mittels
        <link linkend="zend.config.classes.array"><code>Zend_Config_Array</code></link>,
        <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link> und
        <link linkend="zend.config.classes.xml"><code>Zend_Config_Xml</code></link> an.
    </para>
    <para>
        <code>Zend_Config</code> unterstützt ein Einzelvererbungsmodell welches es ermöglicht,
        Konfigurationsdaten von einem Abschnitt der Konfigurationsdatei in einen anderen Abschnitt zu vererben. Obwohl
        <code>Zend_Config</code> eine beliebige Vererbungstiefe unterstützt, können Abschnitte von 
        Konfigurationsdaten nur von einem Elternabschnitt erben.
    </para>
    <para>
        Intern implementiert <code>Zend_Config</code> das Countable und das Iterator Interface um einen einfachen 
        Zugriff auf die Konfigurationsdaten zu ermöglichen. Die Daten werden <code>Zend_Config</code> in Form eines assoziativen, 
        mehrdimensionalen Array zur Verfügung gestellt. Typischerweise wird <code>Zend_Config</code> mittels Hilfsklassen wie 
        <code>Zend_Config_Ini</code> mit einem solchen Array versorgt, wobei die Nutzung dieser Konvention nicht 
        zwangsweise durch das Interface vorgeschrieben wird.
    </para>
    <note>
        Obwohl <code>Zend_Config</code> die Änderung von geladenen Konfigurationsdaten im Speicher erlaubt, ist es 
        nicht dafür ausgelegt, um Konfigurationsdaten in bestimmten Formaten zu speichern. Tools für die 
        Erstellung und Änderung von Konfigurationsdaten in bestimmten Formaten befinden sich zur Zeit ausserhalb des Rahmens
        des Zend Framework. Oftmals sind aber Open Source Lösungen von Drittanbietern für die Erstellung und Änderung von 
        Konfigurationsdaten in verschiedenen Formaten verfügbar.
    </note>
    <example>
        <title>Laden von Konfigurationsdaten aus einer INI-Datei</title>
        <para>
            In diesem Beispiel werden Konfigurationsdaten für eine Produktionsumgebung mittels 
            <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link> aus einer INI-Datei geladen:
       </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'production'));
?>]]>       </programlisting>
        <para>
            Nun sind die Konfigurationsdaten in Form von Eigenschaften des <code>$config</code> Objektes verfügbar.
            Angenommen, die Konfigurationsdaten beinhalten Parameter für eine Datenbankverbindung welche in einer
            INI-Datei wiefolgt gespeichert wurden:
       </para>
            <programlisting role="ini"><![CDATA[[production]
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname]]>
            </programlisting>
        <para>
            Die Anwendung könnte nun damit eine Verbindung zur Datenbank realisieren:
       </para>
            <programlisting role="php"><![CDATA[<?php
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);
?>]]>       </programlisting>
        <para>
            Wie oben gezeigt, sind die Konfigurationsdaten mit Hilfe der Syntax für Objekteigenschaften abrufbar.
       </para>
    </example>
    <para>
        Wir können <code>Zend_Config</code> auch sehr einfach für die vielfältigsten Zwecke erweitern. Hier 
        stellt eine ableitende Klasse die öffentliche Methode <code>dump()</code> zum schnellen Ausgeben von geladenen 
        Konfigurationsdaten zur Verfügung:
    </para>
        <programlisting role="php"><![CDATA[<?php
class MyConfig extends Zend_Config
{
    protected $_indent;

    public function dump()
    {
        $this->_indent = 0;
        echo "<pre>\n";
        $this->_dumpRecursor($this);
        echo "</pre>";
    }

    protected function _dumpRecursor($config)
    {
        foreach ($config as $key => $value) {
            echo str_repeat("    ", $this->_indent) . "$key =>";
            if ($value instanceof Zend_Config) {
                echo "\n";
                $this->_indent++;
                $this->_dumpRecursor($value);
                $this->_indent--;
            } else {
                echo " $value\n";
            }
        }
    }
}

$config = new MyConfig(Zend_Config_Ini::load('/path/to/config.ini', 'production'));

$config->dump();
?>]]>   </programlisting>
    <para>
        Für die Konfigurationsdaten im obigen Beispiel würde Folgendes ausgegeben werden:
    </para>
        <programlisting role="text"><![CDATA[<pre>
database =>
    type => pdo_mysql
    host => db.example.com
    username => dbuser
    password => secret
    name => dbname
</pre>]]>
        </programlisting>
</sect1>
<sect1 id="zend.config.classes.array">
    <title>Zend_Config_Array</title>
    <sect2 id="zend.config.classes.array.introduction">
        <title>Einführung</title>
        <code>Zend_Config_Array</code> ermöglicht es mit Hilfe der Objekteigenschaften von 
        <code>Zend_Config</code> auf  Konfigurationsdaten, welche in einem mehrdimensionalen assoziativen 
        PHP-Array gespeichert sind, zuzugreifen.
        <example>
            <title>In einem PHP-Array gespeicherte Konfigurationsdaten</title>
            <para>
                Dieses Beispiel zeigt die einfache Nutzung von <code>Zend_Config_Array</code> für das Laden von
                Konfigurationsdaten aus einem PHP-Array. Zuerst wird ein PHP-Array erstellt welches die 
                Konfigurationsdaten enthält:
            </para>
                <programlisting role="php"><![CDATA[<?php
// Konfigurationsdaten für Produktionsseite
$config['production'] = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Staging Konfigurationsdaten erben von Produktion
// und werden überschrieben wenn notwendig
$config['staging'] = $config['production'];
$config['staging']['webhost'] = 'dev.example.com';
$config['staging']['database']['host'] = 'dev.example.com';
$config['staging']['database']['username'] = 'devuser';
$config['staging']['database']['password'] = 'devsecret';
?>]]>           </programlisting>
                <note>
                    Das zu ladende Array mit den Konfigurationsdaten muß <code>$config</code> genannt werden.
                </note>
            <para>
                Im obigen Beispeil sieht man, wie durch Vererbung Werte des <code>production</code> Abschnitts dem <code>staging</code>
                Abschnitt zugewiesen werden. Damit ist es nun leicht Konfigurationsdaten per <code>Zend_Config_Array</code> zu laden:
            </para>
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';

$config = new Zend_Config(Zend_Config_Array::load('/path/to/config.php', 'staging'));

echo $config->database->host; // gibt "dev.example.com" aus
?>]]>           </programlisting>
        </example>
        <para>
            Zu beachten ist, dass alle Werte der Konfigurationsdaten den selben Datentyp wie das im PHP Skript enthaltene
            <code>$config</code> Array besitzen, weil diese direkt einem PHP-Array hinzugefügt werden.
        </para>
            <programlisting role="php"><![CDATA[<?php
$config['staging']['debug']   = 'false'; // Der Wert ist vom Typ String
$config['staging']['console'] = false;   // Der Wert ist vom Typ Boolean
$config['staging']['timeout'] = 30;      // Der wert ist vom Typ Integer
?>]]>       </programlisting>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.ini">
    <title>Zend_Config_Ini</title>
    <sect2 id="zend.config.classes.ini.introduction">
        <title>Einführung</title>
        <code>Zend_Config_Ini</code> ermöglicht es Entwicklern Konfigurationsdaten im beliebten INI-Format 
        zu speichern und über die Objekteigenschaften von <code>Zend_Config</code> auszulesen.
        <example>
            <title>In einer INI-Datei gespeicherte Konfigurationsdaten</title>
            <para>
                Dieses Beispiel zeigt die einfache Nutzung von <code>Zend_Config_Ini</code> um
                Konfigurationsdaten aus einer INI-Datei zu laden. Angenommen die Konfigurationsdaten befinden sich in 
                <code>/path/to/config.ini</code>:
            </para>
                <programlisting role="ini"><![CDATA[; Konfigurationsdaten für Produktionsseite
[production]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Staging Konfigurationsdaten erben von Produktion 
; und werden überschrieben wenn notwenig
[staging]
extends = production
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]>
                </programlisting>
                <note>
                    Zu beachten ist, dass die Syntax der INI-Datei ähnlich ist wie die für die
                    <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink> PHP-Funktion,
                    welche von <code>Zend_Config_Ini</code> aufgerufen wird. Bitte diese Dokumentation beachten um über das 
                    spezielle Verhalten von <code>Zend_Config_Ini</code> informiert zu sein, zum Beispiel wie die
                    speziellen Werte von <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code> und
                    <code>null</code> übersetzt werden.
                </note>
            <para>
                Vererbung wird in der INI-Syntax durch Verwendung des Schlüsselwortes <code>extends</code> unterstützt. 
                Der Wert von <code>extends</code> sollte dem Namen des Abschnitts entsprechen, von dem geerbt werden soll. 
                Die Konfgurationsdaten werden anschließend aus der INI-Datei geladen:
            </para>
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'staging'));

echo $config->database->host; // gibt "dev.example.com" aus
?>]]>           </programlisting>
        </example>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.xml">
    <title>Zend_Config_Xml</title>
    <sect2 id="zend.config.classes.xml.introduction">
        <title>Einführung</title>
        <code>Zend_Config_Xml</code> ermöglich es Entwicklern Konfigurationsdaten in einem einfachen XML-Format
        zu speichern und über die Objekteigenschaften von <code>Zend_Config</code> auszulesen.
        <example>
            <title>In XML-Dateien gespeicherte Konfigurationsdaten</title>
            <para>
                Dieses Beispiel zeigt die einfache Nutzung von <code>Zend_Config_Xml</code> um
                Konfigurationsdaten aus einer XML-Datei zu laden. Angenommen die Konfigurationsdaten befinden sich in 
                <code>/path/to/config.xml</code>:
            </para>
                <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<config>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="production">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</config>]]>    </programlisting>
            <para>
                Vererbung wird in der XML-Syntax durch die Verwendung des <code>extends</code> Attributs ermöglicht. 
                Der Wert des <code>extends</code> Attributs sollte dem Namen des Abschnitts entsprechen, von dem geerbt werden soll. 
                Die Konfigurationsdaten werden anschließend aus der XML-Datei geladen:
            </para>
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config(Zend_Config_Xml::load('/path/to/config.xml', 'staging'));

echo $config->database->host; // gibt "dev.example.com" aus
?>]]>           </programlisting>
            <note>
                Werte der Konfigurationsdaten von <code>Zend_Config_Xml</code> werden immer als Strings behandelt.
            </note>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->