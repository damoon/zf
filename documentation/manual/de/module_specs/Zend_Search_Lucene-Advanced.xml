<sect1 id="zend.search.lucene.advanced">
    <title>Erweitert</title>

    <sect2 id="zend.search.lucene.advanced.static">
        <title>Verwenden eines Index als statische Eigenschaft</title>

        <para>
            Das <code>Zend_Search_Lucene</code> Objekt verwendet einen Objekt Destruktor um Änderungen mitzuteilen
            und um Ressourcen zu löschen.
        </para>

        <para>
            Es speichert hinzugefügte Dokumente im Speicher und speichert neu indizierte Segmente auf die Platte
            abhängig vom <code>MaxBufferedDocs</code> Parameter.
        </para>

        <para>
            Wenn das <code>MaxBufferedDocs</code> Limit nicht erreicht wird, gibt es einige "ungespeicherte"
            Dokumente welche als neue Segmente im Objekt Destruktor gespeichert werden. Die automatische optimierungs
            Prozedur des Index wird aufgerufen wenn das notwendig wird, abhängig von den <code>MaxBufferedDocs</code>,
            <code>MaxMergeDocs</code> und <code>MergeFactor</code> Parametern.
        </para>

        <para>
            Statische Objekt Eigenschaften (siehe anbei) werden <emphasis>nach</emphasis> der letzten Zeile des
            ausgeführten Skripts vernichtet.

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }
}

Searcher::initIndex();]]>
            </programlisting>
        </para>


        <para>
            Auf die gleiche Art und Weise wird der Objekt Destruktor für statische Eigenschaften an dieser Stelle
            des Programablaufes aufgerufen.
        </para>

        <para>
            Ein potentielles Problem ist die Behandlung von Ausnahmen. Ausnahmen die vom Destruktor eines statischen
            Objekts geworfen werden haben keinen Inhalt, weil der Destruktor ausgeführt wird nachdem das Skript
            bereits beendet wurde.
        </para>

        <para>
            Man kann in solchen Fällen eine
            "Fatal error: Exception thrown without a stack frame in Unknown on line 0" Fehlermeldung statt der
            Beschreibung der Ausnahme sehen.
        </para>

        <para>
            Zend_Search_Lucene bietet einen Workaround zu diesem Problem mit der <code>commit()</code> Methode.
            Diese speichert alle ungespeicherten Änderungen und leert den Speicher der für das Speichern der
            neuen Segmente verwendet wird. Man kann die commit Operation jederzeit oder mehrmals während der
            Ausführung des Skripts anwenden. Man kann trotzdem das <code>Zend_Search_Lucene</code> Objekt für das
            suchen, hinzufügen oder löschen von Dokumenten nach der commit Operation verwenden. Aber der
            Aufruf von <code>commit()</code> garantiert, das wenn nach dessen Aufruf keine Dokumente
            hinzugefügt oder gelöscht werden, der <code>Zend_Search_Lucene</code> Destruktor nichts zu tun hat,
            und keine Ausnahme wirft:

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }

    ...

    public static function commit() {
        self::$_index->commit();
    }
}

Searcher::initIndex();

...

// Sktipt Shutdorn Routine
...
Searcher::commit();
...]]>
            </programlisting>
        </para>

    </sect2>

</sect1>