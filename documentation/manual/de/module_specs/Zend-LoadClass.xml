<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
        <code>Zend::loadClass($class, $dirs)</code> loads a PHP file
        and then checks for the existance of the class.
    </para>

    <programlisting role="php"><![CDATA[<?php

Zend::loadClass('Container_Tree', array('/home/production/mylib', (/home/production/myapp')));

?>]]></programlisting>

    <para>
        After converting <code>$class</code> to a path hierarchy by substituting directory separators
        for any underscores, the resulting hierarchy is appended to each path in <code>$dirs</code>
        If <code>$dirs</code> is <code>null</code>, then the result will contain only the single hierarchy.
        For example, <code>Container_Tree</code> becomes <code>Container/Tree.php</code>.
        If <code>/home/production/mylib/Container/Tree.php</code> exists, then it will be included.
        If not, then <code>/home/production/myapp/Container/Tree.php</code> will be included, if it exists.
        Otherwise, PHP's include path will be searched for <code>Container/Tree.php</code>.
    </para>

    <para>
        If <code>$dirs</code> is a string or an array, the directories are searched
        in the order supplied, and the first matching file will be included.

        If the file does not exist in the calculated <code>$dirs</code>, then PHP's include_path
        will be used by the <code>include</code> statement (i.e. <code>include 'Tree.php'</code>).
    </para>

    <para>
        If the file is not found or the class does not exist after the load, a <code>Zend_Exception</code> is
        thrown. <code>Zend::loadFile()</code> is used for loading, so the class name may only contain alphanumeric
        characters and the hyphen ('-'), underscore ('_'), and period ('.').
    </para>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->