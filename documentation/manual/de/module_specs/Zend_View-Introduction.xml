<sect1 id="zend.view.introduction">

    <title>Einführung</title>
    
    <para>
        Zend_View ist eine Klasse für die Verarbeitung des "View" Teils des Model-View-Controller
        Entwurfsmusters. Er existiert, um das View Skript von den Model und Controller Skripten
        zu trennen. Es stellt ein System an Helfern, Ausgabefiltern und Variablenmaskierung bereit.
    </para>
    
    <para>
        Zend_View ist unabhängig von einem Template System. Du kannst PHP als Template Sprache 
        verwenden oder Instanzen anderer Template Systeme erstellen und diese in deinem View Skript
        verarbeiten. 
    </para>

    <para>
        Im Wesentlichen verläuft die Verwendung von Zend_View in zwei Hauptschritten:
        
        1. Dein Controller Skript erstellt eine Instanz von Zend_View und übergibt Variablen an
        diese Instanz.
        
        2. Der Controller teilt Zend_View mit, ein bestimmtes View Skript zu verarbeiten. Dabei 
        wird die Kontrolle an das View Skript übergeben, welches die Ausgabe erstellt.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Controller Skript</title>
        
        <para>
            In einem einfachen Beispiel hat dein Controller Skript eine Liste von Buchdaten, die
            von einem View Skript verarbeitet werden sollen. Dieses Controller Skript kann ungefähr 
            so aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// verwende ein Modell, um die Daten der Bücher und Autoren zu erhalten
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// nun übergebe die Buchdaten an die Zend_View Instanz
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// und verarbeite ein View Skript mit Namen "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
        <note>
            <title>Zend_View PHP Kompatibilität</title>

            <para>
                Zend_View verwendet Überladung, um das Setzen von View Skript Variablen zu 
                ermöglichen. PHP 5.2.0 hat das Verhalten von __get() geändert, so dass nicht mehr
                länger Referenzen zurück gegeben werden, was die folgende Verwendung von Zend_View 
                verhindert:
            </para>

            <programlisting role="php"><![CDATA[
$view->foo = array();
$view->foo[] = 42;
]]></programlisting>

            <para>
                Ein Parch für die Funktionalität von __get() wurde nach dem 5.2.0 Release bereit
                gestellt, so dass die Rückgabe einer Referenz erlaubt wird, wenn der Referenz
                Operator angegeben wird:
            </para>

            <programlisting role="php"><![CDATA[
public function &__get($key)
]]></programlisting>

            <para>
                Dies hat zur Folge, dass das Verändern von Array mittels Überladung in PHP 5.2.0
                nicht funktioniert, aber es für alle anderen PHP Versionen läuft, die vom Zend 
                Framework unterstützt werden.
            </para>
        </note>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>View Skript</title>
        
        <para>
            Nun benötigen wir das zugehörige View Skript "booklist.php". Dies ist ein PHP Skript
            wie jedes andere mit einer Ausnahme: es wird innerhalb der Zend_View Instanz ausgeführt,
            was bedeutet, dass Referenzen auf $this auf die Eigenschaften und Methoden der
            Zend_View Instanz weisen. (Variablen, die vom Controller an die Instanz übergeben 
            wurden, sind öffentliche (public) Eigenschaften der Zend_View Instanz.) Dadurch kann
            ein sehr einfaches View Skript wie folgt aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Eine Tabelle mit einigen Büchern. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Titel</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Es gibt keine Bücher zum Anzeigen.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Beachte, wie wir die "escape()" Methode verwenden, um die Variablen für die Ausgabe zu 
            maskieren.
        </para>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->