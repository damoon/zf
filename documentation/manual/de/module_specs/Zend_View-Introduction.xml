<sect1 id="zend.view.introduction">
    <title>Einführung</title>
    
    <para>
        Zend_View ist eine Klasse für die Verarbeitung des "View" Teils des Model-View-Controller
        Entwurfsmusters. Er existiert, um das View Skript von den Model und Controller Skripten
        zu trennen. Es stellt ein System an Helfern, Ausgabefiltern und Variablenmaskierung bereit.
    </para>
    
    <para>
        Zend_View ist unabhängig von einem Template System. Du kannst PHP als Template Sprache 
        verwenden oder Instanzen anderer Template Systeme erstellen und diese in deinem View Skript
        verarbeiten. 
    </para>

    <para>
        Im Wesentlichen verläuft die Verwendung von Zend_View in zwei Hauptschritten:
        
        1. Dein Controller Skript erstellt eine Instanz von Zend_View und übergibt Variablen an
        diese Instanz.
        
        2. Der Controller teilt Zend_View mit, ein bestimmtes View Skript zu verarbeiten. Dabei 
        wird die Kontrolle an das View Skript übergeben, welches die Ausgabe erstellt.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Controller Skript</title>
        
        <para>
            In einem einfachen Beispiel hat dein Controller Skript eine Liste von Buchdaten, die
            von einem View Skript verarbeitet werden sollen. Dieses Controller Skript kann ungefähr 
            so aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// verwende ein Modell, um die Daten der Bücher und Autoren zu erhalten
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// nun übergebe die Buchdaten an die Zend_View Instanz
Zend_Loader::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// und verarbeite ein View Skript mit Namen "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>View Skript</title>
        
        <para>
            Nun benötigen wir das zugehörige View Skript "booklist.php". Dies ist ein PHP Skript
            wie jedes andere mit einer Ausnahme: es wird innerhalb der Zend_View Instanz ausgeführt,
            was bedeutet, dass Referenzen auf $this auf die Eigenschaften und Methoden der
            Zend_View Instanz weisen. (Variablen, die vom Controller an die Instanz übergeben 
            wurden, sind öffentliche (public) Eigenschaften der Zend_View Instanz.) Dadurch kann
            ein sehr einfaches View Skript wie folgt aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Eine Tabelle mit einigen Büchern. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Titel</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Es gibt keine Bücher zum Anzeigen.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Beachte, wie wir die "escape()" Methode verwenden, um die Variablen für die Ausgabe zu 
            maskieren.
        </para>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.options">
        <title>Options</title>

        <para>
            <code>Zend_View</code> has several options that may be set to
            configure the behaviour of your view scripts.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>basePath:</code> indicate a base path from which to set
                    the script, helper, and filter path. It assumes a directory
                    structure of:
                </para>

                <programlisting role="php"><![CDATA[
base/path/
    helpers/
    filters/
    scripts/
]]]></programlisting>

                <para>
                    This may be set via <code>setBasePath()</code>,
                    <code>addBasePath()</code>, or the <code>basePath</code>
                    option to the constructor.
                </para>
            </listitem>

            <listitem><para>
                <code>encoding:</code> indicate the character encoding to use
                with <code>htmlentities()</code>,
                <code>htmlspecialchars()</code>, and other operations. Defaults
                to ISO-8859-1 (latin1). May be set via
                <code>setEncoding()</code> or the <code>encoding</code> option
                to the constructor.
            </para></listitem>

            <listitem><para>
                <code>escape:</code> indicate a callback to be used by
                <code>escape()</code>. May be set via <code>setEscape()</code>
                or the <code>escape</code> option to the constructor.
            </para></listitem>

            <listitem><para>
                <code>filter:</code> indicate a filter to use after rendering
                a view script. May be set via <code>setFilter()</code>,
                <code>addFilter()</code>, or the <code>filter</code> option to
                the constructor.
            </para></listitem>

            <listitem><para>
                <code>strictVars:</code> force <code>Zend_View</code> to emit
                notices and warnings when uninitialized view variables are
                accessed. This may be set by calling
                <code>strictVars(true)</code> or passing the
                <code>strictVars</code> option to the constructor.
            </para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.view.introduction.accessors">
        <title>Utility Accessors</title>

        <para>
            Typically, you'll only ever need to call on <code>assign()</code>,
            <code>render()</code>, or one of the methods for setting/adding
            filter, helper, and script paths. However, if you wish to extend
            <code>Zend_View</code> yourself, or need access to some of its
            internals, a number of accessors exist:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>getVars()</code> will return all assigned variables.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearVars()</code> will clear all assigned variables;
                    useful when you wish to re-use a view object, but want to
                    control what variables are available..
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getScriptPath($script)</code> will retrieve the
                    resolved path to a given view script.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getScriptPaths()</code> will retrieve all registered
                    script paths.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHelperPath($helper)</code> will retrieve the
                    resolved path to the named helper class.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHelperPaths()</code> will retrieve all registered
                    helper paths.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilterPath($filter)</code> will retrieve the
                    resolved path to the named filter class.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilterPaths()</code> will retrieve all registered
                    filter paths.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->