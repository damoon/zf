<sect1 id="zend.controller.migration">
    <title>Migrieren von früheren Versionen</title>

    <para>
        Die API der MVC Komponenten hat sich mit der Zeit verändert. Wer das Zend Framework bereits 
        in einer früheren Version verwendet hat, folgt dem Leitfaden unten, damit die Skripte die
        neue Archtitekur verwenden..
    </para>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Migration von 0.2.0 oder früher nach 0.6.0</title>

        <para>
            Die grundlegende Verwendung der MVC Komponenten hat sich nicht verändert; man kann immer
            noch das folgende machen:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- Erstelle einen Router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- Setze ihn im Controller -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- Setze da Controller Verzeichnis und starte die Verarbeitung -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            Dennoch sollte man wegen des Hinzufügens des 
            <xref linkend="zend.controller.overview.response" /> die letzte Zeile des vorherigen
            Beispiels wie folgt ändern:
        </para>

        <programlisting role="php"><![CDATA[
echo $ctrl->dispatch();
]]></programlisting>
        
        <para>
            Wir empfehlen die Verwendung des Response Objektes, um Inhalte und Header zu sammeln.
            Dies erlaubt den flexibleren Wechsel von Ausgabeformaten (z.B. JSON oder XML statt 
            XHTML) in deiner Applikation. Das Ausgeben des Rückgabewertes von 
            <code>dispatch()</code> stellt sicher, dass alle an das Response Objekt übergebenen 
            Inhalte und Header ausgegeben werden.
        </para>

        <para>
            Es gibt viele weitere zusätzliche Funktionalitäten, welche die vorherige API erweitern. 
            Diese sind in der Dokumentation aufgeführt.
        </para>

        <para>
            Die meisten Änderungen, die man beachten muss, betreffen das Erweitern der diversen
            Komponenten. Die wichtigsten davon sind:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                akzeptiert und gibt nun ein <xref linkend="zend.controller.overview.request" />
                Objekt anstelle eines Dispatcher Token zurück.
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                akzeptiert und gibt nun ein <xref linkend="zend.controller.overview.request" />
                Objekt anstelle eines Dispatcher Token zurück.
            </para></listitem>

            <listitem>
                <para><code>Zend_Controller_Action</code> Änderungen beinhalten:</para>

                <itemizedlist>
                    <listitem><para>
                        Der Konstruktur akzeptiert nun genau drei Argumente, 
                        <code>Zend_Controller_Request_Abstract $request</code>, 
                        <code>Zend_Controller_Response_Abstract $response</code>, und 
                        <code>array $params (optional)</code>.
                        <code>Zend_Controller_Action::__construct()</code> verwendet diese, um die
                        Request, Response und invokeArgs Eigenschaften für das Objekt zu setzen, und
                        beim Überschreiben des Konstrukturs sollte man dies ebenfalls tun. Besser 
                        ist es, die <code>init()</code> Methode zu verwenden, um jedwede 
                        Instanzkonfiguration durchzuführen, weil diese Methode als letzte Methode 
                        des Konstrukturs aufgerufen wird.
                    </para></listitem>

                    <listitem><para>
                        <code>run()</code> ist nicht länger als final definiert, wird aber auch 
                        nicht länger vom Front Controller verwendet; sein einziger Zweck ist, dass
                        die Klasse auch als Page Controller verwendet werden kann. Sie nimmt nun 
                        zwei optionale Argument an, ein 
                        <code>Zend_Controller_Request_Abstract $request</code> 
                        und ein <code>Zend_Controller_Response_Abstract $response</code>.
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> muss nicht mehr länger definiert werden, aber 
                        wird als Standardaktion empfohlen. Dies erlaubt dem RewriteRouter und den
                        Action Controllern andere Standardaktionsmethoden zu definieren.
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> sollte überschrieben werden, um jede undefinierte 
                        Aktion automatisch verarbeiten zu können.
                    </para></listitem>

                    <listitem><para>
                        <code>_redirect()</code> nimmt nun ein optionales zweites Argument entgegen,
                        den HTTP Code, der mit dem Redirect zurückgegeben werden soll, und ein 
                        optionales drittes Argument <code>$prependBase</code>, das angibt, dass die 
                        im Request Objekt registrierte Basis URL der übergebenen URL voran gestellt
                        werden soll.
                    </para></listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> wurde entfernt. 
                Stattdessen soll <code>Zend_Controller_Front::setBaseUrl()</code> verwendet werden
                (oder Zend_Controller_Request_Http::setBaseUrl(), wenn die Request Klasse verwendet 
                wird).
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Plugin_Interface</code> wurde durch 
                by <code>Zend_Controller_Plugin_Abstract</code> ersetzt. Alle Methoden nehmen nun
                ein <xref linkend="zend.controller.overview.request" /> Objekt statt eines 
                Dispatcher Tokens entgegen bzw. geben es zurück.
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->