<sect1 id="zend.search.lucene.query-language">
    <title>Abfragesprache</title>

    <para>
        Java Lucene und Zend_Search_Lucene bieten eine sehr mächtige Abfragesprache an.
    </para>

    <para>
        Meistens ist es das selbe, hat aber ein paar Unterschiede, welche anbei erklärt werden.
    </para>

    <para>
        Die komplette Java Lucene Syntax Dokumentation der Abfragesprache kann
        <ulink url="http://lucene.apache.org/java/2_0_0/queryparsersyntax.html">hier</ulink> gefunden werden.
    </para>

    <sect2 id="zend.search.lucene.query-language.terms">
        <title>Ausdrücke</title>

        <para>
            Eine Abfrage wird in Ausdrücke und Operatoren zerteilt. Es gibt drei Arten von Ausdrücken:
            Einzelne Ausdrücke, Phrasen und Unterabfragen.
        </para>
        <para>
            Ein einzelner Ausdruck ist ein einzelnes Wort wie "Test" oder "Hallo".
        </para>
        <para>
            Eine Phrase ist eine Gruppe von Wörtern die von doppelten Hochkommata umgeben sind wie "Hallo Dolly".
        </para>
        <para>
            Eine Unterabfrage ist eine Abfrage die von Klammern umgeben ist wie "(Hallo Dolly)".
        </para>
        <para>
            Mehrere Ausdrücke können miteinander kombiniert werden mithilfe eines boolschen Operators um eine
            komplexere Abfrage zu formen (siehe anbei).
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.fields">
        <title>Felder</title>

        <para>
            Lucene unterstützt Daten in Feldern. Wenn eine Suche durchgeführt wird kann man entweder ein Feld
            spezifizieren, oder ein Standardfeld verwenden. Der Name des Feldes hängt von den indizierten Daten
            ab und das Standardfeld wird durch aktuelle Einstellungen definiert.
        </para>
        <para>
            Der erste und hauptsächliche Unterschied zu Java Lucene ist der das Ausdrücke standardmäßig
            über <emphasis>alle Felder</emphasis> gesucht werden.
        </para>
        <para>
            Es gibt zwei statishce Methoden in der Zend_Search_Lucene Klasse die das das Arbeiten mit diesen
            Einstellungen erlauben:
        </para>
        <programlisting role="php"><![CDATA[<?php
$defaultSearchField = Zend_Search_Lucene::getDefaultSearchField();
...
Zend_Search_Lucene::setDefaultSearchField('contents');]]>
        </programlisting>

        <para>
            <code>null</code> Wert heißt, das die Suche über alle Felder durchgeführt wird. Das ist die
            Standardeinstellung.
        </para>
        <para>
            Felder können spezifiziert werden durch die Angabe des Feldnamens gefolgt von einem Doppelpunkt ":"
            und danach den Ausdruck nach dem gesucht wird.
        </para>
        <para>
            Als Beispiel nehmen wir an das ein Lucene Index zwei Felder enthält, title und text. Text ist der
            Standardwert. Wenn man das "Der richtige Weg" benannte Dokument finden will welches den Text
            "gehe nicht diesen Weg" enthält, geht das mit:
        </para>
        <programlisting role="querystring"><![CDATA[title:"Der richtige Weg" AND text:go]]>
        </programlisting>
        <para>
            oder
        </para>
        <programlisting role="querystring"><![CDATA[title:"Mach es richtig" AND go]]>
        </programlisting>
        <para>
            Wenn "text" das Standardfeld ist, wird der Feld Indikator nicht benötigt.
        </para>

        <para>
            Beachte: Das Feld nur nur für den Ausdruck, die Phrase oder die Unterabfrage gültig die direkt
            danach folgt, sodas die Abfrage
            <programlisting role="querystring"><![CDATA[title:Mach es richtig]]>
            </programlisting>
            nur "Mach" im title Feld finden wird. Es findet "es" und "richtig" im Standardfeld, wenn das
            Standardfeld gesetzt ist, oder in allen indizierten Felder, wenn das Standardfeld auf
            <code>null</code> gesetzt ist.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.wildcard">
        <title>Wildcards</title>
        <para>
            Lucene unterstützt Einzelzeichen und Mehrfachzeichen Suchen mit Wildcards in einzelnen Ausdrücken
            (nicht innerhalb von Phrasenabfragen).
        </para>

        <para>
            Um eine Einzelzeichen Wildcardsuche durchzuführen kann das "?" Zeichen verwendet werden.
        </para>

        <para>
            Um eine Mehrzeichen Wildcardsuche durchzuführen kann das "*" Zeichen verwendet werden.
        </para>

        <para>
            Die Einzelzeichen Wildcardsuche schaut nach Ausdrücken die dem ausgetauschten Einzelzeichen
            entsprechen. Um, zum Beispiel, nach "Text" oder "Test" zu suchen kann die folgende Suche
            verwendet werden:
            <programlisting role="querystring"><![CDATA[Te?t]]>
            </programlisting>
        </para>

        <para>
            Mehrzeichen Wildcardsuche sucht nach 0 oder mehr Zeichen. Um, zum Beispiel, nach Test, Tests oder
            Tester zu suchen, kann die folgende Suche verwendet werden: 
            <programlisting role="querystring"><![CDATA[Test*]]>
            </programlisting>
        </para>

        <para>
            Es können "?", "*" oder beide an jeder Stelle des Ausdrucks verwendet werden:
            <programlisting role="querystring"><![CDATA[*schrei?t*]]>
            </programlisting>
            Sucht nach "schreibt", "schreibtisch", "beschreibt", "schreist" und so weiter.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.modifiers">
        <title>Ausdrücke verändern</title>

        <para>
            Lucene unterstützt die Veränderung von Abfrageausdrücken und bietet damit ein beites Spektrum von
            Suchoptionen.
        </para>
        <para>
            Zend_Search_Lucene unterstützt den "~" Modifikator aktuell nur für Phrasen
            <footnote>
                <para>
                    "~" für Ausdrücke wird für Fuzzy Suche verwendet, aber die Fuzzy Suche von Abfragen wird bis
                    dato noch nicht unterstützt.
                </para>
            </footnote>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.range">
        <title>Bereichs Suchen</title>

        <para>
            Bereichsabfragen erlauben es einem passende Dokumente zu finden dessen Werte der Feld(er) zwischen
            der unteren und oberen Grenze sind die durch die Bereichsabfrage spezifiziert wurden.
            Bereichsabfragen können inklusive oder exklusive der oberen und unteren Grenze sein. Sortierungen
            werden lexikalisch durchgeführt.
            <programlisting role="querystring"><![CDATA[mod_date:[20020101 TO 20030101]]]>
            </programlisting>
            Das wird Dokumente finden dessen lod_date Felder Werte zwischen 20020101 und 20030101 inklusive
            haben. Es ist zu beachten das Bereichsabfragen nicht für Datumsfelder reserviert sind.
            Bereichsabfragen können auch mit nicht-datums Felder verwendet werden:
            <programlisting role="querystring"><![CDATA[title:{Aida TO Carmen}]]>
            </programlisting>
            Das wird alle Dokumente finden dessen Titel zwischen Aida und Carmen liegen, aber ohne Aida und
            Carmen.
        </para>
        <para>
            Bereichsabfragen inklusive, werden durch eine eckige Klammer abgegrenzt. Bereichsabfragen exklusive
            werden durch geschlungene Klammern abgegrenzt.
        </para>
        <para>
            Wenn kein Feld spezifiziert wurde sucht Zend_Search_Lucene nach spezifizierten Intervallen in allen
            Feldern.
            <programlisting role="querystring"><![CDATA[{Aida TO Carmen}]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.proximity-search">
        <title>Angenäherte Suchen</title>

        <para>
            Lucene unterstützt das Finden von Wörtern die eine spezifizierte Distanz weit weg sind. Um eine
            angenäherte Suche durchzuführen muß das Tilde, "~", Symbol am Ende der Phrase verwendet werden.
            Um zum Beispiel nach "Zend" und "Framework" innerhalb von 10 Wörtern zueinander in einem Dokument
            zu suchen kann die folgende Suche verwendet werden:
            <programlisting role="querystring"><![CDATA["Zend Framework"~10]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.boosting">
        <title>Einen Ausdruck schneller machen</title>

        <para>
            Java Lucene und Zend_Search_Lucene bieten einen Level der Relevanz von passenden Dokumenten basierend
            auf den gefundenen Ausdrücken. Um eine Ausdruck schneller zumachen kann das Karet, "^", Symbol mit
            einem Boost Faktor (einer Zahl) am Ende des Ausdrucks nach dem gesucht wird, verwendet werden. Je
            höher Boost Faktor ist, desdo relevanter wird der Ausdruck werden.
        </para>
        <para>
            Das boosten erlaubt einem die Kontrolle der Relevanz eines Dokuments durch das boosten seiner
            Ausdrücke. Wenn man zum Beispiel nach
            <programlisting role="querystring"><![CDATA[PHP framework]]>
            </programlisting>
            sucht und will das der Ausdruck "PHP" mehr Relevanz hat, kann er durch Verwendung des ^ Symbols
            zusammen mit einem Boost Faktor beim Ausdruck geboostet werden. Man würde zum Beispiel folgendes
            angeben:
            <programlisting role="querystring"><![CDATA[PHP^4 framework]]>
            </programlisting>
            Das macht Dokumente in denen der Ausdruck PHP vorkommt relevanter. Man kann genauso Phrasenausdrücke
            boosten und Unterabfragen wie im Beispiel gezeigt:
            <programlisting role="querystring"><![CDATA["PHP framework"^4 "Zend Framework"]]>
            </programlisting>
            Standardwert ist der Boost Faktor 1. Auch wenn der Boost Faktor positiv sein muß, kann er kleiner
            als 1 sein (z.B. 0.2)
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.boolean">
        <title>Boolsche Operatoren</title>

        <para>
            Boolsche Operatoren erlauben es Ausdrücke durch logische Operatoren zu kombinieren. Lucene
            unterstützt AND, "+", OR, NOT und "-" als boolsche Operatoren. In Java Lucene müssen alle boolschen
            Operatoren GROßGESCHRIEBEN werden. In Zend_Search_Lucene nicht.
        </para>

        <para>
            AND, OR, und NOT Operatoren und "+", "-" definieren zwei Stile um boolsche Abfragen zu erstellen.
            Im Gegensatz zu Java Lucene erlaubt es Zend_Search_Lucene nicht diese zwei Stile zu mischen.
        </para>
        <para>
            Wenn der AND/OR/NOT Stil verwendet wird dann muß der AND/OR Operator zwischen allen Abfrageausdrücken
            vorhanden sein. Jedem Ausdruck kann auch ein NOT Operator vorangestellt werden. Der AND Operator hat
            eine höhere Präzedenz als OR. Das unterscheidet sich vom Verhalten von Java Lucene.
        </para>

        <sect3 id="zend.search.lucene.query-language.boolean.and">
            <title>AND</title>
            <para>
                Der AND Operator bedeutet das alle Ausdrücke der "AND Gruppe" im Dokument passen müssen.
            </para>
            <para>
                Um nach Dokumenten zu Suchen die "PHP Framework" und "Zend Framework" enthalten kann die
                folgende Abfrage verwendet werden:
                <programlisting role="querystring"><![CDATA["PHP Framework" AND "Zend Framework"]]>
                </programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.or">
            <title>OR</title>
            <para>
                Der OR Operator teilt Abfragen in verschiedene optionale Teile.
            </para>
            <para>
                Um nach Dokumenten zu Suchen die "PHP Framework" oder "Zend Framework" enthalten kann die
                folgende Abfrage verwendet werden:
                <programlisting role="querystring"><![CDATA["PHP Framework" OR "Zend Framework"]]>
                </programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.not">
            <title>NOT</title>
            <para>
                Der NOT Operator scheidet Dokumente aus die den Ausdruck nach NOT enthalten. Aber eine
                "AND Gruppe" die nur Ausdrücke mit NOT Operatoren enthält, gibt ein leeres Ergebnis zurück
                statt einem kompletten Set von indizierten Dokumenten.
            </para>
            <para>
                Um nach Dokumenten zu Suchen die "PHP Framework" enthalten aber "Zend Framework" nicht kann die
                folgende Abfrage verwendet werden:
                <programlisting role="querystring"><![CDATA["PHP Framework" AND NOT "Zend Framework"]]>
                </programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.other-form">
            <title>&amp;&amp;, ||, und ! Operatoren</title>
            <para>
                &amp;&amp;, ||, und ! können statt den AND, OR und NOT Operatoren verwendet werden.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.plus">
            <title>+</title>
            <para>
                Der "+" oder benötigende Operator erfordert das der Ausdruck nach dem "+" Symbol im passenden
                Dokument vorhanden ist.
            </para>
            <para>
                Um nach Dokumenten zu Suchen die "Zend" enthalten müssen und "Framework" enthalten können, kann
                die folgende Abfrage verwendet werden:
                <programlisting role="querystring"><![CDATA[+Zend Framework]]>
                </programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.minus">
            <title>-</title>
            <para>
                Der "-" oder ausschließende Operator schließt Dokumente aus die den ausdruck nach dem "-"
                Symbol enthalten.
            </para>
            <para>
                Um nach Dokumenten zu Suchen die "PHP Framework" enthalten aber "Zend Framework" nicht, kann
                die folgende Abfrage verwendet werden:
                <programlisting role="querystring"><![CDATA["PHP Framework" -"Zend Framework"]]>
                </programlisting>
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.query-language.boolean.no-operator">
            <title>kein Operator</title>
            <para>
                Wenn kein Operator verwendet wird, das wird das Verhalten durch den "standardmäßigen boolschen
                Operator" bestimmt.
            </para>
            <para>
                Das ist standardmäßig <code>OR</code>.
            </para>
            <para>
                Das bedeutet das der Ausdruck optional ist. Er kann oder kann nicht innerhalb des Dokuments
                enthalten sein, aber Dokumenten mit diesem Ausdruck haben einen Höheren Wert.
            </para>
            <para>
                Um nach Dokumenten zu Suchen die "PHP Framework" benötigen und "Zend Framework" enthalten
                können kann die folgende Abfrage verwendet werden:
                <programlisting role="querystring"><![CDATA[+"PHP Framework" "Zend Framework"]]>
                </programlisting>
            </para>

            <para>
                Der standardmäßige boolsche Operator kann mit den
                <code>Zend_Search_Lucene_Search_QueryParser::setDefaultOperator($operator)</code> und
                <code>Zend_Search_Lucene_Search_QueryParser::getDefaultOperator()</code> Methoden gesetzt und
                geholt werden.
            </para>
            <para>
                Diese Methoden arbeiten mit den <code>Zend_Search_Lucene_Search_QueryParser::B_AND</code> und
                <code>Zend_Search_Lucene_Search_QueryParser::B_OR</code> Konstanten.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.grouping">
        <title>Gruppieren</title>

        <para>
            Java Lucene und Zend_Search_Lucene unterstützen die Verwendung von Klammern um Fälle zu gruppieren
            und Unterabfragen zu erstellen. Das kann nützlich sein wenn man die boolsche Logik für eine
            Abfrage kontrollieren will, oder unterschiedliche Unterabfragen mischen will:
            <programlisting role="querystring"><![CDATA[+(Framework OR Bibliothek) +php]]>
            </programlisting>
            Zend_Search_Lucene unterstützt Unterabfragen jeglichen Levels.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.field-grouping">
        <title>Felder gruppieren</title>

        <para>
            Lucene unterstützt die Verwendung von Klammern um mehrere Fälle in ein einzelnes Feld zu gruppieren.
        </para>
        <para>
            Um nach einem Titel zu suchen die sowohl das Wort "Rückkehr" und die Phrase "rosaroter Panther"
            kann die folgende Abfrage verwendet werden:
            <programlisting role="querystring"><![CDATA[title:(+Rückkehr +"rosaroter Panther")]]>
            </programlisting>
            Zend_Search_Lucene unterstützt Unterabfragen jeglichen Levels.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.query-language.escaping">
        <title>Escapen von speziellen Zeichen</title>

        <para>
            Lucene unterstützt das Escapen von speziellen Zeichen die Teil der Abfragesyntax sind. Die aktuelle
            Liste der speziellen Zeichen ist:
        </para>
        <para>
            + - &amp;&amp; || ! ( ) { } [ ] ^ " ~ * ? : \
        </para>
        <para>
            + und - in einem einzelnen Ausdruck werden als normale Zeichen behandelt.
        </para>
        <para>
            Um diese Zeichen zu escapen muß \ vor diesen Zeichen verwendet werden. Um zum Beispiel nach
            (1+1):2 zu suchen kann die folgende Abfrage verwendet werden:
            <programlisting role="querystring"><![CDATA[\(1\+1\)\:2]]>
            </programlisting>
        </para>
    </sect2>

</sect1>
