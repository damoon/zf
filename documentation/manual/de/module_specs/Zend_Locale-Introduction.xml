<sect1 id="zend.locale.introduction">

    <title>Einführung</title>

    <para>
        <code>Zend_Locale</code> ist die Antwort des Zend Frameworks auf die Frage: "Wie kann man eine Anwendung für die
        ganze Welt nutzbar machen?". Die meisten würden sagen, "Das ist einfach, lass uns einfach alle Ausgaben in 
        mehrere Sprachen übersetzen!".
        Jedoch reichen einfache Übersetzungstabellen, die Phrasen einer Sprache, einer anderen Sprache zuordnen, nicht aus.
        Unterschiedliche Länder haben unterschiedliche Normen bezüglich Vor- und Nachnamen, Anreden, Zahlenformaten, 
        Zeit- und Datumsformaten, Währungen und so weiter.
    </para>

    <para>
        Wir brauchen
        <ulink url="http://de.wikipedia.org/wiki/L10n">Lokalisierung (Localization)</ulink>
        und entsprechend
        <ulink url="http://de.wikipedia.org/wiki/Internationalisierung_%28Softwareentwicklung%29">Internationalisierung
        (Internationalization)</ulink>.
        Beide Begriffe werden oft mit <code>L10N</code> und <code>I18N</code> abgekürzt. Dabei steht die 
        Internationalisierung für das Vorbereiten der gesamten Anwendung für die länderunabhängige Nutzung und die
        Lokalisierung für die länderspezifischen Konfigurationen, wie z.B. Zeitangaben, Währungen und Zahlenformate, sowie
        die Übersetzung der benutzten Phrasen in die spezifische Sprache. Somit stellt die <code>Internationalisierung</code>
        das Gerüst dar und die <code>Lokalisierung</code> die länderspezifischen Angaben und Übersetzungen.
        Das Zend Framework bietet zur Unterstützung der Internationalisierung folgende Komponenten, die miteinander
        kombiniert werden können: Zend_Locale, Zend_Date, Zend_Measure, Zend_Translate, Zend_Currency, und
        Zend_TimeSync.
    </para>

    <sect2 id="zend.locale.whatislocalization">

        <title>Was ist die Lokalisierung?</title>

        <para>
            Lokalisierung bedeutet, dass eine Anwendung (oder Website) von verschiedenen Benutzern benutzt werden kann,
            die verschiedene Sprachen sprechen. Aber wie angedeutet bedeutet die Lokalisierung mehr als nur das
            Übersetzen der einzelnen Strings. Es beinhaltet
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <code>Zend_Locale</code> - Die Verwaltung von <ulink url="#zend.locale.whatis">Locales
                    </ulink>. Dient auch als Basis für andere ZF Komponenten.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Translate</code> - Übersetzung von Strings.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Date</code> - Lokalisierung von Zeit- und Datumsangaben.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Calendar</code> - Kalenderlokalisierung (Unterstützung von nicht-Gregorianischen
                    Kalendersystemen).
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Currency</code> - Lokalisierung von Währungen
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Locale_Format</code> - Lokalisierung von Zahlen(-formaten).
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>Zend_Locale_Data</code> - Beziehen von lokalisierten Standard-Strings, wie Ländernamen,
                    Sprachennamen und weiteren <ulink url="http://unicode.org/cldr/">Daten vom CLDR</ulink>
                    .
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>TODO</code> - Localization of collations
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.locale.whatis">

        <title>
            <ulink url="http://de.wikipedia.org/wiki/Locale">Was ist eine Locale?</ulink>
        </title>

        <para>
            Jeder Benutzer nutzt Locales, auch wenn er es selber nicht weiss. Anwendungen die nicht explizit von der
            Lokalisierung gebrauch machen, nutzen dennoch eine Lokale, und zwar die des Autors. Wenn eine Klasse oder
            Funktion von der Lokalisierung gebrauch macht, dann sagen wir, sie ist <code>locale-aware</code>
            (Locale-bewusst). Aber wie kann man dem Code mitteilen, welche Lokalisierung er benutzen soll?
        </para>

        <para>
            Ein Locale-String ermöglicht über <code>Zend_Locale</code> und dessen Unterklassen den Zugriff auf
            Informationen über die Sprache und die Region des Benutzers. Entsprechende Formate, Normen und 
            Umwandlungsschemata können aus diesen Informationen abgeleitet werden.
        </para>

    </sect2>

    <sect2 id="zend.locale.representation">

        <title>Wie werden Locales dargestellt?</title>

        <para>
            Locale-Strings bestehen aus zwei Teilen: Aus der Sprache des Benutzers und dessen Landes oder Region (z.B.
            Deutsch wird auch in Österreich gesprochen). Die vom Zend Framework benutzten Locale-Strings sind international
            standardisierte Abkürzungen der Sprache und der Region, die in der Form <code>sprache_REGION</code> notiert
            werden. Beide Teile, die Sprache und die Region, werden jeweils mit zwei Buchstaben (ASCII-Zeichen) abgekürzt.
        </para>

        <para>
            Ein Benutzer aus Deutschland würde die Sprache <code>Deutsch</code> und die Region <code>Deutschland</code>
            erwarten, was durch den Locale-String "de_DE" repräsentiert werden kann. Ein Benutzer aus den USA würde die
            Sprache <code>Englisch</code> mit der Region <code>USA</code> bevorzugen, was dem Locale-String "en_US" enspricht.
            
            Die Locales, die im Zend Framework verwenden werden können, sind unter anderem aus der 
            <ulink url="http://unicode.org/cldr/data/diff/supplemental/languages_and_territories.html">Liste der vordefinierten
            Sparach- und Regionskombinationen</ulink> zu entnehmen.
        </para>

        <example>
            <title>Bestimmte Locale festlegen</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend_Locale');
$locale = new Zend_Locale('de_DE'); // Deutsche Sprache _ Deutschland
?>]]></programlisting>
        </example>

        <para>
            Ein Deutscher Benutzer in Amerika könnte die Sprache <code>Deutsch</code> und die Region <code>USA</code> erwarten.
            Solche nicht standardisierten Kombinationen werden nicht direkt unterstützt. Stattdessen wird bei einer ungültigen
            Zusammensetzung der Regions-Teil abgeschnitten und nur noch mit dem Sprach-Teil weitergearbeitet. So wird zum
            Beispiel aus "de_IS" nur noch "de" und aus "xh_RU" nur noch "xh". Die Gültigkeit von diesen Kombinationen ist
            zusätzlich davon abhängig, welche Daten verarbeitet werden. So kann es sein, dass eine Kombination für die Verarbeitung
            von Zeitangaben gültig ist, für die Verarbeitung von Währungsangaben aber beschnitten wird.
            Sollte der Sprach-Teil eine ungültige Bezeichnung haben (z.B. "zz_DE"), wird eine Standard-"root"-Locale verwendet.
            Die "root" Locale enthält international bekannte Standardformate für Uhrzeiten, Daten, Zahlen, Währungen usw.
        </para>

        <para>
            Zu beachten ist, dass sich im Laufe der Zeit Änderungen in einzelnen Zeitzonen ergeben haben, die vom Zend Framework
            nicht beachtet werden können. Eine <ulink url="http://www.statoids.com/tus.html">historische Auflistung</ulink> zeigt
            z.B., dass in den USA Änderungen an der Sommerzeit vorgenommen wurden und sogar Regionen in andere Zeitzonen versetzt
            worden sind.
            Da nicht alle historischen Änderungen aller Länder der Welt beachtet werden können, werden mathemathische Datums- und
            Zeitoperationen vom Zend Framework immer korrekt nach den aktuellen Sommerzeit- und Zeitzonenzuordnungen berechnet.
        </para>

    </sect2>

    <sect2 id="zend.locale.selection">

        <title>Die richtige Locale auswählen</title>

        <para>
            In den meisten Situationen wird mit <code>new Zend_Locale()</code> automatisch die korrekte Locale gewählt, die
            im Browser des Benutzers als bevorzugt eingestellt ist. Es ist aber auch möglich die bevorzugte Locale des Servers
            zu ermitteln, indem man die Instanz mit <code>new Zend_Locale(Zend_Locale::ENVIRONMENT)</code> bezieht.
        </para>

        <example>
            <title>Automatische Bestimmung der Locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
$locale  = new Zend_Locale();
$locale1 = new Zend_Locale(Zend_Locale::BROWSER);     // Standardverhalten, entspicht der vorherigen Zeile
$locale2 = new Zend_Locale(Zend_Locale::ENVIRONMENT); // Bevorzuge die Servereinstellung
$locale3 = new Zend_Locale(Zend_Locale::FRAMEWORK);   // Bevorzuge die Einstellung der Framework-Anwendung
?>]]></programlisting>
        </example>

        <para>
            Der Suchalgorithmus zur automatischen Bestimmung der Locale von <code>Zend_Locale</code> benutzt drei Quellen:
            <orderedlist>
                <listitem>
                    <para>
                        const <code>Zend_Locale::BROWSER</code> - Der Webbrowser des Benutzers liefert bei jeder Anfrage
                        Informationen über bevorzugte Locales des Benutzers, die von PHP in der globalen Variable 
                        <code>HTTP_ACCEPT_LANGUAGE</code> zur Verfügung gestellt werden. Wird keine akzeptable Locale
                        gefunden, so wird versucht über die <code>ENVIRONMENT</code> und letztlich über die 
                        <code>FRAMEWORK</code> Einstellung eine brauchbare Locale zu ermitteln.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        const <code>Zend_Locale::ENVIRONMENT</code> - PHP stellt die vom Server bevorzugte Locale durch die
                        interne Funktion <code>setlocale()</code> zur Verfügung. Wird dort keine brauchbare Locale gefunden,
                        so wird versucht über die <code>FRAMEWORK</code> und letztlich über die <code>BROWSER</code> 
                        Einstellung eine brauchbare Locale zu ermitteln.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        const <code>Zend_Locale::FRAMEWORK</code> - Sobald das Zend Framework einen standardisierten Weg
                        bietet, Vorgabewerte für Komponenten zu setzen (derzeit noch in Arbeit), wird eine Locale anhand eines
                        Vorgabewertes gewählt. Wird keine brauchbare Locale gefunden, so wird versucht über die 
                        <code>ENVIRONMENT</code> und letztlich über die <code>BROWSER</code> Einstellung eine brauchbare 
                        Locale zu ermitteln.
                    </para>
                </listitem>
            </orderedlist>
        </para>

    </sect2>

    <sect2 id="zend.locale.interoperate">

        <title>ZF Locale-Aware Klassen</title>

        <para>
            Im Zend Framework, nutzen alle locale-aware Klassen <code>Zend_Locale</code>, um die benötigte Locale
            automatisch zu ermitteln, so wie es oben beschrieben wurde. Wird z.B. ein Datum mittels <code>Zend_Date</code>
            ohne die Angabe einer Locale erstellt, so wird das erstellte Objekt eine Locale benutzen, die der Browser des
            Benutzers als bevorzugt anzeigt.
        </para>

        <example>
            <title>Zend_Date benutzt standardmäßig die bevorzugte Locale des Benutzers</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
$date = new Zend_Date('2006', Zend_Date::YEAR);
?>]]></programlisting>
        </example>

        <para>
            Dieses Verhalten kann übergangen werden, indem man den locale-aware Klassen eine vorgegebene Locale als drittes
            Argument an den Konstruktor übergibt. In dem Fall wird dann die übergebene Locale benutzt und diese nicht mehr 
            automatisch ermittelt.
        </para>

        <example>
            <title>Vorgeben einer Locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Measure.php';

$deLocale = new Zend_Locale('de_DE');
$date = new Zend_Date('2006', Zend_Date::YEAR, $deLocale);
$temp = new Zend_Measure('37,7', Zend_Measure::TEMPERATURE, $deLocale);
?>]]></programlisting>
        </example>

        <para>
            Wenn feststeht, dass viele Objekte eine gemeinsame Locale benutzen werden, so empfiehlt es sich diese
            explizit mit anzugeben, um den Overhead beim häufigen ermitteln der Standardlocale zu minimieren.
        </para>

        <example>
            <title>Performanceoptimierung durch das einmalige Setzen der verwendeten Locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';
require_once 'Zend/Measure.php';

$locale = new Zend_Locale();
$date = new Zend_Date('2006', Zend_Date::YEAR, $locale);
$temp = new Zend_Measure('100,10', Zend_Measure::TEMPERATURE, $locale);
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.formatoptions">

        <title>Zend_Locale_Format::setOptions(array $options)</title>

        <para>
            The 'precision' option of a value is used to truncate or stretch extra digits. A value of '-1' disables
            modification of the number of digits in the fractional part of the value.
            The 'locale' option helps when parsing numbers and dates using separators and month names.
            The date format 'type' option selects between CLDR/ISO date format specifier tokens and PHP's date() tokens.
            The 'fixdate' option enables or disables heuristics that attempt to correct invalid dates.
            The 'format' option can be used to specify a default date format string, but beware of using getDate(),
            isDate(), getTime(), and isTime() after using setOptions() with a 'format'.  To use these four methods with
            the default date format for a locale, use array('format' => null, 'locale' => $locale) for their options.
        </para>

        <example>
            <title>Dates default to correct locale of web users</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';
Zend_Locale_Format::setOptions('locale' => 'en_US', 'fixdate' => true, 'type' => 'php');
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
