<sect1 id="zend.mail.introduction">
    <title>Einführung</title>
    <para>
        <code>Zend_Mail</code> stellt verallgemeinerte Funktionalitäten zum Verfassen und Senden 
        sowohl von Text E-Mails als auch von MIME-konformen mehrteiligen E-Mails bereit. Mails 
        können mit <code>Zend_Mail</code> durch die in PHP integrierte 
        <ulink url="http://php.net/mail"><code>mail()</code></ulink> Funktion oder direkt über
        eine SMTP Verbindung versandt werden.
    </para>
    <example>
        <title>Einfache E-Mail mit Zend_Mail</title>
        <para>
            Eine einfache E-Mail besteht aus einigen Empfängern, einem Betreff, einem Hauptteil und
            einem Versender. Um solch eine Mail mit Hilfe der 
            <ulink url="http://php.net/mail"><code>mail()</code></ulink> PHP Funktion zu versenden,
            musst Du folgendes tun:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('Dies ist der Text dieser E-Mail.');
$mail->setFrom('somebody@example.com', 'Ein Versender');
$mail->addTo('somebody_else@example.com', 'Ein Empfänger');
$mail->setSubject('TestBetreff');
$mail->send();
?>]]>       </programlisting>
       </para>
    </example>
    <note>
        Um eine E-Mail mit <code>Zend_Mail</code> zu versenden, musst du mindestens einen Empfänger,
        einen Versender (z.B., mit <code>setFrom()</code>) und einen Nachrichtentext (Text und/oder 
        HTML) angeben. 
    </note>
    <para>
        Für die meisten Mailattribute gibt es "Get" Methoden, um die im Mailobjekt abgelegten 
        Informationen zu lesen. Für weitere Einzelheiten wende dich an die API Dokumentation. Eine
        besondere Methode ist <code>getRecipients()</code>. Sie gibt ein Array mit allen E-Mail 
        Adressen der Empfänger zurück, die vor dem Methodenaufruf hinzugefügt worden sind.  
    </para>
    <para>
        Aus Sicherheitsgründen filtert <code>Zend_Mail</code> alle Felder des Nachrichtenkopfs, um
        eine "Header Injection" mittels Zeilenvorschubzeichen (<code>\n</code>) zu verhindern.
    </para>
</sect1>
<sect1 id="zend.mail.sending">
    <title>Versand über SMTP</title>
    <para>
        Um eine E-Mail über SMTP zu versenden, muss <code>Zend_Mail_Transport_Smtp</code> erstellt 
        und in <code>Zend_Mail</code> registriert werden, bevor die <code>send()</code> Methode 
        aufgerufen wird. Für alle verbleibenden Aufrufe von <code>Zend_Mail::send()</code> im 
        aktuellen Skript wird dann der SMTP Versand verwendet:
    </para>
    <example>
        <title>E-Mail Versand über SMTP</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
?>]]>   </programlisting>
    </example>
    <para>
        Die <code>setDefaultTransport()</code> Methode und der Konstruktor von 
        <code>Zend_Mail_Transport_Smtp</code> sind nicht aufwendig. Diese beiden Zeilen können
        beim Start des Skriptes (z.B., config.inc oder ähnliches) abgearbeitet werden, um das 
        Verhalten der <code>Zend_Mail</code> Klasse für den Rest des Skriptes zu konfigurieren.
        Somit bleiben Informationen zur Konfiguration außerhalb der Anwendungslogik - ob E-Mail 
        über SMTP oder <ulink url="http://php.net/mail"><code>mail()</code></ulink> versandt 
        werden, welcher Mailserver verwendet wird, usw.
    </para>
</sect1>
<sect1 id="zend.mail.multiple-emails">
    <title>Versand von mehrteiligen E-Mails über eine SMTP Verbindung</title>
    <para>
        Standardmäßig wird eine SMTP Verbindung für jede Mail eingerichtet, die versandt werden 
        soll. Wenn du mehrteilige Mails über eine SMTP Verbindung versenden möchtest, kannst Du die 
        Aufrufe von <code>connect()</code> selber erledigen. Wenn der Versand bereits eine 
        Verbindung vor dem Aufruf von <code>send()</code> eingerichtet hat, wird diese verwendet und
        nicht geschlossen. 
    </para>
    <example>
        <title>Versand von mehrteiligen E-Mails über eine SMTP Verbindung</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// erstelle Nachricht...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
$tr->connect();
for ($i = 0; $i < 5; $i++) {
    $mail->send();
}
$tr->disconnect();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.different-transports">
    <title>Verwendung von unterschiedlichen Versandwegen</title>
    <para>
        Falls du verschiedene E-Mails über verschiedene Verbindungen versenden möchtest, kannst du
        das Transport Objekt auch ohne vorherigen Aufruf von <code>setDefaultTransport()</code>
        direkt an <code>send()</code> übergeben. Das übergebene Objekt wird den standardmäßigen
        Versandweg für die aktuellen Anfrage von <code>send()</code> überschreiben.
    </para>
    <example>
        <title>Verwendung von unterschiedlichen Transportwegen</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// erstelle Nachricht...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr1 = new Zend_Mail_Transport_Smtp('server@example.com');
$tr2 = new Zend_Mail_Transport_Smtp('other_server@example.com');
$mail->send($tr1);
$mail->send($tr2);
$mail->send();  // wieder Standardmethode verwenden
?>]]>   </programlisting>
    </example>
    <note>
        Weitere Versandwege können geschrieben werden, indem  <code>Zend_Mail_Transport_Interface</code> 
        implementiert wird.
    </note>
</sect1>
<sect1 id="zend.mail.html-mails">
    <title>HTML E-Mail</title>
    <para>
        Um einen E-Mail im HTML Format zu versenden, muss der Hauptteil der Nachricht durch die 
        <code>setBodyHTML()</code> statt durch die <code>setBodyText()</code> gesetzt werden. Der
        MIME Inhaltstyp wird dann automatisch auf <code>text/html</code> gesetzt. Wenn du sowohl
        HTML als auch Text Daten verwendest, wird automatisch eine multipart/alternative MIME 
        E-Mail erstellt:
    </para>
    <example>
        <title>Versand von HTML E-Mail</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('Mein netter Test Text');
$mail->setBodyHtml('Mein netter <b>Test</b> Text');
$mail->setFrom('somebody@example.com', 'Ein Versender');
$mail->addTo('somebody_else@example.com', 'Ein Empfänger');
$mail->setSubject('TestBetreff');
$mail->send();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.attachments">
    <title>Anhänge</title>
    <para>
        Dateien können durch die <code>addAttachment()</code> Methode an eine E-Mail angehängt 
        werden. Standardmäßig nimmt <code>Zend_Mail</code> an, dass der Anhang ein binärisches 
        Objekt (application/octet-stream) ist, über eine bas64 Kodierung übertragen werden soll und 
        als Anhang verarbeitet wird. Diese Annahmen können durch die Übergabe von weiteren  
        Parametern an <code>addAttachment()</code> überschrieben werden:
    </para>
    <example>
        <title>E-Mail Nachrichten mit Anhängen</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// erstelle Nachricht...
$mail->addAttachment($someBinaryString);
$mail->addAttachment($myImage, 'image/gif', Zend_Mime::DISPOSITION_INLINE, Zend_Mime::ENCODING_8BIT);
?>]]>   </programlisting>
    </example>
    <para>
        Wenn du weitere Kontrolle über den für diesen Anhang generierten MIME Teil benötigst, kannst
        du zurückgegebenen Wert von <code>addAttachment()</code> verwenden, um die Attributes zu
        verändern. Die <code>addAttachment()</code> Methode gibt ein <code>Zend_Mime_Part</code>
        Objekt zurück:
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// erstelle Nachricht...
$at = $mail->addAttachment($myImage);
$at->type = 'image/gif';
$at->id = 12;
$at->filename ='test.gif';
//...
$mail->send();
?>]]>   </programlisting>
    </para>
</sect1>
<sect1 id="zend.mail.adding-recipients">
    <title>Empfänger hinzufügen</title>
    <para>
        Empfänger können über drei Wege hinzugefügt werden:
        <itemizedlist>
        <listitem>
        <para><code>addTo()</code>: fügt der Mail einen Empfänger in der "To" Kopfzeile hinzu</para>
        </listitem>
        <listitem>
        <para><code>addCc()</code>: fügt der Mail einen Empfänger in der "Cc" Kopfzeile  hinzu</para>
        </listitem>
        <listitem>
        <para><code>addBcc()</code>: fügt der Mail einen Empfänger hinzu, der in den Kopfzeilen nicht sichtbar ist.</para>
        </listitem>
        </itemizedlist>
    </para>
    <note>
        <code>addTo()</code> und <code>addCc()</code> akzeptieren einen zweiten, optionalen 
        Parameter, der für einen visuell lesbaren Namen des Empfängers in der Kopfzeile verwendet wird.
    </note>
</sect1>
<sect1 id="zend.mail.boundary">
    <title>Die MIME Abgrenzung kontrollieren</title>
    <para>
        In einer mehrteiligen Nachricht wird eine MIME Abgrenzung zum Trennen der verschiedenen
        Nachrichtenteile normalerweise willkürlich generiert. In einigen Fällen möchtest Du jedoch
        die zu verwendene MIME Abgrenzung selber angeben. Dies kann durch die 
        <code>setMimeBoundary()</code> Methode erreicht werden, wie in dem folgenden Beispiel:
    </para>
    <example>
        <title>Die MIME Abgrenzung ändern</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setMimeBoundary('=_' . md5(microtime(1) . $someId++);
// erstelle Nachricht...
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.additional-headers">
    <title>Zusätzliche Kopfzeilen</title>
    <para>
        Beliebige Kopfzeilen können über die <code>addHeader()</code> Methode in einer Mail gesetzt 
        werden. Sie benötigt zwei Parameter, die den Namen und den Wert des Kopfzeilen Feldes
        enthalten. Ein dritter, optionaler Parameter legt fest, ob die Kopfzeile einen oder mehrere
        Werte enthalten darf:
    </para>
    <example>
        <title>Eine E-Mail Kopfzeile hinzufügen</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->addHeader('X-MailGenerator', 'MeineCooleAnwendung');
$mail->addHeader('X-greetingsTo', 'Mom', true); // mehrer Werte 
$mail->addHeader('X-greetingsTo', 'Dad', true);
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.character-sets">
    <title>Zeichensätze</title>
    <para>
        <code>Zend_Mail</code> prüft nicht auf die richtigen Zeichensätze für die Mailbestandteile.
        Wenn <code>Zend_Mail</code> instanziiert wird, kann ein Zeichensatz für die Mail selber
        angegeben werden. Der Standardwert ist iso8859-1. Die Anwendug muss sicherstellen, dass die 
        Inhalte aller Bestandteile des Mailobjektes im richtigen Zeichensatz kodiert sind. Wenn ein
        neuer Mailbestandteil erstellt wird, kann für jeden Bestandteil ein anderer Zeichensatz 
        angegeben werden. 
    </para>
    <note>
        Zeichensätze sind nur auf Mailbestandteile im Textformat anwendbar.
    </note>
</sect1>
<sect1 id="zend.mail.encoding">
    <title>Kodierung</title>
    <para>
        Der Hauptteil von Text und HTML Nachrichten werden standardmäßig über den "quotedprintable"
        Mechanismus kodiert. Alle andere Anhänge werden über "base64" kodiert, wenn an den Mime Teil 
        keine andere Kodierung über den <code>addAttachment()</code> Aufruf übergeben oder später 
        zugewiesen worden ist. 7Bit und 8Bit Kodierung können derzeit nur auf binärische Inhalte
        angewandt werden.
    </para>
    <para>
        <code>Zend_Mail_Transport_Smtp</code> kodiert die Zeilen beginnend mit einem oder zwei
        Punkten, so dass die Mail das SMTP Protokoll nicht missachtet. 
    </para>
</sect1>
<sect1 id="zend.mail.smtp-authentication">
    <title>SMTP Authentifizierung</title>
    <para>
        Weitere Methoden für die SMTP Authentifizierung könnten später hinzugefügt werden, 
        werden derzeit aber nicht unterstützt.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->