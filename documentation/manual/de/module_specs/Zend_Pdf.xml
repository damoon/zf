<sect1 id="zend.pdf.introduction">
    <!-- @todo review and revise upon completion of refactoring -->
    <title>Einführung.</title>
    <para>
        Die Zend_Pdf Komponente ist ein komplett in PHP 5 geschriebenes Werkzeug für die Veränderung von 
        PDF (Portable Document Format) Dateien. Es kann bestehende Dokumente laden, neue Dokumente 
        erstellen, Dokumente modifizieren und modifizierte Dokumente speichern. Dadurch kann es jede
        PHP-getriebene Anwendung unterstützen, Dokumente im PDF Format dynamisch aufzubereiten,
        indem bestehende Vorlagen modifiziert oder Dokumente von Grund auf neu erstellt werden.
        Die Zend_Pdf Komponente stellt die folgenden Funktionen bereit: 
    <itemizedlist>
        <listitem>
            <para>
                Erstellen von neuen Dokumente oder Laden von vorhandenen Dokumenten.
            <footnote>
                <para>
                PDF V1.4 (Acrobat 5) Dokumente werden für das Laden derzeit unterstützt.
                </para>
            </footnote>
            </para>
        </listitem>
        <listitem>
            <para>
                Rückgabe einer vorgegebenen Revision eines Dokuments.
            </para>
        </listitem>
        <listitem>
            <para>
                Verändern von Seiten innerhalb eines Dokuments. Ändern der Seitensortierung,
                Hinzufügen von neuen Seiten, Entfernen von Seiten aus einem Dokument.
            </para>
        </listitem>
        <listitem>
            <para>
                Verschiedene einfache Grafikelemente (Linien, Rechtecke, Polygon, Kreise, Ellipsen 
                und Kreisausschnitte).
            </para>
        </listitem>
        <listitem>
            <para>
                Zeichnen von Texten unter Verwendung von 14 Standard Zeichensätzen.
            </para>
        </listitem>
        <listitem>
            <para>
            Drehungen.
            </para>
        </listitem>
        <listitem>
            <para>
                Zeichnen von Grafiken.
            <footnote>
                <para>
                JPG, PNG [Bis zu 8bit+Alpha] und TIFF Grafiken werden unterstützt.
                </para>
            </footnote>
            </para>
        </listitem>
        <listitem>
            <para>
                Schrittweise Aktualisierung von PDF Dateien.
            </para>
        </listitem>
    </itemizedlist>
    </para>
</sect1>

<sect1 id="zend.pdf.create">
    <title>Erstellen und Laden von PDF Dokumenten.</title>
    <para>
        Die <code>Zend_Pdf</code> Klasse bildet das PDF Dokument selber ab und stellt 
        Funktionalitäten auf Dokumentebene bereit.
    </para>

    <para>
        Um ein neues Dokument zu stellen, sollte ein neues <code>Zend_Pdf</code> Objekt erstellt 
        werden.
    </para>

    <para>
        Die <code>Zend_Pdf</code> Klasse stellt zwei statische Methoden zum Laden von bestehenden
        PDF Dateien bereit. Dies sind die Methoden <code>Zend_Pdf::load()</code> und 
        <code>Zend_Pdf::parse()</code>. Beide geben als Ergebnis ein Zend_Pdf Objekt zurück oder
        werfen eine Ausnahme, wenn ein Fehler auftritt.
    </para>

    <example>
        <title>Erstellen und Laden von PDF Dokumenten.</title>
        <programlisting role="php"><![CDATA[<?php
...
// Erstelle ein neues PDF Dokument
$pdf1 = new Zend_Pdf();

// Lade ein PDF Dokument aus einer Datei.
$pdf2 = Zend_Pdf::load($fileName);

// Lade ein PDF Dokument aus einer Zeichenkette.
$pdf3 = Zend_Pdf::parse($pdfString);
...
?>]]></programlisting>
    </example>

    <para>
        Das PDF Datei Format unterstützt die schrittweise Aktualisierung von Dokumenten. Jedes Mal,
        wenn ein Dokument aktualisiert wird, wird eine neue Revision des Dokuments erstellt. Die 
        Zend_Pdf Komponente unterstützt die Rückgabe einer vorgegebenen Revision des Dokuments.
    </para>
    <para>
        Die Revision kann den Methoden <code>Zend_Pdf::load()</code> and 
        <code>Zend_Pdf::parse()</code> als zweiter Parameter übergeben oder durch einen 
        <code>Zend_Pdf::rollback()</code>   
        <footnote>
            <para>
                Die <code>Zend_Pdf::rollback()</code> Methode muss vor einer Änderung eines 
                Dokuments aufgerufen werden. Ansonsten ist das Verhalten nicht definiert.
            </para>
        </footnote>
        Aufruf angefordert werden.
    </para>

    <example>
        <title>Rückgabe einer vorgegebenen Revision eines PDF Dokuments.</title>
        <programlisting role="php"><![CDATA[<?php
...
// Lade die vorherige Revision des PDF Dokuments.
$pdf1 = Zend_Pdf::load($fileName, 1);

// Lade die vorherige Revision des PDF Dokuments.
$pdf2 = Zend_Pdf::parse($pdfString, 1);

// Lade die erste Revision des PDF Dokuments.
$pdf3 = Zend_Pdf::load($fileName);
$revisions = $pdf3->revisions();
$pdf3->rollback($revisions - 1);
...
?>]]></programlisting>
    </example>


</sect1>


<sect1 id="zend.pdf.save">
    <title>Speichere Änderungen des PDF Dokuments.</title>
    <para>
        Es gibt zwei Methoden, die das Speichern von Änderungen am PDF Dokument bereit stellen.
        Dies sind die Methoden <code>Zend_Pdf::save()</code> und <code>Zend_Pdf::render()</code>.
    </para>

    <para>
        Die <code>Zend_Pdf::save($filename, $updateOnly = false)</code> Methode speichert das
        Dokument in eine Datei. Wenn $updateOnly auf true gesetzt wird, wird ein neues PDF 
        Dateisegment an das File angehängt, ansonsten wird es überschrieben.
    </para>

    <para>
        Die <code>Zend_Pdf::render($filename, $updateOnly = false)</code> Methode gibt das PDF
        Dokument als Zeichenkette zurück. Wenn $updateOnly auf true gesetzt wird, wird nur das
        neue PDF Dateisegment zurückgegeben.
    </para>

    <example>
        <title>Speichern eines PDF Dokuments.</title>
        <programlisting role="php"><![CDATA[<?php
...
// Lade das PDF Dokument.
$pdf = Zend_Pdf::load($fileName);
...
// Aktualisiere das Dokument
$pdf->save($fileName, true);
// Speichere das Dokument in eine neue Datei
$pdf->save($newFileName, true);

// Geb das PDF Dokument in einer Zeichenkette zurück.
$pdfString = $pdf->render();

...
?>]]></programlisting>
    </example>

</sect1>

<sect1 id="zend.pdf.pages">
    <title>Dokument Seiten.</title>
    <para>
        Die Asbtraktion von PDF Dokumentseiten wird durch die Klasse <code>Zend_Pdf_Page</code> 
        abgebildet.
    </para>

    <para>
        PDF Seiten werden entweder aus einem vorhandenen PDF gelesen oder erstellt.
    </para>

    <para>
        Neue Seiten können durch die Erstellung eines neuen <code>Zend_Pdf_Page</code> Objektes 
        oder durch den Aufruf der <code>Zend_Pdf::newPage()</code> Methode erhalten werden, die ein
        <code>Zend_Pdf_Page</code> Objekt zurückgibt. Der Unterschied ist, dass die 
        <code>Zend_Pdf::newPage()</code> Methode eine Seite erstellt, die bereits an das vorhandene
        Dokument angehängt worden ist. Im Gegensatz dazu können ungebundene Seiten bei verschiedenen 
        PDF Dokumenten verwendet werden und sind ein wenig performanter.
    <footnote>
        <para>
            Dies ist eine Einschränkung der V1.0 Version der Zend_Pdf Komponente. Sie wird in 
            zukünftigen Versionen beseitigt werden. Aber ungebundene Seiten werden immer ein 
            besseres (also optimaleres) Ergebnis für gemeinsame Benutzung in Dokumenten liefern. 
        </para>
    </footnote>. Du hast die Wahl, welche Vorgehensweise verwendet werden sollte.
    </para>

    <para>
        Die <code>Zend_Pdf::newPage()</code> Methode und der <code>Zend_Pdf_Page</code> Konstruktor
        benötigen die gleichen Parameter. Das ist entweder die Seitengröße ($x, $y) in Punkten 
        (1/72 Zoll) oder eine vordefinierte Konstante, die als Seitentyp verwendet wird:
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_A4</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_A4_LANDSCAPE</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_LETTER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_LETTER_LANDSCAPE</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Dokumentseiten werden in der öffentlichen Eigenschaft <code>$pages</code> der 
        <code>Zend_Pdf</code> Klasse abgelegt. Dies ist ein Array mit <code>Zend_Pdf_Page</code>
        Objekten. Es definiert den Satz und die Reihenfolge der Dokumentseiten vollständig und kann
        wie ein normales Array verändert werden:
    </para>

    <example>
        <title>Verwaltung von PDF Dokumentseiten.</title>
        <programlisting role="php"><![CDATA[<?php
...
// Umgekehrte Seitenreihenfolge
$pdf->pages = array_reverse($pdf->pages);
...
// Füge eine neue Seite hinzu
$pdf->pages[] = new Zend_Pad_Page(Zend_Pdf_Const::PAGESIZE_A4);
// Füge eine neue Seite hinzu
$pdf->pages[] = $pdf->newPage(Zend_Pdf_Const::PAGESIZE_A4);

// Entferne eine bestimmte Seite
unset($pdf->pages[$id]);

...
?>]]></programlisting>
    </example>

</sect1>

<sect1 id="zend.pdf.drawing">
    <title>Drawing.</title>

    <sect2 id="zend.pdf.drawing.geometry">
        <title>Geometry.</title>
        <para>
        PDF uses the same geometry as PostScript. It starts from bottom-left corner of page
        and by default is measured in points (1/72 of an inch).
        </para>
        <para>
        Page size can be retrieved from a page object:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
$width  = $pdfPage->getWidth();
$height = $pdfPage->getHeight();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.color">
        <title>Colors.</title>
        <para>
        PDF has a powerful capabilities for colors representation. Zend_Pdf module supports Gray Scale,
        RGB and CMYK color spaces. Any of them can be used in any place, where <code>Zend_Pdf_Color</code>
        object is required. <code>Zend_Pdf_Color_GrayScale</code>, <code>Zend_Pdf_Color_RGB</code> and
        <code>Zend_Pdf_Color_CMYK</code> classes provide this functionality:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
// $grayLevel (float number). 0.0 (black) - 1.0 (white)
$color1 = new Zend_Pdf_Color_GrayScale($grayLevel);

// $r, $g, $b (float numbers). 0.0 (minimum intensity) - 1.0 (maximum intensity)
$color2 = new Zend_Pdf_Color_RGB($r, $g, $b);

// $c, $m, $y, $k (float numbers). 0.0 (minimum intensity) - 1.0 (maximum intensity)
$color3 = new Zend_Pdf_Color_CMYK($c, $m, $y, $k);]]>
            </programlisting>
        </para>
    </sect2>


    <sect2 id="zend.pdf.drawing.shape-drawing">
        <title>Shape Drawing.</title>
        <para>
        All drawing operations can be done in a context of PDF page.
        </para>
        <para>
        <code>Zend_Pdf_Page</code> class provides a set of drawing primitives:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw a line from x1,y1 to x2,y2.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawLine($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw a rectangle.
 *
 * Fill types:
 * Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE - fill rectangle and stroke (default)
 * Zend_Pdf_Const::SHAPEDRAW_STROKE      - stroke rectangle
 * Zend_Pdf_Const::SHAPEDRAW_FILL        - fill rectangle
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param integer $fillType
 */
public function drawRectangle($x1, $y1, $x2, $y2, $fillType = Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw a polygon.
 *
 * If $fillType is Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE or Zend_Pdf_Const::SHAPEDRAW_FILL,
 * then polygon is automatically closed.
 * See detailed description of these methods in a PDF documentation
 * (section 4.4.2 Path painting Operators, Filling)
 *
 * @param array $x  - array of float (the X co-ordinates of the vertices)
 * @param array $y  - array of float (the Y co-ordinates of the vertices)
 * @param integer $fillType
 * @param integer $fillMethod
 */
public function drawPolygon($x, $y,
                            $fillType = Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE,
                            $fillMethod = Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw a circle centered on x, y with a radius of radius.
 *
 * Angles are specified in radians
 *
 * Method signatures:
 * drawCircle($x, $y, $radius);
 * drawCircle($x, $y, $radius, $fillType);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle, $fillType);
 *
 *
 * It's not a really circle, because PDF supports only cubic Bezier curves.
 * But very good approximation.
 * It differs from a real circle on a maximum 0.00026 radiuses
 * (at PI/8, 3*PI/8, 5*PI/8, 7*PI/8, 9*PI/8, 11*PI/8, 13*PI/8 and 15*PI/8 angles).
 * At 0, PI/4, PI/2, 3*PI/4, PI, 5*PI/4, 3*PI/2 and 7*PI/4 it's exactly a tangent to a circle.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param mixed $param4
 * @param mixed $param5
 * @param mixed $param6
 */
public function  drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw an ellipse inside the specified rectangle.
 *
 * Method signatures:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $fillType);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle, $fillType);
 *
 * Angles are specified in radians
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param mixed $param5
 * @param mixed $param6
 * @param mixed $param7
 */
public function drawEllipse($x1, $y1, $x2, $y2, $param5 = null, $param6 = null, $param7 = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.text-drawing">
        <title>Text Drawing.</title>
        <para>
        Text drawing operations are also exist in a context of PDF page:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw a line of text at the specified position.
 *
 * @param string $text
 * @param float $x
 * @param float $y
 * @throws Zend_Pdf_Exception
 */
public function drawText($text, $x, $y );]]>
            </programlisting>
        </para>
        <para>
        Current font and current font size are used for text drawing operations. See detailed description below.
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.using-fonts">
        <title>Using fonts.</title>
        <para>
        <code>Zend_Pdf_Page::drawText()</code> method uses current font, which can be assigned
        by <code>Zend_Pdf_Page::setFont()</code> method:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set current font.
 *
 * @param Zend_Pdf_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
        PDF supports Type1, TrueType, Type3 and composite fonts. There are also 14 standard Type1 fonts
        provided by PDF. Zend_Pdf module provides only these standard fonts now. They can be obtained by using
        <code>Zend_Pdf_Font_Standard</code> class. Concrete font is specified as a constructor argument:
        </para>
        <example>
            <title>Create standard font.</title>
            <programlisting role="php"><![CDATA[<?php
...
// Create new font
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA);

// Apply font
$pdfPage->setFont($font, 36);
...
?>]]>
            </programlisting>
        </example>
        <para>
        Font constants for 14 standard fonts are defined within <code>Zend_Pdf_Const</code> class:
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_ROMAN</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_SYMBOL</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_ZAPFDINGBATS</para>
            </listitem>
        </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.image-drawing">
        <title>Image Drawing.</title>
        <para>
        <code>Zend_Pdf_Page</code> class provides drawImage() method to draw image:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Draw an image at the specified position on the page.
 *
 * @param Zend_Pdf_Image $image
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawImage(Zend_Pdf_Image $image, $x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
        Image objects are represented by descendants of <code>Zend_Pdf_Image</code> class.
        </para>
        <para>
        JPG, PNG and TIFF images are supported now:
        </para>
        <example>
            <title>Image drawing.</title>
            <programlisting role="php"><![CDATA[<?php
...
//Create image object directly (choose one)
$image = new Zend_Pdf_Image_JPEG('my_image.jpg');
$image = new Zend_Pdf_Image_TIFF('my_image.tiff');
$image = new Zend_Pdf_Image_PNG('my_image.png');

//or use the Zend_Pdf_ImageFactory to load the appropriate type
$image = Zend_Pdf_ImageFactory::factory('my_image.jpg');

$pdfPage->drawImage($image, 100, 100, 400, 300);
...
?>]]>
            </programlisting>
        </example>

        <para>
            <emphasis>Important! Zend_Pdf_Image_JPEG class requires PHP GD extension to be configured.</emphasis>
            <emphasis>Important! Zend_Pdf_Image_PNG class requires ZLIB extension to be configured to work with Alpha channel images.</emphasis>
        </para>
        <para>
            Refer to the PHP documentation for detailed information
            (<ulink url="http://www.php.net/manual/en/ref.image.php">http://www.php.net/manual/en/ref.image.php</ulink>).
            (<ulink url="http://www.php.net/manual/en/ref.zlib.php">http://www.php.net/manual/en/ref.zlib.php</ulink>).
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.line-drawing-style">
        <title>Line drawing style.</title>
        <para>
        Line drawing style is defined by line width, line color and line dashing pattern.
        All of this parameters can be assigned by <code>Zend_Pdf_Page</code>
        class methods:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/** Set line color. */
public function setLineColor(Zend_Pdf_Color $color);

/** Set line width. */
public function setLineWidth(float $width);

/**
 * Set line dashing pattern.
 *
 * Pattern is an array of floats: array(on_length, off_length, on_length, off_length, ...)
 * Phase is shift from the beginning of line.
 *
 * @param array $pattern
 * @param array $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.fill-style">
        <title>Fill style.</title>
        <para>
        <code>Zend_Pdf_Page::drawRectangle()</code>, <code>Zend_Pdf_Page::drawPoligon()</code>,
        <code>Zend_Pdf_Page::drawCircle()</code> and <code>Zend_Pdf_Page::drawEllipse()</code> methods take
        <code>$fillType</code> argument as an optional parameter. It can be:
        </para>

        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_STROKE - stroke shape</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_FILL - only fill shape</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE - fill and stroke (default behavior)</para>
            </listitem>
        </itemizedlist>

        <para>
        <code>Zend_Pdf_Page::drawPoligon()</code> methods also takes an additional parameter
        <code>$fillMethod</code>:
        </para>
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING (default behavior)</para>
                <para>
                <citetitle>PDF reference</citetitle> describes this rule as follows:
                <blockquote>
The nonzero winding number rule determines whether a given point is inside a
path by conceptually drawing a ray from that point to infinity in any direction
and then examining the places where a segment of the path crosses the ray. Starting
with a count of 0, the rule adds 1 each time a path segment crosses the ray
from left to right and subtracts 1 each time a segment crosses from right to left.
After counting all the crossings, if the result is 0 then the point is outside the path;
otherwise it is inside.

Note: The method just described does not specify what to do if a path segment coincides
with or is tangent to the chosen ray. Since the direction of the ray is arbitrary,
the rule simply chooses a ray that does not encounter such problem intersections.
For simple convex paths, the nonzero winding number rule defines the inside
and outside as one would intuitively expect. The more interesting cases are those
involving complex or self-intersecting paths like the ones shown in Figure 4.10
(in a PDF Reference).

For a path consisting of a five-pointed star, drawn with five connected straight
line segments intersecting each other, the rule considers the inside to be the entire
area enclosed by the star, including the pentagon in the center. For a path composed
of two concentric circles, the areas enclosed by both circles are considered
to be inside, provided that both are drawn in the same direction. If the circles are
drawn in opposite directions, only the "doughnut" shape between them is inside,
according to the rule; the "doughnut hole" is outside.
            </blockquote>
            </para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FILLMETHOD_EVENODD</para>
                <para>
                <citetitle>PDF reference</citetitle> describes this rule as follows:
                <blockquote>
An alternative to the nonzero winding number rule is the even-odd rule. This rule
determines the "insideness" of a point by drawing a ray from that point in any
direction and simply counting the number of path segments that cross the ray,
regardless of direction. If this number is odd, the point is inside; if even, the point
is outside. This yields the same results as the nonzero winding number rule for
paths with simple shapes, but produces different results for more complex
shapes.

Figure 4.11 (in a PDF Reference) shows the effects of applying the even-odd rule
to complex paths. For the five-pointed star, the rule considers the triangular
points to be inside the path, but not the pentagon in the center. For the two
concentric circles, only the "doughnut" shape between the two circles is considered inside,
regardless of the directions in which the circles are drawn.
                </blockquote>
            </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.pdf.drawing.rotations">
        <title>Rotations.</title>
        <para>
        PDF page can be rotated before applying any draw operation.
        It can be done by <code>Zend_Pdf_Page::rotate()</code> method:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Rotate the page around ($x, $y) point by specified angle (in radians).
 *
 * @param float $angle
 */
public function rotate($x, $y, $angle);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.save-restore">
        <title>Save/restore graphics state.</title>
        <para>
        At any time page graphics state (current font, font size, line color, fill color,
        line style, page rotation, clip area) can be saved and then restored. Save operation puts
        data to a graphics state stack, restore operation retrieves it from there.
        </para>
        <para>
        There are to methods in <code>Zend_Pdf_Page</code> class for these operations:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Save the graphics state of this page.
 * This takes a snapshot of the currently applied style, position, clipping area and
 * any rotation/translation/scaling that has been applied.
 */
public function saveGS();

/**
 * Restore the graphics state that was saved with the last call to saveGS().
 */
public function restoreGS();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.clipping">
        <title>Clipping draw area.</title>
        <para>
        PDF and Zend_Pdf module support clipping of draw area.
        Current clip area limits the regions of the page affected by painting operators. It's a whole page initially.
        </para>
        <para>
        <code>Zend_Pdf_Page</code> class provides a set of methods for clipping operations.
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Intersect current clipping area with a rectangle.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function clipRectangle($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Intersect current clipping area with a polygon.
 *
 * @param array $x  - array of float (the X co-ordinates of the vertices)
 * @param array $y  - array of float (the Y co-ordinates of the vertices)
 * @param integer $fillMethod
 */
public function clipPolygon($x, $y, $fillMethod = Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Intersect current clipping area with a circle.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipCircle($x, $y, $radius, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Intersect current clipping area with an ellipse.
 *
 * Method signatures:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 *
 * @todo process special cases with $x2-$x1 == 0 or $y2-$y1 == 0
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipEllipse($x1, $y1, $x2, $y2, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.styles">
        <title>Styles.</title>
        <para>
        <code>Zend_Pdf_Style</code> class provides styles functionality.
        </para>
        <para>
        Styles can be used to store a set of graphic state parameters and apply it to a PDF page by one operation:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set the style to use for future drawing operations on this page
 *
 * @param Zend_Pdf_Style $style
 */
public function setStyle(Zend_Pdf_Style $style);

/**
 * Return the style, applied to the page.
 *
 * @return Zend_Pdf_Style|null
 */
public function getStyle();]]>
            </programlisting>
        </para>

        <para>
        <code>Zend_Pdf_Style</code> class provides a set of methods to set or get different graphics state parameters:
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set line color.
 *
 * @param Zend_Pdf_Color $color
 */
public function setLineColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get line color.
 *
 * @return Zend_Pdf_Color|null
 */
public function getLineColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set line width.
 *
 * @param float $width
 */
public function setLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get line width.
 *
 * @return float
 */
public function getLineWidth();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set line dashing pattern
 *
 * @param array $pattern
 * @param float $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get line dashing pattern
 *
 * @return array
 */
public function getLineDashingPattern();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get line dashing phase
 *
 * @return float
 */
public function getLineDashingPhase();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set fill color.
 *
 * @param Zend_Pdf_Color $color
 */
public function setFillColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get fill color.
 *
 * @return Zend_Pdf_Color|null
 */
public function getFillColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Set current font.
 *
 * @param Zend_Pdf_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Modify current font size
 *
 * @param float $fontSize
 */
public function setFontSize($fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get current font.
 *
 * @return Zend_Pdf_Font $font
 */
public function getFont();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Get current font size
 *
 * @return float $fontSize
 */
public function getFontSize();]]>
            </programlisting>
        </para>
    </sect2>

</sect1>

<sect1 id="zend.pdf.usage">
    <title>Zend_Pdf module usage example.</title>
    <para>
    This section provides an example of module usage.
    </para>

    <para>
    This example can be found in a <filename>demos/Zend/Pdf/demo.php</filename> file.
    </para>
    <para>
    There are also <filename>test.pdf</filename> file, which can be used with this demo
    for test purposes.
    </para>

    <example>
        <title>Zend_Pdf module usage demo.</title>
        <programlisting role="php"><![CDATA[<?php
/**
 * @package Zend_Pdf
 * @subpackage demo
 */

/** Zend_Pdf */
require_once 'Zend/Pdf.php';

if (!isset($argv[1])) {
    echo "USAGE: php demo.php <pdf_file> [<output_pdf_file>]\n";
    exit;
}

if (file_exists($argv[1])) {
    $pdf = Zend_Pdf::load($argv[1]);
} else {
    $pdf = new Zend_Pdf();
}

//------------------------------------------------------------------------------------
// Reverse page order
$pdf->pages = array_reverse($pdf->pages);

// Create new Style
$style = new Zend_Pdf_Style();
$style->setFillColor(new Zend_Pdf_Color_RGB(0, 0, 0.9));
$style->setLineColor(new Zend_Pdf_Color_GrayScale(0.2));
$style->setLineWidth(3);
$style->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
$style->setFont(new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA_BOLD), 32);

// Create new image object
$stampImage = Zend_Pdf_ImageFactory::factory(dirname(__FILE__) . '/stamp.jpg');

// Mark page as modified
foreach ($pdf->pages as $page){
    $page->saveGS();
    $page->setStyle($style);
    $page->rotate(0, 0, M_PI_2/3);

    $page->saveGS();
    $page->clipCircle(550, -10, 50);
    $page->drawImage($stampImage, 500, -60, 600, 40);
    $page->restoreGS();

    $page->drawText('Modified by Zend Framework!', 150, 0);
    $page->restoreGS();
}

// Add new page generated by Zend_Pdf object (page is attached to the specified the document)
$pdf->pages[] = ($page1 = $pdf->newPage('A4'));

// Add new page generated by Zend_Pdf_Page object (page is not attached to the document)
$pdf->pages[] = ($page2 = new Zend_Pdf_Page(Zend_Pdf_Const::PAGESIZE_LETTER_LANDSCAPE));

// Create new font
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA);

// Apply font and draw text
$page1->setFont($font, 36);
$page1->drawText('Helvetica 36 text string', 60, 500);

// Use font object for another page
$page2->setFont($font, 24);
$page2->drawText('Helvetica 24 text string', 60, 500);

// Use another font
$page2->setFont(new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_TIMES_ROMAN), 32);
$page2->drawText('Times-Roman 32 text string', 60, 450);

// Draw rectangle
$page2->setFillColor(new Zend_Pdf_Color_GrayScale(0.8));
$page2->setLineColor(new Zend_Pdf_Color_GrayScale(0.2));
$page2->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
$page2->drawRectangle(60, 400, 400, 350);

// Draw circle
$page2->setLineDashingPattern(Zend_Pdf_Const::LINEDASHING_SOLID);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 0));
$page2->drawCircle(85, 375, 25);

// Draw sectors
$page2->drawCircle(200, 375, 25, 2*M_PI/3, -M_PI/6);
$page2->setFillColor(new Zend_Pdf_Color_CMYK(1, 0, 0, 0));
$page2->drawCircle(200, 375, 25, M_PI/6, 2*M_PI/3);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 1, 0));
$page2->drawCircle(200, 375, 25, -M_PI/6, M_PI/6);

// Draw ellipse
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 0));
$page2->drawEllipse(250, 400, 400, 350);
$page2->setFillColor(new Zend_Pdf_Color_CMYK(1, 0, 0, 0));
$page2->drawEllipse(250, 400, 400, 350, M_PI/6, 2*M_PI/3);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 1, 0));
$page2->drawEllipse(250, 400, 400, 350, -M_PI/6, M_PI/6);

// Draw and fill polygon
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 1));
$x = array();
$y = array();
for ($count = 0; $count < 8; $count++) {
    $x[] = 140 + 25*cos(3*M_PI_4*$count);
    $y[] = 375 + 25*sin(3*M_PI_4*$count);
}
$page2->drawPolygon($x, $y,
                    Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE,
                    Zend_Pdf_Const::FILLMETHOD_EVENODD);

// Draw line
$page2->setLineWidth(0.5);
$page2->drawLine(60, 375, 400, 375);
//------------------------------------------------------------------------------------

if (isset($argv[2])) {
    $pdf->save($argv[2]);
} else {
    $pdf->save($argv[1], true /* update */);
}
]]></programlisting>
    </example>

</sect1>


<!--
vim:se ts=4 sw=4 et:
-->
