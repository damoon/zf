<sect1 id="zend.controller.providedsubclasses">
    <title>Bereitgestellte Unterklassen</title>

    <sect2 id="zend.controller.providedsubclasses.introduction">
        <title>Einführung</title>

        <para>
            Das Zend Framework stellt verschiedene Alternativen zu den bereit gestellten 
            Standardklassen zur Verfügung. Dies beinhaltet alternative Request Objekte, Router und 
            Response Objekte.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.request.http">
        <title>Zend_Controller_Request_Http</title>

        <sect3 id="zend.controller.providedsubclasses.request.http.introduction">
            <title>Einführung</title>

            <para>
                <code>Zend_Controller_Request_Http</code> stellt ein Request Objekt für die 
                Verwendung in einer HTTP Umgebung bereit. <code>Zend_Controller_Request_Http</code>
                ist die Standard Request Klasse, die von <code>Zend_Controller_Dispatcher</code>
                verwendet wird.
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.dataaccess">
            <title>Auf Request Daten zugreifen</title>

            <para>
                <code>Zend_Controller_Request_Http</code> kapselt den Zugriff auf relevante Werte
                wie der Schlüssel und Wert für Controller und Action Variablen des Routers und alle
                zusätzlichen Parameter, die aus der URI ermittelt wurden. Durch den Proxy zu 
                <code>Zend_Controller_Request_Http</code> erlaubt es zusätzlich den Zugriff auf 
                superglobale Werte als öffentliche Eigenschaften und verwaltet die aktuelle Basis 
                URL und Request URI. Superglobale Werte können in einem Request Objekt nicht 
                gesetzt werden, stattdessen verwendet man die setParam/getParam Methoden um 
                Benutzerparameter zu setzen oder zu erhalten.
            </para>

            <note>
                <title>Superglobale Daten</title>
                <para>
                    Beim Zugriff auf superglobale Daten über die öffentlichen Eigenschaften von 
                    <code>Zend_Controller_Request_Http</code> ist es notwendig, darauf zu achten, 
                    dass der Eigenschaftsname (der superglobale Arrayschlüssel) einem superglobalen
                    Wert in einer bestimmten Reihenfolge entspricht: 1. GET, 2. POST, 3. COOKIE, 
                    4. SERVER, 5. ENV.
                </para>
            </note>

            <para>
                Auf spezifische superglobale Werte kann alternativ über eine öffentliche Methode 
                zugegriffen werden. Zum Beispiel kann auf den unverarbeitete Wert von 
                <code>$_POST['user']</code> durch Aufruf der <code>getPost('user')</code> Methode 
                des Request Objekts zugegriffen werden. 
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.baseurl">
            <title>Basis Url und Unterverzeichnisse</title>

            <para>
                <code>Zend_Controller_Request_Http</code> erlaubt, dass Zend_Controller_Router_Rewrite 
                in einem Unterverzeichnis verwendet werden kann. Zend_Controller_Request_Http 
                versucht, die Basis URL automatisch zu erkennen und entsprechend zu setzen.
            </para>

            <para>
                Wenn man zum Beispiel seine <code>index.php</code> in einem Webserverunterverzeichnis 
                mit Namen <code>/projects/myapp/index.php</code> verwendet, sollte die Basis URL
                (die Rewrite Basis) auf <code>/projects/myapp</code> gesetzt werden. Dieser String
                wird dann vom Anfang des Pfades entfernt, bevor irgend welche Routingtreffer 
                ermittelt werden. Dies befreit einem davon, es an den Anfang jeder Route setzen zu 
                müssen. Eine Route <code>'user/:username'</code> passt auf URIs wie 
                <code>http://localhost/projects/myapp/user/martel</code> und
                <code>http://example.com/user/martel</code>.
            </para>

            <note>
                <title>URL Erkennung beachtet Groß- und Kleinschreibung</title>
                <para>
                    Die automatische Erkennung der Basis URL beachtet die Groß- und Kleinschreibung,
                    weshalb man sicherstellen sollte, dass die URL einem Unterverzeichnis im 
                    Dateisystem entspricht (sogar auf einem Windows Rechner). Andernfalls wird auf 
                    die noRoute aktion umgeleitet.
                </para>
            </note>

            <para>
                Sollte die Basis URL falsch erkannt werden, kann man diese auch mit einem eigenen
                Pfad mit Hilfe der <code>setBaseUrl()</code> Methode der 
                <code>Zend_Controller_Request_Http</code> Klasse oder der 
                <code>Zend_Controller_Front</code> Klasse überschreiben. Die einfachste Methode ist 
                die von <code>Zend_Controller_Front</code>, welche es an das Request Object weiter 
                leitet. Beispiel, um eine eigene Basis URL zu setzen:
            </para>

            <programlisting role="php"><![CDATA[
/** 
 * Dispatch Request with custom base URL with Zend_Controller_Front.
 */
$router     = new Zend_Controller_Router_Rewrite();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // set the base url!
$response   = $controller->dispatch();]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.rewriterouter">
        <title>Zend_Controller_Router_Rewrite</title>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.introduction">
            <title>Einführung</title>
        	<para>
        	    <code>Zend_Controller_Router_Rewrite</code> ist der Standard Router des Frameworks. 
        	    Routing ist der Prozess der Übernahme und Zerteilung einer URI, um zu 
        	    ermitteln, welcher Controller und welche Aktion des Controllers die Anfrage 
        	    erhalten soll. Die Definition des Controllers, der Aktion sowie weiterer Parameter 
        	    wird in einem Objekt mit Namen <code>Zend_Controller_Dispatcher_Token</code> 
        	    gekapselt, das dann vom <code>Zend_Controller_Dispatcher_Standard</code> verarbeitet 
                wird. Das Routing geschieht nur einmal: wenn zu Beginn die Anfrage erhalten wird und 
        	    bevor der erste Controller aufgerufen wird. 
        	</para>
        	<para>
        	    <code>Zend_Controller_Router_Rewrite</code> wurde entwickelt, um mit reinen PHP 
        	    Strukturen eine mod_rewrite ähnliche Funktionalität zu erlauben. Es richtet sich 
        	    sehr frei nach dem Ruby on Rails Routing und benötigt kein tieferes Wissen über 
        	    URL Weiterleitung des Webservers. Es wurde entwickelt, um mit einer einzigen 
        	    mod_rewrite Regel zu arbeiten. 
        	</para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

            <para>
            oder:
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>
            
            <para>
                Der Rewrite Router kann auch mit dem IIS Webserver verwendet werden, wenn 
                <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink> als Isapi 
                Erweiterung installiert wurde und folgende Umschreibungsregel verwendet wird:
            </para>

            <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

            <note>
                <title>IIS Isapi_Rewrite</title>
                <para>
                    Bei Verwenung von IIS, wird <code>$_SERVER['REQUEST_URI']</code> entweder nicht
                    vorhanden sein oder auf einen leeren String gesetzt sein. In diesem Fall wird
                    <code>Zend_Controller_Request_Http</code> versuchen, den durch die Isapi_Rewrite 
                    Erweiterung gesetzten Wert <code>$_SERVER['HTTP_X_REWRITE_URL']</code> zu 
                    verwenden.
                </para>
            </note>

            <para>Bei der verwendung von Lighttpd, ist folgende Umschreibungsregel gültig:</para>

            <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.usage">
            <title>Einen Router verwenden</title>

            <para>
        	    Um den Rewrite Router richtig zu verwenden, mußt du ihn instanziieren, einige 
        	    benutzerdefinierte Routen hinzufügen und in den Controller einbinden. Der folgende 
        	    Code veranschaulicht die Vorgehensweise:
            </para>

            <programlisting role="php"><![CDATA[
/* Erstelle einen Router */

$router = $ctrl->getRouter(); // gibt standardmäßig einen Rewrite Router zurück
$router->addRoute(
	'user',
	new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.basic">
            <title>Einfache Routen</title>

            <para>
                Das Herz des RewriteRouter ist die Definition der benutzerdefinierten Routen. 
                Routen werden durch Aufruf der <code>addRoute</code> Methode des RewriteRouter 
                und der Übergabe einer neuen Instanz von <code>Zend_Controller_Router_Route</code>
                erstellt:
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

            <para>
                Der erste Parameter ist der Name der Route. Zum derzeitigen Zeitpunkt ist er 
                redundant aber wird in Zukunft in einem URL View Helper verwendet, um eine einfache 
                Erstellung von URLs in deinen Views zu ermöglichen. Wenn du die vorher 
                konfigurierte, benannte Route verwenden möchtest, kannst du sie mit den 
                <code>getRoute</code> Methode des RewriteRouter  erhalten. Der zweite Parameter ist 
                eine Instanz von <code>Zend_Controller_Router_Route</code>.
            </para>

            <para>
                The erste Parameter für den <code>Zend_Controller_Router_Route</code> Konstruktur 
                ist eine Route, die auf eine URL passt - zum Beispiel passt die obige Route 
                auf <code>http://example.com/user/martel</code>. Der Doppelpunkt in einer Route 
	            markiert eine URL Variable, die durch die 
	            <code>Zend_Controller_Action::_getParam</code> Methode zugänglich ist. In unserem 
	            Beispiel wird der mit 'username' benannte Parameter auf den Wert 'martel' gesetzt. 
            </para>

        	<note>
        	    <title>Reihenfolge der Definitionen</title>
        	    <para>
            	    Routen werden in umgekehrter Reihenfolge abgeglichen, so dass man sicherstellen 
            	    muss, dass die allgemeinste Route als erstes definiert ist.
        	    </para>
        	</note>
        
        	<note>
        	    <title>Erlaubte Zeichen</title>
        	    <para>
            	    Fürs Erste erlaubt die aktuelle Implementation die Verwendung jedes Zeichens 
            	    für den  Variablenbezeichner außer den Schrägstrich (/), es wird aber sehr 
            	    empfohlen, dass du nur  Zeichen verwendest, die für PHP Variablen verwendet 
            	    werden dürfen. In Zukunft wird die Implementation vermutlich angepasst und dies 
            	    könnte Fehler in deinen Code einführen.
        	    </para>
        	</note>
        
        	<para>
        	    Es gibt zwei besondere Variablen, die in deinen Routen verwendet werden können - 
        	    'controller' und 'action'. Diese besonderen Variablen werden verwendet, um einen 
        	    gewählten  Controller und/oder eine Aktion in der URL zu finden. Die 'action' 
        	    Variable muß immer  entweder in der Route oder als Standardparameter definiert 
        	    sein. Die 'controller' Variable wird standardmäßig auf IndexController verweisen, 
        	    wenn sie nicht definiert wurde.
        	</para>
            <note>
                <title>Spezielle Variablen</title>
                <para>
                    Die Namen dieser speziellen Variablen können unterschiedlich sein, wenn man 
                    die Standardwerte in <code>Zend_Controller_Request_Http</code> mit Hilfe der 
                    setControllerKey und setActionKey Methoden verändert.
                </para>
            </note>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'user', new Zend_Controller_Router_Route(':controller/:action')
);]]></programlisting>

        	<para>
        	    Wenn du deinen Browser mit dieser Route auf <code>http://example.com/news/latest</code> 
        	    richtest, wird der <code>Zend_Controller_Dispatcher</code> die Aktion latestAction 
        	    deines Controllers NewsController ausführen.
        	</para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.variable-defaults">
            <title>Vorgegebene Variablenwerte</title>

            <para>
        	    Jede Variable in der Route kann einen vorgegebenen Wert haben. Um diesen 
        	    vorzugeben, mußt du einen dritten Parameter zur <code>addRoute</code> Methode 
        	    hinzufügen. Dieser dritte Parameter ist ein Array mit den Variablennamen als 
        	    Schlüssel und den vorgegebenen Werten als Werten.
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive', new Zend_Controller_Router_Route('archive/:year', array('year' => 2006))
);]]></programlisting>

        	<para>
        	    Was nicht sofort erkennbar sein mag, ist, dass die obige Route auf URLs wie 
        	    <code>http://example.com/archive/2005</code> und 
        	    <code>http://example.com/archive</code> passt. Im letzteren Fall hat die Variable 
        	    'year' den Wert 2006.
        	</para>
        
        	<para>
        	    Im obigen Beispiel haben wir keinen Controller angegeben, so dass immer auf die 
        	    noRoute Aktion des IndexController verwiesen wird. Damit es anwendbar ist, musst du 
        	    einen gültigen Controller und eine gültige Aktion als Standardwerte festlegen:
        	</para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive',
    new Zend_Controller_Router_Route('archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show')
);]]></programlisting>

            <para>
				This route will then result in dispatching to showAction of ArchiveController.
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.variable-requirements">
            <title>Anforderungen an Variablen</title>

            <para>
                Du kannst einen dritten Parameter hinzufügen, in dem Anforderungen an die Variablen 
        	    angegeben werden können. Diese werden als reguläre Ausdrücke definiert:
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive',
    new Zend_Controller_Router_Route('archive/:year', array('year' => 2006), array('year' => '\d+'))
);]]></programlisting>

            <note>
                <title>Routing Verhalten</title>
                <para>
                    Im Gegensatz zu Ruby on Rails wird <code>Zend_Controller_Router_Rewrite</code> 
                    für eine Route Standardwerte verwenden, wenn die Anforderungen an die Variablen 
                    im vierten Parameter nicht erfüllt werden. Also passt die URL 
                    <code>http://example.com/archive/test</code> auf die obige Route und setzt den 
                    Parameter 'year' auf 2006. Diese Funktionalität kann sich in Zukunft ändern, da 
                    sie im Moment beim Schreiben dieser Dokumentation noch diskutiert wird.
                </para>
            </note>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.rewritebase">
            <title>Basis URL und Unterverzeichnisse</title>

            <para>
                Der Rewrite Router kann in Unterverzeichnissen verwendet werden und die Basis URL
                wird automatisch durch <code>Zend_Controller_Request_Http</code> ermittelt.
            </para>

            <para>
                Sollte die Basis URL falsch erkannt werden, kannst du sie mit deinem eigenen Pfad 
                mit Hilfe von <code>Zend_Controller_Request_Http</code> durch den Aufruf der 
                <code>setBaseUrl()</code> Methode setzen (siehe 
                <xref linkend="zend.controller.providedsubclasses.request.http.baseurl" />).
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.default-routes">
            <title>Standardrouten</title>

            <para>
                <code>Zend_Controller_Router_Rewrite</code> hat eine vordefinierte Standardroute. 
                Sie passt auf URIs in Form von <code>'controller/action'</code>. Des weiteren kann
                ein Modulname als erstes Pfadelement spezifiziert werden, was URLs der Form
                <code>'module/controller/action</code> erlaubt. Zusätzlich erkennt er jeden 
                weiteren Parameter, der an die URI angehängt wird.
            </para>

            <para>
                Hier einige Beispiele, wie solche Routen zugeordnet werden:
            </para>

            <programlisting role="php"><![CDATA[
// Folgendes wird angenommen:
// $ctrl->setControllerDirectory(array(
//     'default' => '/path/to/default/controllers',
//     'news'    => '/path/to/blog/controllers',
//     'blog'    => '/path/to/blog/controllers'
// ));

Nur ein Modul:
http://example/news
    module == news

Ungültiges Modul wird dem Controller zugeordnet:
http://example/foo
    controller == foo

Modul + Controller:
http://example/blog/archive
    module     == blog
    controller == archive

Modul + Controller + Aktion:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

Modul + Controller + Aktion + Parameter:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]></programlisting>

            <para>
                Die Standard Route ist ein <code>Zend_Controller_Router_Route_Module</code> Objekt,
                dass ohne Standardwerte instanziert wird:
            </para>

            <programlisting role="php"><![CDATA[
// Route for Router v1 compatibility
$compat = new Zend_Controller_Router_Route_Module();
$this->addRoute('default', $compat);]]></programlisting>

            <note>
                <title>URIs abbilden</title>
                <para>
                    <code>Zend_Controller_Router_Rewrite</code> wurde für Rückwärtskompatibilität 
                    konfiguriert. Es passt automatisch auf <code>controller/action</code> URIs mit 
                    zusätzlichen Parameter. Die zusätzlichen Parameter benötigen keine weiteren 
                    Routen, solange sie keine vorgegebenen Variablenwerte oder 
                    Variablenanforderungen benötigen. Auf diese zusätzlichen Parameter kann über 
                    die <code>Zend_Controller_Action::_getParam()</code> Methode zugegriffen 
                    werden.
                </para>
            </note>

            <para>
            	Wenn man die Standardroute nicht in seinem Routing Schema haben möchte, kann diese
            	mit Hilfe von <code>removeDefaultRoutes()</code> entfernt werden:
            </para>

            <programlisting role="php"><![CDATA[
// Entferne Standardroute
$router->removeDefaultRoutes();]]></programlisting>

        </sect3>    

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.static-routes">
            <title>Statische Routen</title>

            <para>
            	Die obigen Beispiele verwenden alle dynamische Routen - Routen die zu prüfende 
            	Muster verwenden. Manchmal ist eine bestimmte Route jedoch fest verankert und die
            	Verwendung regulärer Ausdrücke wäre zuviel des Guten. Die Antwort auf solche 
            	Situationen ist die Verwendung von statischen Routen:
            </para>

            <programlisting role="php"><![CDATA[
$loginRoute = new Zend_Controller_Router_Route_Static('login', array('controller' => 'login', 'action' => 'form'));
$router->addRoute('login', $loginRoute);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.regex-routes">
            <title>Regex Routen</title>

            <para>
                Zusätzlich zu den Standard und Statischen Routen Typen, ist ein Reguar Expression Routen Typ
                vorhanden. Diese Route bietet mehr Möglichkeiten und Flexibilität als die anderen, aber
                auf Kosten der Geschwindigkeit, durch die Verwendung der PCRE Engine.
            </para>

            <para>
                <code>Zend_Controller_Router_Route_Regex</code> bietet einen Rexex-basierenden Routen Typ
                für die Verwendung mit dem Rewrite Router. Einige Regeln sind bei seiner Verwendung zu
                berücksichtigen:
            </para>

            <itemizedlist>
                <listitem><para>
                    Er benutzt das <code>#</code> Zeichen als Trenner. Das bedeutet das man den Schrägstrich
                    ('/') nicht Escapen muß. Aber Doppelkreuz Zeichen ('#') müssen Escaped werden.
                </para></listitem>

                <listitem><para>
                    Zeilen Start- und Endanker (normalerweise '^' und '$') werden automatisch bei allen
                    Ausdrücken hinzugefügt. Deswegen sollten Sie nicht in den Regulären Ausdrücken
                    verwendet werden. Das bedeutet auch das Ausdrücke so geschrieben werden sollten, das
                    sie der kompletten URL entsprechen. Wenn als Beispiel eine URL wie
                    'http://example.com/foo/bar/baz/bat' angenommen wird und einfach nur 'foo/bar'
                    gewünscht ist, sollte der Ausdruck 'foo/bar(/.*)?' geschrieben werden.
                </para></listitem>

                <listitem><para>
                    Die führenden und endenen Schrägstriche werden vor einem Vergleich getrimmt.
                    Als Ergebnis wird der Vergleich der URL "http://example.com/foo/bar" zu einer
                    Rexex von "foo/bar" führen.
                </para></listitem>
            </itemizedlist>

            <para>
                Eine Stärke bei der Verwendung von Regulären Ausdrücken besteht in der Fähigkeit
                gefundene Segmente für spätere Benutzung zu holen.
                <code>Zend_Controller_Router_Regex_Route</code> benutzt diese Möglichkeit in zwei Wegen.
                Entweder:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        Setzen von Parametern im Anfrage Objekt als Vergleichs Index
                        (integer) =&gt; vergleich. Als Beispiel:
                    </para>

                    <programlisting role="php"><![CDATA[<?php
// Alles nach /foo/bar im Pfad wird durch den Schlüssel '1' im Anfrage Objekt empfangen werden
$route = new Zend_Controller_Router_Route_Regex(
    'foo/bar(/.*)?', 
    array('controller' => 'foo', 'action' => 'bar')
);

// Nach dem Routen:
$fooPath = $request->getParam('1');
]]></programlisting>
                </listitem>

                <listitem>
                    <para>
                        Benutzen einer Verknüpfungs-Liste vom Dritten an den Route Konstruktor
                        übergebenen Parameter um Indezes zu Parameter Schlüssel zu verknüpfen.
                        Als Beispiel:
                    </para>

                    <programlisting role="php"><![CDATA[<?php
// Setze alles nach dem Pfad /foo/bar in den 'fooPath' Anfrage Schlüssel:
$route = new Zend_Controller_Router_Route_Regex(
    'foo/bar(/.*)?', 
    array('controller' => 'foo', 'action' => 'bar'),
    array(1 => 'fooPath')
);
]]></programlisting>
                </listitem>
            </itemizedlist>

            <para>
                Ein paar Beispiele der Erzeugung von Regex Routen für die Benutzung mit Routern:
            </para>

            <programlisting role="php"><![CDATA[
// Archivierte Blogs sehen mit URL wie:
// http://example.com/blog/archive/01-Using_the_Regex_Router.html
// '01' als 'id' Schlüssel setzen, und 'Using_the_Regex_Router' als 'title' Schlüssel
$blogArchive = new Zend_Controller_Router_Route_Regex(
    'blog/archive/(\d+)-(.*)\.html',
    array('controller' => 'blog', 'action' => 'view'), 
    array(1 => 'id', 2 => 'title')
);
$router->addRoute('blogArchive', $blogArchive);

// News Beiträge sehen mit URL wie:
// http://example.com/news/1193328
// '1193328' als 'id' Schlüssel benutzen
$newsItem = new Zend_Controlelr_Router_Route_Regex(
    'news/(\d+)',
    array('controller' => 'news', 'action' => 'view'),
    array(1 => 'id')
);
$router->addRoute('newsItem', $newsItem);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.add-config">
            <title>Zend_Config mit dem RewriteRouter verwenden</title>

            <para>
                Manchmal ist es praktischer, eine Konfigurationsdatei mit neuen Routen zu 
                aktualisieren, als den Code zu ändern. Dies ist mit Hilfe der 
                <code>addConfig()</code> Methode möglich. Im Wesentlichen kann man eine 
                Zend_Config kompatible Konfiguration erstellen, in seinem Code einlesen und an den
                RewriteRouter übergeben:
            </para>

            <para>
                Als Beispiel wird die folgende INI Datei angenommen:
            </para>

            <programlisting role="php"><![CDATA[
[production]

routes.archive.route = "archive/:year/*"
routes.archive.defaults.controller = archive
routes.archive.defaults.action = show
routes.archive.defaults.year = 2000
routes.archive.reqs.year = "\d+"

routes.news.type = "Zend_Controller_Router_Route_Static"
routes.news.route = "news"
routes.news.defaults.controller = "news"
routes.news.defaults.action = "list"
]]></programlisting>

            <para>
                Die oben angeführte INI Datei kann dann wie folgt in ein 
                <code>Zend_Config</code> Objekt eingelesen werden:
            </para>

            <programlisting role="php"><![CDATA[
$config = new Zend_Config_Ini('/path/to/config.ini', 'production');
$router = new Zend_Controller_Router_Rewrite();
$router->addConfig($config, 'routes');
]]></programlisting>

            <para>
            	Im oberen Beispiel teilen wir dem Router mit, den 'routes' Bereich der INI Datei
            	für seine Routen zu verwenden. Jeder Schlüssel auf erster Ebene in diesem Bereich
            	wird verwendet, um den Namen der Routen zu definieren; das obige Beispiel definiert
            	die Routen 'archive' und 'news'. Jede Route erfordert dann mindestens einen 'route'
            	Eintrag und einen oder mehrere 'defaults' Einträge; optional können eine oder 
            	mehrere 'reqs' (kurz für 'required', d.h. erforderlich) Einträge angegeben werden.
            	Alles in allem entspricht dies den drei Argumenten, die an ein 
            	<code>Zend_Controller_Router_Route_Interface</code> Objekt übergeben werden. Ein
            	Optionsschlüssel 'type' kann verwendet werden, um den Typ der Routenklasse für 
            	diese Route anzugeben; standardmäßig wird <code>Zend_Controller_Router_Route</code>
            	verwendet. Im obigen Beispiel wird die 'news' Route definiert, um
            	<code>Zend_Controller_Router_Route_Static</code> zu verwenden.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.http">
        <title>Zend_Controller_Response_Http</title>

        <para>
            <code>Zend_Controller_Response_Http</code> ist ein Response Objekt, das für die 
            Verwendung in einer HTTP Umgebung geeignet ist. Es enthält Methoden für das Setzen,
            Erhalten und Entfernen von Headern und die <code>__toString()</code> Methode sendet
            alle Header auf einmal bevor die Reponse Inhalte zurückgegeben werden.
        </para>

        <para>
            <code>setHeader()</code> nimmt zwei Argumente entgegen, einen Header Typ und den 
            Header Wert. Ein dritter, optionaler Parameter (wenn übergeben und true) erzwingt das 
            Überschreiben des vorhandenen Headers gleichen Typs mit dem neuen Header.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.cli">
        <title>Zend_Controller_Response_Cli</title>

        <para>
            <code>Zend_Controller_Response_Cli</code> is ein Response Object, das für die
            Verwendung in einer CLI Umgebung geeignet ist. Es hat keine Methoden für die Behandlung
            von Headern und gibt nur alle Inhalte zurück, wenn <code>__toString()</code> 
            aufgerufen wird.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
