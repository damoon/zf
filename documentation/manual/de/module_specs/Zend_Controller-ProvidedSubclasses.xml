<sect1 id="zend.controller.providedsubclasses">
    <title>Bereitgestellte Unterklassen</title>

    <sect2 id="zend.controller.providedsubclasses.introduction">
        <title>Einführung</title>

        <para>
            Das Zend Framework stellt verschiedene Alternativen zu den bereit gestellten 
            Standardklassen zur Verfügung. Dies beinhaltet alternative Request Objekte, Router und 
            Response Objekte.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.request.http">
        <title>Zend_Controller_Request_Http</title>

        <sect3 id="zend.controller.providedsubclasses.request.http.introduction">
            <title>Einführung</title>

            <para>
                <code>Zend_Controller_Request_Http</code> stellt ein Request Objekt für die 
                Verwendung in einer HTTP Umgebung bereit. <code>Zend_Controller_Request_Http</code>
                ist die Standard Request Klasse, die von <code>Zend_Controller_Dispatcher</code>
                verwendet wird.
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.dataaccess">
            <title>Auf Request Daten zugreifen</title>

            <para>
                <code>Zend_Controller_Request_Http</code> kapselt den Zugriff auf relevante Werte
                wie der Schlüssel und Wert für Controller und Action Variablen des Routers und alle
                zusätzlichen Parameter, die aus der URI ermittelt wurden. Durch den Proxy zu 
                <code>Zend_Controller_Request_Http</code> erlaubt es zusätzlich den Zugriff auf 
                superglobale Werte als öffentliche Eigenschaften und verwaltet die aktuelle Basis 
                URL und Request URI. Superglobale Werte können in einem Request Objekt nicht 
                gesetzt werden, stattdessen verwendet man die setParam/getParam Methoden um 
                Benutzerparameter zu setzen oder zu erhalten.
            </para>

            <note>
                <title>Superglobale Daten</title>
                <para>
                    Beim Zugriff auf superglobale Daten über die öffentlichen Eigenschaften von 
                    <code>Zend_Controller_Request_Http</code> ist es notwendig, darauf zu achten, 
                    dass der Eigenschaftsname (der superglobale Arrayschlüssel) einem superglobalen
                    Wert in einer bestimmten Reihenfolge entspricht: 1. GET, 2. POST, 3. COOKIE, 
                    4. SERVER, 5. ENV.
                </para>
            </note>

            <para>
                Auf spezifische superglobale Werte kann alternativ über eine öffentliche Methode 
                zugegriffen werden. Zum Beispiel kann auf den unverarbeitete Wert von 
                <code>$_POST['user']</code> durch Aufruf der <code>getPost('user')</code> Methode 
                des Request Objekts zugegriffen werden. 
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.baseurl">
            <title>Basis Url und Unterverzeichnisse</title>

            <para>
                <code>Zend_Controller_Request_Http</code> erlaubt, dass Zend_Controller_Router_Rewrite 
                in einem Unterverzeichnis verwendet werden kann. Zend_Controller_Request_Http 
                versucht, die Basis URL automatisch zu erkennen und entsprechend zu setzen.
            </para>

            <para>
                Wenn man zum Beispiel seine <code>index.php</code> in einem Webserverunterverzeichnis 
                mit Namen <code>/projects/myapp/index.php</code> verwendet, sollte die Basis URL
                (die Rewrite Basis) auf <code>/projects/myapp</code> gesetzt werden. Dieser String
                wird dann vom Anfang des Pfades entfernt, bevor irgend welche Routingtreffer 
                ermittelt werden. Dies befreit einem davon, es an den Anfang jeder Route setzen zu 
                müssen. Eine Route <code>'user/:username'</code> passt auf URIs wie 
                <code>http://localhost/projects/myapp/user/martel</code> und
                <code>http://example.com/user/martel</code>.
            </para>

            <note>
                <title>URL Erkennung beachtet Groß- und Kleinschreibung</title>
                <para>
                    Die automatische Erkennung der Basis URL beachtet die Groß- und Kleinschreibung,
                    weshalb man sicherstellen sollte, dass die URL einem Unterverzeichnis im 
                    Dateisystem entspricht (sogar auf einem Windows Rechner). Andernfalls wird auf 
                    die noRoute aktion umgeleitet.
                </para>
            </note>

            <para>
                Sollte die Basis URL falsch erkannt werden, kann man diese auch mit einem eigenen
                Pfad mit Hilfe der <code>setBaseUrl()</code> Methode der 
                <code>Zend_Controller_Request_Http</code> Klasse oder der 
                <code>Zend_Controller_Front</code> Klasse überschreiben. Die einfachste Methode ist 
                die von <code>Zend_Controller_Front</code>, welche es an das Request Object weiter 
                leitet. Beispiel, um eine eigene Basis URL zu setzen:
            </para>

            <programlisting role="php"><![CDATA[
/** 
 * Dispatch Request with custom base URL with Zend_Controller_Front.
 */
$router     = new Zend_Controller_Router_Rewrite();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // set the base url!
$response   = $controller->dispatch();]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.rewriterouter">
        <title>Zend_Controller_Router_Rewrite</title>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.introduction">
            <title>Einführung</title>
        	<para>
        	    <code>Zend_Controller_Router_Rewrite</code> ist der Standard Router des Frameworks. 
        	    Routing ist der Prozess der Übernahme und Zerteilung einer URI, um zu 
        	    ermitteln, welcher Controller und welche Aktion des Controllers die Anfrage 
        	    erhalten soll. Die Definition des Controllers, der Aktion sowie weiterer Parameter 
        	    wird in einem Objekt mit Namen <code>Zend_Controller_Dispatcher_Token</code> 
        	    gekapselt, das dann vom <code>Zend_Controller_Dispatcher_Standard</code> verarbeitet 
                wird. Das Routing geschieht nur einmal: wenn zu Beginn die Anfrage erhalten wird und 
        	    bevor der erste Controller aufgerufen wird. 
        	</para>
        	<para>
        	    <code>Zend_Controller_Router_Rewrite</code> wurde entwickelt, um mit reinen PHP 
        	    Strukturen eine mod_rewrite ähnliche Funktionalität zu erlauben. Es richtet sich 
        	    sehr frei nach dem Ruby on Rails Routing und benötigt kein tieferes Wissen über 
        	    URL Weiterleitung des Webservers. Es wurde entwickelt, um mit einer einzigen 
        	    mod_rewrite Regel zu arbeiten. 
        	</para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

            <para>
            oder:
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>
            
            <para>
                Der Rewrite Router kann auch mit dem IIS Webserver verwendet werden, wenn 
                <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink> als Isapi 
                Erweiterung installiert wurde und folgende Umschreibungsregel verwendet wird:
            </para>

            <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

            <note>
                <title>IIS Isapi_Rewrite</title>
                <para>
                    Bei Verwenung von IIS, wird <code>$_SERVER['REQUEST_URI']</code> entweder nicht
                    vorhanden sein oder auf einen leeren String gesetzt sein. In diesem Fall wird
                    <code>Zend_Controller_Request_Http</code> versuchen, den durch die Isapi_Rewrite 
                    Erweiterung gesetzten Wert <code>$_SERVER['HTTP_X_REWRITE_URL']</code> zu 
                    verwenden.
                </para>
            </note>

            <para>Bei der verwendung von Lighttpd, ist folgende Umschreibungsregel gültig:</para>

            <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.usage">
            <title>Einen Router verwenden</title>

            <para>
        	    Um den Rewrite Router richtig zu verwenden, mußt du ihn instanziieren, einige 
        	    benutzerdefinierte Routen hinzufügen und in den Controller einbinden. Der folgende 
        	    Code veranschaulicht die Vorgehensweise:
            </para>

            <programlisting role="php"><![CDATA[
/* Erstelle einen Router */

$router = $ctrl->getRouter(); // gibt standardmäßig einen Rewrite Router zurück
$router->addRoute(
	'user',
	new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.basic">
            <title>Basic Rewrite Router operation</title>

            <para>
                The heart of the RewriteRouter is the definition of user defined
                routes. Routes are added by calling the addRoute method of
                RewriteRouter and passing in a new instance of a class implementing
                <code>Zend_Controller_Router_Route_Interface</code>. Eg.:
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

            <para>
                Rewrite Router comes with four basic types of routes (one of which is special): 
            </para>

            <itemizedlist mark="opencircle">
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.standard-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.static-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.regex-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.default-routes" /> *</para></listitem>
            </itemizedlist>
            
            <para>
                Routes may be used numerous times to create a chain or user defined application 
                routing schema. You may use any number of routes in any configuration, 
                with the exception of Module route which should rather be used once and 
                probably as the most generic route (ie. as a default). Each route will be 
                described in greater detail later on.
            </para>

            <para>
                The first parameter to addRoute is the name of the route. It is 
                used as a handle for getting the routes out of the router, 
                eg. for URL generation purposes. The second parameter being the 
                route itself.
            </para>

            <note>
                <para>
                    The most common use of the route name is through the means of Zend_View url helper:
                </para>
                    
                <programlisting role="php"><![CDATA[
<a href="<?= $this->url('user', array('username' => 'martel')) ?>">Martel</a>]]></programlisting>

                <para>
                    Which would result in href of: <code>user/martel</code>
                </para>

            </note>

            <para>
                Routing is a simple process of iterating through all provided routes 
                and matching it's definitions to current request URI. When a positive match is found, 
                variable values are returned from the Route instance and are injected into Zend_Controller_Request 
                object for later use in dispatcher as well as in user created controllers. On a negative match 
                next route in chain is checked.
            </para>
                
            <note>
                <title>Reverse matching</title>
                <para>
                    Routes are matched in reverse order so make sure your most
                    generic routes are defined first.
                </para>
            </note>

            <note>
                <title>Returned values</title>
                Values which are returned from routing come from URL parameters or user 
                defined route defaults. These variables are later accessible through a 
                Zend_Controller_Request::getParam or Zend_Controller_Action::_getParam methods.
            </note>

            <para>
                There are three special variables which can be used in your routes
                - 'module', 'controller' and 'action'. These special variables are used 
                by Zend_Controller_Dispatcher to find a controller and action to dispatch to.
            </para>

            <note>
                <title>Special variables</title>
                <para>
                    Names of these special variables may be different if you choose to
                    alter the defaults in <code>Zend_Controller_Request_Http</code>
                    by the means of setControllerKey and setActionKey methods.
                </para>
            </note>

        </sect3>
        
        <sect3 id="zend.controller.providedsubclasses.rewriterouter.default-routes">
            <title>Default routes</title>

            <para>
                Zend_Controller_Router_Rewrite comes preconfigured with a default route,
                which will match URIs in the shape of <code>controller/action</code>.
                Additionally, a module name may be specified as the first path
                element, allowing URIs of the form <code>module/controller/action</code>.
                Finally, it will also match any additional parameters appended
                to the URI by default - <code>controller/action/var1/value1/var2/value2</code>.
            </para>

            <para>
                Some examples of how such routes are matched:
            </para>

            <programlisting role="php"><![CDATA[
// Assuming the following:
$ctrl->setControllerDirectory(
    array(
        'default' => '/path/to/default/controllers',
        'news'    => '/path/to/blog/controllers',
        'blog'    => '/path/to/blog/controllers'
    )
);

Module only:
http://example/news
    module == news

Invalid module maps to controller name:
http://example/foo
    controller == foo

Module + controller:
http://example/blog/archive
    module     == blog
    controller == archive

Module + controller + action:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

Module + controller + action + params:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]></programlisting>

            <para>
                The default route is simply a <code>Zend_Controller_Router_Route_Module</code> 
                object stored under the name (index) of 'default' in RewriteRouter. It's created more-or-less 
                like below:
            </para>

            <programlisting role="php"><![CDATA[
$compat = new Zend_Controller_Router_Route_Module(array(), $dispatcher, $request);
$this->addRoute('default', $compat);]]></programlisting>

            <para>
                If you do not want this particular default route in your routing schema, you
                may override it by creating your own 'default' route (ie. storing 
                it under the name of 'default') or removing it altogether by using 
                <code>removeDefaultRoutes()</code>:
            </para>

            <programlisting role="php"><![CDATA[
// Remove any default routes
$router->removeDefaultRoutes();]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.rewritebase">
            <title>Base URL and subdirectories</title>

            <para>
                The rewrite router can be used in subdirectories (eg. 
                <code>http://domain.com/~user/application-root/</code>>) in which case the base
                URL of the application (<code>/~user/application-root</code>) should be 
                automatically detected by <code>Zend_Controller_Request_Http</code> and 
                used accordingly.
            </para>

            <para>
                Should the base URL be detected incorrectly you can override it
                with your own base path with the help of <code>Zend_Controller_Request_Http</code>
                by calling the <code>setBaseUrl()</code> method (see <xref linkend="zend.controller.providedsubclasses.request.http.baseurl" />):
            </para>

            <programlisting role="php"><![CDATA[
$request->setBaseUrl(/~user/application-root/);]]></programlisting>

        </sect3>
        
        <sect3 id="zend.controller.providedsubclasses.rewriterouter.standard-routes">
            <title>Zend_Controller_Router_Route</title>
            
            <para>
            <code>Zend_Controller_Router_Route</code> is a standard framework route which 
            combines ease of use with flexible route definition. Each route consists primarily 
            of URL mapping (of static and dynamic parts (variables)) and may be initialized 
            with defaults as well as with variable requirements.
            </para>
            
            <para>
                Let's imagine our fictional application will need some informational page 
                about the content authors. We want to be able to point our web browsers to 
                <code>http://domain.com/author/martel</code> to see the information 
                about this "martel" guy. And route for such functionality could look like:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'author/:username', 
             array('controller' => 'profile', 'action' => 'userinfo')
         );

$router->addRoute('user', $route);]]></programlisting>            

            <para>
                First parameter in the
                <code>Zend_Controller_Router_Route</code>
                constructor is a route definition that will be matched to a URL. 
                Route definition consists of static and dynamic parts 
                separated by the slash ('/') character. Dynamic parts, called variables,
                are marked by the colon prepended to the variable name  
                (eg. <code>:username</code>). Static parts are just a simple text (eg. <code>author</code>).
            </para>

            <note>
                <title>Character usage</title>
                <para>
                    Current implementation allows you to use any
                    characters (except a slash) as a variable identifier but it is
                    strongly recommended that one uses only php variable friendly
                    characters. Implementation may be altered in the future which 
                    could result in hidden bugs in your code.
                </para>
            </note>

            <para>
                This example route should be matched when you point your browser to 
                <code>'http://domain.com/author/martel'</code> in which case all it's 
                variables will be injected to the <code>Zend_Controller_Request</code> object
                and will be accessible in your ProfileController. Variables returned by 
                this example may be represented as an array of following key 
                and value pairs:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'username' => 'martel',
  'controller' => 'profile',
  'action' => 'userinfo'
);]]></programlisting>            

            <para>
                Later on <code>Zend_Controller_Dispatcher</code> should invoke userinfoAction 
                method of your ProfileController class (in default module) based on these 
                values. There you will be able to access all variables by the means of 
                Zend_Controller_Action::_getParam or Zend_Controller_Request::getParam methods:
            </para>
            
            <programlisting role="php"><![CDATA[
public function userinfoAction() 
{
    $request = $this->getRequest();
    $username = $request->getParam('username');
    
    $username = $this->_getParam('username');
}
]]></programlisting>    

            <para>
                Route definition can contain one more special character - a wildcard - represented 
                by '*' symbol. It is used to gather parameters similarly to Module route (var => value 
                pairs defined in the URI). Following route mimicks Module route behavior:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(':controller/:action/*');
$router->addRoute('default', $route);]]></programlisting>            
            

        <sect4 id="zend.controller.providedsubclasses.rewriterouter.variable-defaults">
            <title>Variable defaults</title>

            <para>
                Every variable in the route can have a default and this is what the second 
                parameter of the <code>Zend_Controller_Router_Route</code> constructor 
                is used for. This parameter is an array with keys representing variable 
                names and with values as desired defaults:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                Above route will match URLs like <code>'http://domain.com/archive/2005'</code> and
                <code>'http://example.com/archive'</code>. In the latter case the variable
                year will have an initial default value of 2006.
            </para>

            <para>
                This example will result in injecting a year variable to the request object. 
                And since no routing information is present (no controller and
                action parameters are defined) application will be dispatched to default controller 
                and action method (which are both defined in <code>Zend_Controller_Dispatcher_Abstract</code>). 
                To make it more usable you have to provide a valid controller and 
                a valid action as route's defaults:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006, 
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                This route will then result in dispatching to showAction of ArchiveController.
            </para>

        </sect4>

        <sect4 id="zend.controller.providedsubclasses.rewriterouter.variable-requirements">
            <title>Variable requirements</title>

            <para>
                One can add a third parameter to the <code>Zend_Controller_Router_Route</code>
                constructor where variable requirements may be set. These are defined 
                as parts of a regular expression:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006, 
                 'controller' => 'archive',
                 'action' => 'show'
             ),
             array('year' => '\d+')
         );
$router->addRoute('archive', $route);]]></programlisting>

        </sect4>

        <para>
            With route defined like above, Rewrite Router will match it 
            only when the year variable will contain numeric data, eg. 
            <code>http://domain.com/archive/2345</code>. URL of 
            <code>http://example.com/archive/test</code> will not be matched 
            and control will be passed to the next route in chain instead.
        </para>

        </sect3>        

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.static-routes">
            <title>Zend_Controller_Router_Route_Static</title>

            <para>
                The examples above all use dynamic routes -- routes that contain
                patterns to match against. Sometimes, however, a particular
                route is set in stone, and firing up the regular expression
                engine would be an overkill. The answer to this situation is to use
                static routes:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Static(
             'login', 
             array('controller' => 'auth', 'action' => 'login')
         );
$router->addRoute('login', $route);]]></programlisting>

        <para>
            Above route will match a URL of <code>http://domain.com/login</code>
        </para>
        
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.regex-routes">
            <title>Zend_Controller_Router_Route_Regex</title>

            <para>
                In addition to the default and static route types, a Regular
                Expression route type is available. This route offers more power
                and flexibility over the others, but at a slight cost of
                complexity. And should be faster than a standard Route at the same time.
            </para>

            <para>
                As well as the standard route, this route has to be initialized with 
                route definition and some defaults. Let's create an archive route as 
                an example, similar to the previoulsy defined one, only using Regex 
                route this time:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array(
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>
            
            <para>
                Every defined regex subpattern will be injected 
                to the request object. With our above example, after successful matching 
                <code>http://domain.com/archive/2006</code>, the resulting value array 
                may look like:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  1 => '2006',
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <note>
                <para>
                    Leading and trailing slashes are trimmed from the URL in the Router 
                    prior to a match. As a result, matching the URL <code>http://domain.com/foo/bar/</code>,
                    would involve a regex of <code>foo/bar</code>.
                </para>
            </note>

            <note>
                <para>
                    Line start and line end anchors ('^' and '$', respectively)
                    are automatically pre- and appended to all expressions.
                    Thus, you should not use these in your regular expressions.
                </para>
            </note>

            <note>
                <para>
                    This route class uses the <code>#</code> character for a delimiter. This
                    means that you will need to escape hash characters ('#') in your route definitions.
                    But since these characters aren't passed to the webserver (named anchors), 
                    you will rarely need to do so.
                </para>
            </note>

            <para>
                You can get the contents of the defined subpatterns the usual way:
            </para>

            <programlisting role="php"><![CDATA[
public function showAction() 
{
    $request = $this->getRequest();
    $year = $request->getParam(1); // $year = '2006';
}
]]></programlisting>    

            <note>
                <para>Notice the key is an integer (1) instead of a string ('1').</para>
            </note>
            
            <para>
                This route will not yet work exactly the same as it's standard route counterpart since
                the default for 'year' is not yet set. And what may not yet be evident we will 
                have a problem with a trailing slash even if we declare default for the year 
                and make the subpattern optional. The solution is to make the whole year part optional 
                along with the slash but catch only the numeric part:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive(?:/(\d+))?', 
             array(
                 'year' => '2006',
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>
            
            <para>
                Now let's get to the problem you have probably noticed on your 
                own by now. Using integer based keys for parameters is not 
                an easily manageable solution and may be potentially problematic 
                in the long run. And that's where the third parameter comes in. One which
                represents a map of regex subpatterns to parameter named keys. Let's work 
                on our easier example:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array(
                 'controller' => 'archive',
                 'action' => 'show'
             ),
             array(
                1 => 'year'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                This will result in following values injected into Request:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'year' => '2006',
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <para>
                The map may be defined in both ways to make it work in any 
                environment (eg. Zend_Config). Keys may contain variable names
                or subpattern numbers. 
            </para>
            
            <note>
                <para>
	                 Subpattern keys have to be represented by integers
                </para>
            </note>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                1 => 'year'
             )
         );

// OR
         
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             )
         );       
]]></programlisting>
           
            <para>
                Notice that the numeric index in Request values is now gone and a named variable is shown 
                in it's place. Of course you can mix numeric and named variables if you wish:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)/page/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             )
         );       
]]></programlisting>

            <para>
                Which will result in mixed values available in the Request. 
                Example URL <code>http://domain.com/archive/2006/page/10</code>
                will result in following values:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'year' => '2006',
  2 => 10,
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <para>
                Since regex is not easily reversed, you will need to prepare 
                reverse URL if you wish to use an url helper or even an 
                assemble method of this class. This reversed path is represented 
                by a string parsable by sprintf() and is defined as a fourth 
                construct parameter:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             ),
             'archive/%s'
         );       
]]></programlisting>

            <para>
                All of this is something which was already possible by the means of 
                a standard route object, so where's the benefit in using Regex Route, you ask?
                You can describe any type of URL without any restrictions. 
                Imagine you have a blog and wish to create URLs like:
                <code>http://domain.com/blog/archive/01-Using_the_Regex_Router.html</code>.
                Now that's something which was not possible before, is it? Here's the solution:
            </para>


            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'blog/archive/(\d+)-(.+)\.html',
             array('controller' => 'blog', 'action' => 'view'), 
             array(1 => 'id', 2 => 'description'),
             'blog/archive/%d-%s.html'
         );
$router->addRoute('blogArchive', $route);
]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.add-config">
            <title>Zend_Config mit dem RewriteRouter verwenden</title>

            <para>
                Manchmal ist es praktischer, eine Konfigurationsdatei mit neuen Routen zu 
                aktualisieren, als den Code zu ändern. Dies ist mit Hilfe der 
                <code>addConfig()</code> Methode möglich. Im Wesentlichen kann man eine 
                Zend_Config kompatible Konfiguration erstellen, in seinem Code einlesen und an den
                RewriteRouter übergeben:
            </para>

            <para>
                Als Beispiel wird die folgende INI Datei angenommen:
            </para>

            <programlisting role="php"><![CDATA[
[production]

routes.archive.route = "archive/:year/*"
routes.archive.defaults.controller = archive
routes.archive.defaults.action = show
routes.archive.defaults.year = 2000
routes.archive.reqs.year = "\d+"

routes.news.type = "Zend_Controller_Router_Route_Static"
routes.news.route = "news"
routes.news.defaults.controller = "news"
routes.news.defaults.action = "list"

routes.archive.type = "Zend_Controller_Router_Route_Regex"
routes.archive.route = "archive/(\d+)"
routes.archive.defaults.controller = "archive"
routes.archive.defaults.action = "show"
routes.archive.map.1 = "year" 
; OR: routes.archive.map.year = 1
]]></programlisting>

            <para>
                Die oben angeführte INI Datei kann dann wie folgt in ein 
                <code>Zend_Config</code> Objekt eingelesen werden:
            </para>

            <programlisting role="php"><![CDATA[
$config = new Zend_Config_Ini('/path/to/config.ini', 'production');
$router = new Zend_Controller_Router_Rewrite();
$router->addConfig($config, 'routes');
]]></programlisting>

            <para>
            	Im oberen Beispiel teilen wir dem Router mit, den 'routes' Bereich der INI Datei
            	für seine Routen zu verwenden. Jeder Schlüssel auf erster Ebene in diesem Bereich
            	wird verwendet, um den Namen der Routen zu definieren; das obige Beispiel definiert
            	die Routen 'archive' und 'news'. Jede Route erfordert dann mindestens einen 'route'
            	Eintrag und einen oder mehrere 'defaults' Einträge; optional können eine oder 
            	mehrere 'reqs' (kurz für 'required', d.h. erforderlich) Einträge angegeben werden.
            	Alles in allem entspricht dies den drei Argumenten, die an ein 
            	<code>Zend_Controller_Router_Route_Interface</code> Objekt übergeben werden. Ein
            	Optionsschlüssel 'type' kann verwendet werden, um den Typ der Routenklasse für 
            	diese Route anzugeben; standardmäßig wird <code>Zend_Controller_Router_Route</code>
            	verwendet. Im obigen Beispiel wird die 'news' Route definiert, um
            	<code>Zend_Controller_Router_Route_Static</code> zu verwenden.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.http">
        <title>Zend_Controller_Response_Http</title>

        <para>
            <code>Zend_Controller_Response_Http</code> ist ein Response Objekt, das für die 
            Verwendung in einer HTTP Umgebung geeignet ist. Es enthält Methoden für das Setzen,
            Erhalten und Entfernen von Headern und die <code>__toString()</code> Methode sendet
            alle Header auf einmal bevor die Reponse Inhalte zurückgegeben werden.
        </para>

        <para>
            <code>setHeader()</code> nimmt zwei Argumente entgegen, einen Header Typ und den 
            Header Wert. Ein dritter, optionaler Parameter (wenn übergeben und true) erzwingt das 
            Überschreiben des vorhandenen Headers gleichen Typs mit dem neuen Header.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.cli">
        <title>Zend_Controller_Response_Cli</title>

        <para>
            <code>Zend_Controller_Response_Cli</code> is ein Response Object, das für die
            Verwendung in einer CLI Umgebung geeignet ist. Es hat keine Methoden für die Behandlung
            von Headern und gibt nur alle Inhalte zurück, wenn <code>__toString()</code> 
            aufgerufen wird.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
