<sect1 id="zend.controller.plugins">
	<title>Plugins</title>
	
	<sect2 id="zend.controller.plugins.introduction">
		<title>Einführung</title>

        <para>
            Die Controller Architektur beinhaltet ein Pluginsystem, das den Aufruf von Anwendercode
            ermöglicht, wenn bestimmte Ereignisse im Controller Prozess auftreten. Der Front 
            Controller verwendet einen Plugin Broker als eine Registry für User Plugins und der 
            Plugin Broker stellt sicher, dass die Ereignismethoden von jedem Plugin aufgerufen 
            werden, die im Front Controller registriert worden sind.
        </para>

        <para>
            Die Ereignismethoden sind in der abstrakten Klasse 
            <code>Zend_Controller_Plugin_Abstract</code> definiert, von dem User Plugin Klassen 
            angeleitet werden müssen:

            <itemizedlist>
                <listitem>
                    <para>
                        <code>routeStartup()</code> wird aufgerufen bevor 
                        <code>Zend_Controller_Front</code> damit startet den Request anhand der 
                        Routen zu überprüfen.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>routeShutdown()</code> wird aufgerufen wenn <code>Zend_Controller_Router</code>
                        beendet, nachdem Zend_Controller_Front vom das Routing beendet.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>dispatchLoopStartup()</code> wird aufgerufen, bevor 
                        <code>Zend_Controller_Front</code> den Dispatch Loop aufnimmt.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>preDispatch()</code> wird von <code>Zend_Controller_Dispatcher</code> 
                        aufgerufen, bevor eine Aktion verarbeitet wird. Dieser Callback erlaubt ein 
                        Proxy oder Filter Verhalten. Durch Verändern des Requests und Zurücksetzen
                        des Verarbeitungsstatus (mittels 
                        <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>) kann
                        die aktuelle Aktion übersprungen werden.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>postDispatch()</code> wird von <code>Zend_Controller_Dispatcher</code> 
                        aufgerufen, nachdem eine Aktion verarbeitet wurde. Dieser Callback erlaubt
                        ein Proxy oder Filter Verhalten. Durch Verändern des Requests und 
                        Zurücksetzen des Verarbeitungsstatus (mittels 
                        <code>Zend_Controller_Request_Abstract::setDispatched(false)</code>) kann
                        die eine neue Aktion zur Verarbeitung festgelegt werden.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>dispatchLoopShutdown()</code> wird aufgerufen, bevor 
                        <code>Zend_Controller_Front</code> den Dispatch Loop beendet.
                    </para>
                </listitem>
        </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.controller.plugins.writing">
        <title>Plugins schreiben</title>

        <para>
            Um eine Plugin Klasse zu schreiben, bindet man einfach die abstrakte Klasse 
            <code>Zend_Controller_Plugin_Abstract</code> ein und erweitert sie:
            <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Controller/Plugin/Abstract.php';
    
    class MyPlugin extends Zend_Controller_Plugin_Abstract
    {
        // ...
    }]]></programlisting>
        </para>
        <para>
            Keine der Methoden von <code>Zend_Controller_Plugin_Abstract</code> sind abstrakt, so 
            dass Plugin Klassen nicht gezwungen werden, irgend einen der vorhandenen 
            Ereignismethoden zu implemetieren, die oben gelistet wurden. Schreiber von Plugins 
            können genau die Methoden implementieren, die sie für ihre speziellen Bedürfnisse 
            benötigen.
        </para>
        <para>
            <code>Zend_Controller_Plugin_Abstract</code> stellt den Controller Plugins außerdem die 
            Request und Response Objekte über die <code>getRequest()</code> und 
            <code>getResponse()</code> Methoden zur Verfügung.
        </para>
    </sect2>

    <sect2 id="zend.controller.plugins.using">
        <title>Plugins verwenden</title>
        <para>
            Plugin Klassen werden mit <code>Zend_Controller_Front::registerPlugin()</code> 
            vor dem Dispatching registriert. Der folgende Schnipsel zeigt, wie ein Plugin in der
            Controllerkette verwendet werden kann:
            <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Controller/Front.php';
    require_once 'Zend/Controller/Router.php';
    require_once 'Zend/Controller/Plugin/Abstract.php';
    
    class MyPlugin extends Zend_Controller_Plugin_Abstract
    {
        public function routeStartup()
        {
            $this->getResponse()->appendBody('<p>routeStartup() called</p>');
        }
    
        public function routeShutdown($request)
        {
            $this->getResponse()->appendBody('<p>routeShutdown() called</p>');
        }
    
        public function dispatchLoopStartup($request)
        {
            $this->getResponse()->appendBody('<p>dispatchLoopStartup() called</p>');
        }
    
        public function preDispatch($request)
        {
            $this->getResponse()->appendBody('<p>preDispatch() called</p>');
        }
    
        public function postDispatch($request)
        {
            $this->getResponse()->appendBody('<p>postDispatch() called</p>');
        }
    
        public function dispatchLoopShutdown()
        {
            $this->getResponse()->appendBody('<p>dispatchLoopShutdown() called</p>');
        }
    }
    
    $controller = Zend_Controller_Front::getInstance();
    $controller->setControllerDirectory('/path/to/controllers')
               ->setRouter(new Zend_Controller_Router())
               ->registerPlugin(new MyPlugin());
    $response = $controller->dispatch();
    
    echo $response;]]></programlisting>
        </para>
	</sect2>
		
</sect1>