<sect1 id="zend.gdata.introduction">
    <title>Einführung zu Gdata</title>
    <para>
        Die APIs von Google Data bieten ein programmtechnisches Interface zu einigen von Google's Online
        Services. Das Google Data Protokoll basiert auf dem
        <ulink url="http://ietfreport.isoc.org/idref/draft-ietf-atompub-protocol/">Atom Publishing Protokoll</ulink>
        und erlaubt Client Anwendungen das Empfangen von passenden Anfragen zu Daten, senden von Daten,
        modifizieren von Daten und löschen von Daten wobei Standard HTTP und das Atom Syndication Format verwendet
        wird. Die Zend_Gdata Komponente ist ein PHP 5 Interface für den Zugriff auf Daten von Google von PHP
        aus. Die Zend_Gdata Komponente unterstützt auch den Zugriff auf andere Services die das Atom
        Publishing Protokoll implementieren.  
    </para>

    <para>
        Siehe <ulink url="http://code.google.com/apis/gdata/">http://code.google.com/apis/gdata/</ulink> für
        mehr Informationen über die Google Data API.
    </para>

    <para>
        Die Services auf die durch Zend_Gdata zugegriffen werden kann beinhalten unter anderem:

        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="zend.gdata.calendar">Google Kalender</link> ist eine populäre online
                    Kalender Anwendung.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.spreadsheets">Google Tabellenkalkulation</link> bietet ein
                    gemeinschaftliches online Tabellenkalkulations Tool welches als einfacher Datenspeicher
                    für eigene Anwendungen verwendet werden kann. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.gapps">Google Versorgung</link> bietet die Möglichkeit
                    Benutzerdaten, Spitznamen und Emaillisten auf einer Google Apps gehosten Domain zu
                    erstellen, erhalten, aktualisieren und zu löschen.
                </para>
            </listitem>
            <listitem>
                <para>
                    Google Blogger ist ein populärer Internet Provider von "push-button Veröffentlichung" und
                    Verbreitung.
                </para>
            </listitem>
            <listitem>
                <para>
                    Google CodeSearch erlaubt das Suchen von öffentlichem Source Code für viele Projekte.
                </para>
            </listitem>
            <listitem>
                <para>
                    Google Notebook erlaubt das sehen von veröffentlichten Notebook Inhalten.
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <note>
        <title>Nicht unterstützte Services</title>
        <para>
            Die Google Data API unterstützt auch Googles Base und Picasa Web Albums aber Zend_Gdata bietet
            in diesem Release keine Helfer Klassen für diese Produkte.
        </para>

        <para>
            Zend_Gdata bietet kein Interface zu irgendwelchen anderen Google Services wie Search, Gmail,
            Translation oder Maps. Nur Services die das Google Data API unterstützen werden unterstützt. 
        </para>
    </note>

    <sect2 id="zend.gdata.introduction.structure">
        <title>Struktur von Zend_Gdata</title>
        <para>
            Zend_Gata besteht aus verschiedenen Typen von Klassen:
            <itemizedlist>
                <listitem>
                    <para>
                        Service Klassen - abgeleitet von Zend_Gdata_App. Diese beinhalten auch andere Klassen
                        wie Zend_Gdata, Zend_Gdata_Spreadsheeps, usw. Diese Klassen erlauben die Interaktion
                        mit APP oder GData Services und bieten die Möglichkeit Feeds und Einträge zu empfangen,
                        Einträge zu senden, zu aktualisieren und zu löschen.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Abfrage Klassen - abgeleitet von Zend_Gdata_Query. Diese beinhalten auch andere Klassen
                        für spezielle Services, wie Zend_Gdata_Spreadsheet_ListQuery und
                        Zend_Gdata_Spreadsheets_CellQuery. Abfrage Klassen bieten Methoden die verwendet werden
                        können um Abfragen für Daten zu erstellen die von GData Services empfangen werden.
                        Die Methoden inkludieren Getter und Setter wie <code>setUpdatedMin()</code>,
                        <code>setStartIndex()</code>, und <code>getPublishedMin()</code>. Die Abfrage Klassen
                        haben auch eine Methode um eine URL zu erhalten die die erstellte Abfrage repräsentieren.
                        -- <code>getQueryUrl</code>. Alternativ kann man die Abfrage String Komponente der URL
                        erhalten indem die <code>getQueryString()</code> Methode verwendet wird.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Feed Klassen - abgeleitet von Zend_Gdata_App_Feed. Diese beinhalten auch andere
                        Klassen wie Zend_Gdata_Feed, Zend_Gdata_Spreadsheets_SpreadsheetFeed, und
                        Zend_Gdata_Spreadsheets_ListFeed. Diese Klassen repräsentieren Feeds von Einträgen
                        die von Services empfangen wurden. Sie werden primär verwendet um Daten die von
                        Services zurückgegeben werden zu erhalten.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Eingabe Klassen - abgeleitet von Zend_Gdata_App_Entry. Diese beinhalten auch andere
                        Klassen wie Zend_Gdata_Entry, und Zend_Gdata_Spreadsheets_ListEntry. Diese Klassen
                        repräsentieren Einträge die von Services empfangen oder für die Erstellung von Daten,
                        die an Services geschickt werden, verwendet werden. Zusätzlich zur Möglichkeit die
                        Eigenschaften eines Eintrages (wie den Zellen Wert der Tabellenkalkulation) zu setzen,
                        kann das Objekt des Eintrages verwendet werden um Aktualisierungs- oder Löschanfragen
                        an ein Service zu senden. Zum Beispiel kann <code>$entry->save()</code> aufgerufen werden
                        um Änderungen die an einem Eintrage durchgeführt wurden zu einem Service zurück
                        zu speichern von welche der Eintrag initiiert wurde, oder <code>$entry->delete()</code>
                        um einen Eintrag von einem Server zu löschen.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Andere Daten Modell Klassen - abgeleitet von Zend_Gdata_App_Extension. Diese beinhalten
                        Klassen wie Zend_Gdata_App_Extension_Title (repräsentiert das atom:title XML Element),
                        Zend_Gdata_Extension_When (repräsentiert das gd:when XML Element das von dem GData Event
                        "Kind" verwendet wird), und Zend_Gdata_Extension_Cell (repräsentiert das gs:cell XML
                        Element das von Google Tabellenkalkulation verwendet wird). Diese Klassen werden pur
                        verwendet um von den Server zurückgegebene Daten zu speichern und für die Erstellung von
                        Daten die an Services gesendet werden. Diese beinhalten Getter und Setter wie
                        <code>setText()</code> um den Kindtext Node eines Elements zu setzen,
                        <code>getText()</code> um den Text Node eines Elements zu erhalten,
                        <code>getStartTime()</code> um das Startzeit Attribut eines When Elements oder anderen
                        ähnlichen Methoden zu empfangen. Die Daten Modell Klassen beinhalten auch Methoden
                        wie <code>getDOM()</code> um eine DOM Repräsentation des Elements und aller Kinder zu
                        erhalten, und <code>transferFromDOM()</code> um eine Daten Modell Repräsentation des
                        DOM Baumes zu erstellen.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.gdata.introduction.services">
        <title>Mit Google Services interagieren</title>
        <para>
            Google Daten Services basieren auf dem Atom Publishing Protokoll (APP) und dem Atom Syndication
            Format. Um mit APP oder den Google Services zu interagieren indem Zend_Gdata verwendet wird,
            müssen Service Klassen wie Zend_Gdata_App, Zend_Gdata, Zend_Gdata_Spreadsheets, usw. verwendet
            werden. Diese Service Klassen bieten Methoden um Daten von Services als Feeds zu empfangen, neue
            Einträge in Feeds einzufügen, Einträge zu aktuslieieren und Einträge zu löschen.
        </para>

        <para>
            Achtung: Ein komplettes Beispiel davon wie mit Zend_Gdata gearbeitet werden kann ist im
            <code>demos/Zend/Gdata</code> Verzeichnis vorhanden. Dieses Beispiel läuft von der Kommandozeile
            aus, aber die enthaltenen Methoden sind einfach in einem Web Anwendung zu portieren.
        </para>
    </sect2>

    <sect2 id="zend.gdata.introdduction.magicfactory">
        <title>Instanzen von Zend_Gdata Klassen erhalten</title>
        <para>
            Der Zend Framework Namensstandard erzwingt das alle Klassen nach der Verzeichnis Struktur benannt
            werden in welcher sie vorhanden sind. Zum Beispiel eine Erweiterung die zu Tabellenkalkulation
            gehört und in <code>Zend/Gdata/Spreadsheets/Extension/...</code> gespeichert ist, muß als Ergebnis
            <code>Zend_Gdata_Spreadsheets_Extension_...</code> benannt werden. Das verursacht eine Menge an
            Tipparbeit wenn versucht wird eine neue Instanz eines Zellen Elements zu erstellen!
        </para>
        <para>
            Wir haben eine magische Fabriksmethode in alle Service Klassen (wie Zend_Gdata_App, Zend_Gdata,
            Zend_Gdata_Spreadsheets) implementiert welche die Erstellung neuer Instanzen von Daten Modellen,
            Abfragen und anderen Klassen viel einfacher macht. Diese magische Fabriksmethode ist durch die
            Verwendung der magischen <code>__call</code> Methode implementiert um auf alle Versuche
            <code>$service->newXXX(arg1, arg2, ...)</code> aufzurufen, angewendet zu werden. Basieren auf dem
            Wert von XXX, wird eine Suche in allen registrierten 'Paketen', für die gewünschte Klasse,
            durchgeführt. Hier sind einige Beispiele:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Gdata_Spreadsheets');

$ss = new Zend_Gdata_Spreadsheets();

// Erstellt ein Zend_Gdata_App_Spreadsheets_CellEntry
$entry = $ss->newCellEntry();

// Erstellt ein Zend_Gdata_App_Spreadsheets_Extension_Cell
$cell = $ss->newCell();
$cell->setText('Mein Zellenwert');
$cell->setRow('1');
$cell->setColumn('3');
$entry->cell = $cell;

// ... $entry kann dann verwendet werden um eine Aktualisierung an eine Google Tabellenkalkulation zu senden]]>
        </programlisting>

        <para>
            Jede Service Klasse im abgeleiteten Baum ist dafür verantwortlich das die richtigen 'Pakete'
            (Verzeichnisse) registriert werden, in welchen dann durch den Aufruf der matischen Fabriksmethode,
            gesucht wird. 
        </para>
    </sect2>


    <sect2 id="zend.gdata.introduction.authentication">
        <title>Google Data Client Authentifizierung</title>
        <para>
            Die meisten Google Daten Services erfordern das sich die Client Anwendung auf dem Google Server
            authentifiziert bevor auf private Daten zugegriffen, oder Daten gespeichert oder gelöscht werden
            können. Es gibt zwei Implementationen der Authentifizierung für Google Daten:
            <link linkend="zend.gdata.authsub">AuthSub</link> und
            <link linkend="zend.gdata.clientlogin">ClientLogin</link>. Zend_Gdata bietet Klassen Interfaces
            für beide dieser Methoden.
        </para>

        <para>
            Die meisten anderen Typen von Abfragen auf Google Daten Servicen benötigen keine Authentifizierung.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.dependencies">
        <title>Abhängigkeiten</title>
        <para>
            Zend_Gdata makes use of
            <link linkend="zend.http.client">Zend_Http_Client</link> to send
            requests to google.com and fetch results.  The response to most
            Google Data requests is returned as a subclass of the
            Zend_Gdata_App_Feed or Zend_Gdata_App_Entry classes.
        </para>

        <para>
            Zend_Gdata assumes your PHP application is running on a host that
            has a direct connection to the Internet.
            The Zend_Gdata client operates by contacting Google Data servers.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.creation">
        <title>Erstellen eines neuen Gdata Klienten</title>

        <para>
            Create a new object of class Zend_Gdata_App, Zend_Gdata, or one
            of the subclasses available that offer helper methods for
            service-specific behavior.
        </para>

        <para>
            The single optional parameter to the Zend_Gdata_App constructor
            is an instance of
            <link linkend="zend.http.client">Zend_Http_Client</link>.
            If you don't pass this parameter, Zend_Gdata creates a default
            Zend_Http_Client object, which will not have associated
            credentials to access private feeds.  Specifying the
            Zend_Http_Client object also allows you to
            pass configuration options to that client object.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Http_Client');
Zend_Loader::loadClass('Zend_Gdata');

$client = new Zend_Http_Client();
$client->setConfig( ...options... );

$gdata = new Zend_Gdata($client);]]>
        </programlisting>

        <para>
            Also see the sections on authentication for methods to
            create an authenticated Zend_Http_Client object.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.parameters">
        <title>Übliche Abfrage Parameter</title>

        <para>
            You can specify parameters to customize queries with Zend_Gdata.
            Query parameters are specified using subclasses of Zend_Gdata_Query.
            The Zend_Gdata_Query class includes methods to set all query
            parameters used throughout GData services.  Individual services,
            such as Spreadsheets, also provide query classes to defined
            parameters which are custom to the particular service and feeds.
            Spreadsheets includes a CellQuery class to query the Cell Feed
            and a ListQuery class to query the List Feed, as different
            query parameters are applicable to each of those feed types.

            The GData-wide parameters are described below.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    The <code>q</code> parameter specifies a full-text
                    query.  The value of the parameter is a string.
                </para>
                <para>
                    Set this parameter with the <code>setQuery()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>alt</code> parameter specifies the feed type.
                    The value of the parameter can be
                    <code>atom</code>,
                    <code>rss</code>,
                    <code>json</code>,
                    or <code>json-in-script</code>.
                    If you don't specify this parameter, the default feed type
                    is <code>atom</code>.  NOTE: Only the output of the
                    atom feed format can be processed using
                    <code>Zend_Gdata</code>.
                    The <code>Zend_Http_Client</code> could be used to retrieve
                    feeds in other formats, using query URLs generated by the
                    <code>Zend_Gdata_Query</code> class and its subclasses.
                </para>
                <para>
                    Set this parameter with the <code>setAlt()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>maxResults</code> parameter limits the number
                    of entries in the feed.  The value of the parameter is
                    an integer.  The number of entries returned in the feed
                    will not exceed this value.
                </para>
                <para>
                    Set this parameter with the <code>setMaxResults()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>startIndex</code> parameter specifies the
                    ordinal number of the first entry returned in the feed.
                    Entries before this number are skipped.
                </para>
                <para>
                    Set this parameter with the <code>setStartIndex()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>updatedMin</code> and <code>updatedMax</code>
                    parameters specify bounds on the entry date.
                    If you specify a value for <code>updatedMin</code>,
                    no entries that were updated earlier than the date
                    you specify are included in the feed.  Likewise
                    no entries updated after the date specified by
                    <code>updatedMax</code> are included.
                </para>
                <para>
                    You can use numeric timestamps, or a variety of
                    date/time string representations as the value for
                    these parameters.
                </para>
                <para>
                    Set this parameter with the <code>setUpdatedMin()</code>
                    and <code>setUpdatedMax()</code> functions.
                </para>
            </listitem>

        </itemizedlist>

        <para>
            There is a <code>get</code> function for each
            <code>set</code> function.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Gdata_Query();
$query->setMaxResults(10);
echo $query->getMaxResults();   // returns 10]]>
        </programlisting>

        <para>
            The Zend_Gdata class also implements "magic" getter and
            setter methods, so you can use the name of the parameter
            as a virtual member of the class.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Gdata_Query();
$query->maxResults = 10;
echo $query->maxResults;        // returns 10]]>
        </programlisting>

        <para>
            You can clear all parameters with the <code>resetParameters()</code>
            function.  This is useful to do if you reuse a Zend_Gdata
            object for multiple queries.
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = new Zend_Gdata_Query();
$query->maxResults = 10;
// ...get feed...

$query->resetParameters();      // clears all parameters
// ...get a different feed...]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.gdata.introduction.getfeed">
        <title>Fetching a feed</title>

        <para>
            Use the <code>getFeed()</code> function to retrieve
            a feed from a specified URI.
            This function returns an instance of class specified
            as the second argument to getFeed, which defaults to
            Zend_Gdata_Feed.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$query->setMaxResults(10);
$feed = $gdata->getFeed($query);]]>
        </programlisting>

        <para>
            See later sections for special functions in each
            helper class for Google Data services.  These
            functions help you to get feeds from the URI that is
            appropriate for the respective service.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.paging">
        <title>Working with multi-page feeds</title>
        
        <para>
            When retrieving a feed that contains a large number of entries,
            the feed may be broken up into many smaller "pages" of feeds. When
            this occurs, each page will contain a link to the next page in the
            series. This link can be accessed by calling
            <code>getLink('next')</code>. The following example shows how to
            retrieve the next page of a feed:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
function getNextPage($feed) {
    $nextURL = $feed->getLink('next');
    if ($nextURL !== null) {
        return $gdata->getFeed($nextURL);
    } else {
        return null;
    }
}]]>
        </programlisting>

        <para>
            If you would prefer not to work with pages in your application,
            pass the first page of the feed into
            <code>Zend_Gdata_App::retrieveAllEntriesForFeed()</code>, which
            will consolidate all entries from each page into a single feed.
            This example shows how to use this function:
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$feed = $gdata->retrieveAllEntriesForFeed($gdata->getFeed($query));]]>
        </programlisting>

        <para>
            Keep in mind when calling this function that it may take a long
            time to complete on large feeds. You may need to increase PHP's
            execution time limit by calling <code>set_time_limit()</code>.
        </para>
        
    </sect2>

    <sect2 id="zend.gdata.introduction.usefeedentry">
        <title>Working with data in feeds and entries</title>

        <para>
            After retrieving a feed, you can read the data from the feed
            or the entries contained in the feed using either the accessors
            defined in each of the data model classes or the magic
            accessors.  Here's an example:
        </para>

        <programlisting role="php"><![CDATA[<?php
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$gdata = new Zend_Gdata($client);
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$query->setMaxResults(10);
$feed = $gdata->getFeed($query);
foreach ($feed as $entry) {
    // using the magic accessor
    echo 'Title: ' . $entry->title->text;
    // using the defined accessors
    echo 'Content: ' . $entry->getContent()->getText();
}]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.gdata.introduction.updateentry">
        <title>Updating entries</title>

        <para>
            After retrieving an entry, you can update that entry and save
            changes back to the server.  Here's an example:
        </para>

        <programlisting role="php"><![CDATA[<?php
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$gdata = new Zend_Gdata($client);
$query = new Zend_Gdata_Query(
        'http://www.blogger.com/feeds/blogID/posts/default');
$query->setMaxResults(10);
$feed = $gdata->getFeed($query);
foreach ($feed as $entry) {
    // update the title to append 'NEW'
    echo 'Old Title: ' . $entry->title->text;
    $entry->title->text = $entry->title->text . ' NEW';

    // update the entry on the server
    $newEntry = $entry->save();
    echo 'New Title: ' . $newEntry->title->text;
}]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.gdata.introduction.post">
        <title>Posting entries to Google servers</title>

        <para>
            The Zend_Gdata object has a function <code>post()</code>
            with which you can upload data to save new entries
            to Google Data services.
        </para>

        <para>
            You can use the data model classes for each service to
            construct the appropriate entry to post to Google's
            services.  The <code>post()</code> function will
            accept a child of Zend_Gdata_App_Entry as data to
            post to the service.  The method returns a child
            of Zend_Gdata_App_Entry which represents the state
            of the entry as it was returned from the server.
        </para>

        <para>
            Alternatively, you could construct the XML structure
            for an entry as a string and pass the string to the
            <code>post()</code> function.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata($authenticatedHttpClient);

$entry = $gdata->newEntry();
$entry->title = $gdata->newTitle('Playing football at the park');
$content = $gdata->newContent('We will visit the park and play a few football matches');
$content->setType('text');
$entry->content = $content;

$entryResult = $gdata->insertEntry($entry,
        'http://www.blogger.com/feeds/blogID/posts/default');

echo 'The <id> of the resulting entry is: ' . $entryResult->id->text;]]>
        </programlisting>

        <para>
            To post entries, you must be using an authenticated
            Zend_Http_Client that you created using the Zend_Gdata_AuthSub
            or Zend_Gdata_ClientLogin classes.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.delete">
        <title>Deleting entries on Google servers</title>

        <para>
            Option 1: The Zend_Gdata object has a function <code>delete()</code>
            with which you can delete entries from Google Data
            services.  Pass the edit URL value from
            a feed entry to the <code>delete()</code> method.
        </para>

        <para>
            Option 2: Alternatively, you can call <code>$entry->delete()</code>
            on an entry retrieved from a Google service.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata($authenticatedHttpClient);
// a Google Data feed
$feedUri = ...;
$feed = $gdata->getFeed($feedUri);
foreach ($feed as $feedEntry) {
    // Option 1 - delete the entry directly
    $feedEntry->delete();
    // Option 2 - delete the entry by passing the edit URL to $gdata->delete()
    // $gdata->delete($feedEntry->getEditLink()->href);
}]]>
        </programlisting>

        <para>
            To delete entries, you must be using an authenticated
            Zend_Http_Client that you created using the Zend_Gdata_AuthSub
            or Zend_Gdata_ClientLogin classes.
        </para>

    </sect2>

</sect1>
