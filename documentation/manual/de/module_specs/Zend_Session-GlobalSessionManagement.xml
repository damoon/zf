<sect1 id="zend.session.globalsessionmanagement">

    <title>Globales Session Management</title>

    <para>
        Das Standardverhalten von Sessions kann mit Hilfe der statischen Methoden in Zend_Session geändert werden.
        Das komplette Management und die Manipulation des globalen Session Managements findet durch Verwendung
        von Zend_Session statt, was auch die Konfiguration der 
        <ulink url="http://www.php.net/session#session.configuration">üblichen Optionen, welche von ext/session unterstützt werden,</ulink>
        durch <code>Zend_Session::setOptions()</code> enthält. Zum Beispiel kann, das fehlerhafte Versichern das ein
        sicherer save_path oder ein eindeutiger Cookiename von ext/session durch
        <code>Zend_Session::setOptions()</code> verwendet wird, zu einem Sicherheitsproblem werden.
    </para>

    <sect2 id="zend.session.setoptions">

        <title>Zend_Session::setOptions()</title>

        <para>
            Wenn der erste Session Namensraum angefragt wird, startet Zend_Session selbsttätig, egal ob es bereits
            explizit gestartet wurde mit Hilfe von
            <link linkend="zend.session.startingasession"><code>Zend_Session::start()</code></link>.
            Die darunterliegende PHP Session verwendet die Standards von Zend_Session, unabhängig davon ob Sie
            zuerst durch <code>Zend_Session::setOptions()</code> modifiziert wurde.
        </para>

        <para>
            Um die Optionen zu übergeben muß nur der Basisname (der nicht <code>session.</code> Teil) als Teil eines
            Arrays an <code>Zend_Session::setOptions()</code> übergeben werden. Ohne das irgendeine Option gesetzt
            wird, wird Zend_Session zuerst die benötigten Optionen anwenden und anschließend die standard php.ini
            Einstellungen. Feedback der Community über die beste Handhabung für diese Optionen sollte gesendet werden
            an <ulink url="mailto:fw-auth@lists.zend.com">fw-auth@lists.zend.com</ulink>.
        </para>

        <para>
            Um diese Komponente "automatisch" zu konfigurieren bei Verwendung einer ".ini" Datei mit Zend_Config_Ini:
        </para>

        <example>
            <title>Verwenden von Zend_Config um Zend_Session zu konfigurieren</title>
<programlisting role="php"><![CDATA[<?php
$config = new Zend_Config_Ini('myapp.ini', 'sandbox');
require_once 'Zend/Session.php';
Zend_Session::setOptions($config->toArray());
?>]]></programlisting>
        </example>

        <para>
            Die dazugehörende "myapp.ini" Datei:
        </para>

        <example>
            <title>myapp.ini</title>
<programlisting role="php">
<![CDATA[
;  Standard für unsere Live Server
[live]
; bug_compat_42
; bug_compat_warn
; cache_expire
; cache_limiter
; cookie_domain
; cookie_lifetime
; cookie_path
; cookie_secure
; entropy_file
; entropy_length
; gc_divisor
; gc_maxlifetime
; gc_probability
; hash_bits_per_character
; hash_function
; name sollte für jede PHP Anwendung eindeutig sein und den selben Domain Namen verwenden
name = UNIQUE_NAME
; referer_check
; save_handler
; save_path
; serialize_handler
; use_cookies
; use_only_cookies
; use_trans_sid

; remember_me_seconds = <integer seconds>
; strict = on|off


; Unser Sandbox Server verwendet die selben Einstellungen wie unser Live-Server,
; ausser wie anbei überschrieben
[sandbox : live]
; Nicht vergessen, dieses Verzeichnis zu erstellen und es rwx machen (lesbar und änderbar) durch PHP.
save_path = /home/myaccount/zend_sessions/myapp
use_only_cookies = on
; Beim Analysieren von Session ID Cookies, frage nach einer TTL von 10 Tagen
remember_me_seconds = 864000
]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.options">

        <title>Optionen</title>

        <para>
            Die meisten oben gezeigten Optionen benötigen keine Erklärung über jene der standard PHP
            Dokumentation hinaus.
            <itemizedlist mark='opencircle'>
                <listitem>
                    <para>
                        boolean <code>strict</code> - verhindert das automatische Starten von <code>Zend_Session</code>
                        wenn <code>new Zend_Session_Namespace()</code> verwendet wird.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        integer <code>remember_me_seconds</code> - Wie lange soll das Session Id Cookie bestehen,
                        nachdem der Benutzer Agent beendet wurde (z.B. Fenster des Browsers geschlossen)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        string <code>save_path</code> - Der richtige Wert ist abhängig vom System, und sollte
                        vom Entwickler auf einen <emphasis role="strong">absoluten Pfad</emphasis> zu einem
                        Verzeichnis bereitgestellt werden, welches durch den PHP Prozess lesbar und beschreibbar ist.
                        Wenn kein schreibbarer Pfad gegeben ist, wird <code>Zend_Session</code> eine Ausnahme
                        werden sobald Sie gestartet wird (z.B. wenn <code>start()</code> aufgerufen wird).
                    </para>
                    <note>
                        <title>Sicherheits Risiko</title>
                        <para>
                            Wenn der Pfad von einer anderen Anwendung aus lesbar ist, kann die Entführung der
                            Session möglich sein. Wenn der Pfad von einer anderen Anwendung aus beschreibbar ist,
                            kann die <ulink url="http://en.wikipedia.org/wiki/Session_poisoning">Session 
                            vergiftet</ulink> werden. Wenn der Pfad mit anderen Benutzern oder anderen PHP
                            Anwendungen geteilt wird, können verschiedenste Sicherheitsprobleme auftreten. Das
                            inkludiert Diebstahl von Inhalten der Session, Entführung von Sessions und Kollisionen
                            der Müllsammlung (z.B. eine andere Anwendung eines Benutzers können PHP veranlassen
                            die eigenen Session Dateien zu löschen).
                        </para>
                        <para>
                            Zum Beispiel kann ein Angreifer die Webseite des Opfers besuchen um ein Session Cookie
                            zu erhalten. Dann den Cookie Pfad auf die eigene Domain auf dem gleichen Server ändern,
                            bevor er die eigene Webseite besucht um <code>var_dump($_SESSION)</code> auszuführen.
                            Bewaffnet mit detailiertem Wissen über die Verwendung von Daten in den Sessions des
                            Opfers, kann der Angreifer den Sessionstatus verändern (Vergiften der Session),
                            den Cookie Pfad auf die Webseite des Opfers zurück ändern, und anschließend eine Anfrage
                            von der Webseite des Opfers, mithilfe der vergifteten Session, durchführen. Selbst wenn
                            zwei Anwendungen auf dem gleichen Server keinen Lese-/Schreibzugriff auf den jeweils
                            anderen save_path der Anwendung haben. Wenn der save_path erahnbar ist und der
                            Angreifer die Kontrolle über eine der zwei Webseiten hat, kann der Angreifer den
                            save_path seiner Webseiten ändern um dem anderen save_path zu verwenden und somit
                            die Vergiftung der Session durchführen, in den meisten üblichen PHP Konfigurationen.
                            Deshalb sollte der Wert für save_path nicht öffentlich bekanntgegeben werden, und er
                            sollte geändert werden um dem Pfad eindeutig für jede Anwendung zu sichern.
                        </para>
                    </note>
                </listitem>
                <listitem>
                    <para>
                        string <code>name</code> - Der richtige Wert ist abhängig vom System and sollte vom
                        Entwickler, durch Verwenden eines bestimmten Wertes, bereitgestellt werden, welcher
                        für jede ZF Anwendung <emphasis role="strong">eindeutig</emphasis> ist.
                    </para>
                    <note>
                        <title>Sicherheits Risiko</title>
                        <para>
                            Wenn die <code>php.ini</code> Einstellung für <code>session.name</code> die selbe ist
                            (z.B. die standardmäßige "PHPSESSID"), und es zwei oder mehr PHP Anwendungen gibt die
                            über den selben Domain Namen erreichbar sind (z.B.
                            <code>http://www.somewebhost.com/~youraccount/index.php</code>), dann werden Sie miteinander
                            für alle Besucher die beide Webseiten besuchen, die selben Session Daten teilen.
                            Zusätzlich, könnte das auch zu einer Verfälschung von Session Daten führen.
                        </para>
                    </note>
                </listitem>
                <listitem>
                    <para>
                        boolean <code>use_only_cookies</code> - Um zusätzliche Sicherheitsrisiken zu vermeiden,
                        sollte der Standardwert dieser Option nicht verändert werden.
                        <note>
                            <title>Sicherheits Risiko</title>
                            <para>
                                Wenn diese Einstellung nicht aktiviert wird, kann ein Angreifer einfach die
                                Session Id des Opfers ändern indem ein Link auf der Webseite des Angreifers
                                verwendet wird, wie z.B.
                                <code>http://www.victim-website.com/index.php?PHPSESSID=fixed_session_id</code>.
                                Die Änderung funtioniert, wenn das Opfer nicht schon ein Session Id Cookie für
                                victom-website.com besitzt. Sobald ein Opfer eine bekannte Session Id benutzt, kann
                                der Angreifer versuchen die Session zu übernehmen indem er sich verstellt und
                                vorgibt das Opfer zu sein, und den UserAgent des Opfers emuliert.
                            </para>
                        </note>
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.session.errors">

        <title>Fehler</title>

        <sect3 id="zend.session.errors.headerssent">

            <title>Header schon gesendet</title>

            <para>
                Wenn die Fehler Nachricht, "Cannot modify header information - headers already sent", oder "You must
                call .. before any output has been sent to the browser; output started in ...", sollte der
                direkte Grund (Funktion oder Methode) der mit dieser Nachricht gekoppelt ist sorgfältig begutachtet
                werden. Jede Aktion die das senden von HTTP Headern benötigt, wie z.B. das modifizieren von Browser
                Cookies, muß vor dem senden von normaler Ausgabe (ungepufferter Ausgabe) durchgeführt werden,
                ausser wenn PHP's Ausgabebuffer verwendet wird.
            </para>

            <itemizedlist mark='opencircle'>
                <listitem>
                    <para>
                        Using
                        <ulink url="http://php.net/outcontrol">Puffern der Ausgabe</ulink>
                        ist oft notwendig um dieses Problem zu verhindern, und hilft bei der Steigerung der
                        Geschwindigkeit. Zum Beispiel aktiviert "<code>output_buffering = 65535</code>" in der 
                        <code>php.ini</code> das puffern der Ausgabe mit einem 64k Puffer. Selbst wenn das Puffern
                        der Ausgabe eine gute Taktik ist um auf Produktionsservern die Geschwindigkeit zu
                        Erhöhen, ist das Vertrauen auf das Puffern, um das Problem "headers already sent" zu
                        beheben, nicht ausreichend. Es muß sicher gestellt werden das die Anwendung die Puffer
                        Größe nie überschreitet, andernfalls wird das Problem von Zeit zu Zeit wieder auftreten,
                        wann auch immer eine Ausgabe gesendet wird (vor den HTTP Headern) die die Puffergröße
                        überschreitet.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Anternativ kann versucht werden die Logik der Anwendung anders anzuordnen, so das Aktionen
                        welche Header manipulieren vor dem Senden von jeglicher Ausgabe ausgeführt werden.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Wenn eine Methode von Zend_Session als Verursacher der Fehlermeldung involviert ist,
                        sollte die Methode sorgfältig begutachtet werden und es ist sicher zu stellen das Sie auch
                        wirklich in der Anwendung benötigt wird. Zum Beispiel sendet auch die standardmäßige
                        Verwendung von <code>destroy()</code> einen HTTP Header um das Session Cookie auf der Seite
                        des Clients ablaufen zu lassen. In HTTP werden die Anweisungen für das Ändern (z.B.
                        löschen) von Cookies im HTTP Header gesendet.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Anternativ kann versucht werden die Logik der Anwendung anders anzuordnen, so das Aktionen
                        welche Header manipulieren vor dem Senden von jeglicher Ausgabe ausgeführt werden.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Jedes schließende "<code>?&gt;</code>" Tag sollte entfernt werden, wenn es am Ende einer
                        PHP Source Datei steht. Sie werden nicht benötigt und neue Zeilen und andere beinahe
                        unsichtbare Leerzeichen welche dem schließenden Tag folgen können die Ausgabe an den
                        Client anstoßen.
                    </para>
                </listitem>
            </itemizedlist>

        </sect3>

    </sect2>

    <sect2 id="zend.session.regenerateid">

        <title>regenerateId()</title>

        <sect3 id="zend.session.regenerateid.intro">

            <title>Einführung: Session Identifizierer</title>

            <para>
                Einführung: Die beste Praxis in Relation für die Benutzung von Session innerhlab des ZF fordert
                die Verwendung eines Browser Cookies (z.B. ein normales Cookie welchem im Web Browser gespeichert
                wird), statt der integration von eindeutigen Session Identifizierern in URLs als Mittel für
                das verfolgen von individuellen Benutzern. Normalerweise verwendet diese Komponente nur Cookie für
                die Handhabung von Session Identifizierern. Der Wert des Cookies ist der eindeutige Identifizierer
                in der Session des Browsers. PHP' ext/session verwendet diesen Identifizierer um eine eindeutige
                eins-zu-eins Verbindung zwischen dem Besucher der Webseite und dem dauerhaften Session Daten
                Speicher herzustellen. Zend_Session* umhüllt diesen Speichermechanismus (<code>$_SESSION</code>)
                mit einem objektorientierten Interface. Leider, wenn ein Angreifer Zugriff auf der Wert des Cookies
                (die Session Id) erhält, kann er die Session des Besuchers übernehmen. Dieses Problem gilt nicht
                nur für PHP oder den Zend Framework. Die <code>regenerateId()</code> Methode erlaubt einer Anwendung
                die Session Id (die im Cookie des Besuchers gespeichert ist) in einen neuen, zufälligen,
                unvorhersagbaren Wert zu ändern. Achtung: Auch wenn nicht das gleiche gemeint ist, um diese Sektion
                einfacher lesbar zu machen, verwenden wir die Ausdrücke "User Agent" und "Webbrowser" synonym
                füreinander.
            </para>

            <para>
                Warum?: Wenn ein Angreifer einen gültigen Session Identifizierer erhält, kann ein Angreifer einen
                gültigen Benutzer (das Opfer) verkörpern, und anschließend Zugriff auf vertrauliche Intormationen
                oder andererseits die Daten des Opfers verändern welche von der Anwendung verwaltet werden. Das
                Ändern des Session Id's hilft sich gegen die Übernahme der Session zu Schützen. Wenn die Session Id
                geändert wird, und ein Angreifer den neuen Wert nicht weiß, kann der Angreifer die neue Session
                Id nicht für Ihren Zweck, dem Versuch der Übernahme der Session des Opfers, verwenden. Selbst wenn
                der Angreifer zugriff auf die alte Session Id erhält, verschiebt <code>regenerateId()</code> die
                Daten der Session vom alten Session Id "Handle" zum neuen, weswegen keine Daten über die alte
                Session Id abrufbar sind.
            </para>

            <para>
                Wann sollte regenerateId() verwendet werden: Das Hinzufügen von <code>Zend_Session::regenerateId()</code>
                in die Bootstrap Datei des Zend Frameworks bietet einen der sichersten und am besten geschützten
                Wege um die Session Id's in den Cookies der User Agenten zu erneuern. Wenn es keine bedingte Logik
                gibt, um herauszufinden wann die Session Id erneuert werden soll, dann gibt es keinen Mangel in
                dieser Logik. Auch wenn der Erneuern bei jeder Anfrage einen möglichen Weg der Attacke verhindert,
                will nicht jedermann die damit hervorgerufenen kleinen Einbußen in der Geschwindigkeit und der
                Bandbreite hinnhmen. Deswegen versuchen Anwendungen normalerweise Situationen von größerem
                Risiko zu erahnen, und nur in diesen Situationen die Session Id's zu erneuern. Immer wenn die
                Rechte einer Session vom Besucher der Webseite "ausgeweitet" werden (z.B. ein Besucher muß
                noch einmal seine Identität authentifizieren bevor sein "Profil" bearbeitet werden darf), oder
                wann auch immer ein sicherheits-"sensitiver" Session Parameter geändert wird, sollte daran gedacht
                werden <code>regenerateId()</code> zu verwenden um eine neue Session Id zu erstellen. Wenn die
                <code>rememberMe()</code> Funktion aufgerufen wird, sollte <code>regenerateId()</code> nicht
                verwendet werden, ausser der erstere ruft den letzteren auf. Wenn sich ein Benutzer erfolgreich
                auf die Webseite eingeloggt hat, sollte <code>rememberMe()</code> statt <code>regenerateId()</code>
                verwendet werden.
            </para>

        </sect3>

        <sect3 id="zend.session.regenerateid.details">

            <title>Session-Entführung und Fixierung</title>

            <para>
                Das Vermeiden von 
                <ulink url="http://en.wikipedia.org/wiki/Cross_site_scripting">Seiten übergreifenden Script (XSS) Gefährdungen</ulink>
                hilft bei der Vorbeugung von Session Entführungen. Laut
                <ulink url="http://secunia.com/">Secunia's Statistik</ulink> kommen XSS Probleme häufig vor,
                unabhängig von der Sprache dir für die Erstellung der Web Anwendung benutzt wurde. Vor der Annahme
                nie XSS Probleme mit einer Anwendung zu haben, sollten diese mit der folgenden besten Praxis
                berücksichtigt werden um, wenn sie auftreten, den geringsten Schaden zu haben. Mit XSS benötigt
                ein angreifer keinen direkten Zugriff auf den Netzwerk Verkehr des Opfers. Wenn das Opfer bereits ein
                Session Cookie hat, kann Javascript XSS einem Angreifer erlauben das Cookie zu lesen und die Session
                zu stehlen. Für Opfer ohne Session Cookies, kann ein Angreifer, wenn er XSS verwendet um Javascript
                einzuschleusen, ein Session Id Cookie mit einem bekannten Wert, auf dem Browser des Opfers erstellen,
                und dann ein identisches Cookie auf dem System des Angreifers setzen, um die Session des Opfers zu
                entführen. Wenn das Opfer die Webseite des Angreifers besucht, kann der Angreifer auch die meisten
                anderen infizierbaren Characteristiken vom User Agent des Opfers emulieren. Wenn eine Webseite
                eine XSS Gefährdung aufweist, könnte der Angreifer ein AJAX Javascript einfügen das versteckt die
                Webseite des Angreifers "besucht", damit der Angreifer die Characteristika vom Browser des Opfers
                weiß und auf die beeinträchtigte Session auf der Webseite des Opfers aufmerksam gemacht wird.
                Trotzdem kann ein Angreifer nicht willkürlich die serverseitigen Status der PHP Session ändern,
                wenn der Entwickler den Wert für die <code>save_path</code> Option richtig eingestellt hat.
            </para>

            <para>
                Nur durch das Aufrufen von <code>Zend_Session::regenerateId()</code>, wenn die Session des
                Benutzers das erste Mal verwendet wird, verhindert keine Session Fixierungs Attacken, ausser es kann
                die Session, die von einem Angreifer erstellt wurde um ein Opfer zu Emulieren, unterschieden werden.
                Das könnte zuerst wiedersprüchlich klingen zu dem vorherigen Statement, solange angenommen wird
                das ein Angreifer zuerst eine reale Session auf der Webseite initiiert. Die Session wird
                "zuerst vom Angreifer benutzt", welche dann das Ergebnis der Initialisierung weiß 
                (<code>regenerateId()</code>). Der Angreifer verwendet dann diese neue Session Id in Kombination mit
                der XSS Gefährdung, oder injiziert die Session Id über einen Link auf der Webseite des Angreifers
                (funktioniert wenn <code>use_only_cookies = off</code>).
            </para>

            <para>
                Wenn zwischen einem Angreifer und einem Opfer welche die selbe Session Id verwenden, unterschieden
                werden kann, kann mit der Session Enführung direkt gehandelt werden. Trotzdem beinhalten solche
                Formen von Unterscheidungen normalerweise eine Verringerung der Handhabung weil diese Methoden
                der Unterscheidung oft ungenau sind. Wenn, zum Beispiel, eine Anfrage von einer IP in einem anderen
                Land empfangen wird als von der IP in welchem die Session erstellt wurde, gehört die neue Anfrage
                möglicherweise zu einem Angreifer. Unter der folgenden Annahme, gibt es möglicherweise keinen Weg,
                für eine Webseiten Anwendung, zwischen einem Opfer und einem Angreifer zu unterscheiden:
                <itemizedlist mark='opencircle'>
                    <listitem>
                        <para>
                            - Der Angreifer initiiert eine Session auf der Webseite um eine gültige Session Id zu
                            erhalten
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            - Der Angreifer benutzt XSS Gefährdungen auf der Webseite um ein Cookie auf dem Browser
                            des Opfers mit der geichen, gültigen Session Id (z.b. Session Fixierung), zu erstellen
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            - Beide, das Opfer und der Angreifer kommen von der selben Proxy Farm (z.B. wenn beide
                            hinter der selben Firewall einer großen Firma, wie AOL, sind)
                        </para>
                    </listitem>
                </itemizedlist>
                Der Beispiel-Code anbei, macht es für Angreifer viel schwerer die aktuelle Session Id des Opfers zu
                wissen solange der Angreifer nicht bereits die ersten Zwei Schritte von oben ausgeführt hat.
            </para>

            <example>
                <title>Anonyme Sessions und Session Fixierung</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Session.php';
$defaultNamespace = new Zend_Session_Namespace();

if (!isset($defaultNamespace->initialized))
{
    Zend_Session::regenerateId();
    $defaultNamespace->initialized = true;
}
?>]]></programlisting>
            </example>

        </sect3>

    </sect2>

    <sect2 id="zend.session.rememberme">

        <title>rememberMe(integer $seconds)</title>

        <para>
            Normalerweise enden Sessions wenn der User Agend die "Session" beendet, wie wenn der Benutzer z.b. das
            Browser Fenster schließt. Trotzdem könnte ein Benutzer, wenn er sich auf der Webseite anmeldet, seine
            virtuelle Session für 24 Stunden, oder sogar länger, andauern lassen. Foren Software gibt Benutzern
            normalerweise die Auswahl, wie lange eine Session andauern soll. <code>Zend_Session::rememberMe()</code>
            kann verwendet werden um ein aktuelles Session Cookie zum User Agent zu schicken mit einer Lebenszeit
            von <code>remember_me_seconds</code>, welche standardmäßig auf 2 Wochen gestellt ist, ausser sie ist
            modifiziert worden mit Hilfe von <code>Zend_Session::setOptions()</code>. Um zu helfen, Session
            Fixierung/Entführung zu vereiteln, sollte diese Funktion verwendet werden wenn sich ein Benutzer
            erfolgreich authentifiziert und die Anwendung eine "Anmeldung" durchführt.
        </para>

    </sect2>

    <sect2 id="zend.session.forgetme">

        <title>forgetMe()</title>

        <para>
            Diese Funktion ist das Gegenteil von <code>rememberMe()</code> durch Verändern des Session Cookies
            zurück zu einer Lebenszeit die endet wenn der User Agent seine Session beendet (z.B. der Benutzer
            schließt sein Browser Fenster).
        </para>

    </sect2>

    <sect2 id="zend.session.sessionexists">

        <title>sessionExists()</title>

        <para>
            Diese Methode kann verwendet werden um Herauszufinden ob eine Session für den aktuellen User Agent/Anfrage
            bereits existiert. Das kann vor dem Starten einer Session verwendet werden, und ist unabhängig von allen
            anderen Zend_Session und Zend_Session_Namespace Methoden.
        </para>

    </sect2>

    <sect2 id="zend.session.destroy">

        <title>destroy(bool $remove_cookie = true, bool $readonly = true)</title>

        <para>
            <code>Zend_Session::destroy()</code> entfernt alle deuerhaften Daten welche mit der aktuellen Session
            verbunden sind. Aber es werden keine Variablen in PHP verändert, so das die benannte Session (Instanzen
            von <code>Zend_Session_Namespace</code>) lesbar bleibt. Es ein "Logout" fertigzustellen, muß der
            optionale Parameter auf true (standard ist true) gestzt werden um auch das Session Id Cookie des
            User Agents zu löschen. Der optionale <code>$readonly</code> Parameter entfernt, für die
            Zend_Session_Namespace Instanzen und Zend_Session Methoden, die Möglichkeit auf den Session Daten Speicher
            zu schreiben (z.B. $_SESSION).
        </para>

        <para>
            Wenn die Fehlermeldung "Cannot modify header information - headers already sent" erscheint, sollte
            entweder die Verwendung von true als Wert für das erste Argument (die Entfernung des Session Cookies
            anfragen) vermieden werden, oder unter <xref linkend="zend.session.errors.headerssent" /> nachgesehen werden.
            Deswegen muß "Zend_Session::destroy(true)" entweder aufgerufen werden bevor PHP Header gesendet hat,
            oder die Pufferung der Ausgabe muß aktiviert sein. Auch die komplette Ausgabe die gesendet werden soll,
            darf die gesetzte Puffergröße nicht überschreiten, um das Senden der Ausgabe vor dem Aufruf von
            destroy() zu Verhindern.
        </para>

        <note>
            <title>Throws</title>
            <para>
                Standardmäßig ist <code>$readonly</code> aktiviert, und weitere Aktionen welche das Schreiben in den
                Session Daten Speicher beinhalten, werfen einen Fehler.
            </para>
        </note>

    </sect2>

    <sect2 id="zend.session.stop">

        <title>stop()</title>

        <para>
            Diese Methode macht nicht mehr als ein Flag in Zend_Session zu wechseln um weiteres schreiben in den
            Session Daten Speicher (z.B. <code>$_SESSION</code>) zu verhindern. Wir erwarten spezielles Feedback
            für dieses Feature. Potentielle Nicht-/Verwendung könnte temporär bei Verwendung von
            <code>Zend_Session_Namespace</code> Instanzen oder <code>Zend_Session</code> Methoden verhindern das
            auf den Session Daten Speicher geschrieben wird, wärend deren  Ausführung zum Code der View transferiert
            wird. Versuche Aktionen auszuführen welche das Schreiben über diese Instanzen oder Methoden inkludieren
            werden einen Fehler werfen.
        </para>

    </sect2>

    <sect2 id="zend.session.writeClose">

        <title>writeClose($readonly = true)</title>

        <para>
            Shutdown the sesssion, close writing and detach $_SESSION from the back-end storage mechanism. This will
            complete the internal data transformation on this request. The optional $readonly boolean parameter can
            remove write access (i.e. throw error if any Zend_Session_Namespace or Zend_Session methods attempt writes).
        </para>

        <note>
            <title>Throws</title>
            <para>
                By default, <code>$readonly</code> is enabled and further actions involving writing to the session data
                store will throw an error. However, some legacy application might expect $_SESSION to remain writeable
                after ending the session via session_write_close(). Although not considered "best practice", the
                <code>$readonly</code> option is available for those who need it.
            </para>
        </note>

    </sect2>

    <sect2 id="zend.session.expiresessioncookie">

        <title>expireSessionCookie()</title>

        <para>
            This method sends an expired session id cookie, causing the client to delete the session cookie. Sometimes
            this technique is used to perform a client-side logout.
        </para>

    </sect2>

    <sect2 id="zend.session.savehandler">

        <title>setSaveHandler(Zend_Session_SaveHandler_Interface $interface)</title>

        <para>
            Most developers will find the default save handler sufficient. This method provides an object-oriented
            wrapper for <code>
            <ulink url="http://php.net/session_set_save_handler">session_set_save_handler()</ulink>
            </code>.
        </para>

    </sect2>

    <sect2 id="zend.session.namespaceisset">

        <title>namespaceIsset($namespace)</title>

        <para>
            Use this method to determine if a session namespace exists, or if a particular index exists in a particular
            namespace.
        </para>

        <note>
            <title>Throws</title>
            <para>
                An error will be thrown if Zend_Session is not marked as readable (e.g. before Zend_Session has been
                started).
            </para>
        </note>

    </sect2>

    <sect2 id="zend.session.namespaceunset">

        <title>namespaceUnset($namespace)</title>

        <para>
            Instead of creating a Zend_Session instance for a namespace, and iterating over its contents to unset each
            entry, use <code>Zend_Session::namespaceUnset($namespace)</code> to efficiently unset (remove) an entire
            namespace and its contents. As with all arrays in PHP, if a variable containing an array is unset, and the
            array contains other objects, those objects will remain available, if they were also stored by reference in
            other array/objects that remain accessible via other variables. So <code>namespaceUnset()</code> does not
            perform a "deep" unsetting/deleting of the contents of the entries in the namespace. For a more detailed
            explanation, please see
            <ulink url="http://php.net/references">References Explained</ulink>
            in the PHP manual.
        </para>

        <note>
            <title>Throws</title>
            <para>
                An error will be thrown if the namespace is not writable (e.g. after <code>destroy()</code>).
            </para>
        </note>

    </sect2>

    <sect2 id="zend.session.namespaceget">

        <title>namespaceGet($namespace)</title>

        <para>
            DEPRECATED: Use <code>getIterator()</code> in Zend_Session_Namespace. This method returns an array of the
            contents of <code>$namespace</code>. If you have logical reasons to keep this method publicly accessible,
            please provide feedback to the
            <ulink url="mailto:fw-auth@lists.zend.com">fw-auth@lists.zend.com</ulink>
            mail list. Actually, all participation on any relevant topic is welcome :)
        </para>

        <note>
            <title>Throws</title>
            <para>
                An error will be thrown if Zend_Session is not marked as readable (e.g. before Zend_Session has been
                started).
            </para>
        </note>

    </sect2>

    <sect2 id="zend.session.getiterator">

        <title>getIterator()</title>

        <para>
            Use <code>getIterator()</code> to obtain an iterable array containing the names of all namespaces.
        </para>

        <example>
            <title>Unsetting All Namespaces</title>
<programlisting role="php"><![CDATA[<?php
foreach(Zend_Session::getIterator() as $space) {
    try {
        $core->namespaceUnset($space);
    } catch (Zend_Session_Exception $e) {
        return; // possible if Zend_Session::stop() has been executed
    }
}

?>]]></programlisting>
        </example>

        <note>
            <title>Throws</title>
            <para>
                An error will be thrown if Zend_Session is not marked as readable (e.g. before Zend_Session has been
                started).
            </para>
        </note>

    </sect2>

</sect1>
