<sect1 id="zend.controller.rewriterouter.introduction">
    <title>Einführung</title>
	<para>
	    <code>Zend_Controller_RewriteRouter</code> ist eine neue Version des Framework Routers. Routing ist der 
	    Prozess der Übernahme und Zerteilung einer URI, um zu ermitteln, welcher Controller und 
	    welche Aktion des Controllers die Anfrage erhalten soll. Die Definition des Controllers, 
	    der Aktion sowie weiterer Parameter wird in einem Objekt mit Namen 
	    <code>Zend_Controller_Dispatcher_Token</code> gekapselt, das dann vom 
	    <code>Zend_Controller_Dispatcher</code> verarbeitet wird. Das Routing geschieht nur einmal: 
	    wenn zu Beginn die Anfrage erhalten wird und bevor der erste Controller aufgerufen wird. 
	</para>
	<para>
	    <code>Zend_Controller_RewriteRouter</code> wurde entwickelt, um mit reinen PHP Strukturen 
	    eine mod_rewrite ähnliche Funktionalität zu erlauben. Es richtet sich sehr frei nach dem
	    Ruby on Rails Routing und benötigt kein tieferes Wissen über URL Weiterleitung des 
	    Webservers. Es wurde entwickelt, um mit einer einzigen mod_rewrite Regel zu arbeiten. 
	</para>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1	]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.usage">
	<title>Einen Router verwenden</title>

	<para>
	    Um den RewriteRouter richtig zu verwenden, mußt du ihn instanziieren, einige 
	    benutzerdefinierte Routen hinzufügen und in den Controller einbinden. Der folgende Code
	    veranschaulicht die Vorgehensweise:
	</para>

	<programlisting role="php"><![CDATA[
/* -- erstelle einen Router -- */

$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user', 'action' => 'info'));

/* -- binde ihn in den Controller ein -- */

$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.basic">
	<title>Einfache Routen</title>

	<para>
	    Das Herz des RewriteRouter ist die Definition der benutzerdefinierten Routen. Routen werden
	    durch Aufruf der <code>addRoute</code> Methode des RewriteRouter erstellt:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', 'user/:username');]]></programlisting>

	<para>
	    Der erste Parameter ist der Name der Route. Zum derzeitigen Zeitpunkt ist er redundant  
	    aber wird in Zukunft in einem URL View Helper verwendet, um eine einfache Erstellung von
	    URLs in deinen Views zu ermöglichen. Wenn du die vorher konfigurierte, benannte Route 
	    verwenden möchtest, kannst du sie mit den <code>getRoute</code> Methode des RewriteRouter 
	    erhalten.
	</para>

	<para>
	    Der zweite Parameter ist eine Route, die auf eine URL passt - zum Beispiel passt die obige
	    Route auf <code>http://example.com/user/martel</code>. Der Doppelpunkt in einer Route 
	    markiert eine URL Variable, die durch die <code>Zend_Controller_Action::_getParam</code> 
	    Methode zugänglich ist. In unserem Beispiel wird der mit 'username' benannte Parameter auf 
	    den Wert 'martel' gesetzt. 
	</para>

	<note>
	    Routes werden in umgekehrter Reihenfolge abgeglichen, so dass du sicherstellen musst, dass 
	    die allgemeinste Route als erstes definiert ist.
	</note>

	<note>
	    Fürs Erste erlaubt die aktuelle Implementation die Verwendung jedes Zeichens für den 
	    Variablenbezeichner außer den Schrägstrich (/), es wird aber sehr empfohlen, dass du nur 
	    Zeichen verwendest, die für PHP Variablen verwendet werden dürfen. In Zukunft wird die 
	    Implementation vermutlich angepasst und dies könnte Fehler in deinen Code einführen.
	</note>

	<para>
	    Es gibt zwei besondere Variablen, die in deinen Routen verwendet werden können - 
	    'controller' und 'action'. Diese besonderen Variablen werden verwendet, um einen gewählten 
	    Controller und/oder eine Aktion in der URL zu finden. Die 'action' Variable muß immer 
	    entweder in der Route oder als Standardparameter definiert sein. Die 'controller' Variable
	    wird stanardmäßig auf IndexController verweisen, wenn sie nicht definiert wurde.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', ':controller/:action');]]></programlisting>

	<para>
	    Wenn du deinen Browser mit dieser Route auf <code>http://example.com/news/latest</code> 
	    richtest, wird der <code>Zend_Controller_Dispatcher</code> die Aktion latestAction deines 
	    Controllers NewsController ausführen.
	</para>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-defaults">
	<title>Vorgegebene Variablenwerte</title>

	<para>
	    Jede Variable in der Route kann einen vorgegebenen Wert haben. Um diesen vorzugeben, mußt du
	    einen dritten Parameter zur <code>addRoute</code> Methode hinzufügen. Dieser dritte 
	    Parameter ist ein Array mit den Variablennamen als Schlüssel und den vorgegebenen Werten 
	    als Werten.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006));]]>
	</programlisting>
	
	<para>
	    Was nicht sofort erkennbar sein mag, ist, dass die obige Route auf URLs wie 
		<code>http://example.com/archive/2005</code> und <code>http://example.com/archive</code> 
		passt. Im letzteren Fall hat die Variable 'year' den Wert 2006.
	</para>

	<para>
	    Im obigen Beispiel haben wir keinen Controller angegeben, so dass immer auf die noRoute 
	    Aktion des IndexController verwiesen wird. Damit es anwendbar ist, musst du einen gültigen 
	    Controller und eine gültige Aktion als Standardwerte festlegen:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show'));]]></programlisting>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-requirements">
	<title>Anforderungen an Variablen</title>

	<para>
	    Du kannst einen vierten Parameter hinzufügen, in dem Anforderungen an die Variablen 
	    angegeben werden können. Diese werden als reguläre Ausdrücke definiert:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006), array('year' => '\d+'));]]></programlisting>

	<note>
	    Im Gegensatz zu Ruby on Rails wird <code>Zend_Controller_RewriteRouter</code> für eine Route 
	    Standardwerte verwenden, wenn die Anforderungen an die Variablen im vierten Parameter nicht 
	    erfüllt werden. Also passt die URL <code>http://example.com/archive/test</code> auf die 
	    obige Route und setzt den Parameter 'year' auf 2006. Diese Funktionalität kann sich in 
	    Zukunft ändern, da sie im Moment beim Schreiben dieser Dokumentation noch diskutiert wird.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.rewritebase">
	<title>Basis URL und Unterverzeichnisse</title>

	<para>
	    Im Gegensatz zum ursprünglichen Route kann RewriteRouter auch in Unterverzeichnissen 
	    verwendet werden - deine Basis URL wird automatisch erkannt und entsprechend gesetzt. Zum 
	    Beispiel: wenn sich deine <code>index.php</code> in einem Unterverzeichnis mit Namen 
	    <code>/projects/myapp/index.php</code> befindet, wird die Rewrite Basis (die Basis URL) auf 
	    <code>/projects/myapp</code> gesetzt. Dieser String wird dann vom Anfang des Pfads entfernt,
	    bevor die Treffer für die Routen ermittelt werden. Dies befreit dich von der Notwendigkeit,
	    ihn jeder deiner Routen voranzustellen. Die Route <code>'user/:username'</code> passt auf
	    URLs wie <code>http://localhost/projects/myapp/user/martel</code> und 
	    <code>http://example.com/user/martel</code>.
	</para>

	<note>
	    Die automatisches Rewrite Basis beachtet die Groß- und Kleinschreibung, stell also sicher,
	    dass deine URL auch auf den Namen eines Unterverzeichnis im Dateisystem passt (gilt sogar 
	    auf Windows Rechnern). Wenn es nicht passt, erhälst du eine noRoute Aktion.
	</note>

	<para>
	    Sollte die Rewrite Basis falsch erkannt werden, kannst du sie mit Hilfe der 
	    <code>setRewriteBase</code> Methode der <code>RewriteRouter</code> Klasse mit deinem eigenen 
	    Basispfad überschreiben.
	</para>

	<programlisting role="php"><![CDATA[
$router->setRewriteBase('/projects/myapp');]]></programlisting>

	<note>
	    In den meisten Fällen wird dieser Schritt nicht notwendig sein und es wird davon abgeraten,
	    da es eine weitere Konfigurationsvariable einführt, die geändert werden muss, wenn man den
	    Code in eine andere Verzeichniskonfiguration verschiebt.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.default-routes">
	<title>Standardrouten</title>

	<para>
	    <code>Zend_Controller_RewriteRouter</code> hat zwei vordefinierte Standardrouten. Die erste
	    verarbeitet deine Root URL und verweist auf die Aktion 'indexAction' des Controllers 
	    'IndexController': also mußt du sie bereitstellen wie es in 
	    <xref linkend="zend.controller.getting-started" /> beschrieben wird (siehe 
	    <xref linkend="zend.controller.overview.indexcontroller" />). Die zweite Standardroute 
	    wurde eingefügt, um Kompatibilität mit der ersten Version des Routers zu gewährleisten. Sie
	    passt auf URIs in Form von <code>'controller/action'</code>.
	</para>

	<para>
		Standardrouten sind wie folgt konfiguriert:
	</para>

	<programlisting role="php"><![CDATA[
// Standardroute für Root URL
$this->addRoute('default', '', array('controller' => 'index', 'action' => 'index'));

// Standardroute für Kompatibilität zu Router Version 1
$this->addRoute('compat', ':controller/:action', array('controller' => 'index', 'action' => 'index'));]]></programlisting>

	<note>
	    Obwohl <code>Zend_Controller_RewriteRouter</code> für Rückwärtskompatibilität konfiguriert
	    wurde, passt es noch nicht auf <code>controller/action</code> URIs mit zusätzlichen 
	    Parametern.
	</note>

</sect1>
