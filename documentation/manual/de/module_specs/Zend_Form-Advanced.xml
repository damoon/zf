<sect1 id="zend.form.advanced">
    <title>Fortgeschrittene Verwendung von Zend_Form</title>

    <para>
        <code>Zend_Form</code> hat eine Vielzahl an Funktionalitäten, von denen viele auf
        fortgeschrittene Entwickler zugeschnitten sind. Dieses Kapitel beschreibt einige dieser
        Funktionalitäten mit Beispielen und Usecases.
    </para>

    <sect2 id="zend.form.advanced.arrayNotation">
        <title>Array Schreibweise</title>

        <para>
            Viele fortgeschrittene Entwickler gruppieren zusammengehörige Form Elemente durch
            Verwendung einer Array Schreibweise in den Namen der Elemente. Zum Beispiel, wenn man
            zwei Adressen hat die geholt werden sollen, eine Versand- und eine Rechnungsadresse,
            hat man identische Elemente; durch deren Gruppierung in einem Array, kann
            sichergestellt werden das wie seperat geholt werden. Nehmen wir die folgende Form
            als Beispiel an:
        </para>

        <programlisting role="html"><![CDATA[
<form>
    <fieldset>
        <legend>Versandadresse</legend>
        <dl>
            <dt><label for="recipient">Versand an:</label></dt>
            <dd><input name="recipient" type="text" value="" /></dd>

            <dt><label for="address">Adresse:</label></dt>
            <dd><input name="address" type="text" value="" /></dd>

            <dt><label for="municipality">Stadt:</label></dt>
            <dd><input name="municipality" type="text" value="" /></dd>

            <dt><label for="province">Bundesland:</label></dt>
            <dd><input name="province" type="text" value="" /></dd>

            <dt><label for="postal">Postleitzahl:</label></dt>
            <dd><input name="postal" type="text" value="" /></dd>
        </dl>
    </fieldset>

    <fieldset>
        <legend>Rechnungsadresse</legend>
        <dl>
            <dt><label for="payer">Rechnung an:</label></dt>
            <dd><input name="payer" type="text" value="" /></dd>

            <dt><label for="address">Adresse:</label></dt>
            <dd><input name="address" type="text" value="" /></dd>

            <dt><label for="municipality">Stadt:</label></dt>
            <dd><input name="municipality" type="text" value="" /></dd>

            <dt><label for="province">Bundesland:</label></dt>
            <dd><input name="province" type="text" value="" /></dd>

            <dt><label for="postal">Postleitzahl:</label></dt>
            <dd><input name="postal" type="text" value="" /></dd>
        </dl>
    </fieldset>

    <dl>
        <dt><label for="terms">Ich stimme den AGBs zu</label></dt>
        <dd><input name="terms" type="checkbox" value="" /></dd>

        <dt></dt>
        <dd><input name="save" type="submit" value="Speichern" /></dd>
    </dl>
</form>
]]></programlisting>
        
        <para>
            In diesem Beispiel enthalten die Rechnungs- und Versanadresse einige identische
            Felder, was bedeueten würde das sie sich gegenseitig überschreiben. Wir können das
            durch die Verwendung der Array Schreibweise lösen:
        </para>

        <programlisting role="html"><![CDATA[
<form>
    <fieldset>
        <legend>Versandadresse</legend>
        <dl>
            <dt><label for="shipping-recipient">Versand an:</label></dt>
            <dd><input name="shipping[recipient]" id="shipping-recipient"
                type="text" value="" /></dd>

            <dt><label for="shipping-address">Adresse:</label></dt>
            <dd><input name="shipping[address]" id="shipping-address"
                type="text" value="" /></dd>

            <dt><label for="shipping-municipality">Stadt:</label></dt>
            <dd><input name="shipping[municipality]" id="shipping-municipality"
                type="text" value="" /></dd>

            <dt><label for="shipping-province">Bundesland:</label></dt>
            <dd><input name="shipping[province]" id="shipping-province"
                type="text" value="" /></dd>

            <dt><label for="shipping-postal">Postleitzahl:</label></dt>
            <dd><input name="shipping[postal]" id="shipping-postal"
                type="text" value="" /></dd>
        </dl>
    </fieldset>

    <fieldset>
        <legend>Rechnungsadresse</legend>
        <dl>
            <dt><label for="billing-payer">Rechnung an:</label></dt>
            <dd><input name="billing[payer]" id="billing-payer"
                type="text" value="" /></dd>

            <dt><label for="billing-address">Adresse:</label></dt>
            <dd><input name="billing[address]" id="billing-address"
                type="text" value="" /></dd>

            <dt><label for="billing-municipality">Stadt:</label></dt>
            <dd><input name="billing[municipality]" id="billing-municipality" 
                type="text" value="" /></dd>

            <dt><label for="billing-province">Bundesland:</label></dt>
            <dd><input name="billing[province]" id="billing-province"
                type="text" value="" /></dd>

            <dt><label for="billing-postal">Postleitzahl:</label></dt>
            <dd><input name="billing[postal]" id="billing-postal"
                type="text" value="" /></dd>
        </dl>
    </fieldset>

    <dl>
        <dt><label for="terms">Ich stimme den AGBs zu</label></dt>
        <dd><input name="terms" type="checkbox" value="" /></dd>

        <dt></dt>
        <dd><input name="save" type="submit" value="Speichern" /></dd>
    </dl>
</form>
]]></programlisting>

        <para>
            In dem obigen Beispiel erhalten wir jetzt seperate Adressen. In der übermittelten Form
            haben wir jetzt drei Elemente, 'shipping' und 'billing', jedes mit Schlüsseln für
            deren verschiedene Elemente.
        </para>

        <para>
            <code>Zend_Form</code> versucht diesen Prozess mit seinen
            <link linkend="zend.form.forms.subforms">Subformen</link> zu automatisieren.
            Standardmäßig werden Subformen dargestellt indem die Array Schreibweise verwendet wird
            wir im vorherigen HTML Form Code gezeigt, komplett mit Ids. Der Arrayname basiert auf
            dem Namen der Subform, mit den Schlüsseln basierend auf den Elementen die in der
            Subform enthalten sind. Subformen können beliebig tief verschachtelt sein, und das
            erzeugt verschachtelte Arrays um die Struktur zu reflektieren. Zusätzlich beachten
            die verschiedenen Prüfroutinen in <code>Zend_Form</code> die Arraystruktur, und
            stellen sicher das die Form korrekt überprüft wird, egal wie tief verschachtelt
            die Subformen sind. Es muß nichts getan werden um davon zu profitieren; dieses
            Verhalten ist standardmäßig aktiviert.
        </para>

        <para>
            Zusätzlich gibt es Möglichkeiten die es erlauben die Array Schreibweise fallweise
            zu aktivieren, wie auch die Spezifikation eines speziellen Array zu welchem ein
            Element oder eine Sammlung gehört: 
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>Zend_Form::setIsArray($flag)</code>: Durch das Setzen dieses Flags auf
                    true, kann angezeigt werden das die komplette Form als Array behandelt werden
                    soll. Standardmäßig wird der Name der Form als Name des Arrays verwendet,
                    solange <code>setElementsBelongTo()</code> aufgerufen wurde. Wenn die Form
                    keinen Namen spezifiziert hat, oder <code>setElementsBelongTo()</code> nicht
                    gesetzt wurde, wird dieses Flag ignoriert (da es kein Arraynamen gibt zu dem
                    Elemente gehören).
                </para>

                <para>
                    Man kann auswählen ob eine Form als Array behandelt wird indem die
                    Zugriffsmethode <code>isArray()</code> verwendet wird.
                </para>
            </listitem>

            <listitem><para>
                    <code>Zend_Form::setElementsBelongTo($array)</code>: Durch Verwendung dieser
                    Methode kann der Name eines Arrays spezifiziert werden dem alle Elemente der
                    Form angehören. Der Name kann durch Verwendung der Zugriffsmethode
                    <code>getElementsBelongTo()</code> eruiert werden. 
            </para></listitem>
        </itemizedlist>

        <para>
            Zusätzlich können auf dem Element Level, individuelle Elemente spezifiziert werden die
            bestimmten Arrays angehören indem die <code>Zend_Form_Element::setBelongsTo()</code>
            Methode verwendet wird. Trotzdem kan das Probleme verursachen wenn Elemente
            geprüft werden, und ist in den meisten Fällen nicht zu empfehlen. Trotzdem kann es
            fallweise gewünscht sein zu wissen <emphasis>welchem</emphasis> Array ein Element
            angehört, was man mit Hilfe der Zugriffsmethode <code>getBelongsTo()</code>
            herausfinden kann.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
