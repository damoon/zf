<sect1 id="zend.search.index-creation">
	<title>Indexerstellung</title>

	<sect2 id="zend.search.index-creation.creating">
        <title>Einen neuen Index erstellen</title>

        <para>
            Die Funktionen für das Erstellen und Aktualisieren eines Index wurden innerhalb der 
            Zend_Search_Lucene Komponente und von Java Lucene implementiert. Du kannst diese beiden
            Funktionalitäten verwenden.
        </para>

        <para>
            Der PHP Quellcode unten zeigt ein Beispiel, wie eine Datei durch Verwendung der
            Zend_Search_Lucene Programmierschnittstelle (API) indiziert werden kann:
        </para>

        <programlisting role="php"><![CDATA[<?php

// Das Setzen des zweiten Arguments auf TRUE erstellt einen neuen Index
$index = new Zend_Search_Lucene('/data/my-index', true);

$doc = new Zend_Search_Lucene_Document();

// Speichere die URL des Dokuments, um es für Suchergebnisse ermitteln zu können
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));

// Indiziere den Dokumenteninhalt
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Füge das Dokument dem Index hinzu 
$index->addDocument($doc);

// Schreibe die Änderungen in den Index.
$index->commit();
?>]]></programlisting>

        <para>
            Neu hinzugefügte Dokumente können nach der Übergabe aus dem Index zurückgeholt werden.
        </para>
        <para>
            <code>Zend_Search_Lucene::commit()</code> wird automatisch am Ende der Skriptausführung 
            vor jeder Suchanfrage aufgerufen.
        </para>
        <para>
            Jeder commit() Aufruf erstellt ein neues Indexsegment. 
            <footnote>
            <para>
                Lucene Indexsegment Dateien können aufgrund ihrer Eigenschaft nicht aktualisiert 
                werden. Eine Segmentaktualisierung benötigt einen Neuaufbau des kompletten Segments.
                Beachte die Indexdateiformate von Lucene für weitere Einzelheiten 
                (<ulink url="http://lucene.apache.org/java/docs/fileformats.html">http://lucene.apache.org/java/docs/fileformats.html</ulink>).
                Eine steigende Anzahl von Segmenten vermindert die Qualität des Index, aber die 
                Indexoptimierung stellt diese wieder her. Die Optimierung ist darauf beschränkt,
                mehrere Segmente in ein einziges zusammenzufassen. Dieser Prozess aktualisiert die
                Segmente zude nicht. Es erstellt ein neues großes Segment, erstellt eine neue
                Segmentliste ('segments.new' Datei), welche das neue optimierte Segment anstelle 
                der alten Segmente enthält, und benennt dann die 'segments.new' Datei in 'segments'
                um. 
            </para>
            <para>
                Die Optimierung ist ein sich wiederholender Prozess. Sehr kleine Segmente (die 
                beim Hinzufügen eines einzelnen Dokuments entstehen) werden in größere Segmente
                zusammengefasst und so weiter. Die Optimierung kann mit einer Kette von Dokumenten
                arbeiten und verbraucht nicht viel Speicher. Dadurch verbraucht der 
                Optimierungsprozess nicht viele Ressourcen und sperrt den Index nicht für das 
                Suchen, Aktualisieren und Zusammenfassen anderer Segmente.
            </para>
            </footnote>
            Also muß er so selten wie möglich aufgerufen werden. Auf der anderen Seite verbraucht
            die Verarbeitung sehr vieler Dokumente in einem Schritt auch mehr Speicher..
        </para>
        <para>
            Die automatische Optimierung von Segmenten ist ein Thema für zukünftige 
            Weiterentwicklungen von Zend_Search_Lucene.
        </para>
    </sect2>

    <sect2 id="zend.search.index-creation.updating">
        <title>Indexaktualisierung</title>

        <para>
            Der selbe Prozess wird verwendet, um einen vorhandenen Index zu aktualisieren. Der 
            einzige Unterschied ist, dass der Index ohne den zweiten Parameter geöffnet werden
            sollte:
        </para>

        <programlisting role="php"><![CDATA[<?php

// Öffnen einen vorhandenen Index
$index = new Zend_Search_Lucene('/data/my-index');

$doc = new Zend_Search_Lucene_Document();

// Speichere die URL des Dokuments, um es für Suchergebnisse ermitteln zu können
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));

// Indiziere den Dokumenteninhalt
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Füge das Dokument dem Index hinzu 
$index->addDocument($doc);

// Schreibe die Änderungen in den Index.
$index->commit();
?>]]></programlisting>

        <para>
            Jeder Aufruf von commit() (explizit oder implizit) erstellt ein neues Indexsegment.
        </para>
        <para>
            Zend_Search_Lucene kann Segmente nicht automatisch verwalten. Deshalb solltest du dich
            um die Segmentgröße kümmer. Auf der einen Seite sind große Segmente optimaler, auf der
            anderen Seite verbrauchen große Segmente beim Erstellen mehr Speicher.
        </para>
        <para>
            Lucene Java and Luke (Lucene Index Toolbox - <ulink url="http://www.getopt.org/luke/">http://www.getopt.org/luke/</ulink>)
            können für die Indexoptimierung dieser Zend_Search_Lucene Version verwendet werden.  
        </para>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
