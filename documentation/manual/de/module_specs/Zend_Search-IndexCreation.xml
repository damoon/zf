<sect1 id="zend.search.index-creation">
	<title>Building Indexes</title>

	<sect2 id="zend.search.index-creation.creating">
        <title>Creating a New Index</title>

        <para>
            Index creation and updating capabilities are implemented within Zend_Search_Lucene module and Java Lucene.
            You can use both of these capabilities.
        </para>

        <para>
            The PHP code listing below provides an example of how to index a file
            using Zend_Search_Lucene indexing API:
        </para>

        <programlisting role="php"><![CDATA[<?php

// Setting the second argument to TRUE creates a new index
$index = new Zend_Search_Lucene('/data/my-index', true);

$doc = new Zend_Search_Lucene_Document();

// Store document URL to identify it in search result.
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));

// Index document content
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Add document to the index.
$index->addDocument($doc);

// Write changes to the index.
$index->commit();
?>]]></programlisting>

        <para>
            Newly added documents could be retrieved from the index after commit
            operation.
        </para>
        <para>
            <code>Zend_Search_Lucene::commit()</code> is automatically called at the end of script execution and
            before any search request.
        </para>
        <para>
            Each commit() call generates new index segment.
            <footnote>
            <para>
            Lucene index segment files are not updatable by their nature. Segment update needs full segment
            reorganisation. See Lucene index file formats for details
            (<ulink url="http://lucene.apache.org/java/docs/fileformats.html">http://lucene.apache.org/java/docs/fileformats.html</ulink>).
            Increasing number of segments reduces quality of the index, but index optimization restores it.
            Optimization is reduced to merging several segments into one. This process also doesn't update segments.
            It generates new large segment, generates new segment list ('segments.new' file), which contains new
            optimized segment instead of the set of old segments, and then renames 'segments.new' file to 'segments'.
            </para>
            <para>
            Optimization is iterative process. Very small segments (ex. which are generated by adding only one document)
            are being merged into greater and so on. Optimization can work with a segment streams and doesn't take a lot
            of memory. Thus optimization process doesn't take a lot of resources and doesn't lock index for searching,
            updating or merging other segments.
            </para>
            </footnote>
            So it must be requested as rarely as possible.
            From the other side commiting large amount of documents in one step needs more memory.
        </para>
        <para>
            Automatic segment management optimization is a subject of future Zend_Search_Lucene enhancements.
        </para>
    </sect2>

    <sect2 id="zend.search.index-creation.updating">
        <title>Updating Index</title>

        <para>
            The same procedure is used to update existing index. The only difference is that index should be opened without
            second parameter:
        </para>

        <programlisting role="php"><![CDATA[<?php

// Open existing index
$index = new Zend_Search_Lucene('/data/my-index');

$doc = new Zend_Search_Lucene_Document();
// Store document URL to identify it in search result.
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
// Index document content
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Add document to the index.
$index->addDocument($doc);

// Write changes to the index.
$index->commit();
?>]]></programlisting>

        <para>
            Each commit() call (explicit or implicit) generates new index segment.
        </para>
        <para>
            Zend_Search_Lucene doesn't manage segments automatically. Thus you should care about segment size.
            From the one side large segment is more optimal, but from another large segment needs more memory during creation.
        </para>
        <para>
            Lucene Java and Luke (Lucene Index Toolbox - <ulink url="http://www.getopt.org/luke/">http://www.getopt.org/luke/</ulink>)
            can be used to optimize index with this version of Zend_Search_Lucene.
        </para>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
