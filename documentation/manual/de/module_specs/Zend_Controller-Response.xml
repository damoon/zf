<sect1 id="zend.controller.response">
    <title>Das Response Objekt</title>

    <sect2 id="zend.controller.response.usage">
        <title>Verwendung</title>

        <para>
            Das Response Objekt ist das logische Gegenstück zum <link
                linkend="zend.controller.request">Request Objekt</link>. Sein Zweck ist es,
            Inhalte und / oder Header zu vereinigen, um sie in einem Rutsch zu versenden.
            Zusätzlich übergibt der Front Controller alle aufgefangenen Ausnahmen an das Response
            Objekt, um dem Entwickler das Verarbeiten von Ausnahmen zu ermöglichen. Dies
            Funktionalität kann durch Setzen von
            <code>Zend_Controller_Front::throwExceptions(true)</code> überschrieben werden.
        </para>

        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);]]>
        </programlisting>

        <para>
            Um die Ausgabe der Response, inklusiver der gesetzten Header, zu senden, verwendet man
            <code>sendResponse()</code>:
        </para>

        <programlisting role="php"><![CDATA[
$response->sendResponse();]]>
        </programlisting>

        <note>
            <para>
                Standardmäßig ruft der Front Controller <code>sendResponse()</code> auf wenn er die Anfrage fertig
                bearbeitet hat; typischerweise wird es nie notwendig sein Ihn aufzurufen. Wenn man trotzdem die
                Antwort manipulieren will oder Sie beim Testen verwenden will, kann dieses Verhalten durch das
                Setzen des <code>returnResponse</code> Flags mit
                <code>Zend_Controller_Front::returnResponse(true)</code> geändert werden:
            </para>

            <programlisting role="php"><![CDATA[<?php
$front->returnResponse(true);
$response = $front->dispatch();

// ein bischen mehr verarbeiten, wie z.B. loggen...
// und dann die Ausgabe senden:
$response->sendResponse();]]>
            </programlisting>
        </note>

        <para>
            Entwickler sollten das Response Objekt in ihren Aktionscontrollern verwenden. Statt
            die Ausgabe direkt zu machen und Header zu versenden, sollten diese an des Response
            Objekt übergeben werden:
        </para>

        <programlisting role="php"><![CDATA[
// Innerhalb einer Controller Aktion:
// Setze einen Header
$this->getResponse()
    ->setHeader('Content-Type', 'text/html')
    ->appendBody($content);]]>
        </programlisting>

        <para>
            Dadurch werden alle Header in einem Rutsch versendet, genau vor der Anzeige des Inhalts.
        </para>

        <note>
            <para>
                Wenn die <link linkend="zend.controller.action.viewintegration">View Integration</link> des Aktion
                Controllers verwendet wird muß der bearbeitete Inhalt des View Skripts im Antwort Objekt nicht
                gesetzt werden, da die <code>Zend_Controller_Action::render()</code> das standardmäßig macht.
            </para>
        </note>

        <para>
            Sollte in der Anwendung eine Ausnahme auftreten, überprüft man den
            <code>isException()</code> Schalter des Response Objektes und erhält die Ausnahme durch
            Verwendung von <code>getException()</code>. Zusätzlich kann man ein eigenes Response
            Objekt erstellen, dass zu einer Fehlerseite umleitet, die Nachricht der Ausnahme loggt,
            die Nachricht der Ausnahme schön formatiert ausgibt (für Entwicklungsumgebungen), usw.
        </para>

        <para>
            Man kann das Response Objekt im Anschluß an die dispatch() Methode des Front Controllers
            erhalten oder den Front Controller auffordern, dass Response Objekt zurückzugeben
            statt den Inhalt auszugeben.
        </para>

        <programlisting role="php"><![CDATA[
// Erhalten nach dem Dispatch:
$front->dispatch();
$response = $front->getResponse();
if ($response->isException()) {
    // log, mail, etc...
}

// Oder den Front Controller dispatch Prozess auffordern, es zurück zu geben
$front->returnResponse(true);
$response = $front->dispatch();

// mach irgend was...

// zum Schluß, gib die Antwort aus
$response->sendResponse();]]>
        </programlisting>

        <para>
            Standardmäßig werden Ausnahmennachrichten nicht ausgegeben. Dieses Verhalten kann durch
            den Aufruf von <code>renderException()</code> überschrieben werden oder indem der
            Front Controller aufgefordert wird, die Exceptions durch throwExceptions() auszuwerfen,
            wie oben gezeigt:
        </para>

        <programlisting role="php"><![CDATA[
$response->renderExceptions(true);
$front->dispatch($request, $response);

// oder:
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions();
$response->sendResponse();

// oder:
$front->throwExceptions(true);
$front->dispatch();]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.controller.response.headers">
        <title>Header manipulieren</title>

        <para>
            Wie vorher besprochen, ist einer der Aspekte der Antwort Objekt Aufgaben das Sammeln und Abschicken der
            HTTP Antwort Header. Eine Vielzahl von Methoden existieren hierfür:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>canSendHeaders()</code> wird verwendet um zu ermitteln ob bereits Header gesendet wurden.
                    Sie nimmt ein zusätzliches Flag das zeigt ob eine Ausnahme geworfen werden soll oder nicht,
                    wenn bereits Header gesendet wurden. Das kann durch das Setzen der Eigenschaft
                    <code>headersSentThrowsException</code> zu <code>false</code> überschrieben werden.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setHeader($name, $value, $replace = false)</code> wird verwendet um einen individuellen
                    Header zu setzen. Standardmäßig, ersetzt das keinen bereits existierenden gleichnamigen Header
                    im Objekt; Trotzdem wird das Setzen von <code>$replace</code> zu true es forcieren das zu tun.
                </para>

                <para>
                    Bevor der Header setzt wird, prüft er mit <code>canSendHeaders()</code> um zu sehen ob diese
                    Operation zu diesem Zeitpunkt erlaubt ist, und erzwingt das eine Ausnahme geworfen wird.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setRedirect($url, $code = 302)</code> setzt einen HTTP Location Header für eine
                    Umleitung. Wenn ein HTTP Status Code angegeben wurde, wird dieser Status Code verwendet.
                </para>

                <para>
                    Intern wird <code>setHeader()</code> mit dem <code>$replace</code> Flag aufgerufen um
                    sicherzustellen das nur ein solcher Header jemals gesendet wird.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHeaders()</code> gibt ein Array aller Header zurück. Jedes Array Element ist ein Array
                    mit den Schlüsseln 'name' und 'value'.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearHeaders()</code> löscht alle registrierten Headern.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setRawHeader()</code> can be used to set headers that
                    are not key/value pairs, such as an HTTP status header.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getRawHeaders()</code> returns any registered raw
                    headers.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearRawHeaders()</code> clears any registered raw
                    headers.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearAllHeaders()</code> clears both regular key/value
                    headers as well as raw headers.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            In addition to the above methods, there are accessors for setting
            and retrieving the HTTP response code for the current request,
            <code>setHttpResponseCode()</code> and
            <code>getHttpResponseCode()</code>.
        </para>
    </sect2>

    <sect2 id="zend.controller.response.namedsegments">
        <title>Named Segments</title>

        <para>
            The response object has support for "named segments". This allows
            you to segregate body content into different segments and order
            those segments so output is returned in a specific order.
            Internally, body content is saved as an array, and the various
            accessor methods can be used to indicate placement and names within
            that array.
        </para>

        <para>
            As an example, you could use a <code>preDispatch()</code> hook to
            add a header to the response object, then have the action controller
            add body content, and a <code>postDispatch()</code> hook add a
            footer:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Assume that this plugin class is registered with the front controller
class MyPlugin extends Zend_Controller_Plugin_Abstract
{
    public function preDispatch(Zend_Controller_Request_Abstract $request)
    {
        $response = $this->getResponse();
        $view = new Zend_View();
        $view->setBasePath('../views/scripts');

        $response->prepend('header', $view->render('header.phtml'));
    }

    public function postDispatch(Zend_Controller_Request_Abstract $request)
    {
        $response = $this->getResponse();
        $view = new Zend_View();
        $view->setBasePath('../views/scripts');

        $response->append('footer', $view->render('footer.phtml'));
    }
}

// a sample action controller
class MyController extends Zend_Controller_Action
{
    public function fooAction()
    {
        $this->render();
    }
}]]>
        </programlisting>

        <para>
            In the above example, a call to <code>/my/foo</code> will cause the
            final body content of the response object to have the following
            structure:
        </para>

        <programlisting role="php"><![CDATA[<?php
array(
    'header'  => ..., // header content
    'default' => ..., // body content from MyController::fooAction()
    'footer'  => ...  // footer content
);]]>
        </programlisting>

        <para>
            When this is rendered, it will render in the order in which elements
            are arranged in the array.
        </para>

        <para>
            A variety of methods can be used to manipulate the named segments:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setBody()</code> and <code>appendBody()</code> both
                    allow you to pass a second value, <code>$name</code>,
                    indicating a named segment. In each case, if you provide
                    this, it will overwrite that specific named segment or
                    create it if it does not exist (appending to the array by
                    default). If no named segment is passed to
                    <code>setBody()</code>, it resets the entire body content
                    array. If no named segment is passed to appendBody(), the
                    content is appended to the value in the 'default' name
                    segment.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>prepend($name, $content)</code> will create a segment
                    named <code>$name</code> and place it at the beginning of
                    the array. If the segment exists already, it will be removed
                    prior to the operation (i.e., overwritten and replaced).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>append($name, $content)</code> will create a segment
                    named <code>$name</code> and place it at the end of
                    the array. If the segment exists already, it will be removed
                    prior to the operation (i.e., overwritten and replaced).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>insert($name, $content, $parent = null, $before =
                        false)</code> will create a segment named
                    <code>$name</code>. If provided with a <code>$parent</code>
                    segment, the new segment will be placed either before or
                    after that segment (based on the value of
                    <code>$before</code>) in the array. If the segment exists
                    already, it will be removed prior to the operation (i.e.,
                    overwritten and replaced).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearBody($name = null)</code> will remove a single
                    named segment if a <code>$name</code> is provided (and the
                    entire array otherwise).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getBody($spec = false)</code> can be used to retrieve a single
                    array segment if <code>$spec</code> is the name of a named
                    segment. If <code>$spec</code> is false, it returns a string
                    formed by concatenating all named segments in order. If
                    <code>$spec</code> is true, it returns the body content
                    array.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.response.exceptions">
        <title>Testing for Exceptions in the Response Object</title>

        <para>
            As mentioned earlier, by default, exceptions caught during dispatch
            are registered with the response object. Exceptions are registered
            in a stack, which allows you to keep all exceptions thrown --
            application exceptions, dispatch exceptions, plugin exceptions, etc.
            Should you wish to check for particular exceptions or to log
            exceptions, you'll want to use the response object's exception API:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setException(Exception $e)</code> allows you to
                    register an exception.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>isException()</code> will tell you if an exception has
                    been registered.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getException(Exception $e)</code> returns the entire
                    exception stack.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>hasExceptionOfType($type)</code> allows you to
                    determine if an exception of a particular class is in the
                    stack.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>hasExceptionOfMessage($message)</code> allows you to
                    determine if an exception with a specific message is in the
                    stack.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>hasExceptionOfCode($code)</code> allows you to
                    determine if an exception with a specific code is in the
                    stack.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getExceptionByType($type)</code> allows you to
                    retrieve all exceptions of a specific class from the stack.
                    It will return false if none are found, and an array of
                    exceptions otherwise.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getExceptionByMessage($message)</code> allows you to
                    retrieve all exceptions with a specific message from the stack.
                    It will return false if none are found, and an array of
                    exceptions otherwise.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getExceptionByCode($code)</code> allows you to
                    retrieve all exceptions with a specific code from the stack.
                    It will return false if none are found, and an array of
                    exceptions otherwise.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>renderExceptions($flag)</code> allows you to set a
                    flag indicating whether or not exceptions should be emitted
                    when the response is sent.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.response.subclassing">
        <title>Subclassing the Response Object</title>

        <para>
            The purpose of the response object is to collect headers and content
            from the various actions and plugins and return them to the client;
            secondarily, it also collects any errors (exceptions) that occur in
            order to process them, return them, or hide them from the end user.
        </para>

        <para>
            The base response class is
            <code>Zend_Controller_Response_Abstract</code>, and any subclass you
            create should extend that class or one of its derivatives. The
            various methods available have been listed in the previous sections.
        </para>

        <para>
            Reasons to subclass the response object include modifying how output
            is returned based on the request environment (e.g., not sending
            headers for CLI or PHP-GTK requests), adding functionality to return
            a final view based on content stored in named segments, etc.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
