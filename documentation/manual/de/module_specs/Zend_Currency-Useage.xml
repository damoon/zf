<sect1 id="zend.currency.useage">

    <title>Arbeiten mit Währungen</title>

    <para>
        Um <code>Zend_Currency</code> in einer Anwendung zu verwenden muß nur eine Instanz davon erstellt
        werden ohne das Parameter angegeben werden. Das erstellt eine Instanz von <code>Zend_Currency</code>
        mit dem aktuellen Gebietsschema, und definiert die Währung die aktuell in diesem Gebietsschema
        verwendet wird.
    </para>

    <example id="zend.currency.useage.example1">

        <title>Eine Instanz von Zend_Currency anhand des aktuellen Gebietsschemas erstellen</title>

        <para>
            Angenommen 'en_US' ist, durch die Umgebung des Benutzers, als aktuelles Gebietsschema gesetzt.
            Durch das angeben keines einzigen Parameters wärend der Erstellung der Instanz kann
            <code>Zend_Currency</code> gesagt werden das es die aktuelle Währung des Gebietsschemas 'en_US'
            verwenden soll. Das führt zu einer Instanz mit US Dollar als aktueller Währung mit den
            Formatregeln von 'en_US'.
            Expect you have 'en_US' set as actual locale through the users or your environment. By using no
            parameter while creating the instance you say <code>Zend_Currency</code> to use the actual currency
            from the locale 'en_US'. This leads to an instance with US Dollar set as actual currency with the
            formatting rules from 'en_US'.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Currency.php';

$currency = new Zend_Currency();]]>
        </programlisting>

        <note>
            <para>
                Es ist zu beachten, das wenn das eigene System kein standardmäßiges Gebietsschema hat, oder das
                Gebietsschema des eigenen Systems nicht automatisch eruiert werden kann, wird
                <code>Zend_Currency</code> eine Ausnahme werfen. Wenn dieses Verhalten auftritt sollte das
                Gebietsschema per Hand gesezt werden.
            </para>
        </note>

    </example>

    <para>
        Natürlich können, abhängig von den eigenen Bedürfnissen, verschiedene Parameter bei der Erstellung
        angegeben werden. Jeder dieser Parameter ist optional und kann unterdrückt werden. Selbst die
        Reihenfolge dieser Parameter kann gewechselt werden. Die Bedeutung dieser Parmeter wird in der
        folgenden Liste beschrieben:
    </para>

    <itemizedlist mark='opencircle'>
        <listitem>
            <para>
                <emphasis role="strong">currency</emphasis>:
            </para>
            <para>
                Ein Gebietsschema kann verschiedene Währungen beinhalten. Deshalb kann der erste Parameter
                <emphasis role="strong">'currency'</emphasis> definieren welche Währung verwendet werden soll
                indem der Kurzname dieser Währung angegeben wird. Wenn die angegebene Währung in keinem
                Gebietsschema bekannt ist, wird eine Ausnahme geworfen. Kurznamen von Währungen bestehen immer
                aus 3 Buchstaben und werden groß geschrieben. Bekannte Kurznamen von Währungen sind zum Beispiel
                <code>USD</code> oder <code>EUR</code>. Für eine Liste aller bekannten Währungen gibt es die
                Informativen Methoden von <code>Zend_Currency</code>.
            </para>
        </listitem>
        <listitem>
            <para>
                <emphasis role="strong">script</emphasis>:
            </para>
            <para>
                Der zweite Parameter <emphasis role="strong">'script'</emphasis> definiert in welcher
                Schreibweise die Ausgabe geschrieben werden soll. Die Standardschreibweise ist 'Latn' welche
                die global bekannten Ziffern von <emphasis role="strong">'0'</emphasis> bis
                <emphasis role="strong">'9'</emphasis> beinhaltet. Andere Schreibweisen wie zum Beispiel
                <emphasis role="strong">'Arab'</emphasis> können andere Ziffern beinhalten. Für weitere
                Informationen über Schreibweisen kann in
                <link linkend="zend.locale.appendix.numberscripts.supported">unterstützte Schreibweisen für Ziffern</link>
                nachgesehen werden.
            </para>
        </listitem>
        <listitem>
            <para>
                <emphasis role="strong">locale</emphasis>:
            </para>
            <para>
                Der dritte Parameter <emphasis role="strong">'locale'</emphasis> definiert welches
                Gebietsschema für die Formatierung der Währung verwendet werden soll. Das angegebene
                Gebietsschema wird auch verwendet um die Standardschreibweise und die Währung dieses
                Gebietsschemas zu erhalten wenn diese Parameter nicht angegeben werden.
            </para>
            <note>
                <para>
                    Es gilt zu Beachten das Zend_Currency nur Gebietsschema akzeptiert die eine Region
                    beinhalten. Das bedeutet das alle angegebenen Gebietsschemata die nur eine Sprache
                    beinhalten eine Ausnahme werfen. Zum Beispiel wird das Gebietsschema
                    <emphasis role="strong">en</emphasis> eine Ausnahme werfen, aber das Gebietsschema
                    <emphasis role="strong">en_US</emphasis> wird als Währung
                    <emphasis role="strong">USD</emphasis> zurückgeben.
                </para>
            </note>
        </listitem>
    </itemizedlist>

    <example id="zend.currency.useage.example2">

        <title>Andere Beispiele für die Erstellung einer Instanz von Zend_Currency</title>

        <programlisting role="php"><![CDATA[<?php
// Wir nehmen das Standardgebietsschema 'de_AT' an
require_once 'Zend/Currency.php';

// Erstellt eine Instanz von from 'en_US' und verwendet 'USD', 'Latin' und 'en_US'
// da diese die Standardwerte von 'en_US' sind
$currency = new Zend_Currency('en_US');

// Erstellt eine Instanz vom aktuellen Gebietsschema ('de_AT') und verwendet 'EUR'
// als Währung zeigt diese aber in der Schreibweise 'Arab' an
$currency = new Zend_Currency('Arab');

// Erstellt eine Instanz und verwendet 'EUR' als Währung, 'en_US' für die Formatierung der Ziffern
// und 'Arab' für die Schreibweise
$currency = new Zend_Currency('en_US', 'EUR', 'Arab');]]>
        </programlisting>

    </example>

    <para>
        Es können also alle diese Parameter unterdrückt werden wenn man die Standardwerte verwenden will.
        Das hat keine negativen Effekte bei der Handhabung von Währungen. Es kann aber nützlich sein, wenn man
        z.B. die Standardwährung einer Region nicht weiß.
    </para>

    <note>
        <para>
            Für viele Länder gibt es verschiedene bekannt Währungen. Eine Währung wird immer aktuell gerade
            verwendet und es gibt eventuell noch alte Währungen. Wenn der
            '<emphasis role="strong">currency</emphasis>' Parameter unterdrückt wird, wird immer die aktuelle
            Währung verwendet. Die Region '<emphasis role="strong">de</emphasis>' zum Beispiel kennt die
            Währungen '<emphasis role="strong">EUR</emphasis>' und
            '<emphasis role="strong">DEM</emphasis>'... '<emphasis role="strong">EUR</emphasis>' ist die
            aktuell verwendete Währung und wird verwendet wenn der Parameter unterdrückt wird.
        </para>
    </note>

    <sect2 id="zend.currency.useage.tocurrency">

        <title>Eine Ausgabe von einer Währung erstellen</title>

        <para>
            Um einen bestehenden Wert in eine formatierte Ausgabe einer Währung zu konvertieren, muß die
            Methode <emphasis role="strong">toCurrency()</emphasis> verwendet werden. Sie nimmt einen
            Wert der konvertiert werden soll. Der Wert selbst kann jede normalisierte Zahl sein.
        </para>

        <para>
            Wenn man nur eine lokalisierte Zahl hat, muß diese zuerst mit
            <link linkend="zend.locale.number.normalize">Zend_Locale_Format::getNumber()</link>
            in einen normalisierte Zahl konvertiert werden. Danach kann Sie mit <code>toCurrency()</code>
            verwendet werden um eine Ausgabe einer Währung zu erstellen.
        </para>

        <para>
            <code>toCurrency()</code> akzeptiert zwei optionale Parameter welche temporär gesetzt werden können
            um ein anderes Format zu setzen.
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <emphasis role="strong">script</emphasis>:
                </para>
                <para>
                    Der erste Parameter '<emphasis role="strong">script</emphasis>' definiert in welcher
                    Schreibweise die Ausgabe erfolgen soll. Das Standardscript ist
                    '<emphasis role="strong">Latn</emphasis>' welches die global bekannten Ziffern von
                    <emphasis role="strong">'0'</emphasis> bis <emphasis role="strong">'9'</emphasis>
                    enthält. Andere Schreibweisen wie '<emphasis role="strong">Arab</emphasis>' können andere
                    Ziffern enthalten. Für weitere Informationen über Schreibweisen kann in
                    <link linkend="zend.locale.appendix.numberscripts.supported">unterstützte Schreibweisen für Ziffern</link>
                    nachgesehen werden. Wenn der Parameter angegeben wird, wird temporär für den aktuellen
                    Aufruf der Methode die Schreibweise verwendet.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">locale</emphasis>:
                </para>
                <para>
                    Der zweite Parameter '<emphasis role="strong">locale</emphasis>' definiert welches
                    Gebietsschema für die Formatierung der Währung verwendet werden soll. Das angegebene
                    Gebietsschema wird verwendet um die Standardschreibweise und die Währung dieses
                    Gebietsschemas zu erhalten wenn diese Parameter nicht angegeben wurden. Wenn dieser
                    Parameter angegeben wird, wird das angegebene Gebietsschema temporär für diesen
                    Methodenaufruf verwendet.
                </para>
            </listitem>
        </itemizedlist>

        <example id="zend.currency.useage.tocurrency.example">

            <title>Eine Ausgabe für eine Währung erstellen</title>

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Currency.php';

// Erstellt eine Instanz mit 'en_US' und verwendet 'USD', 'Latin' und 'en_US'
// da das die Standardwerte von 'en_US' sind
$currency = new Zend_Currency('en_US');

// Gibt '$ 1,000.00' aus
echo $currency->toCurrency(1000);

// Gibt '$ 1.000,00' aus
echo $currency->toCurrency(1000, 'de_AT');

// Gibt '$ ١٬٠٠٠٫٠٠' aus
echo $currency->toCurrency(1000, 'Arab');]]>
            </programlisting>

        </example>
    </sect2>

    <sect2 id="zend.currency.useage.setformat">

        <title>Das Format einer Währung ändern</title>

        <para>
            Das Format das bei der Erstellung der <code>Zend_Currency</code> Instanz angegeben wurde, ist
            natürlich das Standardformat. Aber manchmal ist es nützlich dieses Format für eigene Zwecke
            anzupassen.
        </para>

        <para>
            Das Format einer Währung enthält die folgenden Teile:
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <emphasis role="strong">Symbol, Kurzname oder Name der Währung</emphasis>:
                </para>
                <para>
                    Das Symbol der Währung wird normalerweise bei der Ausgabe einer Währung angezeigt.
                    Es kann unterdrückt oder sogar überschrieben werden wenn das notwendig ist.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">Position der Währung</emphasis>:
                </para>
                <para>
                    Die Position des Währungssymbols ist normalerweise automatisch durch das
                    Gebietsschema definiert. Es kann geändert werden wenn das notwendig ist.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">Script</emphasis>:
                </para>
                <para>
                    Die Schreibweise die verwendet werden soll um Ziffern anzuzeigen. Detailierte
                    Informationen über Schreibweisen und deren verwendung kann in der Dokumentation von
                    <code>Zend_Locale</code> unter 
                    <link linkend="zend.locale.appendix.numberscripts.supported">unterstützte Schreibweisen für Ziffern</link>
                    gefunden werden.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">Zahlenformat</emphasis>:
                </para>
                <para>
                    Der Wert der Währung (üblicherweise bekannt als Geldwert) wird durch die Verwendung der
                    Formatierungsregeln des Gebietsschemas formatiert. Zum Beispiel wird im Englischen das
                    ',' Zeichen als Separator für Tausender verwendet wärend im Deutschen das '.' Zeichen
                    verwendet wird.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            So if you are in need to change the format, you can use the
            <emphasis role="strong">setFormat()</emphasis> method. If no parameter is given the standard
            settings from the actual or set locale is used. <code>setFormat</code> supports the following
            settings:
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <emphasis role="strong">rules</emphasis>:
                </para>
                <para>
                    This parameter selects what currency symbol or name should be displayed and where.
                    Details are described below.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">script</emphasis>:
                </para>
                <para>
                    This parameter selects what script should be used for displaying digits. 'Latn' is the
                    default script for most locales. But others like 'Arab' (arabian) are also supported.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">locale</emphasis>:
                </para>
                <para>
                    This parameter selects what locale should be used for formatting the numbers.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The 'rules' parameter accepts a string as input or any of the below described constants to define
            where the currency signs should be displayed and what to display in detail. A given string will
            override any previous set currency shortsign or currency name.
        </para>

        <table id="zend.currency.useage.setformat.constantsdescription">

            <title>Constants for the selecting the currency description</title>

            <tgroup cols="3" align="left">
                <thead>
                    <row>
                        <entry>constant</entry>
                        <entry>value</entry>
                        <entry>description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>NO_SYMBOL</entry>
                        <entry>1</entry>
                        <entry>Do not display any currency representation</entry>
                    </row>
                    <row>
                        <entry>USE_SYMBOL</entry>
                        <entry>2</entry>
                        <entry>Display the currency symbol as currency description</entry>
                    </row>
                    <row>
                        <entry>USE_SHORTNAME</entry>
                        <entry>3</entry>
                        <entry>Display the 3 lettered currency abbreviation as currency description</entry>
                    </row>
                    <row>
                        <entry>USE_NAME</entry>
                        <entry>4</entry>
                        <entry>Display the currency name as currency description</entry>
                    </row>
                </tbody>
            </tgroup>

        </table>

        <table id="zend.currency.useage.setformat.constantsposition">

            <title>Constants for the selecting the currency position</title>

            <tgroup cols="3" align="left">
                <thead>
                    <row>
                        <entry>constant</entry>
                        <entry>value</entry>
                        <entry>description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>STANDARD</entry>
                        <entry>8</entry>
                        <entry>Set the position of the description to standard as defined within the locale</entry>
                    </row>
                    <row>
                        <entry>RIGHT</entry>
                        <entry>16</entry>
                        <entry>Display the currency description at the right side of the currency value</entry>
                    </row>
                    <row>
                        <entry>LEFT</entry>
                        <entry>32</entry>
                        <entry>Display the currency description at the left side of the currency value</entry>
                    </row>
                </tbody>
            </tgroup>

        </table>

        <example id="zend.currency.useage.setformat.example">

            <title>Changing the displayed format of a currency</title>

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Currency.php';

// creates an instance with 'en_US' using 'USD', 'Latin' and 'en_US' as these are the default values from 'en_US'
$currency = new Zend_Currency('en_US');

// prints 'US$ 1,000.00'
echo $currency->toCurrency(1000);

$currency->setFormat(Zend_Currency::USE_NAME&Zend_Currency::RIGHT);
// prints '1.000,00 US Dollar'
echo $currency->toCurrency(1000);

$currency->setFormat("American Dollar");
// prints '1.000,00 American Dollar'
echo $currency->toCurrency(1000);]]>
            </programlisting>

        </example>
    </sect2>

    <sect2 id="zend.currency.useage.informational">

        <title>Informational methods for Zend_Currency</title>

        <para>
            Of course, <code>Zend_Currency</code> supports also methods to get informations about any existing
            and many ancient currencies from <code>Zend_Locale</code>. The supported
            methods are:
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    <emphasis role="strong">getSymbol()</emphasis>:
                </para>
                <para>
                    Returns the known sign of the actual currency or a given currency. For example
                    <emphasis role="strong">$</emphasis> for the US Dollar within the locale
                    '<emphasis role="strong">en_US</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">getShortName()</emphasis>:
                </para>
                <para>
                    Returns the abbreviation of the actual currency or a given currency.  For example
                    <emphasis role="strong">USD</emphasis> for the US Dollar within the locale
                    '<emphasis role="strong">en_US</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">getName()</emphasis>:
                </para>
                <para>
                    Returns the full name of the actual currency of a given currency. For example
                    <emphasis role="strong">US Dollar</emphasis> for the US Dollar within the locale
                    '<emphasis role="strong">en_US</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">getRegionList()</emphasis>:
                </para>
                <para>
                    Returns a list of regions where the actual currency or a given one is known to be used.
                    It is possible that a currency is used within several regions therefor the return value
                    is always an array.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">getCurrencyList()</emphasis>:
                </para>
                <para>
                    Returns a list of currencies which are known to be used in the given region.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The function <code>getSymbol()</code>, <code>getShortName()</code> and <code>getName()</code> accept
            two optional parameters. If no parameter is given the expected data will be returned from the actual
            set currency. The first parameter takes the shortname of a currency. Short names are always three
            lettered, for example EUR for euro or USD for US Dollar. The second parameter defines from which
            locale the data should be read. If no locale is given, the actual set locale is used.
        </para>

        <example id="zend.currency.useage.informational.example">

            <title>Getting informations from currencies</title>

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Currency.php';

// creates an instance with 'en_US' using 'USD', 'Latin' and 'en_US' as these are the default values from 'en_US'
$currency = new Zend_Currency('en_US');

// prints '$'
echo $currency->getSymbol();

// prints 'EUR'
echo $currency->getShortName('EUR');

// prints 'Österreichische Schilling'
echo $currency->getName('ATS', 'de_AT');

// returns an array with all regions where USD is used
print_r($currency->getRegionList();

// returns an array with all currencies which were ever used in this region
print_r($currency->getCurrencyList('de_AT');]]>
            </programlisting>

        </example>

    </sect2>

    <sect2 id="zend.currency.useage.cache">

        <title>Speed up Zend_Currency</title>

        <para>
            The work of <code>Zend_Currency</code> can be speed up by the useage of <code>Zend_Cache</code>.
            By using the static method <code>Zend_Currency::setCache($cache)</code> which accepts one option, an
            <code>Zend_Cache</code> adapter. When you set it, the localization data of the methods from
            Zend_Currency are cached.
        </para>

    </sect2>

</sect1>