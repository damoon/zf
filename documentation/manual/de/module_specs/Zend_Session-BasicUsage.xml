<sect1 id="zend.session.basicusage">

    <title>Grundlegende Verwendung</title>

    <para>
        Zend_Session verwendet ext/session und seine besondere superglobale Variable <code>$_SESSION</code> als
        Speicher-Mechanismus für Session-Zustands-Daten. Auch wenn die Variable <code>$_SESSION</code> immernoch
        global zugänglich ist, sollten Entwickler davon absehen direkt auf sie zuzugreifen, damit Zend_Session
        effektiv und sicher seine Sammlung session-spezifischer Funktionalität zur Verfügung stellen kann.
    </para>

    <sect2 id="zend.session.basicexamples">

        <title>Übungs-Beispiele</title>

        <para>
            Wenn beim Erzeugen der Zend_Session-Instanz kein Namespace angegeben wird, werden alle Daten im
            <code>'Default'</code>-Namespace gespeichert. Das Beispiel unten demonstriert die Nutzung des
            <code>'Default'</code>-Namespace und zeigt, wie man die Anzahl der Seitenaufrufe auf einer Website durch
            einen Nutzer zählen kann. Erweitern Sie Ihren ZF-Bootstrap-Bereich um folgenden Code (mit Ausnahme des 
            <code>echo</code>):
        </para>

        <example>
            <title>Seitenaufrufe zählen</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $session = new Zend_Session();
    $session->numberOfPageRequests++; // wird bei jedem Aufruf erhöht.
    echo "Seitenaufrufe in dieser Session: ", $session->numberOfPageRequests;
?>]]></programlisting>
        </example>

        <para>
            Einer der vielen Vorteile von Zend_Session ist, dass mehrere Module Zend_Session nutzen können und ihre
            Daten dadurch zu einem gewissen Grad voneinander abgekapselt werden. Zend_Session kann über den Konstruktor
            ein optionales <code>$namespace</code>-Argument übergeben werden, welches dazu führt, dass die Daten anderer
            Komponenten, Module oder entwicklerspezifischer Code-Teile durch eine Trennung zwischen den Daten-Bereichen
            vor versehentlichem Überschreiben geschützt sind. Die Verwendung von Namespaces ist ein populäres Mittel,
            um eine Teilmenge der Session-Zustands-Daten vor unbeabsichtigtem Überschreiben zu "schützen". Als Namen
            für Namespaces sind nur nicht-lehre PHP-Strings erlaubt, die nicht mit einem Unterstrich ('_') beginnen.
            Nur mitgelieferte Kern-Komponenten des Zend-Frameworks sollten Namespaces benutzen, die mit 'Zend_' beginnen.
        </para>

        <example>
            <title>Neuer Weg: Kollisionen durch Namespaces vermeiden</title>
<programlisting role="php">
<![CDATA[<?php
    // in der Zend-Auth Komponente
    require_once 'Zend/Session.php';
    $auth_session = new Zend_Session('Zend_Auth');
    $auth_session->user = "myusername";

    // in einer Web-Services-Komponente
    $web_service_session = new Zend_Session('Irgendein_Web_Service');
    $web_service_session->user = "mywebusername";
?>]]></programlisting>
        </example>

        <para>
            Das obige Beispiel erzielt den selbst Effekt wie der Code unten, mit dem Unterschied, dass das Session-Objekt
            oben die Kapselung der Session-Daten in ihrem jeweiligen Namensbereich aufrecht erhält. Diverse Überprüfungen
            und die Verwendung eines Singleton-Patterns in Zend_Session_Core sind dafür verantwortlich, dass diese
            Kapselung erzwungen wird.
        </para>

        <example>
            <title>Alter Weg: PHP-Session-Zugriff</title>
<programlisting role="php">
<![CDATA[<?php
    $_SESSION['Zend_Auth']['user'] = "myusername";
    $_SESSION['Irgendein_Web_Service']['user'] = "mywebusername";
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.iteration">

        <title>Schleife über Session-Namespaces</title>

        <para>
            Zend_Session stellt das volle
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html">IteratorAggregate-Interface</ulink>
            zur Verfügung, einschließlich der Unterstützung des <code>foreach</code> Statements:
        </para>

        <example>
            <title>Session-Iteration</title>
<programlisting role="php">
<![CDATA[<?php
    // Zend_Session kann in Schritten durchlaufen werden
    require_once 'Zend/Session.php';
    $my_session = new Zend_Session();
    foreach ($my_session as $name => $value) {
        ....
    }
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.accessors">

        <title>Zurgriffsfunktionen für Session-Namespaces</title>

        <para>
            Die üblichen Zugriffsmethoden sind verfügbar, zur Verfügung gestellt durch die magischen
            Methoden __set(), __unset(), __isset() und __get(). Diese Methoden sollten nicht direkt
            benutzt werden, außer aus Unterklassen von Zend_Session. Statt dessen verwendet man
            normale Operatoren, um diese magischen Methoden aufzurufen, zum Beispiel:
        </para>

        <example>
            <title>Zugriff auf Session-Daten</title>
<programlisting role="php">
<![CDATA[<?php
            $object->property = $value; echo
            (isset($object->property) ? 'gesetzt' : 'nicht gesetzt');
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
