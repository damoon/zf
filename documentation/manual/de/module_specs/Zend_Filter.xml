<sect1 id="zend.filter.filter">
    <title>Zend_Filter</title>
    
    <sect2 id="zend.filter.filter.introduction">
        <title>Einführung</title>
        <para><literal>Zend_Filter</literal> stellt eine Bilbliothek von statischen Methoden für das  
        Filtern von Daten bereit. Für das Filtern von Eingabedaten, solltest Du stattdessen 
        <xref linkend="zend.filter.input" /> verwenden, weil es einen Rahmen für das Filtern von
        Eingabedaten bereitstellt, welches die Methoden dieser Klasse verwendet. Weil 
        <literal>Zend_Filter_Input</literal> hauptsächlich für Arrays entwickelt wurde, kann 
        <literal>Zend_Filter</literal> dennoch für das Filtern von Skalaren verwendet werden, da die 
        Methoden sich wie die String Funktionen von PHP verhalten:</para>
        <programlisting>
    <![CDATA[<?php
    
    $alphaUsername = Zend_Filter::getAlpha('John123Doe');
    
    /* $alphaUsername = 'JohnDoe'; */
    
    ?>]]>
        </programlisting>
    </sect2>
    <sect2 id="zend.filter.filter.usecases">
        <title>Anwendungsfälle</title>
        <para>In jedem dieser Anwendungsfälle stellt <literal>$value</literal> einen beliebigen 
        skalaren Wert dar.</para>
        <para>Whitelist Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    if ($email = Zend_Filter::isEmail($value)) {
        /* $email ist in einem gültigen E-Mail Format  */
    } else {
        /* $email ist nicht in einem gültigen E-Mail Format. */
    }
    
    ?>]]>
        </programlisting>
        <para>Blindes Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    $alphaName = Zend_Filter::getAlpha($value);
    
    ?>]]>
        </programlisting>
        <para>Blacklist Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    $taglessComment = Zend_Filter::noTags($value);
    
    ?>]]>
        </programlisting>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
