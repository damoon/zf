<sect1 id="zend.introduction">
    <title>Einführung</title>
    <para>
    Die Zend Klasse ist die Basisklasse des Zend Frameworks. Diese Klasse wurde entwickelt, um 
    dem DRY-Prinzip (Don't Repeat Yourself - Wiederhole dich nicht) zu folgen. Sie enthält 
    nur statische Methoden, welche die Funktionalitäten enthalten, die von den meisten Komponenten 
    des Zend Framework benötigt werden.
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>Zend::loadFile()</title>
    <para>
    <code>Zend::loadFile()</code> lädt eine PHP Datei, die beliebigen PHP Code enthalten kann. Es 
    ist ein Wrapper für die PHP Funktion
    <ulink url="http://php.net/include"><code>include()</code></ulink>, der bei einem Fehler eine 
    <code>Zend_Exception</code> wirft.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>

    <para>Das <code>$filename</code> Argument gibt den Namen der zu ladenden Datei an und darf 
    keine Pfadangaben enthalten. Eine Sicherheitsüberprüfung wird auf den <code>$filename</code> 
    ausgeführt. Der <code>$filename</code> darf nur alphanumerische Zeichen, Bindestriche ("-"), 
    Unterstriche ("_") oder Punkte (".") enthalten. Diese Einschränkung gilt nicht für das 
    <code>$dirs</code> Argument.
    </para>

    <para>Das <code>$dirs</code> Argument gibt die Verzeichnisse an, in denen nach der Datei 
    gesucht werden soll. Bei der Angabe von <code>NULL</code> wird nur die 
    <code>include_path</code> durchsucht. Bei der Angabe einer Zeichenkette oder eines Array wird 
    zuerst das Verzeichnis bzw. die Verzeichnisse durchsucht und danach der 
    <code>include_path</code>.
    </para>

    <para>
    Das <code>$once</code> Argument ist vom Typ Boolean und gibt an, ob die PHP Funktionen 
    <ulink url="http://php.net/include"><code>include()</code></ulink> oder 
    <ulink url="http://php.net/include_once"><code>include_once()</code></ulink> 
    für das Laden der Datei verwendet werden sollen.
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
    <code>Zend::loadClass()</code> lädt eine PHP Datei, dessen Dateiname wie 
    "<code>$className.php</code>" formatiert ist, und prüft, ob die Klasse 
    <code>$className</code> existiert.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadClass($class, $dirs)

?>]]></programlisting>

    <para>
    Wenn die Datei nicht gefunden wird oder die Klasse nach dem Laden nicht existiert, wird eine 
    <code>Zend_Exception</code> geworfen. <code>Zend::loadFile()</code> wird für das Laden 
    verwendet und das <code>$dirs</code> Argument wird direkt übergeben.
    </para>

    <para>
    Soll eine Klasse geladen werden, die Unterstriche im Namen enthält, und ist <code>$dirs</code> 
    gleich null (die Voreinstellung), wird <code>Zend::loadClass()</code> die Verzeichnisangaben 
    <code>$dirs</code> automatisch anhand des Klassennamens erkennen, indem die Unterstriche in 
    Verzeichnistrenner konvertiert werden. Wird als <code>$class</code> z.B. 
    <code>Zend_Example_Class</code> übergeben, wird dies auf den Pfad 
    <code>Zend/Example/Class.php</code> abgebildet.
    </para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>
    <code>Zend::loadInterface()</code> arbeitet genauso wie <code>Zend::loadClass()</code>, nur 
    dass stattdessen ein Interface geladen wird.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
    Die <code>Zend::loadClass()</code> Methode kann nicht für das Laden von Interfaces verwendet 
    werden, weil die PHP Funktion
    <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink> 
    nicht auf Interfaces prüfen kann (seit PHP 5.0.2). Verwende <code>Zend::loadInterface()</code> 
    stattdessen.
    </para>

    <para>
    Soll ein Interface geladen werden, das Unterstriche im Namen enthält, und ist 
    <code>$dirs</code> gleich null (die Voreinstellung), wird <code>Zend::loadInterface()</code> 
    die Verzeichnisangaben <code>$dirs</code> automatisch anhand des Interface Namens erkennen, 
    indem die Unterstriche in Verzeichnistrenner konvertiert werden. Wird als 
    <code>$interface</code> z.B. <code>Zend_Example_Interface</code> übergeben, wird dies auf den 
    Pfad <code>Zend/Example/Interface.php</code> abgebildet.
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>Gibt <code>TRUE</code> zurück, wenn eine Datei lesbar ist, ansonsten wird FALSE 
    zurückgegeben.</para>

    <programlisting role="php"><![CDATA[<?php
	
isReadable($filename)

?>]]></programlisting>

    <para>Das <code>$filename</code> Argument gibt den zu prüfenden Dateinamen an und darf 
    Informationen zum Pfad einhalten. Diese Methode ist ein Wrapper für die PHP Funktion
    <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>. Die PHP Funktion 
    durchsucht nicht den <code>include_path</code>, während <code>Zend::isReadable()</code> dies 
    tut.
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>

    <para>
    <code>Zend::dump()</code> gibt Informationen über einen Ausdruck zurück und/oder aus. Es ist 
    ein Wrapper für die PHP Funktion 
    <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>. Es umhüllt die Ausgabe 
    mit (X)HTML <code>&lt;pre&gt;</code> Tags und stellt optional eine Bezeichnung voran.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
    Das <code>$var</code> Argument gibt den Ausdruck oder die Variable an, für welche die 
    Informationen erhalten werden sollen.
    </para>

    <para>
    Das <code>$label</code> ist beliebiger Text, welche der Ausgabe von <code>Zend::dump()</code> 
    vorangstellt werden soll. Dies ist nützlich, wenn viele Variablen auf einer einzigen 
    Bildschirmseite ausgegeben werden sollen. 
    </para>

    <para>Das <code>$echo</code> Argument vom Typ Boolean gibt an, ob die Ausgabe von 
    <code>Zend::dump()</code> angezeigt werden soll oder nicht. Bei <code>TRUE</code> wird die 
    Ausgabe angezeigt. Die Ausgabe wird unabhängig vom Status von <code>$echo</code> immer
    zurückgegeben.
    </para>
</sect1>


<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
    Registriert ein Objekt im Objektspeicher.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
register($name, $object)

?>]]></programlisting>

    <para>
    Der Objektspeicher ist ein Mechanismus, um einmalige Instanzen von Objekten im 
    Applikationsspeicher zu erstellen (Singleton). Es wird immer die gleiche Instanz zurückgegeben, 
    sowohl beim einmaligen Ablegen des Objektes im Objektspeicher, als auch beim Zurückholen des 
    Objektes aus dem Objektspeicher, wann immer es erforderlich ist. 
    </para>

    <para>
    Der <code>$name</code> ist eine beliebige Zeichenkette, um das Objekt im Objektspeicher zu 
    bezeichnen. Dieser Name wird beim Aufruf von <code>Zend::registry()</code> erneut verwendet, um 
    das Objekt zurückzuholen.
    </para>

    <para>
    Das <code>$name</code> Argument muss eine Zeichenkette sein, nur Objekte können im 
    Objektspeicher abgelegt werden, ein Objekt kann niemals aus dem Objektspeicher entfernt werden 
    und eine Instanz kann immer nur einmal im Objektspeicher abgelegt werden. Beim Missachten 
    dieser Regeln wird eine <code>Zend_Exception</code> ausgeworfen.
    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
    Holt ein Objekt aus dem Objektspeicher zurück oder listet alle Objekte des Objektspeichers auf.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
registry($name=null)

?>]]></programlisting>

    <para>
    Wenn das <code>$name</code> Argument gleich <code>NULL</code> ist, wird ein Array 
    zurückgegeben, bei dem die Schlüssel den Namen des Objektes und die Werte den Klassennamen 
    wiedergeben. 
    </para>

    <para>
    Wenn <code>$name</code> eine Zeichenkette ist, wird das mit dem Namen verknüpfte Objekt-Handle 
    zurückgegeben. Wenn das Objekt nicht mit dem Namen <code>$name</code> im Objektspeicher 
    existiert, wird eine <code>Zend_Exception</code> ausgeworfen.
    </para>

    <para>
    Um schnell zu prüfen, ob ein Objekt im Objektspeicher vorhanden ist, verwende 
    Zend::isRegistered().
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->