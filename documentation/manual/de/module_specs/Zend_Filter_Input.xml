<sect1 id="zend.filter.input">
    <title>Zend_Filter_Input</title>

    <para>
        Zend_Filter_Input bietet ein ausgezeichnetes Interfave um mehrere Filter und Prüfer zu assoziieren, Sie
        Kollektionen von Daten hinzuzufügen, und Eingabewerte zu empfangen nachdem diese durch die Filter und
        Prüfer bearbeitet wurden. Werte werden standardmäßig in kommentiertem Format zurückgegeben für sichere
        HTML Ausgabe.
    </para>

    <para>
        Angenommen das diese Klasse ein Käfig für externe Daten ist. Daten betreten die Anwendung von externen
        Quellen, wie HTTP Anfrageparameter, HTTP Header, ein Web Service, oder sogar durch Lesen von eine Datenbank
        oder anderen Dateien. Daten werden zuerst in den Käfig gesperrt, und die Anwendung kann diese Daten nur dann
        Stück für Stück empfangen wenn dem Käfig gesagt wird, was diese Daten sein sollten und wie geplant ist diese
        zu verwenden. Der Käfig inspiziert die Daten auf Gültigkeit. Es kann passieren das er die Datenwerte
        kommentiert für den entsprechenden Kontext. Der Käfig entlässt die Daten nur wen diese alle
        Notwendigkeiten komplett erfüllen. Mit einem einzigen und bequemen Interface, wird gutes
        Programmierverhalten ermöglicht und es lässt Entwickler darüber nachdenken wie die Daten verwendet werden.
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis role="strong">Filter</emphasis> wandeln Eingabewerte um, inden Sie Zeichen in dem Wert
                entfernen oder Ändern. Das Ziel ist es Eingabewerte zu "normalisieren" bis diese einem
                erwarteten Format entsprechen. Zum Beispiel, wenn ein String von nummerischen Zeichen benötigt wird,
                und der Eingabewert "abc123" ist dann könnte eine erwartete Umwandlung die Änderung des Wertes in
                den String "123" sein.
            </para>
        </listitem>
        <listitem>
            <para>
                <emphasis role="strong">Prüfer</emphasis> prüfen Eingabewerte gegenüber Kriterien und melden ob
                diese den Test bestanden haben oder nicht. Der Wert wird nicht geändert, aber die Prüfung kann
                fehlschlagen. Zum Beispiel, wenn ein String wie eine Email Adresse aussehen muß, und der Eingabewert
                "abc123" ist, dann wird der Wert als nicht gültig angenommen.
            </para>
        </listitem>
        <listitem>
            <para>
                <emphasis role="strong">Auskommentierer</emphasis> wandeln einen Wert um indem Sie magisches
                Verhalten von bestimmten Zeichen entfernen. In einigen Ausgabekontexten haben speziellen Zeichen
                eine Bedeutung. Zum Beispiel das Zeichen '&lt;' und '&gt;' begrenzen HTML Tags, und wenn ein String
                diese Zeichen enthält und in einem HTML Kontext ausgegeben wird, könnte der Inhalt zwischen Ihnen
                die Ausgabe oder Funktionalität der HTML Präsentation beeinflussen. Das auskommentieren der Zeichen
                entfernt die spezielle Bedeutung, damit Sie als literale Zeichen ausgegeben werden.
            </para>
        </listitem>
    </itemizedlist>

    <para>
        Um Zend_Filter_Input zu verwenden, müssen die folgenden Schritte unternommen werden:
    </para>

    <orderedlist numeration="arabic">
        <listitem>
            <para>
                Filter und Prüfregeln deklarieren
            </para>
        </listitem>
        <listitem>
            <para>
                Filter und Prüfbearbeiter erstellen
            </para>
        </listitem>
        <listitem>
            <para>
                Eingabedaten bereitstellen
            </para>
        </listitem>
        <listitem>
            <para>
                Geprüfte Felder und andere Reports erhalten
            </para>
        </listitem>
    </orderedlist>

    <para>
        Die folgenden Sektionen beschreiben die Schritte für die Verwendung dieser Klasse.
    </para>

    <sect2 id="zend.filter.input.declaring">

        <title>Filter und Prüfregeln deklarieren</title>

        <para>
            Vor der Erstellung einer Instanz von Zend_Filter_Input, muß ein Array von Filterregeln deklariert werden
            und auch ein Array von Prüfregeln. Dieses assoziative Array verbindet einen Regelnamen mit einem Filter
            oder Prüfer oder einer Kette von Filtern oder Prüfern.
        </para>

        <para>
            Das folgende Beispiel eines Sets von Filterregeln deklariert, daß das Feld 'month' von Zend_Filter_Digits
            gefiltert wird, und das Feld 'account' von Zend_Filter_StringTrim gefiltert wird. Anschließend wird
            ein Set von Prüfregeln deklariert welches prüft das das Feld 'account' nur dann gültig ist wenn es
            nur alphabetische Zeichen enthält.
        </para>

        <programlisting role="php"><![CDATA[<?php
$filters = array(
    'month'   => 'Digits',
    'account' => 'StringTrim'
);

$validators = array(
    'account' => 'Alpha'
);]]>
        </programlisting>

        <para>
            Jeder Schlüssel im obigen Array ist der Name einer Regel die auf einen Filter für ein spezielles
            Datenfeld angewendet wird. Standardmäßig, ist der Name der Regel auch der Name des Feldes der
            Eingabedaten auf die die Regel angewendet werden soll.
        </para>

        <para>
            Eine Regel kann in verschiedenen Formaten deklariert werden:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Ein einfacher skalarer String, der einem Klassennamen entspricht:
                    <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month'   => 'Digits',
);]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    Die Instanz eines Objektes einer der Klassen die Zend_Filter_Interface oder
                    Zend_Validate_Interface implementieren.
                    <programlisting role="php"><![CDATA[<?php
$digits = new Zend_Validate_Digits();

$validators = array(
    'month'   => $digits
);]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    Ein Array um eine Kette von Filtern oder Prüfern zu deklarieren. Die Elemente dieses Arrays
                    können Strings sein die Klassennamen entsprechen oder Filter/Prüfobjekte, wie in den oben
                    beschriebenen Fällen. Zusätzlich kann eine dritte Wahl verwendet werden: Ein Array das
                    einen String enthält der dem Klassennamen entspricht gefolgt von Argumenten die dessen
                    Konstruktor übergeben werden.

                    <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month'   => array(
        'Digits',                // String
        new Zend_Validate_Int(), // Objekt Instanz
        array('Between', 1, 12)  // String mit Konstruktor Argumenten
    )
);]]>
                    </programlisting>
                </para>
            </listitem>
        </itemizedlist>

        <note>
            <para>
                Wenn ein Filter oder Prüfer mit Konstruktor Argumenten in einem Array deklariert wird, muß ein Array
                für die Regel erstellt werden, selbst wenn die Regel nur einen Filter oder Prüfer enthält.
            </para>
        </note>

        <para>
            Es kann ein spezieller "Wildcard" Regelschlüssel <code>'*'</code>, entweder im Array des Filters oder im
            Array des Prüfers, verwendet werden. Das bedeutet das der Filter oder Prüfer der in dieser Regel
            deklariert wird allen Feldern der Eingabedaten zugewiesen wird. Es gilt zu beachten das die Reihenfolge
            der Einträge im Array des Filters oder im Array des Prüfers bedeutend ist; die Regeln werden in der
            gleichen Reihenfolge zugewiesen in dem diese deklariert wurden.
        </para>

        <programlisting role="php"><![CDATA[<?php
$filters = array(
    '*'     => 'StringTrim',
    'month' => 'Digits'
);]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.filter.input.running">

        <title>Filter und Prüfbearbeiter erstellen</title>

        <para>
            After declaring the filters and validators arrays, use them as
            arguments in the constructor of Zend_Filter_Input.  This returns an
            object that knows all your filtering and validating rules, and you
            can use this object to process one or more sets of input data.
        </para>

        <programlisting role="php"><![CDATA[<?php
$input = new Zend_Filter_Input($filters, $validators);]]>
        </programlisting>

        <para>
            You can specify input data as the third constructor argument.  The
            data structure is an associative array.  The keys are field names,
            and the values are data values.  The standard <code>$_GET</code>
            and <code>$_POST</code> superglobal variables in PHP are examples
            of this format.  You can use either of these variables as input
            data for Zend_Filter_Input.
        </para>

        <programlisting role="php"><![CDATA[<?php
$data = $_GET;

$input = new Zend_Filter_Input($filters, $validators, $data);]]>
        </programlisting>

        <para>
            Alternatively, use the <code>setData()</code> method, passing
            an associative array of key/value pairs the same format as
            described above.
        </para>

        <programlisting role="php"><![CDATA[<?php
$input = new Zend_Filter_Input($filters, $validators);
$input->setData($newData);]]>
        </programlisting>

        <para>
            The <code>setData()</code> method redefines data in an existing
            Zend_Filter_Input object without changing the filtering and
            validation rules.  Using this method, you can run the same rules
            against different sets of input data.
        </para>

    </sect2>

    <sect2 id="zend.filter.input.results">

        <title>Retrieving Validated Fields and other Reports</title>

        <para>
            After you have declared filters and validators and created the
            input processor, you can retrieve reports of missing, unknown, and
            invalid fields.  You also can get the values of fields after
            filters have been applied.
        </para>

        <sect3 id="zend.filter.input.results.isvalid">

            <title>Querying if the input is valid</title>

            <para>
                If all input data pass the validation rules, the
                <code>isValid()</code> method returns <code>true</code>.
                If any field is invalid or any required field is missing,
                <code>isValid()</code> returns <code>false</code>.
            </para>

            <programlisting role="php"><![CDATA[<?php
if ($input->isValid()) {
  echo "OK\n";
}]]>
            </programlisting>

            <para>
                This method accepts an optional string argument, naming
                an individual field.  If the specified field passed validation
                and is ready for fetching, <code>isValid('fieldName')</code>
                returns <code>true</code>.
            </para>

            <programlisting role="php"><![CDATA[<?php
if ($input->isValid('month')) {
  echo "Field 'month' is OK\n";
}]]>
            </programlisting>

        </sect3>

        <sect3 id="zend.filter.input.results.reports">

            <title>Getting Invalid, Missing, or Unknown Fields</title>

            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="strong">Invalid</emphasis> fields are
                        those that don't pass one or more of their validation
                        checks.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="strong">Missing</emphasis> fields are
                        those that are not present in the input data, but were
                        declared with the metacommand
                        <code>'presence'=>'required'</code> (see the
                        <link linkend="zend.filter.input.metacommands.presence">later section</link>
                        on metacommands).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="strong">Unknown</emphasis> fields are
                        those that are not declared in any rule in the array of
                        validators, but appear in the input data.
                    </para>
                </listitem>
            </itemizedlist>

            <programlisting role="php"><![CDATA[<?php
if ($input->hasInvalid() || $input->hasMissing()) {
  $messages = $input->getMessages();
}

// getMessages() simply returns the merge of getInvalid() and getMissing()

if ($input->hasInvalid()) {
  $invalidFields = $input->getInvalid();
}

if ($input->hasMissing()) {
  $missingFields = $input->getMissing();
}

if ($input->hasUnknown()) {
  $unknownFields = $input->getUnknown();
}]]>
            </programlisting>

            <para>
                The results of the <code>getMessages()</code> method is an
                associative array, mapping a rule name to an array of error
                messages related to that rule.  Note that the index of this
                array is the rule name used in the rule declaration, which may
                be different from the names of fields checked by the rule.
            </para>

            <para>
                The <code>getMessages()</code> method returns the merge of the
                arrays returned by the <code>getInvalid()</code> and
                <code>getMissing()</code>.  These methods return subsets of the
                messages, related to validation failures, or fields that were
                declared as required but missing from the input.
            </para>

            <para>
                The <code>getErrors()</code> method returns an associative array,
                mapping a rule name to an array of error identifiers.  Error
                identifiers are fixed strings, to identify the reason for a
                validation failure, while messages can be customized.
                See <xref linkend="zend.validate.introduction.using" /> for
                more information.
            </para>

            <para>
                You can specify the message returned by
                <code>getMissing()</code> using the 'missingMessage' option,
                as an argument to the Zend_Filter_Input constructor or using
                the <code>setOptions()</code> method.
            </para>

            <programlisting role="php"><![CDATA[<?php
$options = array(
    'missingMessage' => "Field '%field%' is required"
);

$input = new Zend_Filter_Input($filters, $validators, $data, $options);

// alternative method:

$input = new Zend_Filter_Input($filters, $validators, $data);
$input->setOptions($options);]]>
            </programlisting>

            <para>
                The results of the <code>getUnknown()</code> method is an
                associative array, mapping field names to field values.  Field
                names are used as the array keys in this case, instead of rule
                names, because no rule mentions the fields considered to be
                unknown fields.
            </para>

        </sect3>

        <sect3 id="zend.filter.input.results.escaping">

            <title>Getting Valid Fields</title>

            <para>
                All fields that are neither invalid, missing, nor unknown are
                considered valid.  You can get values for valid fields using a
                magic accessor.  There are also non-magic accessor methods
                <code>getEscaped()</code> and <code>getUnescaped()</code>.
            </para>

            <programlisting role="php"><![CDATA[<?php
$m = $input->month;                 // escaped output from magic accessor
$m = $input->getEscaped('month');   // escaped output
$m = $input->getUnescaped('month'); // not escaped]]>
            </programlisting>

            <para>
                By default, when retrieving a value, it is filtered with the
                Zend_Filter_HtmlEntities.  This is the default because it is
                considered the most common usage to output the value of a field
                in HTML.  The HtmlEntities filter helps prevent unintentional
                output of code, which can result in security problems.
            </para>

            <note>
                <para>
                    As shown above, you can retrieve the unescaped value using
                    the <code>getUnescaped()</code> method, but you must write
                    code to use the value safely, and avoid security issues
                    such as vulnerability to cross-site scripting attacks.
                </para>
            </note>

            <para>
                You can specify a different filter for escaping values, by
                specifying it in the constructor options array:
            </para>

            <programlisting role="php"><![CDATA[<?php
$options = array('escapeFilter' => 'StringTrim');
$input = new Zend_Filter_Input($filters, $validators, $data, $options);]]>
            </programlisting>

            <para>
                Alternatively, you can use the
                <code>setDefaultEscapeFilter()</code> method:
            </para>

            <programlisting role="php"><![CDATA[<?php
$input = new Zend_Filter_Input($filters, $validators, $data);
$input->setDefaultEscapeFilter(new Zend_Filter_StringTrim());]]>
            </programlisting>

            <para>
                In either usage, you can specify the escape filter as a string
                base name of the filter class, or as an object instance of a
                filter class.  The escape filter can be an instance of a filter
                chain, an object of the class Zend_Filter.
            </para>

            <para>
                Filters to escape output should be run in this way, to make
                sure they run after validation.  Other filters you declare in
                the array of filter rules are applied to input data before data
                are validated.  If escaping filters were run before validation,
                the process of validation would be more complex, and it would
                be harder to provide both escaped and unescaped versions of the
                data.  So it is recommended to declare filters to escape output
                using <code>setDefaultEscapeFilter()</code>, not in the
                <code>$filters</code> array.
            </para>

            <para>
                There is only one method <code>getEscaped()</code>, and
                therefore you can specify only one filter for escaping
                (although this filter can be a filter chain).  If you need a
                single instance of Zend_Filter_Input to return escaped output
                using more than one filtering method, you should extend
                Zend_Filter_Input and implement new methods in your subclass to
                get values in different ways.
            </para>

        </sect3>

    </sect2>

    <sect2 id="zend.filter.input.metacommands">

        <title>Using Metacommands to Control Filter or Validator Rules</title>

        <para>
            In addition to declaring the mapping from fields to filters
            or validators, you can specify some "metacommands" in the array
            declarations, to control some optional behavior of
            Zend_Filter_Input.  Metacommands appear as string-indexed
            entries in a given filter or validator array value.
        </para>

        <sect3 id="zend.filter.input.metacommands.fields">

            <title>The <code>FIELDS</code> metacommand</title>

            <para>
                If the rule name for a filter or validator is different than
                the field to which it should apply, you can specify the
                field name with the 'fields' metacommand.
            </para>

            <para>
                You can specify this metacommand using the class constant
                <code>Zend_Filter_Input::FIELDS</code> instead of the
                string.
            </para>

            <programlisting role="php"><![CDATA[<?php
$filters = array(
    'month' => array(
        'Digits',        // filter name at integer index [0]
        'fields' => 'mo' // field name at string index ['fields']
    )
);]]>
            </programlisting>

            <para>
                In the example above, the filter rule applies the 'digits'
                filter to the input field named 'mo'.  The string 'month'
                simply becomes a mnemonic key for this filtering rule; it is
                not used as the field name if the field is specified with the
                'fields' metacommand, but it is used as the rule name.
            </para>

            <para>
                The default value of the 'fields' metacommand is the index of
                the current rule.  In the example above, if the 'fields'
                metacommand is not specified, the rule would apply to the input
                field named 'month'.
            </para>

            <para>
                Another use of the 'fields' metacommand is to specify fields
                for filters or validators that require multiple fields as
                input.  If the 'fields' metacommand is an array, the argument
                to the corresponding filter or validator is an array of the
                values of those fields.  For example, it is common for users to
                specify a password string in two fields, and they must type the
                same string in both fields.  Suppose you implement a validator
                class that takes an array argument, and returns
                <code>true</code> if all the values in the array are equal to
                each other.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'password' => array(
        'StringEquals',
        'fields' => array('password1', 'password2')
    )
);
// Invokes hypothetical class Zend_Validate_StringEquals, passing an array argument
// containing the values of the two input data fields named 'password1' and 'password2'.]]>
            </programlisting>

            <para>
                If the validation of this rule fails, the rule key
                (<code>'password'</code>) is used in the return value of
                <code>getInvalid()</code>, not any of the fields named in
                the 'fields' metacommand.
            </para>

        </sect3>

        <sect3 id="zend.filter.input.metacommands.presence">

            <title>The <code>PRESENCE</code> metacommand</title>

            <para>
                Each entry in the validator array may have a metacommand called
                'presence'.  If the value of this metacommand is 'required'
                then the field must exist in the input data, or else it is
                reported as a missing field.
            </para>

            <para>
                You can specify this metacommand using the class constant
                <code>Zend_Filter_Input::PRESENCE</code> instead of the
                string.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month' => array(
        'digits',
        'presence' => 'required'
    )
);]]>
            </programlisting>

            <para>
                The default value of this metacommand is 'optional'.
            </para>

        </sect3>

        <sect3 id="zend.filter.input.metacommands.default">

            <title>The <code>DEFAULT_VALUE</code> metacommand</title>

            <para>
                If a field is not present in the input data, and you specify a
                value for the 'default' metacommand for that rule, the field
                takes the value of the metacommand.
            </para>

            <para>
                You can specify this metacommand using the class constant
                <code>Zend_Filter_Input::DEFAULT_VALUE</code> instead of the
                string.
            </para>

            <para>
                This default value is assigned to the field before any of the
                validators are invoked.  The default value is applied to the
                field only for the current rule; if the same field is
                referenced in a subsequent rule, the field has no value when
                evaluating that rule.  Thus different rules can declare
                different default values for a given field.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month' => array(
        'digits',
        'default' => '1'
    )
);

// no value for 'month' field
$data = array();

$input = new Zend_Filter_Input(null, $validators, $data);
echo $input->month; // echoes 1]]>
            </programlisting>

            <para>
                If your rule uses the <code>FIELDS</code> metacommand
                to define an array of multiple fields, you can define
                an array for the <code>DEFAULT_VALUE</code> metacommand
                and the defaults of corresponding keys are used for any
                missing fields.  If <code>FIELDS</code> defines multiple
                fields but <code>DEFAULT_VALUE</code> is a scalar, then
                that default value is used as the value for any missing
                fields in the array.
            </para>

            <para>
                There is no default value for this metacommand.
            </para>

        </sect3>

        <sect3 id="zend.filter.input.metacommands.allow-empty">

            <title>The <code>ALLOW_EMPTY</code> metacommand</title>

            <para>
                By default, if a field exists in the input data, then
                validators are applied to it, even if the value of the field is
                an empty string (<code>''</code>).  This is likely to result in
                a failure to validate.  For example, if the validator checks
                for digit characters, and there are none because a zero-length
                string has no characters, then the validator reports the data
                as invalid.
            </para>

            <para>
                If in your case an empty string should be considered valid, you
                can set the metacommand 'allowEmpty' to <code>true</code>.
                Then the input data passes validation if it is present in the
                input data, but has the value of an empty string.
            </para>

            <para>
                You can specify this metacommand using the class constant
                <code>Zend_Filter_Input::ALLOW_EMPTY</code> instead of the
                string.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'address2' => array(
        'Alnum',
        'allowEmpty' => true
    )
);]]>
            </programlisting>

            <para>
                The default value of this metacommand is <code>false</code>.
            </para>

            <para>
                In the uncommon case that you declare a validation rule with
                no validators, but the 'allowEmpty' metacommand is
                <code>false</code> (that is, the field is considered invalid if
                it is empty), Zend_Filter_Input returns a default error message
                that you can retrieve with <code>getMessages()</code>.  You can
                specify this message using the 'notEmptyMessage' option, as an
                argument to the Zend_Filter_Input constructor or using the
                <code>setOptions()</code> method.
            </para>

            <programlisting role="php"><![CDATA[<?php
$options = array(
    'notEmptyMessage' => "A non-empty value is required for field '%field%'"
);

$input = new Zend_Filter_Input($filters, $validators, $data, $options);

// alternative method:

$input = new Zend_Filter_Input($filters, $validators, $data);
$input->setOptions($options);]]>
            </programlisting>

        </sect3>

        <sect3 id="zend.filter.input.metacommands.break-chain">

            <title>The <code>BREAK_CHAIN</code> metacommand</title>

            <para>
                By default if a rule has more than one validator, all
                validators are applied to the input, and the resulting messages
                contain all error messages caused by the input.
            </para>

            <para>
                Alternatively, if the value of the 'breakChainOnFailure'
                metacommand is <code>true</code>, the validator chain
                terminates after the first validator fails.  The input data is
                not checked against subsequent validators in the chain, so it
                might cause more violations even if you correct the one
                reported.
            </para>

            <para>
                You can specify this metacommand using the class constant
                <code>Zend_Filter_Input::BREAK_CHAIN</code> instead of the
                string.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month' => array(
        'Digits',
        new Zend_Validate_Between(1,12),
        new Zend_Validate_GreaterThan(0),
        'breakChainOnFailure' => true
    )
);
$input = new Zend_Filter_Input(null, $validators);]]>
            </programlisting>

            <para>
                The default value of this metacommand is <code>false</code>.
            </para>

            <para>
                The validator chain class, Zend_Validate, is more flexible with
                respect to breaking chain execution than Zend_Filter_Input.
                With the former class, you can set the option to break the
                chain on failure independently for each validator in the chain.
                With the latter class, the defined value of the
                'breakChainOnFailure' metacommand for a rule applies uniformly
                for all validators in the rule.  If you require the more
                flexible usage, you should create the validator chain yourself,
                and use it as an object in the validator rule
                definition:
            </para>

            <programlisting role="php"><![CDATA[<?php
// Create validator chain with non-uniform breakChainOnFailure attributes
$chain = new Zend_Validate();
$chain->addValidator(new Zend_Validate_Digits(), true);
$chain->addValidator(new Zend_Validate_Between(1,12), false);
$chain->addValidator(new Zend_Validate_GreaterThan(0), true);

// Declare validator rule using the chain defined above
$validators = array(
    'month' => $chain
);
$input = new Zend_Filter_Input(null, $validators);]]>
            </programlisting>

        </sect3>

        <sect3 id="zend.filter.input.metacommands.messages">

            <title>The <code>MESSAGES</code> metacommand</title>

            <para>
                You can specify error messages for each validator in a rule
                using the metacommand 'messages'.  The value of this metacommand
                varies based on whether you have multiple validators in the
                rule, or if you want to set the message for a specific error
                condition in a given validator.
            </para>

            <para>
                You can specify this metacommand using the class constant
                <code>Zend_Filter_Input::MESSAGES</code> instead of the
                string.
            </para>

            <para>
                Below is a simple example of setting the default error message
                for a single validator.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month' => array(
        'digits',
        'messages' => 'A month must consist only of digits'
    )
);]]>
            </programlisting>

            <para>
                If you have multiple validators for which you want to set the
                error message, you should use an array for the value of the
                'messages' metacommand.
            </para>

            <para>
                Each element of this array is applied to the validator at the
                same index position.  You can specify a message for the
                validator at position <emphasis>n</emphasis> by using the value
                <emphasis>n</emphasis> as the array index.  Thus you can allow
                some validators to use their default message, while setting the
                message for a subsequent validator in the chain.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month' => array(
        'digits',
        new Zend_Validate_Between(1, 12),
        'messages' => array(
            // use default message for validator [0]
            // set new message for validator [1]
            1 => 'A month value must be between 1 and 12'
        )
    )
);]]>
            </programlisting>

            <para>
                If one of your validators has multiple error messages, they are
                identified by a message key.  There are different keys in each
                validator class, serving as identifiers for error messages that
                the respective validator class might generate.  Each validate
                class defines constants for its message keys.  You can use
                these keys in the 'messages' metacommand by passing an
                associative array instead of a string.
            </para>

            <programlisting role="php"><![CDATA[<?php
$validators = array(
    'month' => array(
        'digits', new Zend_Validate_Between(1, 12),
        'messages' => array(
            'A month must consist only of digits',
            array(
                Zend_Validate_Between::NOT_BETWEEN =>
                    'Month value %value% must be between %min% and %max%',
                Zend_Validate_Between::NOT_BETWEEN_STRICT =>
                    'Month value %value% must be strictly between %min% and %max%'
            )
        )
    )
);]]>
            </programlisting>

            <para>
                You should refer to documentation for each validator class to
                know if it has multiple error messages, the keys of these
                messages, and the tokens you can use in the message templates.
            </para>

        </sect3>

        <sect3 id="zend.filter.input.metacommands.global">

            <title>Using options to set metacommands for all rules</title>

            <para>
                The default value for 'allowEmpty', 'breakChainOnFailure', and
                'presence' metacommands can be set for all rules using the
                <code>$options</code> argument to the constructor of
                Zend_Filter_Input.  This allows you to set the default value
                for all rules, without requiring you to set the metacommand for
                every rule.
            </para>

            <programlisting role="php"><![CDATA[<?php
// The default is set so all fields allow an empty string.
$options = array('allowEmpty' => true);

// You can override this in a rule definition,
// if a field should not accept an empty string.
$validators = array(
    'month' => array(
        'Digits',
        'allowEmpty' => false
    )
);

$input = new Zend_Filter_Input($filters, $validators, $data, $options);]]>
            </programlisting>

            <para>
                The 'fields', 'messages', and 'default' metacommands cannot be
                set using this technique.
            </para>

        </sect3>

    </sect2>

    <sect2 id="zend.filter.input.namespaces">

        <title>Adding Filter Class Namespaces</title>

        <para>
            By default, when you declare a filter or validator as a string,
            Zend_Filter_Input searches for the corresponding classes under
            the Zend_Filter or Zend_Validate namespaces.  For example,
            a filter named by the string 'digits' is found in the class
            Zend_Filter_Digits.
        </para>

        <para>
            If you write your own filter or validator classes, or use filters
            or validators provided by a third-party, the classes may exist in
            different namespaces than Zend_Filter or Zend_Validate.  You can
            tell Zend_Filter_Input to search more namespaces.  You can specify
            namespaces in the constructor options:
        </para>

        <programlisting role="php"><![CDATA[<?php
$options = array('namespace' => 'My_Namespace');
$input = new Zend_Filter_Input($filters, $validators, $data, $options);]]>
        </programlisting>

        <para>
            Alternatively, you can use the addNamespace() method:
        </para>

        <programlisting role="php"><![CDATA[<?php
$input->addNamespace('Other_Namespace');

// Now the search order is:
// 1. My_Namespace
// 2. Other_Namespace
// 3. Zend_Filter
// 4. Zend_Validate]]>
        </programlisting>

        <para>
            You cannot remove Zend_Filter and Zend_Validate as namespaces, you
            only can add namespaces.  User-defined namespaces are searched
            first, Zend namespaces are searched last.
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
