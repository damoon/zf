<sect1 id="zend.filter.input">
    <title>Zend_Filter_Input</title>

    <sect2 id="zend.filter.input.introduction">
        <title>Einführung</title>
        <para>
            <literal>Zend_Filter_Input</literal> stellt einfache Möglichkeiten für eine strukturierte
            und rigide Methode der Eingabefilterung bereit. Die Gründe sind vielfältig, da sie auf die 
            Bedürfnisse von drei unterschiedlichen Gruppen von Leuten zugeschnitten sind:
        </para>
        <itemizedlist>
            <listitem>
                <para>Entwickler</para>
                <para>
                    Obwohl das Filtern von Eingaben niemals so einfach sein kann, wie gar nichts zu
                    tun, sollten Entwickler die Integrität ihrer Daten sicherstellen, ohne das dem Code 
                    unnötige Komplexität hinzugefügt werden muss. <literal>Zend_Filter_Input</literal> 
                    bietet einfache Methoden für die häufigsten Anwendungsfälle, Erweiterbarkeit für 
                    die Basisklassen und einen strikte Namenskonvention, die klaren Code fördert.
                </para>
            </listitem>
            <listitem>
                <para>Manager</para>
                <para>
                    Manager jedweder Art, welche die Kontrolle über eine grosse Gruppe von Entwicklern 
                    behalten möchten, können eine strukturierte Vorgehensweise für das Filtern von 
                    Eingaben durchsetzen, indem der Zugriff auf unbearbeitete  Eingabedaten beschränkt 
                    oder ausgeschlossen wird.
                </para>
            </listitem>
            <listitem>
                <para>Prüfer</para>
                <para>
                    Jene, welche den Code der Anwendung prüfen, müssen schnell und verlässlich
                    erkennen können, wann und wo unbearbeitete Eingabedaten von Entwicklern verwendet 
                    werden. Die Charakteristika, die klaren Code fördern, unterstützen Prüfer ebenfalls
                    durch die Bereitstellung von klarer Unterscheidung zwischen den unterschiedlichen
                    Vorgehensweisen, um Eingaben zu filtern.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Es gibt eine Vielzahl von Vorgehensweisen für die Prüfung von Eingaben und es gibt auch 
            eine Vielzahl von Ansätzen, die PHP Entwickler verwenden können. Whitelist Filtern,
            Blacklist Filtern, reguläre Ausdrücke, bedingte Anweisungen und native PHP Funktionen sind
            nur einige Beispiele des Potpourri für das Filtern von Eingaben. 
            <literal>Zend_Filter_Input</literal> kombiniert alle diese Ansätze in einer einzigen API
            mit einheitlichem Verhalten und strikten Namenskonventionen. Alle diese Methoden befolgen 
            eine einfach Regel - wenn die Daten gültig sind, werden sie zurückgegeben, andernfalls wird
            <literal>FALSE</literal> zurückgegeben. Extreme Einfachheit.
        </para>
    </sect2>
        <sect2 id="zend.filter.input.introduction.whitelist">
            <title>Whitelist Filtern</title>
            <para>
                Die Methoden für das Whitelist Filtern beginnen mit dem Präfix <literal>test</literal>,
                wie zum Beispiel <literal>testAlpha()</literal> und <literal>testEmail()</literal>.
                Diese Methoden prüfen die Eingabe gemäß der vordefinierten Kriterien und geben die 
                Daten nur zurück, wenn sie die Kriterien befolgen. Falls nicht wird 
                <literal>FALSE</literal> zurückgegeben. Das folgende Beispiel zeigt eine einfache
                Demonstration.
            </para>
            <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    
    if ($alphaName = $filterPost->testAlpha('name')) {
        /* $alphaName enthält nur Buchstaben. */
    } else {
        /* $alphaName evaluiert als FALSE. */
    }
    
    ?>]]>
            </programlisting>
            <para>
                Dieser Ansatz verhält sich eher etwas zu vorsichtig durch die Ausführung einer 
                booleschen Bewertung des zurückgegeben Wertes. Wenn du zwischen Werten, die in PHP als
                <literal>FALSE</literal> evaluieren (wie zum Beispiel das Integer <literal>0</literal>
                oder eine leere Zeichenkette) unterscheiden möchtest, kannst du auch einen strikten 
                Vergleich mit <literal>FALSE</literal> durchführen:
            </para>
            <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $alphaName = $filterPost->testAlpha('name');
    
    if ($alphaName !== FALSE) {
        /* $alphaName enthält nur Buchstaben. */
    } else {
        /* $alphaName === FALSE */
    }
    
    ?>]]>
            </programlisting>
        </sect2>
        <sect2 id="zend.filter.input.introduction.blind">
            <title>Blindes Filtern</title>
            <para>
                Methoden für das Blinde Filtern beginnen mit dem Präfix <literal>get</literal>, wie 
                zum Beispiel <literal>getAlpha()</literal> und <literal>getDigits()</literal>. Diese 
                Methoden prüfen die Eingaben nicht, geben aber stattdessen den Teil zurück, der als
                gültig erkannt wird. Zum Beispiel gibt <literal>getAlpha()</literal> nur Buchstaben
                zurück, wenn es welche gibt. (Falls nicht, ist der verbleibende String ein leerer 
                String.) Das folgende zeigt eine einfache Demonstration:
            </para>
            <programlisting>
    <![CDATA[<?php
    
    /* $_POST['username'] = 'John123Doe'; */
    
    $filterPost = new Zend_Filter_Input($_POST);
    $alphaUsername = $filterPost->getAlpha('username');
    
    /* $alphaUsername = 'JohnDoe'; */
    
    ?>]]>
            </programlisting>
        </sect2>
        <sect2 id="zend.filter.input.introduction.blacklist">
            <title>Blacklist Filtern</title>
            <para>
                Die Methoden für das Blacklist Filtern beginnen mit dem Präfix <literal>no</literal>,
                wie zum Beispiel <literal>noTags()</literal> und <literal>noPath()</literal>. Diese
                Methoden sind identisch mit den Methoden für das Blinde Filtern, außer dass die 
                Kriterien, die erfüllt werden müssen, darauf basieren, was als ungültig erachtet wird,
                anstelle dessen, was als gültig erachtet wird. Ungültige Daten werden entfernt und die
                übrigen Daten (die als gültig angenommen werden) werden zurückgegeben. Es folgt
                eine einfache Demonstration:
            </para>
            <programlisting>
    <![CDATA[<?php
    
    /* $_POST['comment'] = '<b>Ich liebe PHP!</b>'; */
    
    $filterPost = new Zend_Filter_Input($_POST);
    $taglessComment = $filterPost->noTags('comment');
    
    /* $taglessComment = 'Ich liebe PHP!'; */
    
    ?>]]>
            </programlisting>
        </sect2>
    <sect2 id="zend.filter.input.theoryofoperation">
        <title>Theoretischer Ablauf</title>
        <para>
            <literal>Zend_Filter_Input</literal> vereint einige verschiedene Ansätze für das Filtern von
            Eingaben in einer einzigen API mit einem einheitlichem Verhalten und strikten 
            Namenskonventionen (siehe <xref linkend="zend.filter.input.introduction" />). Diese
            Charakteristika machen <literal>Zend_Filter_Input</literal> gleichwertig zu vorhandenen
            Lösungen, aber sie machen nichts, um diese weiter zu unterstützen, die einen 
            strukturierteren oder rigideren Ansatz benötigen. Deshalb setzt 
            <literal>Zend_Filter_Input</literal> einen kontrollierten Zugriff auf die Eingaben durch. 
        </para>
        <para>
            Zwei Syntax Arten werden unterstützt. In der standardmäßigen (strikten) Vorgehensweise wird 
            ein einziges Argument an den Konstruktur übergeben - das Array, das gefiltert werden soll:
        </para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $email = $filterPost->testEmail('email');
    
    ?>]]>
        </programlisting>
        <para>
            <literal>Zend_Filter_Input</literal> setzt das übergebene Array (<literal>$_POST</literal>)
            auf <literal>NULL</literal>, so dass kein direkter Zugriff mehr möglich ist. (Die 
            unbearbeiteten Daten sind nur noch über die <literal>getRaw()</literal> Methode verfügbar,
            was alles in allem viel einfacher zu kontrollieren und / oder zu vermeiden ist.)
        </para>
        <para>
            Bei der optionalen (nicht strikten) Vorgehensweise wird <literal>FALSE</literal> als 
            zweites Argument an den Konstruktor übergeben:
        </para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    $email = $filterPost->testEmail('email');
    
    ?>]]>
        </programlisting>
        <para>
            Die Verwendung des Filters ist genau gleich, außer dass <literal>Zend_Filter_Input</literal>
            das ursprüngliche Array (<literal>$_POST</literal>) nicht auf <literal>NULL</literal> setzt,
            so dass Entwickler es weiterhin direkt ansprechen können. Von dieser Vorgehensweise wird zu
            Gunsten der strikten Vorgehensweise abgeraten.
        </para>
        <para>
            <literal>Zend_Filter_Input</literal> wurde primär für Arrays gestaltet. Viele Eingabequellen
            werden automatisch von den superglobalen PHP Arrays (<literal>$_GET</literal>, 
            <literal>$_POST</literal>, <literal>$_COOKIE</literal>, usw.) abgedeckt und Arrays sind 
            das allgemeine Konstrukt, dass für die Speicherung von Eingaben aus anderen Quellen 
            verwendet wird. Wenn du einen skaleren Wert filtern möchtest, beachte 
            <xref linkend="zend.filter" />.
        </para>
    </sect2>
    <sect2 id="zend.filter.input.usecases">
        <title>Anwendungsfälle</title>
        <para>Striktes Whitelist Filtern (Bevorzugt):</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    
    if ($email = $filterPost->testEmail('email')) {
        /* $email ist von einem gültigen E-Mail Format. */
    } else {
        /* $email ist von keinem gültigen E-Mail Format. */
    }
    
    ?>]]>
        </programlisting>
        <para>Striktes Blindes Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $alphaName = $filterPost->getAlpha('name');
    
    ?>]]>
        </programlisting>
        <para>Striktes Blacklist Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $taglessComment = $filterPost->noTags('comment');
    
    ?>]]>
        </programlisting>
        <para>Nicht striktes Whitelist Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    
    if ($email = $filterPost->testEmail('email')) {
        /* $email ist von einem gültigen E-Mail Format. */
    } else {
        /* $email ist von keinem gültigen E-Mail Format. */
    }
    
    ?>]]>
        </programlisting>
        <para>Nicht striktes Blindes Filtern:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    $name = $filterPost->getAlpha('name');
    
    ?>]]>
        </programlisting>
        <para>Nicht striktes Blacklist Filterrn:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    $comment = $filterPost->noTags('comment');
    
    ?>]]>
        </programlisting>
    </sect2>
</sect1>    
    
<!--
vim:se ts=4 sw=4 et:
-->
