<sect1 id="zend.registry">

    <title>(Zend::registry($index = null</title>

    <para>
        تُرجٍع قيمة محفوظة عند المُعرٍف <code>index$</code> فى الـ registry, أو الـ 
        registry نفسها.
    </para>

    <example>
        <title>registry() / offsetGet() Example</title>
<programlisting role="php"><![CDATA[<?php
Zend::registry($index=null)

// or

$registry = Zend::registry();
$value = $registry->offsetGet($index);
?>]]></programlisting>
    </example>

    <para>
        إن كان هناك قيمة محفوظة عن الـ offset المسمى <code>index$</code>,
        هذه القيمة سيتم إرجاعها. و إن كانت قيمة البارمتر <code>index$</code> تساوى
        <code>NULL</code>, الـ registry نفسها سيتم إرجاعها (subclass من
        <ulink url="http://www.php.net/~helly/php/ext/spl/classArrayObject.html">ArrayObject</ulink>
        ). هذا الـ method ببساطة يغلف الـ method المسمى 
        <ulink url="http://www.php.net/manual/en/function.arrayobject-offsetget.php">
        ()offsetGet</ulink>
        , مع إضافة السلوك الخاص بإرجاع الـ registry إن لم يتم إعطاء قيمة للبرامتر <code>index$</code>.
    </para>

    <para>
        لتعرف سريعاً إن كان مُعرٍف ما موجود فى الـ registry, إستخدم <code>()Zend::isRegistered</code>.
    </para>

    <example>
        <title>isRegistered() / offsetExists() Example</title>
<programlisting role="php"><![CDATA[<?php
Zend::isRegistered($index=null)

// or

$registry = Zend::registry();
echo $registry->offsetExists($index) ? 'exists' : 'does not exist';
?>]]></programlisting>
    </example>

    <para>
        عمل تكرار "iteration", يتطلب بعض المجهود:
    </para>

    <example>
        <title>عمل تكرار "iteration" على الـ Registry</title>
<programlisting role="php"><![CDATA[<?php
foreach (Zend::registry() as $index => $value) {
    echo "$index => $value<br />\n";
}
?>]]></programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
