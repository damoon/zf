<sect1 id="zend.introduction">
    <title>مقدمة</title>
    <para>
    الـ Class Zend هو الـ Class الأساسي فى إطار عمل Zend. هذا الـ Class نبع من إلتزام إطار العمل 
    بمبدأ DRY (Don't Repeat Yourself) اى بمعنى لا تكرر نفسك. 
    و هو يحتوى فقط على static methods, و هذه الـ methods تقوم بوظائف تحتاجها الكثير من 
    الـ Components فى إطار عمل Zend.
    </para>
    
    <para>
     
    
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>()Zend::loadFile</title>

    <para>
    <code>()Zend::loadFile</code>
    يقوم بتحميل ملف PHP و الذى ربما يحتوى اى اكواد PHP. و هو يعتبر غلاف (wrapper) للدالة 
    <ulink url="http://php.net/include"><code>()include</code></ulink> فى لغة PHP. و 
    سيلقى <code>Zend_Exception</code> عند حدوث خطأ.
    </para>

    <programlisting role="php"><![CDATA[<?php

loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>

    <para>
    المتغير <code>filename$</code> يحدد اسم الملف الذى سيتم تحميله, و الذى يجب الا يحتوى على 
    اى معلومات عن المسار. يتم عمل فحص أمان على <code>filename$</code> . من الممكن ان يحتوى 
    المتغير <code>filename$</code> فقط على حروف, ارقام, شُرط "-", شُرط منخفضة "_" او نقاط (".").
    لا توجد اى تقيدات على المتغير <code>dirs$</code>.
    </para>

    <para>
    المتغير <code>$dirs</code> يحدد اى المجلدات سيتم البحث فيها عن الملف. إذا اعطى القيمة 
    <code>NULL</code> فسيتم البحث فى الـ <code>include_path</code> فقط.
    و إذا كان يحمل قيمة نصية (string) او مصفوفة (Array), فهذا المجلد او هذه الجلدات سيتم 
    البحث فيها, ثم بعد ذلك فى الـ <code>include_path</code>.
    </para>

    <para>
    المتغير <code>$once</code> من النوع bool و يحدد إما ان يتم إستخدام الدالة 
    <ulink url="http://php.net/include"><code>include()</code></ulink> او إستخدام الدالة 
    <ulink url="http://php.net/include_once"><code>include_once()</code></ulink> لتحميل 
    الملف.
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
    <code>Zend::loadClass()</code> يقوم بتحميل ملف PHP حيث اسمه يكن على هذا الشكل 
    "<code>$className.php</code>", ثم بعد ذلك يقم بالتحقق من وجود الـ Class الممر اسمه فى 
    <code>$className</code>.
   </para>

    <programlisting role="php"><![CDATA[<?php

loadClass($class, $dirs)

?>]]></programlisting>

    <para>
    إذا لم يتم ايجاد الملف او ان الـ Class لم يكن موجود بعد التحميل, سيتم إلقاء <code>Zend_Exception</code>.
    يستخدم <code>Zend::loadFile()</code> للتحميل و المتغير <code>$dirs</code> يمرر مباشرة إليه.
  
    </para>

    <para>
    إذا قمت بتمرير اسم Class يحتوى على شُرط منخفضة "_", و المتغير <code>$dirs</code> يحمل القيمة 
    <code>NULL</code> (القيمة الأساسية),
    فسيقوم <code>Zend::loadClass()</code> تلقائيا بإكتشاف قيمة <code>$dirs</code> من اسم الـ Class 
    عن طريق تبديل الشُرط المنخفضة "_" بفواصل مجلدات.
    على سبيل المثال, إذا كانت قيمة المتغير <code>$class</code> هى <code>Zend_Example_Class</code>, 
    فسيتم ترجمة هذا الى المسار <code>Zend/Example/Class.php</code>.
    </para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>
    يعمل <code>Zend::loadInterface()</code> تماما مثل <code>Zend::loadClass()</code>, إلا انه يقوم 
    بتحميل Interface بدلا من تحميل Class.
    
    </para>

    <programlisting role="php"><![CDATA[<?php

loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
    لا يمكن إستخدام <code>Zend::loadClass()</code> فى تحميل الـ Interfaces لأن دالة الـ PHP 
    <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink> لا يمكنها 
    التأكد من وجود الـ Interfaces (من اصدار PHP 5.0.2). 
    إستخدم <code>Zend::loadInterface()</code> بدلاً منها.
    
    </para>

    <para>
     إذا قمت بتمرير اسم Interface يحتوى على شُرط منخفضة "_", و المتغير <code>$dirs</code> يحمل القيمة 
    <code>NULL</code> (القيمة الأساسية),
    فسيقوم <code>Zend::loadInterface()</code> تلقائيا بإكتشاف قيمة <code>$dirs</code> من اسم الـ Interface 
    عن طريق تبديل الشُرط المنخفضة "_" بفواصل مجلدات.
    على سبيل المثال, إذا كانت قيمة المتغير <code>$interface</code> هى <code>Zend_Example_Interface</code>, 
    فسيتم ترجمة هذا الى المسار <code>Zend/Example/Interface.php</code>.
    
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>يرجع القيمة <code>TRUE</code> إذا كان الملف قابل للقرائة, و إذا كان عكس ذلك فسيرجع
          القيمة FALSE .</para>

    <programlisting role="php"><![CDATA[<?php

isReadable($filename)

?>]]></programlisting>

    <para>
    المتغير <code>$filename</code> يحدد اسم الملف الذى سيتم التحقق منه, و الذى من الممكن 
    ان يحتوى على بيانات المسار.
    هذا الـ method علاف (wrapper) للدالة <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink> 
    فى لغة PHP. 
    دالة الـ PHP لا تقم بالبحث فى الـ <code>include_path</code> فى حين ان <code>Zend::isReadable()</code> تفعل ذلك.
    
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>

    <para>
    يقوم <code>Zend::dump()</code> بطباعة او إرجاع معلومات عن expression<footnote> 
    متغير, كائن ..الخ</footnote>. هو غلاف (wrapper) لدالة الـ PHP 
    <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>. 
    يقوم بأحاطة الخرج بوسم (X)HTML <code>&lt;pre&gt;</code> و إختياريا يقوم بإخراج وصف يمرر إليه.
    
    </para>

    <programlisting role="php"><![CDATA[<?php

dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
    المتغير <code>$var</code> يحدد الـ expression او المتغير الذى سيتم الحصول على المعلومات منه.
    
    </para>

    <para>
    المتغير <code>$label</code> هو اى نص حرفى يراد ان يدمج مع خرج <code>Zend::dump()</code>.
    هذا مفيد عندما تقم بإستخراج معلومات اكثر من متغير على شاشة واحدة (فى نفس الصفحة).
    
    </para>

    <para>
    المتغير <code>$echo</code> من النوع bool و يحدد ما إذا كنت تريد طباعة خرج <code>Zend::dump()</code> 
    أم لا. إذا كانت قيمته <code>TRUE</code>, سيتم طباعة الخرج. و بغض النظر عن قيمة <code>$echo</code> 
    فالخرج دائما يتم ارجاعه (returned).

    </para>
</sect1>


<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
    يسجل Object فى مسجل الـ Objects.
    </para>

    <programlisting role="php"><![CDATA[<?php

register($name, $object)

?>]]></programlisting>

    <para>
    الـ registry هى ميكنة للتزويد بنسخ موحدة (singleton instances) من الـ Objects فى نطاق عمل التطبيق.
    عند حفظ الـ Object فى الـ registry مرة واحدة, ثم إسترجاع الـ Object مرة ثانية من الـ registry عندما 
    نكن فى حاجة إليه, يعود إلينا نفس المثال (instance) دائما.
    
    </para>

    <para>
    المتغير <code>$name</code> هو اى string يمكن إستخدامه لتسمية الـ Object فى المخزن.
    هذا الأسم سيمرر إلى <code>Zend::registry()</code> لأستعادة الـ Object مرة اخرى.
    
    </para>

    <para>
    المتغير <code>$name</code> يجب ان يكن string, و فقط الـ Objects يمكن حفظها فى الـ registry, و لا يمكن حذف 
    Object من الـ registry, و المثال الواحد (instance) يمكن حفظه مرة واحدة فى الـ registry. 
    الفشل فى الإلتزام بهذه القواعد سيتسبب فى إلقاء <code>Zend_Exception</code> .

    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
    يقوم بإرجاع Object من الـ registry او يقوم بإرجاع قائمة بالكائنات فى الـ registry.
    
    </para>

    <programlisting role="php"><![CDATA[<?php

registry($name=null)

?>]]></programlisting>

    <para>
    إذا كان المتغير <code>$name</code> يحمل قيمة <code>NULL</code>, سيتم إرجاع Array حيث الـ key فيها هو 
    اسم الـ Objects فى الـ registry و الـ value هى اسماء الـ Classes المنشء منها الـ Objects.
    
    </para>

    <para>
    إذا كانت قيمة <code>$name</code> عبارة عن string, سيتم إرجاع مقبض الـ Object المشار إليه بهذا الإسم.
    إن فشل العثور على Object فى الـ registry بهذا الأسم <code>$name</code>, 
    سيتم إلقاء <code>Zend_Exception</code>.
    
    </para>

    <para>
    لتعرف سريعاً إذا ما كان الـ Object موجود فى الـ registry, استخدم <code> Zend::isRegistred()</code>.

    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->