<sect1 id="zend.config.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Config</code> is designed to simplify the use of configuration data for web applications. It
        provides a property-based interface for reading configuration data from a variety of media supporting
        hierarchical data storage. Currently <code>Zend_Config</code> provides helper classes for configuration
        data stored in text files via
        <link linkend="zend.config.classes.array"><code>Zend_Config_Array</code></link>,
        <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>, and
        <link linkend="zend.config.classes.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <para>
        <code>Zend_Config</code> supports a single inheritance model that enables configuration data to be inherited
        from one section of configuration data into another. Though <code>Zend_Config</code> supports inheritance
        trees of arbitrary height, a configuration data section may only inherit from one parent section.
    </para>
    <para>
        Internally <code>Zend_Config</code> implements the Countable and Iterator interfaces in order to facilitate
        easy access to configuration data. The data are made accessible to <code>Zend_Config</code> through an
        associative array, which may be multidimensional. A helper class such as <code>Zend_Config_Ini</code>
        typically provides this array to <code>Zend_Config</code>, but the interface does not require using this
        convention.
    </para>
    <note>
        Though <code>Zend_Config</code> allows in-memory modification of loaded configuration data, it is not
        designed to facilitate saving configuration data to specific storage media. Tools for creating and modifying
        configuration data for specific storage media are currently outside of the Zend Framework scope. Third-party
        open source solutions are often available for the purpose of creating and modifying configuration data for
        various storage media.
    </note>
    <example>
        <title>Loading Configuration Data from an INI File</title>
        <para>
            In this example configuration data for a production environment are loaded from an INI file using
            <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>:
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'production'));
?>]]>   </programlisting>
        <para>
            Now the configuration data are available from the <code>$config</code> object's properties. Suppose the
            configuration data include database connection parameters and that the data are stored in the INI file
            as:
        </para>
        <programlisting role="ini"><![CDATA[[production]
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname]]>
        </programlisting>
        <para>
            The application might create a connection to the database with:
        </para>
        <programlisting role="php"><![CDATA[<?php
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);
?>]]>   </programlisting>
        <para>
            As shown above, the configuration data are accessed with the object property syntax.
       </para>
    </example>
    <para>
        We can also extend
        <code>Zend_Config</code> easily for various purposes. Here an extending class introduces a public
        <code>dump()</code> method for quickly printing loaded configuration data:
    </para>
    <programlisting role="php"><![CDATA[<?php
class MyConfig extends Zend_Config
{
    protected $_indent;

    public function dump()
    {
        $this->_indent = 0;
        echo "<pre>\n";
        $this->_dumpRecursor($this);
        echo "</pre>";
    }

    protected function _dumpRecursor($config)
    {
        foreach ($config as $key => $value) {
            echo str_repeat("    ", $this->_indent) . "$key =>";
            if ($value instanceof Zend_Config) {
                echo "\n";
                $this->_indent++;
                $this->_dumpRecursor($value);
                $this->_indent--;
            } else {
                echo " $value\n";
            }
        }
    }
}

$config = new MyConfig(Zend_Config_Ini::load('/path/to/config.ini', 'production'));

$config->dump();
?>]]</programlisting>
    <para>
        For the configuration data in the example above, this would print:
    </para>
    <programlisting role="text"><![CDATA[<pre>
database =>
    type => pdo_mysql
    host => db.example.com
    username => dbuser
    password => secret
    name => dbname
</pre>]]>
    </programlisting>
</sect1>
<sect1 id="zend.config.classes.array">
    <title>Zend_Config_Array</title>
    <sect2 id="zend.config.classes.array.introduction">
        <title>Introduction</title>
        <code>Zend_Config_Array</code> enables developers to have configuration data stored in multidimensional
        associative PHP arrays and accessed as object properties through <code>Zend_Config</code>.
        <example>
            <title>Configuration Data Stored in PHP Arrays</title>
            <para>
                This example illustrates a basic use of <code>Zend_Config_Array</code> for loading configuration
                data from PHP arrays. First, we need to create PHP arrays having the configuration data:
            </para>
            <programlisting role="php"><![CDATA[<?php
// Production site configuration data
$config['production'] = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Staging site configuration data inherits from production and
// overrides values as necessary
$config['staging'] = $config['production'];
$config['staging']['webhost'] = 'dev.example.com';
$config['staging']['database']['host'] = 'dev.example.com';
$config['staging']['database']['username'] = 'devuser';
$config['staging']['database']['password'] = 'devsecret';
?>]]>       </programlisting>
            <note>
                The configuration data array must be named <code>$config</code> in the loaded PHP script.
            </note>
            <para>
                Inheritance is supported in the example above with an assignment of <code>production</code> section
                values to the <code>staging</code> section. Now it is a simple matter to load the configuration
                data with <code>Zend_Config_Array</code>:
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';

$config = new Zend_Config(Zend_Config_Array::load('/path/to/config.php', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>       </programlisting>
        </example>
        <para>
            It is noteworthy that because the configuration data are directly added to PHP arrays, each
            configuration data value has the same data type as given in the PHP script containing the
            <code>$config</code> array.
        </para>
        <programlisting role="php"><![CDATA[<?php
$config['staging']['debug']   = 'false'; // value has string type
$config['staging']['console'] = false; // value of boolean type
$config['staging']['timeout'] = 30; // value of integer type
?>]]>   </programlisting>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.ini">
    <title>Zend_Config_Ini</title>
    <sect2 id="zend.config.classes.ini.introduction">
        <title>Introduction</title>
        <code>Zend_Config_Ini</code> enables developers to store configuration data in a familiar INI format and
        read them via object properties through <code>Zend_Config</code>.
        <example>
            <title>Configuration Data Stored in INI Files</title>
            <para>
                This example illustrates a basic use of <code>Zend_Config_Ini</code> for loading configuration
                data from an INI file. Suppose we have the following configuration data in
                <code>/path/to/config.ini</code>:
            </para>
            <programlisting role="ini"><![CDATA[; Production site configuration data
[production]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Staging site configuration data inherits from production and
; overrides values as necessary
[staging]
extends = production
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]>
            </programlisting>
            <note>
                Notice that the syntax of the INI file resembles that expected by the
                <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink>
                PHP function, which <code>Zend_Config_Ini</code> utilizes. Please review this documentation to
                be aware of the specific behavior of <code>Zend_Config_Ini</code>, such as how the special
                values of <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, and
                <code>null</code> are translated.
            </note>
            <para>
                Inheritance is supported in the INI syntax by using the keyword <code>extends</code>. The value of the <code>extends</code> key should be the name of the section from which the extending section is to inherit. The configuration data are then loaded from the INI file:
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>       </programlisting>
        </example>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.xml">
    <title>Zend_Config_Xml</title>
    <sect2 id="zend.config.classes.xml.introduction">
        <title>Introduction</title>
        <code>Zend_Config_Xml</code> enables developers to store configuration data in a simple XML format and
        read them via object properties through <code>Zend_Config</code>.
        <example>
            <title>Configuration Data Stored in XML Files</title>
            <para>
                This example illustrates a basic use of <code>Zend_Config_Xml</code> for loading configuration
                data from an XML file. Suppose we have the following configuration data in
                <code>/path/to/config.xml</code>:
            </para>
            <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<config>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="production">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</config>]]></programlisting>
            <para> 
                Inheritance is supported in the XML syntax by using the <code>extends</code> attribute. The value of the <code>extends</code> attribute should be the name of the section from which the extending section is to inherit. The configuration data are then loaded from the XML file:
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config(Zend_Config_Xml::load('/path/to/config.xml', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>       </programlisting>
            <note>
                Configuration data values from <code>Zend_Config_Xml</code> are always treated as strings.
            </note>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->