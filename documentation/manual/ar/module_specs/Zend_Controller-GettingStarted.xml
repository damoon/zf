<sect1 id="zend.controller.getting-started">
	<title>البداية</title>
	
	<sect2 id="zend.controller.getting-started.introduction">
		<title>مقدمة</title>
    		<para>
                تم بناء <code>Zend_Controller</code> و فى اعتبارنا ان يكون قابل للتمدد بسهولة, سواء عن طريق إن شاء 
                subclasses ترث من الـ class الموجودة او إنشاء classes جديدة تعتمد على الـ interfaces 
                أو الـ abstract classes العدبدة التى تتكون منها عائلة الـ controller .
		</para>
	</sect2>
	
	<sect2 id="zend.controller.getting-started.server-configuration">
		<title>إعدادات السيرفر</title>
		<para>
            تم بناء Zend_Controller ليدعم المواقع الجديدة بميزة الـ URIs النظيفة 
            <footnote>
                <para>
                الـ URIs النظيفة : مثلا عنوان مثل 
                <code><![CDATA[
                http://www.site.com/index.php?q=cat&id=45
                 ]]></code> 
                 لا يعتبر نظيف , و لكن هذا يعتبر نظيف <code>
                http://www.site.come/cat/45 
                </code> , و هذا يعطى نفس قيمة الأول .
                </para>
            </footnote> 
            , و هذا يحتاج الى ان تكون هذه الأعدادت مدعومة فى الـ webserver الخاص بك, اى يجب ان تتوفر خاصية 
            اعادة كتابة الـ URIs لكى تتمكن من اعادة توجيه كل الطلبات فى موقعك الى ملف واحد , و هنا نحن نسميه "index.php" 
            , و الذى بدوره سيكون  
            <footnote id="bootstrap" >
                <para>
                منطقة بداية تشغيل برنامج
                </para>
            </footnote>bootstrap 
            و سيشغل <code>Zend_Controller_Front</code>. 
            على سيرفرات الـ Apache هذا يتم التحكم به من خلال module اختيارى اسمه mod_rewrite.
		</para>

		<para>
			الخطوة الأولى لإعداد السيرفر هى النجاح فى تركيب و تشغيل mod_rewrite. الخطوة التالية هى وضع ملفين فى 
            الـ  
            <footnote id="document-root">
                <para>
                document root او المجلد الجزرى هو المجلد الرئيسى فى موقعك حيث يتمكن المستخدم من الوصول إليه بمجرد كتابة 
                إسم الموقع فقط.
                </para>
            </footnote>document root 
             و هما : htaccess. و ملف index.php . 
            ملف htaccess. يتم استخدامه من قبل Apache و يجب ان يحتوى على  اوامر mod_rewrite لتقوم بإعادة تحويل 
            كل الطلبات الى index.php . 
            لأسباب تنتمى إلى عملية التطوير , يكن من الأسهل كتابة امر mod_rewrite يقوم بتحويل كل الطلبات الى index.php 
            ما عدا التى تحتوى امتداد ملفات معينة , و هنا مثال لملف htaccess. مماثل :
        </para>
        <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php
]]></programlisting>
        <para>
            فى المثال , كل الطلبات التى لا تحتوى اى من امتدادات الملفات المذكورة فى الأعلى , سيتم تحويلها الى index.php . 
            هذا مفيد فى اثناء عملية التطوير, بينما فى مرحلة الإنتاج  يجب ان يتم كتابة اوامر اعادة التوجيه بحيث يتم 
            إستثناء مجلدات معينة و ليس  امتدادات ملفات.
		</para>
        
        <note>	
            <title> مكان ملف الـ bootstrap</title>
            <para>
    			ملف الـ bootstrap يجب ان يكون ملف الـ PHP الوحيد المحفوظ فى الـ document root.			
    		</para>
        </note>
        
        <para>
            الوظائف الأساسية لـ Zend_Controller ايضا تدعم الـ URLs 
            التى تستخدم البرامترات العادية -- على سبيل المثال , 
            <code>index.php?controller=foo&amp;action=bar</code>.
            ايضاً, هناك router أخر و هو <code>Zend_Controller_RewriteRouter</code> 
            و الذى يعمل فى العديد من البيئات , حتى الكثير من التى لا تحتوى امكانيات تتشابه مع 
            ما تقوم به mod_rewrite , فإن كنت لا تستطيع أن تستخدم mod_rewrite أو 
            ما يعادلها , فمازال بأمكانك أن تستخدم Zend_Controller فى موقعك.
        </para>
        
	</sect2>
	
	<sect2 id="zend.controller.getting-started.bootstrap">
		<title>ملف الـ Bootstrap</title>
		
		<para>
            بعد الإنتهاء من ملف htaccess. , قم بإنشاء ملف جديد اسمه <code>index.php</code> , 
            السبب من إنشاء index.php هو ان يكون  
            <footnoteref linkend="bootstrap" />bootstrap 
            لـ Zend_Controller_Front , و الذى يجب ان يكون خارج الـ  
            <footnoteref linkend="document-root" />document root.
		</para>

        <note>	
            <title> مكان ملف الـ bootstrap</title>
            <para>
    			ملف الـ bootstrap يجب ان يكون ملف الـ PHP الوحيد المحفوظ فى الـ document root.			
    		</para>
        </note>

		<para>
            لأسباب امنية, ينصح إطار عمل Zend بأن لا يتم وضع اى ملف PHP فى مجلدات يمكن الوصول إليها من خلال الـ 
            webserver (اى المجلدات فى document root) . بالرغم من أن هذا لا يمكن تنفيذه فى بعض الحالات, مثل فى سيرفرات 
            الأستضافة المتشاركة, يجب ان تعتبر هذا من العادات الجيدة و التى يجب ان تعتمد عليها كلما امكن.  
		</para>

		<para>
			قم بإنشاء ملف الـ bootstrap المسمى index.php و ضعه فى الـ document root ليقوم بتشغيل 
            Zend_Controller_Front :

        </para>
        <programlisting role="php"><![CDATA[<?php
				
require_once 'Zend/Controller/Front.php';

Zend_Controller_Front::run('/path/to/your/controllers');

?>]]></programlisting>
        <para>
			إقرأ الجزء القادم بالنسبة الى <code>path/to/your/controllers/</code>.

			كما هو موضح فى ملف <code>README.txt</code>, المجلد الذى يحتوى مكتبة إطار عمل Zend يجب 
            ان يكون فى الـ <code>include_path</code>. إذا لم تقم بعمل هذا فى ملف php.ini , يمكنك أستخدام 
            <code>()set_include_path</code> فى بداية الملف قبل <code>()require_once</code>.
		</para>
      </sect2>
      	
		
	<sect2 id="zend.controller.getting-started.directory-structure">
		<title>هيكلة المجلدات</title>
		
		<para>
			ينصح فى المواقع التى تعتمد على إطار عمل Zend ان تتشارك جميعها فى هيكلة موحدة لمجلداتها , ربما هذا لا يمكن 
            تطبيقه فى بعض الحالات و لكن يفضل ان تطبقه فى اغلب او كل تطبيقاتك , فعند اختياراك ان تلتزم بهذه الهيكلة 
            سيكن من السهل فهم الكود من قبل اى شخص يألف بنية إطار عمل Zend .
		</para>
		
		<para>	
            بنية المجلدات المقترحة تتكون من مجلدين اساسيين , مجلد اسمه library ( سيحتوى المكتبات الخاصة بـ Zend و غيرها) و 
             المجلد الثانى يسمى application .
		</para>
        <programlisting role="php"><![CDATA[
/application
  /models
  /views
  /controllers
/document_root
  /images
  /styles
  .htaccess
  index.php
/library
  /Zend
]]></programlisting>
		
		<note>
        <title>تحت الإنشاء</title>
        <para>
			هذا القسم لم ينتهى بعد و مازال تحت البناء و يمكن ان يتغير محتواه فى اى وقت.
        </para>
		</note>
	</sect2>	
		
	<sect2 id="zend.controller.overview.defaultcontroller">
		<title>الـ Controller الأساسى</title>

		<para>
			كل تطبيق يجب ان يوفر controller أساسى. هذا هو الـ controller الذى سيتم 
            إستخدامه إن لم يتم تحديد controller معين فى الـ URI, مثال على URI مماثل يمكن ان نراه هنا:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/
]]></programlisting>

        <para>
            طبقاً للأعدادات الأساسية , الـ controller الأساسى يجب أن يحمل 
            الأسم <code>IndexController</code> و أن يكن فى ملف 
            يحمل الأسم <code>IndexController.php</code> , 
            داخلياً, سيتم تعريفه على انه الـ controller صاحب الأسم 'index' .
        </para>
        
        <para>
            يمكنك أن تغير الـ controller الأساسى قبل عمل dispatch للـ 
            front controller عن طريق إستدعاء <code>setDefaultController()</code> 
            من خلال كائن الـ front controller أو كائن الـ dispatcher , عند قيامك بهذا ,
            إستخدم قواعد التسمية الداخلية للـ controllers , أى أن , الـ class المسمى 
            <code>HomeController</code> (الموجود فى الملف 
            <code>HomeController.php</code> ) سيتم الأشارة إليه على 
            انه <code>home</code>.
        </para>
        
        <para>
            الـ controllers يجب أن يرثوا من <code>Zend_Controller_Action</code> 
            و أن يوضعوا فى مجلد الـ controllers .
        </para>
        

        <programlisting role="php"><![CDATA[<?php
				
require_once 'Zend/Controller/Action.php';

class IndexController extends Zend_Controller_Action 
{
	public function indexAction()
	{
		echo 'Hello from IndexController';
	}

	public function noRouteAction()
	{
		$this->_redirect('/');
	}
}

?>]]></programlisting>
			
            
        <para>
            المزيد من المعلومات عن الـ controllers و الـ actions الأساسية , 
            مع كيفية كتابة action controller classes , سيتم عرضها فى 
            فصول أخرى.
        </para>
		<note>
            <title>تحت الإنشاء</title>
            <para>
    			هذا القسم لم ينتهى بعد و مازال تحت البناء و يمكن ان يتغير محتواه فى اى وقت.
            </para>
		</note>
	</sect2>			
</sect1>