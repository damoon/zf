<sect1 id="zend.controller.rewriterouter.introduction">
    <title>مقدمة</title>
	<para>
        Zend_Controller_RewriteRouter هو نوع جديد من الموجه "router" الخاص بإطار العمل. 
        عملية التوجيه أو الـ routing هى أخذ URI و تقسيمه الى قطع اصغر لمعرفة أى controller و action تابع له سيتم تمرير 
        الطلب إليهم . 
        تعريف أسم الـ controller و الـ action و القيم الإختيارية يتم تجميعه و وضعه فى كائن قيم أو "value object" يسمى 
        Zend_Controller_Dispatcher_Token و الذى سيتم معالجته لاحقا بواسطة Zend_Controller_Dispatcher. 
        عملية التوجيه "routing" تحدث مرة واحدة : بمجرد إستلام الطلب و قبل تنفيذ اول controller.
	</para>
	<para>
        تم تصميم Zend_Controller_RewriteRouter ليسمح بأداء مماثل لـ mod_rewrite بإستخدام هيكلة PHP فقط.
        و هو يعتمد على فكرة الـ routing المنفذة فى Ruby on Rails و هذا لا يستلزم أى معرفة مسبقة بالـ URL rewriting من 
        خلال الـ webserver. 
        لقد تم تصميمه ليعمل مع أمر mod_rewrite واحد (واحد من التاليين) :
	</para>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1	]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.usage">
	<title>إستخدام معرفات التحويل - routes</title>

	<para>
        لتستخدم RewriteRouter يجب ان تنشئ instance جديدة منه , ثم تنشئ معرف تحويل,
        ثم تقوم بحقن هذا الموجه "route" فى الـ controller . المثال التالى يوضح كيفية عمل هذا :
	</para>

	<programlisting role="php"><![CDATA[
/* -- create a router -- */

$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user', 'action' => 'info'));

/* -- set it in a controller -- */

$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.basic">
	<title>اساسيات عملية التحويل</title>

	<para>
        قلب الـ RewriteRouter هو إنشاء معرفات تحويل "routes" من قِبل المستخدم, يتم إنشاء الـ routes عن طريق إستدعاء 
        الـ method المسمى addRoute الخاص بـ RewriteRouter :
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', 'user/:username');]]></programlisting>

	<para>
        البراميتر الأول هو إسم الـ route , فى وقت كتابة هذه الكلمات لا يوجد إستخدام لهذا الأسم , و لكن فى المستقبل سيتم 
        إستخدامه فى اداة "URL view helper"  مساعدة لإنشاء URLs بسهولة فى الـ view . 
        إن كنت تحتاج إلى إستخدام routes قد قمت بتسجيلها مسبقاً, يمكنك إستعادتها عن طريق الـ method المسمى getRoute 
        الموجود فى RewriteRouter.
	</para>

	<para>
        البراميتر الثانى عبارة عن route "معرف تحويل" و الذى سيتم مطابقته بالـ URL - على سبيل المثال, 
        الـ route المذكور بالأعلى سيتوافق مع <code>http://example.com/user/martel</code>.
        النقطة المزدوجة ":" فى الـ route توضح ان هذا متغير URL و الذى يمكن الوصول إليه من خلال الـ method المسمى 
        Zend_Controller_Action::_getParam . 
        فى مثالنا هذا , باراميتر يأسم username سيتم إنشائه بالقيمة 'martel'.
	</para>

	<note>
        يتم تنفيذ عملية اختبار المطابقة للـ routes بترتيب عكسى , لذلك تأكد من أن الـ routes الأكثر عمومية (فرصة مطابقتها اكبر)
         تم تعريفها اولاً.
	</note>

	<note>
        فى الوقت الحالى , مسموح إستخدام أى حروف ما عدا (/) فى أسماء البراميترات, لكن ينصح بشدة أن تستخدم الحروف 
        المسموح إستخدامها فى اسماء متغيرات PHP العادية, لأنه ربما تحدث تغييرات فى المستقبل فى طريقة العمل و بالتالى 
        سيترتب هذا على اخطاء فى الكود الخاص بك.
	</note>

	<para>
        هناك اثنان من المتغيرات الخاصة التى يمكنك إستخدامها فى الـ routes خاصتك - 'controller' و 'action', 
        هذه المتغيرات الخاصة ستستخدم لإيجاد controller و/ أو action يتم تحديده فى الـ URL. 
        المتغير الخاص 'action' يجب ان يتم تحديد قيمته سواء فى الـ route او كقيمة أساسية لبراميتر, 
        و المتغير الخاص 'controller'  إن لم يتم تعريفه مسبقا فسيتم اعتبار قيمته هى 'IndexController'.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', ':controller/:action');]]></programlisting>

	<para>
        إن قمت بتجربة الوصول الى 'http://example.com/news/latest' من خلال متصفحك , فسيقوم 
        Zend_Controller_Dispatcher بإستدعاء latestAction من الـ NewsController خاصتك.
	</para>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-defaults">
	<title>القيم الأساسية للمتغيرات</title>

	<para>
من الممكن وضع قيمة أساسية لكل متغير فى الـ route , و لتقوم بهذا يجب ان تمرر براميتر ثالث إلى addRoute , 
هذا البراميتر الثالث عبارة عن array تتكون من kyes على انها اسماء متغيرات , و values على انها قيم اساسية.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006));]]></programlisting>
	<para>
        الـ route الموضح فى الأعلى سيطابق URLs على الشكل 'http://example.com/archive/2005' و على الشكل 
        'http://example.com/archive', و لاحظ أن فى الحالة الثانية سيحمل المتغير year القيمة 2006.
	</para>

	<para>
        لاحظ أيضا أن فى المثال السابق لم نضع قيمة للـ controller و بالتالى سيتسبب هذا فى إستدعاء action يسمى noRoute 
        من IndexController , و لنتفادى هذا يجب أن نوفر قيمة أساسية للـ action و للـ controller :
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show'));]]></programlisting>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-requirements">
	<title>متطلبات المتغيرات</title>

	<para>
        يمكننا تمرير براميتر رابع إلى addRout حيث سنضع شروط يجب ان تنطبق على المتغيرات, 
        و هذه الشروط ستوضع على هيئة regular expressions :
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006), array('year' => '\d+'));]]></programlisting>

	<note>
        على عكس Ruby on Rails, يقوم الـ RewriteRouter الخاص بـ ZF بمقارنة الـ URL الممرر مع الـ route ثم 
        سيقوم بإستخدام القيم الأساسية الموجودة لديه فى حالة أن المتطلبات الممررة فى البراميتر الرابع لم يتم إستيفائها, 
        لذلك 'http://example.com/archive/test' عندما سيتم مقارنته مع الـ route سيتم وضع قيمة المتغير year إلى 2006, 
        هذا السلوك قد يتغير مستقبلا لأنه يتم مناقشة هذه الخاصية فى الوقت الذى تكتب فيه هذه الكلمات.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.rewritebase">
	<title>الـ URL الأساسى و المجلدات الفرعية</title>

	<para>
على عكس الـ router السابق, RewriteRouter يمكن إستخدامه فى المجلدات الفرعية, حيث سيقوم تلقائياً بمعرفة 
الـ URL ألأساسى الذى سيتم إستخدامه. على سبيل المثال , إن كنت تضع ملف index.php خاصتك فى مجلد فرعى 
على webserver بهذا المسار <code>projects/myapp/index.php/</code>, سيتم وضع قيمة الـ URL الأساسى 
ليكون <code>projects/myapp/</code>, هذا المسار سيتم تجاهله لاحقاً من بداية المسار عند حدوث عملية مقارنة 
بالـ route , و هذا يريحك من عملية إضافة هذا المسار إلى الـ routes خاصتك, فإذا كان لديك route مثل 
<code>'user/:username'</code> , فسيتوافق مع URLs مثل 
<code>http://localhost/projects/myapp/user/martel</code> و 
<code>http://example.com/user/martel</code>.
	</para>

	<note>
        عملية توقع قيمة الـ URL الأساسى تعتبر حساسة لحالة الحروف, لذلك تأكد من أن الـ URL سيتطابق مع أسم 
        مجلد فرعى لديك (حتى على أنظمة windows). إذا لم تتطابق سيستدعى الـ action المسمى noRoute.
	</note>

	<para>
        إن لم يتم توقع الـ URL الأساسى بشكل صحيح , فيمكنك وضع القيمة الصحيحة التى تراها بإستخدام الـ method المسمى 
        setRewriteBase فى RewriteRouter :
	</para>

	<programlisting role="php"><![CDATA[
$router->setRewriteBase('/projects/myapp');]]></programlisting>

	<note>
        هذه الخطوة لن تحتاج إليها فى اغلب الحالات , و ينصح بعدم إستخدامها إلا فى الضرورة القصوى لأن هذا سيترتب 
        عليه مشاكل عند نقل برنامجك من مكان إلى أخر و ستحتاج تغير القيمة هذه من جديد .
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.default-routes">
	<title>الـ routes الأساسية</title>

	<para>
        تم تجهيز Zend_Controller_RewriteRouter بإثنان من الـ routes الأساسية, 
        الأول يقوم بإدارة الـ URL الرئيسى حيث يشير إلى indexAction و IndexController : لذلك يجب عليك توفيرهما 
        كما هو موضح فى 
		<xref linkend="zend.controller.getting-started" />
		(أنظر <xref linkend="zend.controller.overview.indexcontroller" />).
        الـ route الأساسى الثانى تم إيجاده ليوفر توافق مع النسخة الأولى من الـ router "الموجه" , حيث سيقبل URIs على الشكل 
        <code>'controller/action'</code>.
	</para>

	<para>
		و بهذا الشكل تم تجهيز الـ routes الأساسية:
	</para>

	<programlisting role="php"><![CDATA[
// Default route for root URL
$this->addRoute('default', '', array('controller' => 'index', 'action' => 'index'));

// Route for Router v1 compatibility
$this->addRoute('compat', ':controller/:action', array('controller' => 'index', 'action' => 'index'));]]></programlisting>

	<note>
بالرغم من ان Zend_Controller_RewriteRouter تم تجهيزه ليتوافق مع النسخة الأولى منه , و لكنه لن يتمكن 
من التطابق مع URIs على الشكل <code>controller/action</code> مع بارمترات إضافية إلى الأن.
	</note>

</sect1>
