<sect1 id="zend.feed.introduction">
    <title>Inleiding</title>
    <para>
		<code>Zend_Feed</code> verstrekt functionaliteiten om RSS en Atom feeds uit te lezen. Het verstrekt 
		een intuïtieve syntax om elementen van de feeds te consulteren, attributen ervan en attributen van
		entries. <code>Zend_Feed</code> biedt ook uitgebreide ondersteuning voor het wijzigen van de
		structuur van een feed of een entry met dezelfde intuïtieve syntax, en om de resultaten terug in
		XLM te gieten. In de toekomst zou deze wijzigingsondersteuning ook het Atom Publishing Protocol
		kunnen ondersteunen.
    </para>

    <para>
		Programmeerswijs bestaat <code>Zend_Feed</code> uit een basisklasse <code>Zend_Feed</code>, de abstracte
		klasse <code>Zend_Feed_Abstract</code> en de basisklasse <code>Zend_Feed_EntryAbstract</code> om
		Feeds en Entries voor te stellen, om specifieke implementaties van feeds en entries voor RSS en Atom
		voor te stellen, en een achter-de-scène helper om de intuïtieve syntax magie te doen werken.
    </para>

    <para>
		In het hiernavolgende voorbeeld demonstreren we een eenvoudig gebruik om een RSS feed te verkrijgen en
		relevante delen ervan in een PHP array op te slaan, welke we dan zouden kunnen gebruiken voor het
		uitprinten van de data, de data op te slaan in een database enz...
    </para>

    <note>
      <para>
		Vele RSS feeds bieden verschillende eigenschappen van kanalen en items. De RSS specificatie verstrekt
		vele optionele eigenschappen, wees er dus van gewaar wanneer je code schrijft om met RSS data te werken.
      </para>
    </note>

    <example>
        <title>Zend_Feed laten werken met RSS Feed Data</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Feed.php';

// Haal de laatste Slashdot hoofdtitels
try {
    $slashdotRss = Zend_Feed::import('http://rss.slashdot.org/Slashdot/slashdot');
} catch (Zend_Feed_Exception $e) {
    // feed import mislukt
    echo "Uitzondering gevangen bij het importeren van feed: {$e->getMessage()}\n";
    exit;
}

// De datakanaal Array initializeren
$channel = array(
    'title'       => $slashdotRss->title(),
    'link'        => $slashdotRss->link(),
    'description' => $slashdotRss->description(),
    'items'       => array()
    );

// Loop over elk item van het kanaal en sla relevante informatie op
foreach ($slashdotRss as $item) {
    $channel['items'][] = array(
        'title'       => $item->title(),
        'link'        => $item->link(),
        'description' => $item->description()
        );
}

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.importing">
    <title>Feeds importeren met Zend_Feed</title>
    <para>
		<code>Zend_Feed</code> laat ontwikkelaars toe heel gemakkelijk feeds te verkrijgen. Indien je de URI
		van een feed kent, gebruik dan eenvoudigweg de <code>Zend_Feed::import()</code> methode:
    </para>
    <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]>   </programlisting>
    <para>
		Je kan <code>Zend_Feed</code> ook gebruiken om de inhoud van een feed vanuit een bestand of een
		PHP string variabele te verkrijgen:
    </para>
    <programlisting role="php"><![CDATA[
<?php

// een feed van een textbestand importeren
$feedFromFile = Zend_Feed::importFile('feed.xml');

// een feed van een PHP string importeren
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
    <para>
		In elk van de bovenstaande voorbeelden wordt een object van een klasse die <code>Zend_Feed_Abstract</code> 
		uitbreidt teruggegeven, afhangende van de feed type. Indien een RSS feed werd verkregen via één van de
		hierboven beschreven import methodes, zal een <code>Zend_Feed_Rss</code> object worden verkregen.
		Anderzijds, indien een Atom feed werd geïmporteerd, zal een <code>Zend_Feed_Atom</code> object
		worden verkregen. De importmethodes zullen ook een <code>Zend_Feed_Exception</code> opwerpen indien
		ze mislukken, zoals bij het importeren van een onleesbare of slecht gevormde feed.
    </para>
</sect1>

<sect1 id="zend.feed.findFeeds">
    <title>Feeds verkregen van Web Paginas</title>
    <para>
		Web paginas bevatten dikwijls <code>alt;link&gt;</code> afbakeningen die naar feeds met 
		relevante informatie met betrekking tot de pagina wijzen. <code>Zend_Feed</code> laat je toe om
		alle gereferenceerde feeds in een web pagina met één eenvoudige methode oproep te verkrijgen:
    </para>
    <programlisting role="php"><![CDATA[
<?php

$feedArray = Zend_Feed::findFeeds('http://www.example.com/news.html');

?>]]></programlisting>
    <para>
		De methode <code>findFeeds()</code> stuurt een array van <code>Zend_Feed_Abstract</code> objecten
		terug die gereferenceerd zijn door <code>&lt;link&gt;</code> afbakeningen op de news.html web
		pagina. Afhankelijk van het type van elk van de feeds zal elke respectieve entry in de
		<code>$feedArray</code> array een <code>Zend_Feed_Rss</code> of een <code>Zend_Feed_Atom</code>
		instantie zijn. <code>Zend_Feed</code> zal een <code>Zend_Feed_Exception</code> opwerpen bij
		mislukking, zoals een HTTP 404 antwoord of een misvormde feed.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-rss">
    <title>Een RSS Feed lezen</title>
    <para>
		Een RSS feed lezen is zo eenvoudig als het instantiëren van een <code>Zend_Feed_Rss</code> object
		met het URI van de feed:
    </para>
    <programlisting role="php"><![CDATA[
<?php

$channel = new Zend_Feed_Rss('http://rss.example.com/channelName');

?>]]></programlisting>
    <para>
		Indien er fouten optreden bij het verkrijgen van de feed zal een <code>Zend_Feed_Exception</code>
		opgeworpen worden.
    </para>

    <para>
		Als je eenmaal een feed object hebt, kan je toegang verkrijgen voor eender welke van de standaard RSS 
		kanaaleigenschappen	op een direkte wijze:
    </para>
    <programlisting role="php"><![CDATA[
<?php

echo $channel->title();

?>]]></programlisting>
    <para>
		Merk de functiesyntax op. <code>Zend_Feed</code> gebruikt een overeenkomst om eigenschappen als
		XML objecten te behandelen indien ze werden opgevraagd met de variabele "getter" syntax 
		(<code>$obj->property()</code>). Dit laat het toe de volledige tekst van eender welke individuele
		node te verkrijgen en toch volledig toegang te hebben tot alle childnodes.
    </para>

    <para>
		Indien kanaaleigenschappen attributen hebben zijn deze toegangkelijk door het gebruiken van de
		array syntax van PHP:
    </para>
    <programlisting role="php"><![CDATA[
<?php

echo $channel->category['domain'];

?>]]></programlisting>
    <para>
		Vermits XML attributen geen kinderen kunnen hebben is de functiesyntax niet nodig om toegang te krijgen
		tot attribuutwaarden.
    </para>

    <para>
        Meestal zal je door een feed willen loopen en iets met de entries willen doen. 
        <code>Zend_Feed_Abstract</code> implementeert PHP's <code>Iterator</code> interface, dus het weergeven van alle titels van artikels in een kanaal is eenvoudig met: 
    </para>
    <programlisting role="php"><![CDATA[
<?php

foreach ($channel as $item) {
    echo $item->title() . "\n";
}

?>]]></programlisting>
    <para>
		Indien je niet vertrouwd bent met RSS zijn hier de standaard elementen die je kan verwachten in een
		RSS kanaal en in individuele RSS items (entries).
    </para>

    <para>
        Verplichte kanaalelementen:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - De naam van het kanaal</para>
            </listitem>
            <listitem>
                <para><code>link</code> - De URL van de overeenkomstige website</para>
            </listitem>
            <listitem>
                <para><code>description</code> - Eén of meerdere zinnen die het kanaal beschrijven</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
		Gewone optionele elementen:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>pubDate</code> - De publicatiedatum van deze set van inhoud, in de 
				vorm van een RFC 822 datum</para>
            </listitem>
            <listitem>
                <para><code>language</code> - De taal waarin het kanaal is geschreven</para>
            </listitem>
            <listitem>
                <para><code>category</code> - Eén of meerdere (gespecifieerd door het vermenigvuldigen 
				van de afbakeningen) categoriën waartoe het kanaal behoort</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        RSS <code>&lt;item&gt;</code> elementen hebben geen strict verplichte eigenschappen. Desalnietemin moeten
		ofwèl <code>title</code> of <code>description</code> aanwezig zijn.
    </para>

    <para>
        Gewone item elementen:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - De titel van het item</para>
            </listitem>
            <listitem>
                <para><code>link</code> - De URL van het item</para>
            </listitem>
            <listitem>
                <para><code>description</code> - Een samenvatting van het item</para>
            </listitem>
            <listitem>
                <para><code>author</code> - Het e-mailadres van de auteur</para>
            </listitem>
            <listitem>
                <para><code>category</code> - Eén of meerdere categorieën waartoe het item behoort</para>
            </listitem>
            <listitem>
                <para><code>comments</code> - URL van commentaren verbonden aan dit item</para>
            </listitem>
            <listitem>
                <para><code>pubDate</code> - De datum van publicatie van het item in RFC 822 formaat</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
		Je kan in jouw code altijd testen of een element leeg is of niet met:
    </para>
    <programlisting role="php"><![CDATA[
<?php

if ($item->propname()) {
    // ... doorgaan.
}

?>]]></programlisting>

    <para>
		Indien je in de plaats daarvan <code>$item->propname</code> gebruikt, zal je altijd een leeg
		object verkrijgen dat geëvalueerd zal worden als <code>TRUE</code> en je test zal niet juist zijn.
    </para>

    <para>
		Voor verdere informatie kan je terecht op de officiële RSS 2.0 specificatie:
        <ulink url="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</ulink>
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom">
<title>Een Atom Feed lezen</title>

    <para>
		<code>Zend_Feed_Atom</code> is voor een groot deel identiek aan <code>Zend_Feed_Rss</code>. Het
		verstrekt dezelfde toegang to feed eigenschappen en het overlopen van de entries in de feed. Het
		grote verschil zit in de structuur van het Atom protocol zelf. Atom is een opvolger van RSS; het
		is een meer generiek protocol en is ontworpen om gemakkelijker met feeds om te gaan die de
		volledige inhoud in de feed aanbieden door het opsplitsen van de RSS <code>description</code>
		eigenschap in twee elementen: <code>summary</code> en <code>content</code>.
    </para>

    <example>
        <title>Basisgebruik van een Atom Feed</title>
        <para>
			Lees een Atom feed en beeld de <code>title</code> en <code>summary</code> van elke entry af:
        </para>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/');
echo 'de feed bevat ' . $feed->count() . ' entries.' . "\n\n";
foreach ($feed as $entry) {
    echo 'Titel: ' . $entry->title() . "\n";
    echo 'Samenvatting: ' . $entry->summary() . "\n\n";
}

?>]]>   </programlisting>
    </example>

    <para>
		Je kan de volgende feed eigenschappen verwachten in een Atom feed:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - De titel van de feed, hetzelfde als de kanaaltitel van een RSS feed</para>
            </listitem>
            <listitem>
                <para><code>id</code> - Elke feed en entry heeft een unieke id in Atom</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Feeds kunnen meerder links hebben, ze zijn gescheiden door het
                <code>type</code> attribuut</para>
                <para>
					De tegenhanger in een RSS kanaal link zou de <code>type="text/html"</code> zijn. Indien
					de link naar een alternatieve versie van dezelfde inhoud in de feed verwijst  zou het het
					attribuut <code>rel="alternative"</code> hebben.
                </para>
            </listitem>
            <listitem>
                <para><code>subtitle</code> - De beschrijving van de feed, de tegenhanger van de 
				kanaalbeschrijving in RSS
                </para>
                <para><code>author->name()</code> - De naam van de auteur van de feed</para>
                <para><code>author->email()</code> - Het email adres van de auteur van de feed</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
		Atom entries hebben gewoonlijk de volgende eigenschappen:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>id</code> - De unieke ID van de entry</para>
            </listitem>
            <listitem>
                <para><code>title</code> - De titel van de entry, hetzelfde als de item titels in RSS</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Een link naar een alternatieve versie of afbeelding van deze entry</para>
            </listitem>
            <listitem>
                <para><code>summary</code> - Een samenvatting van de inhoud van de entry</para>
            </listitem>
            <listitem>
                <para><code>content</code> - De volledige inhoud van de entry; dit kan worden overgeslaan indien
				de feed alleen samenvattingen bevat</para>
            </listitem>
            <listitem>
                <para><code>author</code> - met <code>name</code> en <code>email</code> subafbakeningen zoals feeds hebben</para>
            </listitem>
            <listitem>
                <para><code>published</code> - de publicatiedatum in RFC 3339 formaat</para>
            </listitem>
            <listitem>
                <para><code>updated</code> - de datum van de laatste update van het item in RFC 3339 formaat</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
		Voor meer informatie en een overvloed van bronnen over Atom, ga naar
        <ulink url="http://www.atomenabled.org/">http://www.atomenabled.org/</ulink>.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom-single-entry">
    <title>Een enkele Atom entry lezen</title>

    <para>
		Een Atom <code>&lt;entry&gt;</code> element is ook alleenstaand geldig. Gewoonlijk is de URL van 
		een entry gelijk aan de URL van de feed gevolgd door <code>&lt;entryId&gt;</code> zoals
		<code>http://atom.example.com/feed/1</code>, het voorbeeld van hierboven volgend.
    </para>

    <para>
		Als je een enkele entry leest zal je nog altijd een <code>Zend_Feed_Atom</code> object hebben maar
		het zal automatisch een "anonieme" feed aanmaken om de entry in te kapselen.
    </para>

    <example>
        <title>Een alleenstaande entry van een Atom Feed lezen</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
echo 'De feed heeft: ' . $feed->count() . ' entry.';

$entry = $feed->current();

?>]]>   </programlisting>
    </example>

    <para>
		Op een andere manier zou je het entry objekt direct kunnen instantiëren indien je weet dat je 
		een document opent dat alleen <code>&lt;entry&gt;</code> elementen bevat:
    </para>

    <example>
        <title>Het Entry Object Direct gebruiken voor een Single-Entry Atom Feed</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom('http://atom.example.com/feed/1');
echo $entry->title();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.modifying-feed">
    <title>Feed en Entry structuren wijzigen</title>

    <para>
		De intuïtieve syntax van <code>Zend_Feed</code> breidt zich uit voor het bouwen en wijzigen van feeds en
		entries, naast het lezen ervan. Je kan gemakkelijk je nieuwe of gewijzigde objecten in
		goedgevormde XML terugsturen om het in een bestand op te slaan of naar een server te sturen.
    </para>

    <example>
        <title>Wijzigen van een bestaande Feed Entry</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = 'Dit is een nieuwe titel';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
			Dit zal een volledige (inclusief <code>&lt;?xml ... &gt;</code> proloog) XML representatie van de
			nieuwe entry weergeven, met inbegrip van alle nodige XML namespaces.
        </para>
        <para>
			Merk op dat het bovenstaande zelfs zal werken indien de oorspronkelijke entry nog geen <code>author</code>
			afbakening heeft. Je kan zoveel niveaus van <code>-&gt;</code> aandoen als je wil voor een toewijzing te
			doen; alle niveaus zullen automatisch worden aangemaakt indien nodig.
        </para>
    </example>

    <para>
		Als je een andere namespace wil gebruiken dan <code>atom:</code>, <code>rss:</code> of <code>osrss:</code>
		in je entry, moet je de namespace registreren aan <code>Zend_Feed</code> door 
		<code>Zend_Feed::registerNamespace()</code> te gebruiken. Als je een bestaand element wil wijzigen zal het
		steeds zijn oorspronkelijke namespace behouden. Als je een nieuw element toevoegt zal het in de standaard
		namespace gaan als je niet uitdrukkelijk een andere namespace toewijst.
    </para>

    <example>
        <title>Een Atom Entry met elementen van een aangepaste namespace</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom();
// id wordt altijd via de server toegewezen in Atom
$entry->title = 'mijn aangepaste entry';
$entry->author->name = 'Voorbeeldauteur';
$entry->author->email = 'me@example.com';

// Doe nu de aanpassing
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'mijn eerste aangepaste waarde';
$entry->{'myns:container_elt'}->part1 = 'eerste genesteld aangepast deel';
$entry->{'myns:container_elt'}->part2 = 'tweede genesteld aangepast deel';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.custom-feed">
    <title>Aangepaste Feed en Entry klassen</title>

    <para>
        Naast dit alles is het ook mogelijk om de <code>Zend_Feed</code> klassen uit te breiden wanneer je een eigen formaat of extra's wil aanbieden, zoals automatisch afhandelen van elementen in een aangepaste namespace.
    </para>

    <para>
		Hier is een voorbeeld van een aangepaste Atom entry klasse die zijn eigen <code>myns:</code>
		namespace behandeld. Merk op dat het ook de oproep <code>registerNamespace()</code> voor je
		afhandelt, zodanig dat de eindgebruiker zich helemaal niet met namespaces hoeft bezig te houden.
    </para>

    <example>
        <title>De Atom Entry Class uitbreiden met aangepaste Namespaces</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * De aangepaste entry klasse kent automatisch de feed URI (optioneel) en
 * kan automatisch extra namespaces toevoegen.
 */
class MyEntry extends Zend_Feed_EntryAtom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
				// Vertaal myUpdated naar myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
				// Vertaal myUpdated naar myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
			Om deze klasse nu te gebruiken moet je ze gewoon direct instantiëren en de <code>myUpdated</code>
			eigenschap zetten:
        </para>
        <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>       </programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->