<sect1 id="zend.httpclient.introduction">
    <title>Inleiding</title>
    <para>
        <code>Zend_HttpClient</code> verstrekt een eenvoudige interface om HTTP verzoeken te maken.
        <code>Zend_HttpClient</code> kan GET, POST, PUT en DELETE verzoeken maken.
    </para>
    <note>
        <code>Zend_HttpClient</code> volgt standaard tot 5 HTTP verwijzingen. Om dit gedrag te veranderen
		geef je het maximum toegestane verwijzingen aan de <code>get()</code> methode op.
    </note>
    <para>
        <example>
            <title>Een Basis GET Verzoek maken</title>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/HttpClient.php';
try {
    $http = new Zend_HttpClient('http://example.org');
    $response = $http->get();
    if ($response->isSuccessful()) {
        echo $response->getBody();
    } else {
        echo '<p>Er trad een fout op</p>';
    }
} catch (Zend_HttpClient_Exception $e) {
    echo '<p>Er trad een fout op (' .$e->getMessage(). ')</p>';
}
?>]]></programlisting>
        </example>
    </para>
</sect1>
<sect1 id="zend.httpclient.basic-get-requests">
    <title>Basis GET verzoeken met gespecificeerde HTTP Headers</title>
    <para>
        De <code>Zend_HttpClient</code> constructor maakt een <code>Zend_HttpClient</code> instantie om
		HTTP verzoeken te zenden.
    </para>
    <para>
		Als je <code>Zend_HttpClient</code> gebruikt op één enkele URL kan je in de meeste gevallen de URL
		en relevante headers aan de <emphasis>constructor</emphasis> geven, zoals in de volgende voorbeelden:
    </para>
    <example>
        <title>Een Basis Zend_HttpClient maken</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/HttpClient.php';

// Specificeer de URL en een enkele header
$http = new Zend_HttpClient('http://example.org', 'Accept: text/html');
?>]]>       </programlisting>
    </example>
    <para />
    <example>
        <title>Meerdere Headers sturen</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/HttpClient.php';

// Specificeer de URL en meerdere headers
$http = new Zend_HttpClient('http://example.org',
                        array('Accept: text/html', 'Accept-Language: en-us,en;q=0.5'));
?>]]>       </programlisting>
    </example>
    <para>
		Als je <code>Zend_HttpClient</code> wenst te gebruiken om verzoeken aan <emphasis>meerdere</emphasis> URLs te
		sturen, zie dan <xref linkend="zend.httpclient.requesting-multiple-domains" />
    </para>
</sect1>
<sect1 id="zend.httpclient.requesting-multiple-domains">
    <title>Multidomein verzoeken</title>
    <para>
        <code>Zend_HttpClient</code> ondersteunt het sturen van verzoeken aan meerdere domeinen
		door het zetten van de URL via de methode <code>Zend_HttpClient::setUri()</code>.
    </para>
    <note>
        <para>Een geweldig gebruik hiervoor is als je meerdere RSS feeds ondervraagt.</para>
    </note>
    <example>
        <title>Multidomein verzoek</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/HttpClient.php';

// Het client object instantiëren
$http = new Zend_HttpClient();

// Het URI naar Slashdot's hoofd feed zetten
$http->setUri('http://rss.slashdot.org/Slashdot/slashdot');

// De feed opvragen
$slashdot = $http->get();

// Nu de BBC news feed instellen
$http->setUri('http://newsrss.bbc.co.uk/rss/newsonline_world_edition/technology/rss.xml');

// de feed opvragen
$bbc = $http->get();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.httpclient.settimeout">
    <title>De HTTP Timeout wijzigen</title>
    <para>
        <code>Zend_HttpClient::setTimeout()</code> laat je toe de timeout voor de HTTP verbinding
		te zetten, in seconden.
    </para>
    <note>
        <para>De standaard timeout is 10 seconden.</para>
    </note>
</sect1>
<sect1 id="zend.httpclient.setheaders">
    <title>Dynamisch HTTP Headers zetten</title>
    <para>
		Je kan een <emphasis>array</emphasis> headers zetten met <code>Zend_HttpClient::setHeaders()</code>.
    </para>
    <important>
        <para>
            Headers moeten het formaat volgen:
            <option><code>Header: waarde</code></option>
        </para>
    </important>
</sect1>
<sect1 id="zend.httpclient.making-other-requests">
    <title>POST, PUT en DELETE HTTP verzoeken maken</title>
    <para>
		Het maken van POST, PUT en DELETE HTTP verzoeken wordt vereenvoudigd in <code>Zend_HttpClient</code>
		door middel van drie methodes: <code>post()</code>, <code>put()</code>, en <code>delete()</code>, 
		respectievelijk. De <code>post()</code> en <code>put()</code> methodes aanvaarden elk één string
		parameter, <code>$data</code>, waarin een string met de data correct ge-encodeerd zoals volgt:
        <emphasis><code>name=value&amp;foo=bar</code></emphasis>. De <code>delete()</code> methode heeft
		geen parameters.
    </para>
    <example>
        <title>Sending POST data with Zend_HttpClient</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/HttpClient.php';

// Het client object instantiëren
$http = new Zend_HttpClient();

// De URI naar een POST dataverwerker zetten
$http->setUri('http://example.org/post/processor');

// De specifieke GET variabelen als HTTP POST data opslaan
$postData = 'foo=' . urlencode($_GET['foo']) . '&bar=' . urlencode($_GET['bar']);

// Het HTTP POST verzoek maken en het HTTP antwoord opslaan
$httpResponse = $http->post($postData);
?>]]>   </programlisting>
        <para>
			Een PUT verzoek maken is hetzelfde als in het voorgaande voorbeeld om een POST verzoek te maken;
			je hoeft slechts de <code>put()</code> methode gebruiken in plaats van de <code>post()</code> methode.
        </para>
    </example>
</sect1>
&module_specs.Zend_HttpClient_Response;
<!--
vim:se ts=4 sw=4 et:
-->