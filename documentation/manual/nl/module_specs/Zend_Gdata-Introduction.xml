<sect1 id="zend.gdata.introduction">
    <title>Introduction to Gdata</title>
    <para>
        Google Data APIs provide programmatic interface to some of Google's
        online services.
        Client applications submit queries and data via HTTP, and retrieve
        results.
        The Zend_Gdata component is a PHP 5 interface for accessing Google Data
        from PHP.
    </para>

    <para>
        See
        <ulink url="http://code.google.com/apis/gdata/">http://code.google.com/apis/gdata/</ulink>
        for more information about Google Data API.
    </para>

    <para>
        The services that are accessible by Zend_Gdata include the
        following:

        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="zend.gdata.base">Google Base</link>
                    provides a search tool for online products,
                    jobs, events, personal ads, and other types of entries.
                    People post items and describe them with commonly-named
                    attributes.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.blogger">Google Blogger</link>
                    is a popular internet provider of
                    "push-button publishing" and syndication.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.calendar">Google Calendar</link>
                    is an online scheduling and collaboration tool.
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="zend.gdata.codesearch">Google CodeSearch</link>
                    allows you to search public source code from many projects.
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <note>
        <title>Unsupported services</title>
        <para>
            Google Data API also supports Google Spreadsheets, but Zend_Gdata
            does not provide a helper class for Spreadsheets in this release.
        </para>

        <para>
            Zend_Gdata does not provide an interface to any other Google
            service, such as Search, Gmail, Translation, or Maps.
            Only services that support the Google Data API are supported.
        </para>
    </note>

    <sect2 id="zend.gdata.introduction.authentication">
        <title>Google Data Client Authentication</title>
        <para>
            Most Google Data services require client applications to
            authenticate against the Google server before accessing
            private data, or saving or deleting data.
            There are two implementations of authentication for Google Data:
            <link linkend="zend.gdata.authsub">AuthSub</link> and
            <link linkend="zend.gdata.clientlogin">ClientLogin</link>.
            Zend_Gdata offers class interfaces for both of these methods.
        </para>

        <para>
            Most other types of queries against Google Data services do not
            require authentication.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.dependencies">
        <title>Dependencies</title>
        <para>
            Zend_Gdata makes use of 
            <link linkend="zend.feed.introduction">Zend_Feed</link> and
            <link linkend="zend.http.client">Zend_Http_Client</link> to send
            requests to google.com and fetch results.  The response to most
            Google Data requests is returned as a Zend_Feed object in the
            format of an Atom or RSS feed.
        </para>

        <para>
            Zend_Gdata assumes your PHP application is running on a host that
            has a direct connection to the internet.
            The Zend_Gdata client operates by contacting Google Data servers.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.creation">
        <title>Creating a new Gdata client</title>

        <para>
            Create a new object of class Zend_Gdata or one of the
            subclasses available that offer helper methods for
            service-specific behavior.
        </para>

        <para>
            The single optional parameter to the Zend_Gdata constructor
            is an instance of 
            <link linkend="zend.http.client">Zend_Http_Client</link>.
            If you don't pass this parameter, Zend_Gdata creates a default
            Zend_Http_Client object.
            Specifying the Zend_Http_Client object allows you to
            pass configuration options to that client object.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Gdata.php';
require_once 'Zend/Http/Client.php';

$client = new Zend_Http_Client();
$client->setConfig( ...options... );

$gdata = new Zend_Gdata($client);
?>]]></programlisting>

        <para>
            Also see the sections on authentication for methods to
            create an authenticated Zend_Http_Client object.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.parameters">
        <title>Common query parameters</title>

        <para>
            You can specify parameters to customize queries with Zend_Gdata.
            Some parameters apply only to individual Google Data services.
            These parameters are documented in later sections for each service.
            Some parameters apply in a common way to multiple Google Data services.
            These parameters are described below.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    The <code>alt</code> parameter specifies the feed type.
                    The value of the parameter can be
                    <code>atom</code>,
                    <code>rss</code>,
                    <code>json</code>,
                    or <code>json-in-script</code>.
                    If you don't specify this parameter, the default feed type
                    is <code>atom</code>.
                </para>
                <para>
                    Set this parameter with the <code>setAlt()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>maxResults</code> parameter limits the number
                    of entries in the feed.  The value of the parameter is
                    an integer.  The number of entries returned in the feed 
                    will not exceed this value.
                </para>
                <para>
                    Set this parameter with the <code>setMaxResults()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>startIndex</code> parameter specifies the
                    ordinal number of the first entry returned in the feed.
                    Entries before this number are skipped.
                </para>
                <para>
                    Set this parameter with the <code>setStartIndex()</code>
                    function.
                </para>
            </listitem>

            <listitem>
                <para>
                    The <code>updatedMin</code> and <code>updatedMax</code>
                    parameters specify bounds on the entry date.
                    If you specify a value for <code>updatedMin</code>,
                    no entries that were updated earlier than the date
                    you specify are included in the feed.  Likewise
                    no entries updated after the date specified by
                    <code>updatedMax</code> are included.
                </para>
                <para>
                    You can use numeric timestamps, or a variety of
                    date/time string representations as the value for
                    these parameters.
                </para>
                <para>
                    Set this parameter with the <code>setUpdatedMin()</code>
                    and <code>setUpdatedMax()</code> functions.
                </para>
            </listitem>

        </itemizedlist>

        <para>
            There is a <code>get</code> function for each
            <code>set</code> function.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$gdata->setMaxResults(10);
echo $gdata->getMaxResults();   // returns 10
?>]]></programlisting>

        <para>
            The Zend_Gdata class also implements "magic" getter and
            setter methods, so you can use the name of the parameter
            as a virtual member of the class.  You can use
            <code>isset()</code> and <code>unset()</code> on these
            virtual members.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$gdata->maxResults = 10;
echo $gdata->maxResults;        // returns 10
echo isset($gdata->maxResults); // returns true
unset($gdata->maxResults);      // clears parameter
?>]]></programlisting>

        <para>
            You can clear all parameters with the <code>resetParameters()</code>
            function.  This is useful to do if you reuse a Zend_Gdata
            object for multiple queries.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$gdata->maxResults = 10;
// ...get feed...

$gdata->resetParameters();      // clears all parameters
// ...get a different feed...
?>]]></programlisting>

    </sect2>

    <sect2 id="zend.gdata.introduction.getfeed">
        <title>Fetching a feed</title>

        <para>
            Use the <code>getFeed()</code> function to retrieve
            a feed from a specified URI.
            This function returns an object of class Zend_Feed.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
$gdata->setQuery('digital camera');
$gdata->setMaxResults(10);
$uri = 'http://www.google.com/base/feeds/snippets'
    . $gdata->getQueryString();
$feed = $gdata->getFeed($uri);
?>]]></programlisting>

        <para>
            See later sections for special functions in each
            helper class for Google Data services.  These
            functions help you to get feeds from the URI that is
            appropriate for the respective service.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.post">
        <title>Posting entries to Google servers</title>

        <para>
            The Zend_Gdata object has a function <code>post()</code>
            with which you can upload data to save new entries
            to Google Data services.
        </para>

        <para>
            You are responsible for constructing a string containing
            the correct XML structure for an entry of the respective
            Google Data service you are using.  You may use PHP class
            libraries such as DOM XML or SimpleXML.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata($client);     // $client is authenticated

$xmlString = <<<XML
<entry xmlns='http://www.w3.org/2005/Atom'
    xmlns:gd='http://schemas.google.com/g/2005'>
  <category scheme='http://schemas.google.com/g/2005#kind'
    term='http://schemas.google.com/g/2005#event'></category>
  <title type='text'>Tennis with Beth</title>
  <content type='text'>Meet for a quick lesson.</content>
  <author>
    <name>Jo March</name>
    <email>jo@gmail.com</email>
  </author>
  <gd:transparency
    value='http://schemas.google.com/g/2005#event.opaque'>
  </gd:transparency>
  <gd:eventStatus
    value='http://schemas.google.com/g/2005#event.confirmed'>
  </gd:eventStatus>
  <gd:where valueString='Rolling Lawn Courts'></gd:where>
  <gd:when startTime='2006-04-17T15:00:00.000Z'
    endTime='2006-04-17T17:00:00.000Z'></gd:when>
</entry>
XML;

$xml = new SimpleXMLElement($xmlString);

$myCalendar = 'http://www.google.com/calendar/feeds/default/private/full';
$gdata->post($xml->asXML(), $myCalendar);
?>]]></programlisting>

        <para>
            To post entries, you must be using an authenticated
            Zend_Http_Client that you created using the Zend_Gdata_AuthSub
            or Zend_Gdata_ClientLogin classes.
        </para>

    </sect2>

    <sect2 id="zend.gdata.introduction.delete">
        <title>Deleting entries on Google servers</title>

        <para>
            The Zend_Gdata object has a function <code>delete()</code>
            with which you can delete entries from Google Data
            services.  Pass the <code>&lt;id&gt;</code> value from
            a feed entry to the <code>delete()</code> method.
        </para>

        <programlisting role="php"><![CDATA[<?php
$gdata = new Zend_Gdata();
// a Google Data feed
$feedUri = ...;
$feed = $gdata->getFeed($feedUri);
foreach ($feed as $feedEntry) {
    // extract the <id> element
    $id = $feedEntry->id();
    $gdata->delete($id);
}
?>]]></programlisting>

        <para>
            To delete entries, you must be using an authenticated
            Zend_Http_Client that you created using the Zend_Gdata_AuthSub
            or Zend_Gdata_ClientLogin classes.
        </para>

    </sect2>
 
</sect1> 
