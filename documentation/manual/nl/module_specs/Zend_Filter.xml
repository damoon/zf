<sect1 id="zend.filter.filter">
    <title>Zend_Filter</title>
    
    <sect2 id="zend.filter.filter.introduction">
        <title>Inleiding</title>
        <para><literal>Zend_Filter</literal> verstrekt een bibliotheek van statisiche methodes om
    	data te filteren. Om invoer te filteren moet je <xref
        linkend="zend.filter.input" /> gebruiken in de plaats van Zend_Filter, want het verstrekt
    	een framework om invoer te filteren door het gebruik van de methodes die deze klasse aanbiedt.
    	Omdat <literal>Zend_Filter_Input</literal> voornamelijk voor arrays is ontworpen kan
        <literal>Zend_Filter</literal> hulpzaam zijn om scalaire waarden te filteren omdat het zich
    	gedraagt zoals PHP string functies:</para>
        <programlisting>
    <![CDATA[<?php

    $alphaUsername = Zend_Filter::getAlpha('John123Doe');

    /* $alphaUsername = 'JohnDoe'; */

    ?>]]>
        </programlisting>
    </sect2>
    <sect2 id="zend.filter.filter.usecases">
        <title>Gebruik</title>
        <para>In elk van de volgende gevallen stelt <literal>$value</literal> een 
    	willekeurige scalaire waarde voor.</para>
        <para>Witte lijst Filteren:</para>
        <programlisting>
    <![CDATA[<?php

    if ($email = Zend_Filter::isEmail($value)) {
        /* $email is een geldig formaat. */
    } else {
        /* $email is geen geldig email formaat. */
    }

    ?>]]>
        </programlisting>
        <para>Blind Filteren:</para>
        <programlisting>
    <![CDATA[<?php

    $alphaName = Zend_Filter::getAlpha($value);

    ?>]]>
        </programlisting>
        <para>Zwarte lijst Filteren:</para>
        <programlisting>
    <![CDATA[<?php

    $taglessComment = Zend_Filter::noTags($value);

    ?>]]>
        </programlisting>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->