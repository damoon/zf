<sect1 id="zend.controller.subclassing">
	<title>Onderklassen</title>
	
	<sect2 id="zend.controller.subclassing.introduction">
		<title>Inleiding</title>
		<para>
			Het <code>Zend_Controller</code> systeem werd gebouwd met uitbreiding
			in het hoofd, ofwel door het onderklassen van de bestaande
			klassen of door het schrijven van nieuwe klassen die de interfaces
			van <code>Zend_Controller_Router_Interface</code> en <code>Zend_Controller_Dispatcher_Interface</code>
			implementeren.
		</para>
		
		<para>
			Mogelijke redenen om een nieuwe router of dispatcher te implementeren kunnen zijn:
			
			<itemizedlist>
				<listitem>
					<para>
						Het bestaande URI routing systeem is niet toepasbaar om één of andere reden, zoals
						de integratie in een bestaande website die zijn eigen konventies voor routing
						heeft en die niet overeenkomen met het routing systeem van het Zend Framework.
					</para>
				</listitem>
				<listitem>
					<para>
						Je moet een routing systeem implementeren voor iets volledig anders. De <code>Zend_Controller_Router</code>
						klasse kan alleen URIs afhandelen. Het is mogelijk en waarschijnlijk dat je het MVC patroon
						wil gebruiken om een ander type programma te ontwikkelen, zoals een konsole toepassing. In het
						geval van een konsole toepassing zou een aangepaste router argumenten van de command line moeten kunnen 
						verwerken om de route te determineren.
					</para>
				</listitem>
				<listitem>
					<para>
						Het mechanisme dat door <code>Zend_Controller_Dispatcher</code> wordt verstrekt is niet toepasbaar. De
						standaard configuratie neemt een overeenkomst aan die zegt dat controller klassen zijn en akties
						methodes van die klassen. Er zijn evenwel vele andere strategiën om dit te doen. Eén voorbeeld zou
						zijn waar de controllers mappen zijn en de akties bestanden in die mappen.
					</para>
				</listitem>
				<listitem>
					<para>
						Je wil bijkomende mogelijkheden verstrekken die door al je controllers worden geërfd. Bijvoorbeeld,
						<code>Zend_Controller_Action</code> kan niet standaard geïntegreerd worden met <code>Zend_View</code>.
						Wat je evenwel wèl kan doen is je eigen controller aanpassen zodat die kan integreren met
						<code>Zend_View</code> en die gebruiken vermijdt het wijzigen van de verstrekte 
						<code>Zend_Controller_Router</code> of <code>Zend_Controller_Dispatcher</code>.
					</para>
				</listitem>
			</itemizedlist>

			Wees voorzichtig met het wijzigen van belangrijke delen van het systeem, en in het bijzonder de dispatcher. Een van
			de voordelen van <code>Zend_Controller</code> is dat het algemene overeenkomsten vestigt voor het bouwen van 
			toepassingen. Indien teveel van dit standaard gedrag wordt gewijzigd, zal een deel van deze voordelen verloren
			zijn. Er zijn evenwel vele verschillende benodigdheden en één enkele oplossing is niet ideaal voor allen. De
			vrijheid om te wijzigen is dus verstrekt indien nodig.
		</para>
	</sect2>
	
	<sect2 id="zend.controller.subclassing.conventions">
		<title>Overeenkomsten</title>
		
		<para>
			Bij het onderklassen van een Zend_Controller klasse is het sterk aangeraden de volgende overeenkomsten
			te respekteren bij de benaming en het opslaan van bestanden. Door dit te doen verzeker je ervan dat
			een andere programmeur die het Zend Framework kent gemakkelijk je projekt kan verstaan.
		</para>
		
		<sect3 id="zend.controller.subclassing.prefix">
			<title>Prefix</title>
				
			<para>
				Klassen die inbegrepen zijn in het Zend Framework volgen een overeenkomst waarbij elke klasse
				geprefixed wordt door "Zend_". Dat is de prefix. We raden sterk aan dat jij al jouw klassen
				op een gelijkaardige wijze benoemd, bv: als je bedrijf Widget NV noemt, zou de prefix "Widget_" 
				kunnen zijn.
			</para>
		</sect3>
		
		<sect3 id="zend.controller.directory.layout">
			<title>Mappen Lay-out</title>
			
			<para>
				<code>Zend_Controller</code> klassen worden als volgt in de bibliotheekmap opgeslaan:

    <programlisting role="php"><![CDATA[
/library
  /Zend
    /Controller
      Action.php
      Dispatcher.php
      Router.php
]]></programlisting>			

				Bij het onderklassen van <code>Zend_Controller</code> klassen is het aangeraden dat de nieuwe 
				klassen opgeslaan worden in een gelijkaardige struktuur onder jouw prefix. Dat maakt het
				gemakkelijk om ze te vinden voor iemand gedurende dat leerprocess dat het nakijken van de
				code van jouw projekt is.
			</para>
			
			<para>
				Bijvoorbeeld, een projekt Widget NV dat alleen een aangepaste router implementeerd zou op
				het volgende kunnen lijken:
				
<programlisting role="php"><![CDATA[
/library
  /Zend
  /Widget
    /Controller
      Router.php
      README.txt
]]></programlisting>			

				Merk in dit voobeeld op dat de <code>Widget/Controller/</code> map de <code>Zend/Controller/</code> weerspiegelt
				waar dat ook maar enigzins mogelijk is. In dit geval verstrekt het een <code>Widget_Controller_Router</code>
				klasse die een onderklasse of een vervanging is voor <code>Zend_Controller_Router</code> en die de
				<code>Widget_Controller_Router_Interface</code> implementeert.
			</para>
			
			<para>
				Merk ook op in het voorbeeld hierboven dat een <code>README.txt</code> bestand is opgeslaan in
				<code>Widget/Controller</code>. Zend moedigt je sterk aan je projekten te dokumenteren door
				afzonderlijke tests en dokumentatie te verstrekken voor je klanten. We moedigen je ook sterk aan
				een eenvoudig <code>README.txt</code> bestandje te plaatsen in de map om kort je veranderingen
				uit te leggen en hoe ze werken.
			</para>
		</sect3>
	</sect2>
	
	<sect2 id="zend.controller.router.interface">
		<title>Router Interface</title>
		
		<para>
			De interface <code>Zend_Controller_Router_Interface</code> verstrekt een definitie voor één enkele methode:

			<programlisting role="php"><![CDATA[<?php
				
  /**				
   * @param  Zend_Controller_Dispatcher_Interface
   * @throws Zend_Controller_Router_Exception
   * @return Zend_Controller_Dispatcher_Token|boolean
   */
  public function route(Zend_Controller_Dispatcher_Interface $dispatcher);

?>]]></programlisting>

			Routing gebeurt slecht één enkele keer: wanneer het verzoek voor het eerst door het systeem wordt ontvangen.
			Het doel van de router is een <code>Zend_Controller_Dispatch_Token</code> aan te maken dat een controller
			en een aktie van die controller definieert. Dit wordt dan doorgegeven aan de dispatcher. Indien het niet
			mogelijk is een route naar een dispatch token te mappen (nonsenical route) dan moet er een boolean,
			<code>FALSE</code> worden teruggestuurd.
		</para>
		
		<para>
			Sommige routers kunnen dynamische elementen verwerken en hebben een manier nodig om de determineren of het
			aldus gegenereerde token inderdaad dispatchbaar is voordat het wordt teruggestuurd. Om deze reden ontvangt
			de router de objekt handle van de dispatcher als enig argument voor zijn <code>route()</code> methode.
			De dispatcher verstrekt een methode, <code>isDispatchable()</code> om dit te testen.
		</para>
	</sect2>
	
	<sect2 id="zend.controller.dispatcher.interface">
		<title>Dispatcher Interface</title>
		
		<para>
			<code>Zend_Controller_Front</code> zal eerst de router solliciteren om een eerste disptach token te ontvangen en
			zal dit doorgeven aan de dispatcher. De dispatcher zal de aktie (de controller instantiëren, zijn aktie 
			oproepen) dispatchen en dan ofwel een boolean, FALSE, terugkeren, of een ander dispatch token.
		</para>
		
		<para>
			<code>Zend_Controller_Front</code> roept herhaaldelijk de dispatcher op tot deze geen dispatch token meer terug
			stuurt. Dit staat bekend als de dispatch loop. Het laat toe akties opeenvolgend te verwerken tot al het werk 
			gedaan is.
		</para>
		
		<para>
			De <code>Zend_Controller_Dispatcher_Interface</code> interface verstrekt definities voor twee methodes:
			
			<programlisting role="php"><![CDATA[<?php
				
/**
 * @param  Zend_Controller_Dispatcher_Token $route
 * @return boolean
 */
public function isDispatchable(Zend_Controller_Dispatcher_Token $route);

?>]]></programlisting>

		<code>isDispatchable()</code> gaat na of een dispatch token kan gedispatched worden. Indien dat zo is geeft het
		<code>TRUE</code> terug. Anders geeft het <code>FALSE</code> terug. In het geval van de standaard implementatie,
		<code>Zend_Controller_Dispatcher</code>, betekent dit dat het controller bestand bestaat, dat de klasse in het 
		bestand betaat en dat de aktiemethode in de klasse bestaat.
		
		<programlisting role="php"><![CDATA[<?php
			
/**
 * @param  Zend_Controller_Dispatcher_Token $route
 * @return Zend_Controller_Dispatcher_Token|boolean
 */
public function dispatch(Zend_Controller_Dispatcher_Token $route);

?>]]></programlisting>
		
		<code>dispatch()</code> is waar het echte werk wordt gedaan. Deze methode moet de aktie van de controller 
		uitvoeren. Het moet ofwel een dispatch token terugkeren of een boolean, FALSE, om aan te geven dat er geen
		werk meer te doen is.
		
		</para>
	</sect2>
		
</sect1>