<sect1 id="zend.controller.overview">
	<title>Overzicht</title>

	<sect2 id="zend.controller.overview.introduction">
		<title>Inleiding</title>
		<para>
			De <code>Zend_Controller</code> verstrekt de basis om een website te bouwen volgens
			het Model-View-Controller (MVC) patroon.
		</para>

		<para>
			Het <code>Zend_Controller</code> systeem is ontworpen om licht, moduleerbaar
			en uitbreidbaar te zijn. Het is een minimalistisch ontwerp om flexibiliteit en
			vrijheid aan de gebruikers te geven en tevens genoeg structuur te verstrekken
			zodanig dat alle systemen die rond <code>Zend_Controller</code> worden gebouwd dezelfde
			overeenkomsten en een gelijkaardige code lay-out delen.
		</para>

		<para>
			Het <code>Zend_Controller</code> werkschema wordt door verschillende componenten 
			geïmplementeerd. Hoewel het niet nodig is om volledig de details van al deze
			componenten te begrijpen om het systeem te gebruiken, kan een praktische kennis
			van de werkwijze zeer hulpvol zijn.

			<itemizedlist>
				<listitem>
					<para>
						<code>Zend_Controller_Front</code> orkestreert het gehele werkschema van 
						het <code>Zend_Controller</code> systeem. Het is een interpretatie van het 
						FrontController patroon.
						<code>Zend_Controller_Front</code> verwerkt alle door de server ontvangen aanvragen
						en is uiteindelijk verantwoordelijk voor het doorgeven van de aanvragen aan de
						ActionControllers (<code>Zend_Controller_Action</code>).
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Router</code> is de router. Routing is het verwerken en
						opbreken van een URI eindbestemming om vast te stellen welke controller en
						welke actie van die controller het verzoek moet behandelen. Deze definitie van
						controller, actie en optionele parameters is verpakt in een waardeobject genaamd
						<code>Zend_Controller_Dispatcher_Token</code>.
						Dit wordt dan verwerkt door de <code>Zend_Controller_Dispatcher</code>. Routing 
						gebeurt slechts één keer: wanneer het verzoek wordt ontvangen en voordat de eerste
						controller word gedispatched.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Dispatcher</code> is de dispatcher. Dispatching is
						het proces van het ontvangen van het <code>Zend_Controller_Dispatcher_Token</code>,
						het vinden van het toepassende controller bestand, het instantiëren van een 
						controller klasse in dat bestand (moet <code>Zend_Controller_Action</code>
						implementeren), en uiteindelijk de actiemethode uitvoeren in dat controller object.
						In tegenstelling tot routing, dat maar eenmaal gebeurt, 
						gebeurt dispatching in een lus. <code>Zend_Controller_Dispatcher</code> wordt 
						herhaaldelijk opgeroepen door <code>Zend_Controller_Front</code> totdat alle 
						acties in binnenkomende volgorde zijn gedispatched.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Action</code> is het basiscomponent van de controller. Elke 
						controller is een alleenstaande klasse die de <code>Zend_Controller_Action class</code>
						uitbreidt, en deze klasse heeft actiemethodes.
					</para>
				</listitem>
			</itemizedlist>

			Het werkschema van <code>Zend_Controller</code> is relatief eenvoudig. Een verzoek wordt ontvangen door
			<code>Zend_Controller_Front</code>, die op zijn beurt <code>Zend_Controller_Router</code> aanroept om
			vast te stellen welke controller (en actie in die controller) gedispatched wordt. <code>Zend_Controller_Router</code>
			breekt de URI op in een <code>Zend_Controller_Dispatcher_Token</code> object dat beschrijft waar te dispatchen.
			<code>Zend_Controller_Front</code> gaat dan in een dispatch lus. Het roept de <code>Zend_Controller_Dispatcher</code>
			op aan wie hij het token doorgeeft, om aan de uiteindelijke controller en actie te dispatchen. Nadat de
			controller dat gedaan heeft, gaat de controle terug naar <code>Zend_Controller_Front</code>. Indien de controller
			heeft aangeduid dat een andere controller gedispatched moet worden door een nieuw token terug te sturen gaat de 
			lus verder en een andere dispatch wordt afgewerkt. Zo niet, dan is de verwerking afgelopen.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Route Process</title>

		<para>
			Voordat je eerste controller kan gebouwd worden moet je begrijpen hoe het routing process werkt
			zoals het geïmplementeerd is in <code>Zend_Controller_Router</code>. Vergeet niet dat het
			werkschema opgedeeld is in routing, dat maar één keer gebeurt, en dispatching, dat daarna in
			een lus voorkomt.
		</para>

		<para>
			<code>Zend_Controller_Front</code> roept <code>Zend_Controller_Router</code> aan om een URI
			naar een controller te mappen -- en een actie binnenin die controller. <code>Zend_Controller_Router</code> 
			neemt de URI en breekt die op in een waardeobject, <code>Zend_Controller_Dispatcher_Token</code>,
			dat aan de dispatcher (<code>Zend_Controller_Dispatcher</code>) zal worden doorgegeven.
		</para>

		<para>
			De router gebruikt een zeer eenvoudige mapping om de naam van de controller en de naam van de 
			actie in de controller te determineren:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
        </programlisting>
        <para>
			Merk hierboven op dat het eerste segment altijd de naam van de controller is en het tweede
			segment altijd de naam van de actie is.
		</para>

		<para>
			Parameters mogen eventueel worden gedefinieerd in de URI die aan de controller wordt
			doorgegeven. Deze nemen de vorm aan van key/waarde-paren:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
        </programlisting>

		<para>
			Indien er niets aanwezig is in het <code>/controller/</code> deel van de URI wordt deze
			"<code>index</code>". Indien er niets aanwezig is in het <code>/action/</code> deel van
			de URI, dan wordt dit ook een "<code>index</code>". Deze voorbeelden om dit te illustreren:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Controller: roadmap
Action    : future

http://framework.zend.com/roadmap/
Controller: roadmap
Action    : index

http://framework.zend.com/
Controller: index
Action    : index]]>
        </programlisting>

		<note>
			Momenteel ontwikkelen we een nieuwe router met een URI herschrijvingsmotor die veel meer
			flexibiliteit aan de router zal geven dan nu het geval is. De nieuwe router zal aanwezig zijn
			in een preview versie in de nabije toekomst.
		</note>

		<para>
			De controller naam, de actienaam binnenin die controller en alle optionele parameters
			zijn verpakt in een token, <code>Zend_Controller_Dispatcher_Token</code>. Dit token
			wordt teruggekeerd naar <code>Zend_Controller_Front</code>, die dan in de dispatch lus
			gaat. Eenmaal in de dispatch lus wordt het token aan de <code>Zend_Controller_Dispatcher</code>
			gegeven.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatch-token">
		<title>Dispatch Token</title>

		<para>
			Het Dispatch Token is een eenvoudig waardeobject dat wordt doorgegeven tussen 
			<code>Zend_Controller_Front</code> en klassen die de router en dispatcher interfaces implementeren.
			Het verenigd de definitie van een controller, een actie en de parameters die aan de
			actie moeten worden doorgegeven.
		</para>

		<itemizedlist>
			<listitem><para>
				De naam van de controller kan verkregen en gezet worden met <code>getControllerName()</code> en <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
				De naam van de actie die moet worden opgeroepen binnenin die controller kan verkregen en gezet worden door
				<code>getActionName()</code> en <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
				Paremeters die aan de actie moeten worden doorgegeven zijn een associatieve array van key/waarden-paren
				die verkregen en gezet kunnen worden door <code>getParams()</code> en <code>setParams()</code>.
			</para></listitem>
		</itemizedlist>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Dispatch Process</title>

		<para>
			Dispatching is het process waarin een token, <code>Zend_Controller_Dispatcher_Token</code>, wordt genomen
			en de informatie die het bevat er wordt uitgehaald: een controllernaam, een actienaam en optionele
			parameters. Dan wordt de controller geïnstantieerd en de actie van die controller opgeroepen.
		</para>
	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
