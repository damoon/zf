<sect1 id="zend.config.introduction">
    <title>Inleiding</title>
    <para>
        <code>Zend_Config</code> is ontworpen om het gebruikl van configuratiedata te vereenvoudigen voor webtoepassingen.
        Het verstrekt een eigenschap-gebaseerde interface voor het lezen van configuratiedata vanuit een panel van
        verschillende bronnen die data hiërarchisch kunnen opslaan. Momenteel verstrekt <code>Zend_Config</code> 
        hulpklassen voor configuratiedata die in tekstbestanden werd opgeslaan via
        <link linkend="zend.config.classes.array"><code>Zend_Config_Array</code></link>,
        <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>, and
        <link linkend="zend.config.classes.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <para>
        <code>Zend_Config</code> ondersteunt één enkel erfenismodel. Dit model laat toe dat configuratiedata van een
        configuratiesectie in een andere configuratiesectie kan worden overgeërfd. Hoewel <code>Zend_Config</code> 
        erfenistakken van eender welke diepte ondersteunt, kan een configuratiesectie slechts van één enkele parent 
        sectie erven.
    </para>
    <para>
        Intern implementeert <code>Zend_Config</code> de Countable en Iterator interfaces om de toegang tot
        configuratiedata te vergemakkelijken. De data wordt aan <code>Zend_Config</code> doorgegeven via een
        associatieve array, dewelke multidimensioneel kan zijn. Een typische hulpklasse zoals 
        <code>Zend_Config_Ini</code> geeft deze array door aan <code>Zend_Config</code>, maar de interface
        legt je deze manier van werken niet op.
    </para>
    <note>
        Alhoewel <code>Zend_Config</code> toelaat om configuratiedata in-memory te wijzigen, is het niet ontworpen
        om het opslaan van de configuratiedata naar een specifieke media te vereenvoudigen. Werktuigen voor het
        aanmaken en wijzigen van configuratiedata naar een specifieke media zijn momenteel niet voorzien in de
        Zend Framework. Meestal zijn er third-party open source oplossingen voorhanden die voorbestemd zijn om
        configuratiedata voor verscheidene opslag media's aan te maken of te wijzigen.
    </note>
    <example>
        <title>Configuratiedata van een INI Bestand Inladen</title>
        <para>
            In dit voorbeeld gebruiken we <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>
            om configuratiedata voor een produktie environment in te laden vanuit een INI bestand:
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config(Zend_Config_Ini::load('/pad/naar/config.ini', 'productie'));
?>]]>   </programlisting>
        <para>
        Nu is de configuratiedata voorhanden vanaf de eigenschappen van het object <code>$config</code>.
        Veronderstel dat de configuratiedata database verbindingsparameters inhoud en dat de data in het INI
        bestand is opgeslaan als volgt:
        </para>
        <programlisting role="ini"><![CDATA[[production]
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname]]>
        </programlisting>
        <para>
            De toepassing zou dan een databaseverbinding tot stand kunnen brengen met:
        </para>
        <programlisting role="php"><![CDATA[<?php
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);
?>]]>   </programlisting>
        <para>
            Zoals hierboven beschreven kan de configuratiedata aangesproken worden met de object eigenschappen syntax.
        </para>
    </example>
    <para>
        We kunnen ook gemakkelijk <code>Zend_Config</code> aanpassen voor verschillende doeleinden. Hier verstrekt een
        uitbreidende klasse een publieke <code>dump()</code> methode om snel configuratiedata die is opgeslaan af te
        beelden:
    </para>
    <programlisting role="php"><![CDATA[<?php
class MyConfig extends Zend_Config
{
    protected $_indent;

    public function dump()
    {
        $this->_indent = 0;
        echo "<pre>\n";
        $this->_dumpRecursor($this);
        echo "</pre>";
    }

    protected function _dumpRecursor($config)
    {
        foreach ($config as $key => $value) {
            echo str_repeat("    ", $this->_indent) . "$key =>";
            if ($value instanceof Zend_Config) {
                echo "\n";
                $this->_indent++;
                $this->_dumpRecursor($value);
                $this->_indent--;
            } else {
                echo " $value\n";
            }
        }
    }
}

$config = new MyConfig(Zend_Config_Ini::load('/pad/naar/config.ini', 'productie'));

$config->dump();
?>]]>   </programlisting>
    <para>
        Voor de configuratiedata in het voorbeeld hierboven zou dit het volgende afbeelden:
    </para>
    <programlisting role="text"><![CDATA[<pre>
database =>
    type => pdo_mysql
    host => db.example.com
    username => dbuser
    password => secret
    name => dbname
</pre>]]>
    </programlisting>
</sect1>
<sect1 id="zend.config.classes.array">
    <title>Zend_Config_Array</title>
    <sect2 id="zend.config.classes.array.introduction">
        <title>Inleiding</title>
        <code>Zend_Config_Array</code> laat programmeurs toe om configuratiedata op te slaan in multidimensionele
        associatieve PHP arrays, die dan kunnen worden aangesproken als objecteigenschappen via 
        <code>Zend_Config</code>.
        <example>
            <title>Configuratiedata Opgeslaan in PHP Arrays</title>
            <para>
                Dit voorbeeld illustreert het basisgebruik van <code>Zend_Config_Array</code> voor het laden
                van configuratiedata vanuit PHP arrays. Eerst moeten we PHP arrays aanmaken met configuratiedata:
            </para>
            <programlisting role="php"><![CDATA[<?php
// Productiesite configuratiedata
$config['productie'] = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Ontwikkelingssite configuratiedata erft van productie en
// overschrijft waardes waar nodig
$config['staging'] = $config['productie'];
$config['staging']['webhost'] = 'dev.example.com';
$config['staging']['database']['host'] = 'dev.example.com';
$config['staging']['database']['username'] = 'devuser';
$config['staging']['database']['password'] = 'devsecret';
?>]]>       </programlisting>
            <note>
                De array met condfiguratiedata moet <code>$config</code> worden genoemd in het ingeladen PHP script.
            </note>
            <para>
                Erfenis wordt in het voorbeeld hierboven gebruikt door de waarden van de <code>productie</code> sectie
                aan de <code>staging</code> sectie toe te schrijven. Nu is het eenvoudig om de configuratiedata
                via <code>Zend_Config_Array</code> in te laden:
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';

$config = new Zend_Config(Zend_Config_Array::load('/pad/naar/config.php', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>       </programlisting>
        </example>
        <para>
            Het moet worden opgemerkt dat, vermits de configuratiedata onmiddellijk aan de PHP arrays worden
            toegevoegd, elke configuratiedatawaarde hetzelfde type zal hebben als dewelke in de
            <code>$config</code> array werd toegekend.
        </para>
        <programlisting role="php"><![CDATA[<?php
$config['staging']['debug']   = 'false'; // waarde is een string type
$config['staging']['console'] = false; // waarde is een boolean type
$config['staging']['timeout'] = 30; // waarde is een integer type
?>]]>   </programlisting>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.ini">
    <title>Zend_Config_Ini</title>
    <sect2 id="zend.config.classes.ini.introduction">
        <title>Inleiding</title>
        <code>Zend_Config_Ini</code> laat developeurs toe on configuratiedata in een gekend INI formaat op te
        slaan en ze te lezen via objecteigenschappen door middel van <code>Zend_Config</code>.
        <example>
            <title>Configuratiedata Opgeslaan in INI Bestanden</title>
            <para>
                Dit voorbeeld illustreert het basisgebruik van <code>Zend_Config_Ini</code> voor het laden
                van configuratiedata vanuit een INI bestand. Veronderstel dat we de volgende configuratiedata
                in een <code>/pad/naar/config.ini</code> bestand hebben:
            </para>
            <programlisting role="ini"><![CDATA[; Productie site configuratiedata
[productie]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Ontwikkelingssite configuratiedata erft van productiesite en
; overschrijft waardes waar nodig
[staging]
extends = productie
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]>
            </programlisting>
            <note>
                Merk op dat de syntax van het INI bestand lijkt op diegene die verwacht word door
                de <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink>
                PHP functie, die door <code>Zend_Config_Ini</code> wordt gebruikt. Kijk deze documentatie
                na om op de hoogte te zijn van het specifieke gedrag van <code>Zend_Config_Ini</code>, 
                zoals hoe de speciale waarden <code>true</code>, <code>false</code>, <code>yes</code>, 
                <code>no</code>, en <code>null</code> worden vertaald.
            </note>
            <para>
                Erfelijkheid word ondersteund in de INI syntax door het gebruik van het keywoord <code>extends</code>.
                De waarde van de <code>extends</code> key moet dezelfde zijn als de naam van de sectie waarvan de verwijzende
                sectie moet overerven. De configuratiedata wordt dan ingeladen van het INI bestand:
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config(Zend_Config_Ini::load('/pad/naar/config.ini', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>       </programlisting>
        </example>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.xml">
    <title>Zend_Config_Xml</title>
    <sect2 id="zend.config.classes.xml.introduction">
        <title>Inleiding</title>
        <code>Zend_Config_Xml</code> laat developeurs toe om configuratiedata in een eenvoudig XML formaat
        op te slaan en ze te lezen via objecteigenschappen door middel van <code>Zend_Config</code>.
        <example>
            <title>Configuratiedata Opgeslaan in XML Bestanden</title>
            <para>
                Dit voorbeeld illustreert het basisgebruik van <code>Zend_Config_Xml</code> voor het laden
                van configuratiedata vanuit een XML bestand. Veronderstel dat we de volgende configuratiedata
                in een <code>/pad/naar/config.xml</code> bestand hebben:
            </para>
            <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<config>
    <productie>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="productie">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</config>]]></programlisting>
            <para>
                Erfelijkheid word ondersteund in de XML syntax door het gebruik van het attribuut <code>extends</code>.
                De waarde van het <code>extends</code> attribuut moet dezelfde zijn als de naam van de sectie waarvan de 
                verwijzende sectie moet overerven. De configuratiedata wordt dan ingeladen van het XML bestand:
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config(Zend_Config_Xml::load('/pad/naar/config.xml', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>       </programlisting>
            <note>
                Configuratiedatawaarden van <code>Zend_Config_Xml</code> worden altijd als strings beschouwd.
            </note>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->