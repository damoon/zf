<sect1 id="zend.config.introduction">
    <title>Inleiding</title>
    <para>
        <code>Zend_Config</code> is ontworpen om het gebruikl van configuratiedata te vereenvoudigen voor webtoepassingen.
        Het verstrekt een eigenschap-gebaseerde interface voor het lezen van configuratiedata vanuit een panel van
        verschillende bronnen die data hiërarchisch kunnen opslaan. Momenteel verstrekt <code>Zend_Config</code> 
        hulpklassen voor configuratiedata die in tekstbestanden werd opgeslaan via
        <link linkend="zend.config.classes.array"><code>Zend_Config_Array</code></link>,
        <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>, and
        <link linkend="zend.config.classes.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <para>
        <code>Zend_Config</code> ondersteunt één enkel erfenismodel. Dit model laat toe dat configuratiedata van een
        configuratiesectie in een andere configuratiesectie kan worden overgeërfd. Hoewel <code>Zend_Config</code> 
        erfenistakken van eender welke diepte ondersteunt, kan een configuratiesectie slechts van één enkele parent 
        sectie erven.
    </para>
    <para>
        Intern implementeert <code>Zend_Config</code> de Countable en Iterator interfaces om de toegang tot
        configuratiedata te vergemakkelijken. De data wordt aan <code>Zend_Config</code> doorgegeven via een
        associatieve array, dewelke multidimensioneel kan zijn. Een typische hulpklasse zoals 
        <code>Zend_Config_Ini</code> geeft deze array door aan <code>Zend_Config</code>, maar de interface
        legt je deze manier van werken niet op.
    </para>
    <note>
        Alhoewel <code>Zend_Config</code> toelaat om configuratiedata in-memory te wijzigen, is het niet ontworpen
        om het opslaan van de configuratiedata naar een specifieke media te vereenvoudigen. Werktuigen voor het
        aanmaken en wijzigen van configuratiedata naar een specifieke media zijn momenteel niet voorzien in de
        Zend Framework. Meestal zijn er third-party open source oplossingen voorhanden die voorbestemd zijn om
        configuratiedata voor verscheidene opslag media's aan te maken of te wijzigen.
    </note>
    <example>
        <title>Configuratiedata van een INI Bestand Inladen</title>
        <para>
            In dit voorbeeld gebruiken we <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>
            om configuratiedata voor een produktie environment in te laden vanuit een INI bestand:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config(Zend_Config_Ini::load('/pad/naar/config.ini', 'productie'));
?>]]>       </programlisting>
            Nu is de configuratiedata voorhanden vanaf de eigenschappen van het object <code>$config</code>.
            Veronderstel dat de configuratiedata database verbindingsparameters inhoud en dat de data in het INI
            bestand is opgeslaan als volgt:
            <programlisting role="ini"><![CDATA[[production]
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname]]>
            </programlisting>
            De toepassing zou dan een databaseverbinding tot stand kunnen brengen met:
            <programlisting role="php"><![CDATA[<?php
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);
?>]]>       </programlisting>
            Zoals hierboven beschreven kan de configuratiedata aangesproken worden met de object eigenschappen syntax.
       </para>
    </example>
    <para>
        We kunnen ook gemakkelijk <code>Zend_Config</code> aanpassen voor verschillende doeleinden. Hier verstrekt een
        uitbreidende klasse een publieke <code>dump()</code> methode om snel configuratiedata die is opgeslaan af te
        beelden:
        <programlisting role="php"><![CDATA[<?php
class MyConfig extends Zend_Config
{
    protected $_indent;

    public function dump()
    {
        $this->_indent = 0;
        echo "<pre>\n";
        $this->_dumpRecursor($this);
        echo "</pre>";
    }

    protected function _dumpRecursor($config)
    {
        foreach ($config as $key => $value) {
            echo str_repeat("    ", $this->_indent) . "$key =>";
            if ($value instanceof Zend_Config) {
                echo "\n";
                $this->_indent++;
                $this->_dumpRecursor($value);
                $this->_indent--;
            } else {
                echo " $value\n";
            }
        }
    }
}

$config = new MyConfig(Zend_Config_Ini::load('/pad/naar/config.ini', 'productie'));

$config->dump();
?>]]>   </programlisting>
        Voor de configuratiedata in het voorbeeld hierboven zou dit het volgende afbeelden:
        <programlisting role="text"><![CDATA[<pre>
database =>
    type => pdo_mysql
    host => db.example.com
    username => dbuser
    password => secret
    name => dbname
</pre>]]>
        </programlisting>
    </para>
</sect1>
<sect1 id="zend.config.classes.array">
    <title>Zend_Config_Array</title>
    <sect2 id="zend.config.classes.array.introduction">
        <title>Inleiding</title>
        <code>Zend_Config_Array</code> laat programmeurs toe om configuratiedata op te slaan in multidimensionele
        associatieve PHP arrays, die dan kunnen worden aangesproken als objecteigenschappen via 
        <code>Zend_Config</code>.
        <example>
            <title>Configuration Data Stored in PHP Arrays</title>
            <para>
                This example illustrates a basic use of <code>Zend_Config_Array</code> for loading configuration
                data from PHP arrays. First, we need to create PHP arrays having the configuration data:
                <programlisting role="php"><![CDATA[<?php
// Production site configuration data
$config['production'] = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Staging site configuration data inherits from production and
// overrides values as necessary
$config['staging'] = $config['production'];
$config['staging']['webhost'] = 'dev.example.com';
$config['staging']['database']['host'] = 'dev.example.com';
$config['staging']['database']['username'] = 'devuser';
$config['staging']['database']['password'] = 'devsecret';
?>]]>           </programlisting>
                <note>
                    The configuration data array must be named <code>$config</code> in the loaded PHP script.
                </note>
                Inheritance is supported in the example above with an assignment of <code>production</code> section
                values to the <code>staging</code> section. Now it is a simple matter to load the configuration
                data with <code>Zend_Config_Array</code>:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';

$config = new Zend_Config(Zend_Config_Array::load('/path/to/config.php', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>           </programlisting>
            </para>
        </example>
        <para>
            It is noteworthy that because the configuration data are directly added to PHP arrays, each
            configuration data value has the same data type as given in the PHP script containing the
            <code>$config</code> array.
            <programlisting role="php"><![CDATA[<?php
$config['staging']['debug']   = 'false'; // value has string type
$config['staging']['console'] = false; // value of boolean type
$config['staging']['timeout'] = 30; // value of integer type
?>]]>       </programlisting>
        </para>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.ini">
    <title>Zend_Config_Ini</title>
    <sect2 id="zend.config.classes.ini.introduction">
        <title>Introduction</title>
        <code>Zend_Config_Ini</code> enables developers to store configuration data in a familiar INI format and
        read them via object properties through <code>Zend_Config</code>.
        <example>
            <title>Configuration Data Stored in INI Files</title>
            <para>
                This example illustrates a basic use of <code>Zend_Config_Ini</code> for loading configuration
                data from an INI file. Suppose we have the following configuration data in
                <code>/path/to/config.ini</code>:
                <programlisting role="ini"><![CDATA[; Production site configuration data
[production]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Staging site configuration data inherits from production and
; overrides values as necessary
[staging]
extends = production
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]>
                </programlisting>
                <note>
                    Notice that the syntax of the INI file resembles that expected by the
                    <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink>
                    PHP function, which <code>Zend_Config_Ini</code> utilizes. Please review this documentation to
                    be aware of the specific behavior of <code>Zend_Config_Ini</code>, such as how the special
                    values of <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, and
                    <code>null</code> are translated.
                </note>
                Inheritance is supported in the INI syntax by using the keyword <code>extends</code>. The value of the <code>extends</code> key should be the name of the section from which the extending section is to inherit. The configuration data are then loaded from the INI file:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>           </programlisting>
            </para>
        </example>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.xml">
    <title>Zend_Config_Xml</title>
    <sect2 id="zend.config.classes.xml.introduction">
        <title>Introduction</title>
        <code>Zend_Config_Xml</code> enables developers to store configuration data in a simple XML format and
        read them via object properties through <code>Zend_Config</code>.
        <example>
            <title>Configuration Data Stored in XML Files</title>
            <para>
                This example illustrates a basic use of <code>Zend_Config_Xml</code> for loading configuration
                data from an XML file. Suppose we have the following configuration data in
                <code>/path/to/config.xml</code>:
                <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<config>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="production">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</config>]]>    </programlisting>
                Inheritance is supported in the XML syntax by using the <code>extends</code> attribute. The value of the <code>extends</code> attribute should be the name of the section from which the extending section is to inherit. The configuration data are then loaded from the XML file:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config(Zend_Config_Xml::load('/path/to/config.xml', 'staging'));

echo $config->database->host; // prints "dev.example.com"
?>]]>           </programlisting>
            </para>
            <note>
                Configuration data values from <code>Zend_Config_Xml</code> are always treated as strings.
            </note>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->