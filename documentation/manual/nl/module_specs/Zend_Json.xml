<sect1 id="zend.json.introduction">
    <title>Inleiding</title>
    <para>
        <code>Zend_Json</code> verstrekt gemakkelijke methodes om bron PHP naar 
		het JSON formaat te serializeren et JSON te decoderen naar bron PHP. Voor
		meer informatie over JSON kan je terecht op 
		<ulink url="http://www.json.org/">de webstek van het JSON projekt</ulink>.
    </para>
    <para>
		JSON, JavaScript Object Notation, kan gebruikt worden als een lichtgewicht
		data transporteur tussen javascript en andere programmeertalen. Vermits
		JSON onmiddellijk in Javascript kan worden geÃ«valueerd is het een ideaal
		formaat om te gebruiken met Web 2.0 interfaces; het is een eenvoudiger
		alternatief dan XML voor AJAX interfaces.
    </para>
</sect1>

<sect1 id="zend.json.basics">
    <title>Basisgebruik</title>
    <para>
		Het gebruik van <code>Zend_Json</code> impliceert het gebruik van de
		volgende twee publiek voorhanden methodes: <code>Zend_Json::encode()</code> 
		en <code>Zend_Json::decode()</code>. 
        <programlisting role="php"><![CDATA[<?php
// Een waarde bekomen:
$phpNative = Zend_Json::decode($encodedValue);

// Encodering om het terug naar de klant te sturen:
$json = Zend_Json::encode($phpNative);
?>]]></programlisting>
    </para>
</sect1>

<sect1 id="zend.json.objects">
    <title>JSON Objekten</title>
    <para>
		Wanneer je PHP objekten als JSON encodeerd zullen alle publieke
		eigenschappen van dat objekt naar JSON objekten worden gecodeerd.
    </para>
    <para>
		Het decoderen van JSON objekten houdt weliswaar een klein probleempje in,
		vermits Javascript objekten heel dicht tegen PHP associatieve arrays
		aanleunen. Sommigen suggereren dat een klasse identificator zou moeten
		doorgespeeld worden, en een objekt instantie van die klasse zou moeten
		worden gebouwd en bevolkt met de key/waarde-paren van het JSON objekt;
		anderen denken dat dit een potentieel groot veiligheidsrisico inhoudt.
    </para>
    <para>
		<code>Zend_Json</code> zal JSON objekten standaard als associatieve arrays
		decoderen. Als je liever een objekt terugkrijgt, kan je dit zo opvragen:
        <programlisting role="php"><![CDATA[<?php
// Decodeer objekten als objekten
$phpNative = Zend_Json::decode($encodedValue, Zend_Json::TYPE_OBJECT);
?>]]></programlisting>
		Alle zo gedecodeerde objekten worden teruggestuurd als <code>StdClass</code> 
		objekten met eigenschappen die overeenkomen met de key/waarde-paren in de JSON
		notatie.
    </para>
    <para>
		De aanbeveling van de Zend Framework is dat de developpeur individueel
		zou moeten beslissen hoe hij JSON objekten gedecodeerd wil hebben.
		Indien een objekt van een bepaald type zou moeten worden gemaakt, kan dat
		worden gemaakt in de code van de developpeur en bevolkt worden met de
		waarden die <code>Zend_Json</code> heeft gedecodeerd.
    </para>
</sect1>
        
<!--
vim:se ts=4 sw=4 et:
-->
