<sect1 id="zend.controller.rewriterouter.introduction">
    <title>Introductie</title>
	<para>
		Zend_Controller_RewriteRouter is een nieuwe versie van de framework router. Routing is het process waarbij een URI wordt genomen en uit elkaar wordt gehaald om te bepalen welke controller en action van deze controller de request dient te krijgen. Deze definitie van controller, action en optionele parameters wordt verpakt in een waardenobject genaamd Zend_Controller_Dispatcher_Token, welke wordt afgehandeld door de Zend_Controller_Dispatcher. Routing gebeurt eenmalig: Wanneer de request wordt ontvangen, alvorens de eerste controller wordt aangesproken.
	</para>
	<para>
		Zend_Controller_RewriteRouter is ontworpen om mod_rewrite-achtige functionaliteit te ondersteunen gebruik makend van pure php structuren. Het is losjes gebaseerd op Ruby on Rails routing en vereist geen bestaande kennis van webserver URL rewriting. Het is ontworpen om te werken met een enkele mod_rewrite regel (een van de volgende):
	</para>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1	]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.usage">
	<title>Een router gebruiken</title>

	<para>
		Om een RewriteRouter juist te kunnen gebruiken dien je het te instantieren, een aantal routes te definieren en het in de controller te injecteren. De volgende code illustreert de procedure:
	</para>

	<programlisting role="php"><![CDATA[
/* -- maak een nieuwe router -- */

$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user', 'action' => 'info'));

/* -- geef de router aan de controller door -- */

$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.basic">
	<title>Basis Routes</title>

	<para>
		Het hart van de RewriteRouter is de definitie van de routes. Routes worden aangemaakt door het aanroepen van de addRoute methode van RewriteRouter:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', 'user/:username');]]></programlisting>

	<para>
		De eerste parameter is de naam van de route. Deze is op het moment van schrijven niet nodig maar zal in de toekomst gebruikt worden in een URL view helper om het mogelijk te maken makkelijk URLs te genereren in je views. Indien je een al gedefinieerde route wilt hergebruiken, kan je deze met de getRoute methode van de RewriteRouter verkrijgen.
	</para>

	<para>
		De tweede parameter is een route dat door de URL kan worden gebruikt - bijvoorbeeld, de bovenstaande route kan worden gebruikt als: <code>http://example.com/user/martel</code>. De dubbele punt in een route markeert een URL variabele welke toegankelijk zal zijn via een Zend_Controller_Action::_getParam methode. In ons voorbeeld wordt een enkele parameter genaamd username gezet naar een waarde 'martel'.
	</para>

	<note>
		Routes worden gematched in omgekeerde volgorde, zorg dus dat de meest generieke routes als eerste worden gedefinieerd.
	</note>

	<note>
		De huidige implementatie staat het gebruik van alle karakters toe behalve de slash (/) in variabele identifiers maar het wordt sterk aangeraden om alleen php vriendelijke karakters te gebruiken. In toekomstige implementaties zal dit waarschijnlijk worden aangepast, wat bugs kan introduceren in je code.
	</note>

	<para>
		Er zijn twee speciale variabelen die in de routes kunnen worden gebruikt - 'controller' en 'action'. Deze speciale variabelen zullen worden gebruikt om een controller en/of een action te vinden binnen een URL. De 'action' variabele moet altijd worden gedefinieerd in ofwel de route of als een standaard parameter. De 'controller' variabele zal standaard de IndexController zijn wanneer hij niet gedefinieerd is.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', ':controller/:action');]]></programlisting>

	<para>
		Wanneer je je browser wijst naar 'http://example.com/news/latest' met deze route gedefinieerd zal Zend_Controller_Dispatcher de latestAction van de NewsController aanroepen.
	</para>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-defaults">
	<title>Variabele standaarden</title>

	<para>
		Elke variabele in de route kan een standaard waarde hebben. Om deze in te stellen moet je een derde parameter aan de addRoute methode doorgeven. Deze derde parameter is een array met keys als variabele namen en waardes als de gewenste standaardwaarde.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006));]]></programlisting>
	<para>
		What mogelijk niet direct zichtbaar is, is dat de bovenstaande route URL's zal matchen zoals 'http://example.com/archive/2005' en 'http://example.com/archive'. In het laatste geval zal de variabele year een waarde hebben van 2005.
	</para>

	<para>
		In het bovenstaande voorbeeld hebben we geen controller gezet dus zal het altijd resulteren in een noRoute action van de IndexController. Om het bruikbaar te maken dien je een valide controller en een valide action als standaard in te stellen:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show'));]]></programlisting>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-requirements">
	<title>Variabele eisen</title>

	<para>
		Men kan ook een vierde parameter toevoegen waar eisen aan de variabelen in kunnen worden aangegeven. Deze worden gedefinieerd als reguliere expressies:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006), array('year' => '\d+'));]]></programlisting>

	<note>
		In tegenstelling tot Ruby on Rails zal de ZF RewriteRouter een route matchen en de standaard waarde gebruiken wanneer niet aan een variabele eis wordt voldaan. Dus de URL 'http://example.com/archive/test' zal de bovenstaande route matchen en year op 2006 zetten. Deze functionaliteit kan in de toekomst nog worden aangepast, er worden nog discussies over gevoerd op het moment van het schrijven van deze documentatie.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.rewritebase">
	<title>Basis URL en subdirectories</title>

	<para>
		In tegenstelling tot de originele Router kan RewriteRouter gebruikt worden in subdirectories - het zal automatisch de basis URL herkennen en deze ook instellen. Bijvoorbeeld: Als je je <code>index.php</code> in een webserver subdirectory zet genaamd <code>/projecten/mijnapp/index.php</code> zal de 'rewrite base' (basis URL) worden ingesteld op <code>/projecten/mijnapp</code>. Deze string zal dan worden verwijderd van het begin van het pad alvorens de route matches te calculeren. Hierdoor is het niet meer nodig om de string voor al je routes te plakken. De route <code>'user/:username'</code> zal hierdoor matchen aan URIs als 
		<code>http://localhost/projecten/mijnapp/user/martel</code> en <code>http://example.com/user/martel</code>.
	</para>

	<note>
		Automatische rewrite bases is hoofdletter-afhankelijk, dus zorg ervoor dat je URL exact hetzelfde is als de subdirectory naam in je bestandssysteem (zelfs op Windows machines). Wanneer dit niet zo is, zal je een noRoute action krijgen.
	</note>

	<para>
		In het geval dat de rewrite basis verkeerd wordt herkend kan je het overschrijven met je eigen basis pad met behulp van de setRewriteBase methode van de RewriteRouter class:
	</para>

	<programlisting role="php"><![CDATA[
$router->setRewriteBase('/projecten/mijnapp');]]></programlisting>

	<note>
		Deze stap zal in de meeste gevallen niet noodzakelijk zijn en wordt sterk ontraden omdat het een nieuwe configuratie variabele introduceert die moet worden aangepast als de code verplaatst wordt naar een andere directory configuratie.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.default-routes">
	<title>Standaard routes</title>

	<para>
		Zend_Controller_RewriteRouter wordt voorgeconfigureerd met twee standaard routes. De eerste handelt je root URL af en is gekoppeld aan de indexAction van IndexController: Deze dien je aan te geven zoals omschreven in 
		<xref linkend="zend.controller.getting-started" />
		(Zie <xref linkend="zend.controller.overview.indexcontroller" />).
		De tweede standaard route is meegeleverd om compatibiliteit te leveren voor de eerste versie van de router. Het zal URIs matchen in de vorm van <code>'controller/action'</code>.
	</para>

	<para>
		Standaard regels worden geconfigureerd op de volgende manier:
	</para>

	<programlisting role="php"><![CDATA[
// Standaard route voor root URL
$this->addRoute('default', '', array('controller' => 'index', 'action' => 'index'));

// Route voor Router v1 compatibiliteit
$this->addRoute('compat', ':controller/:action', array('controller' => 'index', 'action' => 'index'));]]></programlisting>

	<note>
		Ondanks dat Zend_Controller_RewriteRouter is geconfigureerd voor achterwaardse compatibiliteit zal het op dit moment nog geen <code>controller/action</code> URIs matchen met extra parameters.
	</note>

</sect1>
