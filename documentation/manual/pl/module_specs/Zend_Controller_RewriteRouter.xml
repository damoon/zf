<sect1 id="zend.controller.rewriterouter.introduction">
    <title>Wprowadzenie</title>
	<para>
		Zend_Controller_RewriteRouter jest nową wersją routera we frameworku. Routing jest
		procesem pobrania adresu URI i rozłożenia go w celu ustalenia jaki kontroler
		i jaka akcja powinny otrzymać żądanie. Ta informacja o kontrolerze, akcji
		i opcjonalnych parametrach jest pakowana do obiektu zwanego Zend_Controller_Dispatcher_Token,
		który jest potem przetwarzany przez Zend_Controller_Dispatcher. Routing ma
		miejsce tylko raz: wtedy gdy żądanie jest po raz pierwszy otrzymane, przed 
		wywołaniem pierwszego kontrolera.
	</para>
	<para>
		Zend_Controller_RewriteRouter jest zaprojektowany w celu uzyskania w czystym
		PHP takiej funkcjonalności jak w mod_rewrite. Jest to luźno wzorowane
		na routingu Ruby on Rails i nie wymaga żadnej wiedzy o przepisywaniu adresów
		przez serwer www. Jest to zaprojektowane w taki sposób, aby działało po dodaniu
		tylko jednej reguły mod_rewrite (jednej z poniższych):
	</para>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1	]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.usage">
	<title>Użycie routera</title>

	<para>
		Aby prawidłowo użyć RewriteRoutera musisz utworzyć jego instancję, zdefiniować
		jakieś trasy i przekazać ten obiekt do kontrolera. Poniższy kod
		pokazuje tą procedurę:
	</para>

	<programlisting role="php"><![CDATA[
/* -- tworzymy router -- */

$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user', 'action' => 'info'));

/* -- przekazujemy do kontrolera -- */

$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.basic">
	<title>Podstawowe trasy</title>

	<para>
		Sercem RewriteRoutera jest definicja tras określonych przez użytkownika.
		Trasy są tworzone przez wywołanie metody addRoute obiektu RewriteRouter:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', 'user/:username');]]></programlisting>

	<para>
		Pierwszy parametr jest nazwą trasy. Obecnie nie jest konieczne jego definiowanie,
		jednak będzie on używany w przyszłości w klasie pomocniczej widoku ułatwiającej
		łatwe generowanie adresów URL. Jeśli chcesz użyć wcześniej skonfigurowanej
		trasy, możesz ją odebrać za pomocą metody getRoute RewriteRoutera.
	</para>

	<para>
		Drugi parametr jest trasą która będzie dopasowana do URL - na przykład, 
		powyższa trasa zostanie dopasowana do adresu <code>http://example.com/user/martel</code>. 
		Dwukropek w trasie oznacza zmienną z URL która będzie dostępna za pomocą metody 
		Zend_Controller_Action::_getParam. W naszym przykładzie nasz parametr 
		o nazwie username otrzyma wartość 'martel'.
	</para>

	<note>
		Trasy są dopasowywane w odwrotnej kolejności więc musisz pamiętać żeby
		podstawowe trasy były zdefiniowane na początku.
	</note>

	<note>
		Teraz obecna implementacja pozwala na użycie w nazwie zmiennej dowolnych znaków
		z wyjątkiem ukośnika (/), ale jest mocno zalecane używanie jedynie znaków,
		które są bezproblemowo obsługiwane ptzrz PHP. W przyszłości implementacja
		prawdopodobnie zostanie zmodyfikowana co mogłoby wprowadzić do twojego kodu błędy.
	</note>

	<para>
		Są dwie specjalne zmienne które nie mogą być użyte w twoich trasach - 
		'controller' oraz 'action'. Te specjalne zmienne będą użyte aby znaleść
		kotroler oraz akcję w danym adresie URL. Zmienna 'action' zawsze musi być
		zdefiniowana w trasie lub jako domyślny parametr. Zmienna 'controller' 
		będzie domyślnie ustawiona na IndexController jeśli nie będzie zdefiniowana.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', ':controller/:action');]]></programlisting>

	<para>
		Jeśli skierujesz przeglądarkę na adres 'http://example.com/news/latest' ze
		zdefiniowaną powyższą trasą Zend_Controller_Dispatcher odwoła się do akcji
		latestAction z kontrolera NewsController.
	</para>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-defaults">
	<title>Domyślne wartości zmiennych</title>

	<para>
		Każda zmienna w trasie może mieć wartość domyślną. Aby to zrobić,
		musisz przekazać trzeci parametr do metody addRoute. Ten trzeci parametr 
		jest tablicą z nazwami zmiennych jako kluczami i z wartościami, które mają
		być uznane za domyślne.
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006));]]></programlisting>
	<para>
	     Może nie jest wyraźnie widoczne to, że powyższa trasa dopasuje adresy URL
	     takie jak 'http://example.com/archive/2005' oraz 'http://example.com/archive'. 
	     Ostatecznie zmienna year i tak będzie miała wartość 2006.
	</para>

	<para>
		W powyższym przykładzie nie ustawiliśmy kontrolera więc spowoduje to zawsze
		wywołanie akcji noRoute z kontrolera IndexController. Aby było to użyteczne,
		musisz zadeklarować poprawny domyślny kontroler oraz akcję:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show'));]]></programlisting>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-requirements">
	<title>Wymagania zmiennych</title>

	<para>
		Można dodać czwarty parametr w którym będą ustawione wymagania zmiennych.
		Są one zdefiniowane jako wyrażenia regularne:
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006), array('year' => '\d+'));]]></programlisting>

	<note>
		W przeciwieństwie do Ruby on Rails, RewriteRouter z ZF dopasuje trasę i użyje 
		domyślnej gdy czwarty parametr zawierający wymagania zmiennych nie zostanie 
		znaleziony. Więc adres URL 'http://example.com/archive/test' zostanie 
		dopasowany do powyższej trasy, a rok zostanie ustawiony na 2006. Ta 
		funkcjonalność może w przyszłości się zmienić, ponieważ w momencie pisania 
		tej dokumentacji ta kwestia jest jeszcze uzgadniana.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.rewritebase">
	<title>Bazowy adres URL i podkatalogi</title>

	<para>
		W przeciwieństwie do oryginalnego routera, RewriteRouter może być użyty w
		podkatalogach - automatycznie wykrywa twój bazowy adres URL i odpowiednio
		go ustawia. Na przykład: jeśli twój plik <code>index.php</code> jest umieszczony
		na serwerze www w podkatalogu nazwanym <code>/projects/myapp/index.php</code> 
		bazowy adres URL zostanie ustawiony na <code>/projects/myapp</code>. Ten
		łańcuch znaków będzie wycięty z początku ścieżki przed dopasowaniem tras.
        To uwalnia od konieczności dodawania bazowej ścieżki do wszystkich tras.
		Trasa <code>'user/:username'</code> zostanie dopasowana
		do adresów URI <code>http://localhost/projects/myapp/user/martel</code> 
		oraz <code>http://example.com/user/martel</code>.
	</para>

	<note>
	    W automatycznym bazowym adresie URL rozróżniane są wielkie i małe litery,
	    więc upewnij się, że twój adres URL będzie odpowiadał nazwie podkatalogu
	    w systemie plików (nawet na komputerach z Windows). Jeśli nie będzie
	    to zostanie wywołana akcja noRoute.
	</note>

	<para>
	    Jeśli bazowy adres URL jest wykrywany nieprawidłowo, możesz go nadpisać
	    własną ścieżką bazową za pomocą metody setRewriteBase z klasy RewriteRouter:
	</para>

	<programlisting role="php"><![CDATA[
$router->setRewriteBase('/projects/myapp');]]></programlisting>

	<note>
	    Ten krok nie jest konieczny w większości przypadków i jest mocno odradzany,
	    ponieważ wprowadza kolejną zmienną konfiguracyjną, która musi być zmieniona
	    gdy ktoś przeniesie kod do innego katalogu.
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.default-routes">
	<title>Domyślne trasy</title>

	<para>
		Zend_Controller_RewriteRouter jest wstępnie skonfigurowany z dwoma domyślnymi
		trasami. Pierwsza obsługuje twój główny adres URL i jest zmapowana na
		akcję indexAction kontrolera IndexController: musisz więc zadeklarować
		je jak napisano w <xref linkend="zend.controller.getting-started" />
		(zobacz <xref linkend="zend.controller.overview.indexcontroller" />).
		Druga domyślna trasa jest dołączona aby zapewnić kompatybilność z pierwszą
		wersją routera. Dopasuje ona adresy URI w postaci <code>'controller/action'</code>.
	</para>

	<para>
		Domyślne trasy są skonfigurowane jako:
	</para>

	<programlisting role="php"><![CDATA[
// Domyślna trasa dla bazowego URL
$this->addRoute('default', '', array('controller' => 'index', 'action' => 'index'));

// Trasa kompatybilna z pierwszą wersja routera
$this->addRoute('compat', ':controller/:action', array('controller' => 'index', 'action' => 'index'));]]></programlisting>

	<note>
		Zend_Controller_RewriteRouter jest skonfigurowany w taki sposób aby był kompatybilny
		wstecz, ale jednak na razie nie obsługuje adresów URI <code>controller/action</code> 
		z dodatkowymi parametrami.
	</note>

</sect1>
