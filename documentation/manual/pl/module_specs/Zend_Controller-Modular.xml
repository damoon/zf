<sect1 id="zend.controller.modular">
    <title>Użycie konwencjonalnej modularnej struktury katalogów</title>

	<sect2 id="zend.controller.modular.introduction">
		<title>Wprowadzenie</title>
        <para>
            Konwencjonalna modularna struktura katalogów pozwala ci na 
            oddzielenie różnych aplikacji MVC w osobne jednostki i użycie ich
            z różnymi kontrolerami frontowymi. Przykładem może być taka 
            struktura katalogów:
        </para>

        <programlisting role="php"><![CDATA[
docroot/
    index.php
application/
    controllers/
        IndexController.php
        FooController.php
    blog/
        controllers/
            IndexController.php
        models/
        views/
    news/
        controllers/
            IndexController.php
            ListController.php
        models/
        views/
]]></programlisting>
        
        <para>
            W tym modelu, nazwa modułu uwidacznia się jako przedrostek nazw 
            kontrolerów, ktore zawiera moduł. Powyższy przykład zawiera trzy
            kontrolery modułów, 'Blog_IndexController', 'News_IndexController',
            oraz 'News_ListController'. Dwa globalne kontrolery, 'IndexController'
            oraz 'FooController' są także zdefiniowane; żaden z nich nie posiada
            własnej przestrzeni nazw. Ta struktura katalogów będzie używana w 
            przykładach w tym rozdziale.
        </para>

        <para>
            Więc jak implementujesz taką strukturę katalogów używając 
            komponentów MVC Zend Framework?
        </para>
    </sect2>

    <sect2 id="zend.controller.modular.directories">
        <title>Określanie ścieżek kontrolera modułów</title>

        <para>
            Pierwszym krokiem użycia modułów jest zmodyfikowanie sposobu 
            określania listy ścieżek do kontrolerów w kontrolerze frontowym.
            W podstawowej wersji MVC, przekazujesz tablicę lub łańcuch znaków
            do metody setControllerDirectory(), lub ścieżkę do metody 
            addControllerDirectory(). Gdy używasz modułów, musisz także 
            odpowiednio zmienić wywołania tych metod.
        </para>

        <para>
            W metodzie setControllerDirectory(), musisz przekazać tablicę 
            asocjacyjną i określić pary klucz/wartość w postaci 
            moduł/ścieżka. Specjalny klucz 'default' będzie użyty dla globalnych 
            kontrolerów (tych, które nie potrzebują przestrzeni nazw). Wszystkie 
            wpisy powinny zawierać łańcuch znaków wskazujący na pojedyncza 
            ścieżkę. Na przykład:
        </para>

        <programlisting role="php"><![CDATA[
$front->setControllerDirectory(array(
      'default' => '/path/to/application/controllers',
      'blog'    => '/path/to/application/blog/controllers'
));
]]></programlisting>

        <para>
            Metoda addControllerDirectory() przyjmuje opcjonalny drugi argument.
            Gdy używasz modułów, przekaż nazwę modułu jak drugi argument; jeśli
            nie określisz drugiego argumentu, ścieżka zostanie dodana dla 
            domyślnej przestrzeni nazw. Na przykład:
        </para>

        <programlisting role="php"><![CDATA[
$front->addControllerDirectory('/path/to/application/news/controllers', 'news');
]]></programlisting>
    </sect2>

    <sect2 id="zend.controller.modular.router">
        <title>Dopasowanie tras do modułów</title>

        <para>
            Domyślna trasa w
            <code>Zend_Controller_Router_Rewrite</code> jest obiektem typu
            <code>Zend_Controller_Router_Route_Module</code>. Ta trasa obsługuje
            takie schematy routingu:
        </para>

        <itemizedlist>
            <listitem><para><code>:module/:controller/:action/*</code></para></listitem>
            <listitem><para><code>:controller/:action/*</code></para></listitem>
        </itemizedlist>

        <para>
            Innymi słowy, dopasuje ona tylko kontroler oraz akcję, lub wraz
            z poprzedzającym je modułem. Zasady dopasowania określają, że
            moduł będzie dopasowany tylko wtedy, gdy klucz o takiej samej nazwie
            istnieje w tablicy ze ścieżkami kontrolerów przekazanej do kontrolera
            frontowego i obiektu uruchamiającego.
        </para>

    </sect2>

    <sect2 id="zend.controller.modular.defaultcontroller">
        <title>Moduł lub globalny domyślny kontroler</title>

        <para>
            W domyślnym routerze jeśli w URL nie został określony kontroler, 
            użyty zostanie domyślny kontroler (<code>IndexController</code>, 
            jeśli nie określono inaczej). Gdy używamy kontrolerów modularnych, 
            jeśli moduł został określony, ale kontroler nie, obiekt 
            uruchamiający wpierw będzie szukał domyślnego kontrolera w ścieżce 
            modułu, a w drugiej kolejności będzie szukał w ścieżce dla domyślnej 
            globalnej przestrzeni nazw 'default'.
        </para>

        <para>
            Jeśli chcesz zawsze używać domyślnej przestrzeni nazw, ustaw 
            parametr <code>useGlobalDefault</code> w kontrolerze frontowym:
        </para>

        <programlisting role="php"><![CDATA[
$front->setParam('useGlobalDefault', true);
]]></programlisting>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
