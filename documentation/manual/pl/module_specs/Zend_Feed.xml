<sect1 id="zend.feed.introduction">
    <title>Wprowadzenie</title>
    <para>
        <code>Zend_Feed</code> zapewnia funkcjonalność umożliwiającą przetwarzanie
        kanałów informacyjnych RSS oraz Atom. Zapewnia ona naturalną składnię umożliwiającą
        dostęp do elementów kanałów informacyjnych, ich atrybutów oraz atrybutów samych wpisów.
        <code>Zend_Feed</code> daje także obszerne wsparcie w modyfikowaniu kanałów
        i struktury wpisów w ten sam naturalny sposób i umożliwia zapisanie rezultatów
        jako XML. W przyszłości klasa ma zapewnić obsługę protokołu publikowania Atom
        (Atom Publishing Protocol).
    </para>

    <para>
        Programowo <code>Zend_Feed</code> składa się z bazowej klasy <code>Zend_Feed</code>,
        abstrakcyjnych klas <code>Zend_Feed_Abstract</code> oraz <code>Zend_Feed_EntryAbstract</code> 
        reprezentujących kanały informacyjne i ich wpisy, specyficznych implementacji
        kanałów i wpisów dla RSS i Atom, oraz z pomocników odpowiedzialnych za 
        naturalną składnię.
    </para>

    <para>
        W przykładzie poniżej pokazujemy prosty przykład odbierania danych RSS
        i zapisywania potrzebnych części danych kanału do prostej tablicy PHP,
        która może być potem użyta do wyświetlenia danych, zapisania ich do bazy
        danych itp.
    </para>

    <note>
        Wiele kanałów RSS ma dostępne różne właściwości samego kanału i jego elementów.
        Specyfikacja RSS umożliwia użycie wielu opcjonalnych parametrów, więc
        bądź ostrożny gdy będziesz pisał kod pracujący z RSS.
    </note>

    <example>
        <title>Użycie Zend_Feed do pobierania danych RSS</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Feed.php';

// Ściągamy najnowsze nagłówki ze Slashdot
try {
    $slashdotRss = Zend_Feed::import('http://rss.slashdot.org/Slashdot/slashdot');
} catch (Zend_Feed_Exception $e) {
    // importowanie danych nie udało się
    echo "Exception caught importing feed: {$e->getMessage()}\n";
    exit;
}

// inicjalizacja tablicy z danymi kanału
$channel = array(
    'title'       => $slashdotRss->title(),
    'link'        => $slashdotRss->link(),
    'description' => $slashdotRss->description(),
    'items'       => array()
    );

// Pętla po każdym elemencie kanału i zapisanie potrzebnych danych
foreach ($slashdotRss as $item) {
    $channel['items'][] = array(
        'title'       => $item->title(),
        'link'        => $item->link(),
        'description' => $item->description()
        );
}

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.importing">
    <title>Importowanie kanałów informacyjnych za pomocą Zend_Feed</title>
    <para>
        <code>Zend_Feed</code> pozwala programistom bardzo łatwo odbierać wiadomości
        z kanałów informacyjnych. Jeśli znasz adres URI kanału, w prosty sposób
        użyj metody <code>Zend_Feed::import()</code>:
        <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]>   </programlisting>
    </para>
    <para>
        Możesz także użyć <code>Zend_Feed</code> do pobrania zawartości kanału
        z pliku lub z łańcucha znaków PHP:
        <programlisting role="php"><![CDATA[
<?php

// importowanie kanału z pliku tekstowego
$feedFromFile = Zend_Feed::importFile('feed.xml');

// importowanie kanału z łańcucha znaków PHP
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
    </para>
    <para>
        We wszystkich powyższych przykładach w razie powodzenia operacji zwracany
        jest obiekt klasy rozszerzającej <code>Zend_Feed_Abstract</code>, zależenie
        od typu kanału. Jeśli zostały odebrane dane RSS za pomocą jednej z powyższych
        metod importu, wtedy będzie zwrócony obiekt <code>Zend_Feed_Rss</code>. 
        Z drugiej strony, gdy będą importowane dane kanału Atom, zwrócony zostanie
        obiekt <code>Zend_Feed_Atom</code>. Metody importu w razie niepowodzenia
        wyrzucają wyjątek <code>Zend_Feed_Exception</code>, czyli na przykład wtedy
        gdy nie jest możliwe odczytanie kanału lub gdy dane są błędne.
    </para>
</sect1>

<sect1 id="zend.feed.findFeeds">
    <title>Odbieranie kanałów informacyjnych ze stron internetowych</title>
    <para>
        Strony internetowe często zawierają tagi <code>&lt;link&gt;</code>, które
        odwołują się do kanałów informacyjnych odpowiadających danej stronie.
        <code>Zend_Feed</code> pozwala odebrać wszystkie kanały informacyjne 
        do których odwołuje się dana strona za pomocą wywołania prostej metody:
        <programlisting role="php"><![CDATA[
<?php

$feedArray = Zend_Feed::findFeeds('http://www.example.com/news.html');

?>]]></programlisting>
        Tutaj metoda <code>findFeeds()</code> zwraca tablicę obiektów <code>Zend_Feed_Abstract</code>
        do których na stronie news.html są odniesienia w postaci <code>&lt;link&gt;</code>. Zależenie
        od typu każdego z kanałów, każdy z wpisów w tablicy <code>$feedArray</code> może być
        instancją obiektu <code>Zend_Feed_Rss</code> lub <code>Zend_Feed_Atom</code>. <code>Zend_Feed</code> wyrzucu
        wyjątek <code>Zend_Feed_Exception</code> w razie niepowodzenia, na przykład gdy otrzyma
        w odpowiedzi kod HTTP 404 lub gdy dane kanału będą nieprawidłowe.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-rss">
    <title>Odbieranie danych z kanału informacyjnego RSS</title>
    <para>
        Odczytywanie kanału RSS jest tak proste jak utworzenie obiektu <code>Zend_Feed_Rss</code> z adresem
        URL kanału przekazanym do konstruktora:
        <programlisting role="php"><![CDATA[
<?php

$channel = new Zend_Feed_Rss('http://rss.example.com/channelName');

?>]]></programlisting>
        Jeśli wystąpi jakiś błąd podczas obróbki danych pochodzących z kanału, 
        zostanie wyrzucony wyjątek <code>Zend_Feed_Exception</code>.
    </para>

    <para>
        Kiedy już masz obiekt kanału informacyjnego, możesz łatwo uzyskać dostęp
        do standardowych właściwości kanału RSS bezpośrednio na obiekcie:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->title();

?>]]></programlisting>
        Zwróć uwagę na składnie funkcji. <code>Zend_Feed</code> używa konwencji 
        traktującej właściwości jak obiekt XML gdy próbujemy uzyskać do nich dostęp
        za pomocą składni "getter" (<code>$obj->property</code>) i jako łańcuch
        znaków gdy próbujemy uzyskać dostęp jak do metody (<code>$obj->property()</code>). 
        To pozwala na pełny dostęp do danych tekstowych przy jednoczesnym dostępie
        do wszystkich niższych składników.
    </para>

    <para>
        Jeśli właściwości kanału mają atrybuty, są one dostępne przy użyciu składni
        tablic PHP:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->category['domain'];

?>]]></programlisting>
        Since XML attributes cannot have children, method syntax is not necessary for accessing attribute
        values.
    </para>

    <para>
        Najczęściej będziesz chciał przejść pętlą po danych kanału i zrobić coś
        z jego wpisami. Klasa <code>Zend_Feed_Abstract</code> implementuje wbudowany
        w PHP interfejs <code>Iterator</code>, więc wyświetlenie wszystkich tytułów
        artykułów z kanału jest bardzo proste:
        <programlisting role="php"><![CDATA[
<?php

foreach ($channel as $item) {
    echo $item->title() . "\n";
}

?>]]></programlisting>
        Jeśli nie jesteś obeznany z RSS, poniżej znajdziesz opis podstawowych
        składników, które możesz znaleść w kanale RSS i w jego indywidualnych
        elementach (wpisach).
    </para>

    <para>
        Wymagane składniki kanału:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Nazwa kanału</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Adres URL strony internetowej odpowiadającej kanałowi</para>
            </listitem>
            <listitem>
                <para><code>description</code> - Opis kanału</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Opcjonalne składniki kanału:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>pubDate</code> - Data publikacji zawartości, format RFC 822 format</para>
            </listitem>
            <listitem>
                <para><code>language</code> - Język kanału</para>
            </listitem>
            <listitem>
                <para><code>category</code> - Jedna lub więcej kategorii do których należy kanał</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Elementy RSS <code>&lt;item&gt;</code> nie mają wymaganych składników,
        jednak albo składnik <code>title</code> albo <code>description</code> musi
        istnieć w elemencie.
    </para>

    <para>
        Składniki elementu kanału:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Tytuł elementu</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Adres URL elementu</para>
            </listitem>
            <listitem>
                <para><code>description</code> - Opis elementu</para>
            </listitem>
            <listitem>
                <para><code>author</code> - Adres email autora elementu</para>
            </listitem>
            <listitem>
                <para><code>category</code> - Jedna lub więcej kategorii do których należy element</para>
            </listitem>
            <listitem>
                <para><code>comments</code> - Adres URL komentarzy do tego elementu</para>
            </listitem>
            <listitem>
                <para><code>pubDate</code> - Data publikacji elementu, w formacie RFC 822</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        W twoim kodzie zawsze możesz sprawdzić czy element nie jest pusty za pomocą:
        <programlisting role="php"><![CDATA[
<?php

if ($item->propname()) {
    // ... kontynuuj.
}

?>]]></programlisting>
    </para>

    <para>
        Jeśli zamiast tego użyjesz <code>$item->propname</code>, zawsze dostaniesz
        pusty obiekt który zostanie skonwertowany do wartości <code>TRUE</code>, 
        więc test zawiedzie.
    </para>

    <para>
        Więcej informacji dostępnych jest w oficjalnej specyfikacji RSS 2.0:
        <ulink url="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</ulink>
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom">
<title>Odbieranie danych z kanału informacyjnego Atom</title>

    <para>
        <code>Zend_Feed_Atom</code> jest używany w prawie taki sam sposób jak
        <code>Zend_Feed_Rss</code>. Zapewnia taki sam dostęp do właściwości samego
        kanału i taką samą iterację po wpisach w kanale. Główną różnicą jest sama
        struktura protokołu Atom. Atom jest następcą RSS; jest bardziej uogólnionym
        protokołem i jest zaprojektowany aby łatwiej radzić sobie z kanałami, które
        ukazują cała swoją zawartość wewnątrz pliku RSS dzieląc standardowy tag
        RSS <code>description</code> na dwa elementy, <code>summary</code> oraz 
        <code>content</code>.
    </para>

    <example>
        <title>Podstawowe użycie kanału Atom</title>
        <para>
            Odczytywanie kanału Atom i wyświetlenie pól <code>title</code> i 
            <code>summary</code> dla każdego z wpisów:
        </para>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/');
echo 'Kanał zawiera ' . $feed->count() . ' wpisów.' . "\n\n";
foreach ($feed as $entry) {
    echo 'Tytuł: ' . $entry->title() . "\n";
    echo 'Opis: ' . $entry->summary() . "\n\n";
}

?>]]>   </programlisting>
    </example>

    <para>
        W kanałach Atom możesz się spodziewać następujących właściwości:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Tytuł kanału, taki sam jak tytuł kanału RSS.</para>
            </listitem>
            <listitem>
                <para><code>id</code> - Każdy arkusz i wpis mają unikalny identyfikator.</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Arkusze mogą mieć wiele odnośników, które
                są rozróżnianie za pomocą atrybutu <code>type</code>.</para>
                <para>
                    Odpowiednikiem odnośnika kanału RSS byłby odnośnik o typie 
                    <code>type="text/html"</code>. Jeśli odnośnik kieruje do
                    alternatywnej wersji zawartości arkusza, może on otrzymać
                    atrybut <code>rel="alternate"</code>.
                </para>
            </listitem>
            <listitem>
                <para><code>subtitle</code> - Opis arkusza odpowiadający opisowi
                kanału RSS.
                </para>
                <para><code>author->name()</code> - Nazwa autora arkusza.</para>
                <para><code>author->email()</code> - Adres email autora arkusza.</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Składniki wpisu kanału Atom:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>id</code> - Unikalny identyfikator wpisu.</para>
            </listitem>
            <listitem>
                <para><code>title</code> - Tytuł wpisu, taki sam jak tytuł w RSS</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Odnośnik do innego formatu lub do 
                alternatywnej wersji wpisu.</para>
            </listitem>
            <listitem>
                <para><code>summary</code> - Podsumowanie zawartości wpisu.</para>
            </listitem>
            <listitem>
                <para><code>content</code> - Cała zawartość wpisu; może być pominięta
                jeśli arkusz zawiera tylko skróty informacji.</para>
            </listitem>
            <listitem>
                <para><code>author</code> - z pod-tagami <code>name</code> oraz 
                <code>email</code> jak w arkuszach RSS</para>
            </listitem>
            <listitem>
                <para><code>published</code> - data publikacji wpisu w formacie 
                RFC 3339.</para>
            </listitem>
            <listitem>
                <para><code>updated</code> - data ostatniej aktualizacji wpisu w 
                formacie RFC 3339.</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Więcej informacji o Atom znajdziesz na stronie
        <ulink url="http://www.atomenabled.org/">http://www.atomenabled.org/</ulink>.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom-single-entry">
    <title>Consuming a Single Atom Entry</title>

    <para>
        Single Atom <code>&lt;entry&gt;</code> elements are also valid by themselves. Usually the URL for an
        entry is the feed's URL followed by <code>/&lt;entryId&gt;</code>, such as
        <code>http://atom.example.com/feed/1</code>, using the example URL we used above.
    </para>

    <para>
        If you read a single entry, you will still have a <code>Zend_Feed_Atom</code> object, but it will
        automatically create an "anonymous" feed to contain the entry.
    </para>

    <example>
        <title>Reading a Single-Entry Atom Feed</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
echo 'The feed has: ' . $feed->count() . ' entry.';

$entry = $feed->current();

?>]]>   </programlisting>
    </example>

    <para>
        Alternatively, you could instantiate the entry object directly if you know you are accessing an
        <code>&lt;entry&gt;</code>-only document:
    </para>

    <example>
        <title>Using the Entry Object Directly for a Single-Entry Atom Feed</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom('http://atom.example.com/feed/1');
echo $entry->title();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.modifying-feed">
    <title>Modifying Feed and Entry structures</title>

    <para>
        <code>Zend_Feed</code>'s natural syntax extends to constructing and modifying feeds and entries as well
        as reading them. You can easily turn your new or modified objects back into well-formed XML for saving
        to a file or sending to a server.
    </para>

    <example>
        <title>Modifying an Existing Feed Entry</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = 'This is a new title';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
            This will output a full (includes <code>&lt;?xml ... &gt;</code> prologue) XML representation of the
            new entry, including any necessary XML namespaces.
        </para>
        <para>
            Note that the above will work even if the existing entry does not already have an author tag. You can
            use as many levels of <code>-&gt;</code> access as you like before getting to an assignment; all of the
            intervening levels will be created for you automatically if necessary.
        </para>
    </example>

    <para>
        If you want to use a namespace other than <code>atom:</code>, <code>rss:</code>, or <code>osrss:</code>
        in your entry, you need to register the namespace with <code>Zend_Feed</code> using <code>
        Zend_Feed::registerNamespace()</code>. When you are modifying an existing element, it will always
        maintain its original namespace. When adding a new element, it will go into the default namespace if
        you do not explicitly specify another namespace.
    </para>

    <example>
        <title>Creating an Atom Entry with Elements of Custom Namespaces</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom();
// id is always assigned by the server in Atom
$entry->title = 'my custom entry';
$entry->author->name = 'Example Author';
$entry->author->email = 'me@example.com';

// Now do the custom part.
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'my first custom value';
$entry->{'myns:container_elt'}->part1 = 'first nested custom part';
$entry->{'myns:container_elt'}->part2 = 'second nested custom part';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.custom-feed">
    <title>Custom Feed and Entry Classes</title>

    <para>
        Finally, you can extend the <code>Zend_Feed</code> classes if you'd like to provide your own format or
        niceties like automatic handling of elements that should go into a custom namespace.
    </para>

    <para>
        Here is an example of a custom Atom entry class that handles its own <code>myns:</code> namespace
        entries. Note that it also makes the <code>registerNamespace()</code> call for you, so the end user
        doesn't need to worry about namespaces at all.
    </para>

    <example>
        <title>Extending the Atom Entry Class with Custom Namespaces</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * The custom entry class automatically knows the feed URI (optional) and
 * can automatically add extra namespaces.
 */
class MyEntry extends Zend_Feed_EntryAtom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // Translate myUpdated to myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // Translate myUpdated to myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
            Then to use this class, you'd just instantiate it directly and set the <code>myUpdated</code>
            property:
            <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>       </programlisting>
        </para>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->