<sect1 id="zend.loader.load">

    <title>Dynamiczne ładowanie plików i klas</title>

    <para>
        Klasa Zend_Loader zawiera metody pomagające ci w dynamicznym ładowaniu 
        plików.
    </para>

    <tip>
        <title>Zend_Loader vs. require_once()</title>
        <para>
            The Zend_Loader methods are best used if the filename you need to
            load is variable.  For example, if it is based on a parameter from
            user input or method argument.  If you are loading a file or a
            class whose name is constant, there is no benefit to using
            Zend_Loader over using traditional PHP functions such as
            <ulink url="http://php.net/require_once"><code>require_once()</code></ulink>.
        </para>
    </tip>

    <sect2 id="zend.loader.load.file">

        <title>Ładowanie plików</title>

        <para>
            Statyczna metoda <code>Zend_Loader::loadFile()</code> ładuje plik 
            PHP. Ładowany plik może zawierać dowolny kod PHP. Ta metoda używa
            funkcji PHP
            <ulink url="http://php.net/include"><code>include()</code></ulink>.
            Metoda ta wyrzuca wyjątek <code>Zend_Exception</code> w przypadku
            niepowodzenia, na przykład gdy dany plik nie istnieje.
        </para>

        <example id="zend.loader.file.example">
            <title>Przykład użycia metody loadFile()</title>
            <programlisting role="php"><![CDATA[<?php

Zend_Loader::loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>
    </example>

        <para>
            The <code>$filename</code> argument specifies the filename to load,
            which must not contain any path information.
            A security check is performed on <code>$filename</code>.
            The <code>$filename</code> may only contain alphanumeric characters,
            dashes ("-"), underscores ("_"), or periods (".").
            No such restriction is placed on the <code>$dirs</code> argument.
        </para>

        <para>
            The <code>$dirs</code> argument specifies directories to search for
            the file.  If <code>NULL</code>, only the <code>include_path</code>
            is searched.  If a string or an array, the directory or directories
            specified will be searched, and then the <code>include_path</code>.
        </para>

        <para>
            Argument <code>$once</code> jest zmienną logiczną. Jeśli ma wartość
            <code>TRUE</code>, to metoda <code>Zend_Loader::loadFile()</code> 
            używa do ładowania pliku funkcji PHP 
            <ulink url="http://php.net/include"><code>include_once()</code></ulink>, 
            w przeciwnym wypadku używa funkcji PHP
            <ulink url="http://php.net/include_once"><code>include()</code></ulink>.
        </para>

    </sect2>

    <sect2 id="zend.loader.load.class">

        <title>Ładowanie klas</title>

        <para>
            Statyczna metoda <code>Zend_Loader::loadClass($class, $dirs)</code>
            ładuje plik PHP, a następnie sprawdza czy dana klasa istnieje.
        </para>

        <example id="zend.loader.class.example">
            <title>Przykład użycia metody loadClass()</title>
            <programlisting role="php"><![CDATA[<?php

Zend_Loader::loadClass('Container_Tree',
    array(
        '/home/production/mylib',
        '/home/production/myapp'
    )
);

?>]]></programlisting>
        </example>

        <para>
            The string specifying the class is converted to a relative path
            by substituting directory separates for underscores, and appending
            '.php'.  In the example above, 'Container_Tree' becomes 'Container/Tree.php'.
        </para>

        <para>
            If <code>$dirs</code> is a string or an array,
            <code>Zend_Loader::loadClass()</code> searches the directories in
            the order supplied.  The first matching file is loaded.  If the file
            does not exist in the specified <code>$dirs</code>, then the
            include_path for the PHP environment is searched.
        </para>

        <para>
            Jeśli plik nie zostanie znaleziony lub po załadowaniu pliku klasa
            nie istnieje, metoda <code>Zend_Loader::loadClass()</code> wyrzuca
            wyjątek Zend_Exception.
        </para>

        <para>
            <code>Zend_Loader::loadFile()</code> is used for loading, so the
            class name may only contain alphanumeric characters and the hyphen
            ('-'), underscore ('_'), and period ('.').
        </para>

    </sect2>

    <sect2 id="zend.loader.load.isreadable">

        <title>Testing if a File is Readable</title>

        <para>
            The static method <code>Zend_Loader::isReadable($pathname)</code>
            returns <code>TRUE</code> if a file at the specified pathname exists
            and is readable, FALSE otherwise.
        </para>

        <example id="zend.loader.isreadable.example">
            <title>Przykład użycia metody isReadable()</title>
            <programlisting role="php"><![CDATA[<?php

if (Zend_Loader::isReadable($filename)) {
    // zrób coś z $filename
}

?>]]></programlisting>
        </example>

        <para>
            The <code>$filename</code> argument specifies the filename to
            check.  This may contain path information.
            This method is a wrapper for the PHP function
            <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>.
            The PHP function does not search the <code>include_path</code>,
            while <code>Zend_Loader::isReadable()</code> does.
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
