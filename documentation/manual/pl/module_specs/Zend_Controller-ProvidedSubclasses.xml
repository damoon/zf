<sect1 id="zend.controller.providedsubclasses">
    <title>Dostępne podklasy</title>

    <sect2 id="zend.controller.providedsubclasses.introduction">
        <title>Wprowadzenie</title>

        <para>
            Zend Framework zapewnia kilka alternatyw dla domyślnych klas,
            włączając w to alternatywne obiekty żądania, routery oraz obiekty
            odpowiedzi.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.request.http">
        <title>Zend_Controller_Request_Http</title>

        <sect3 id="zend.controller.providedsubclasses.request.http.introduction">
            <title>Wprowadzenie</title>

            <para>
                <code>Zend_Controller_Request_Http</code> zapewnia obiekt 
                żądania do użycia w środowisku HTTP. Klasa  
                <code>Zend_Controller_Request_Http</code> jest domyślną klasą
                żądania używaną przez <code>Zend_Controller_Dispatcher</code>.
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.dataaccess">
            <title>Dostęp do danych żądania</title>

            <para>
                <code>Zend_Controller_Request_Http</code> obudowuje dostęp
                do odpowiednich wartości takich jak nazwa klucza i wartość
                dla zmiennych kontrolera i akcji routera, oraz do dodatkowych
                parametrów pobranych z adresu URI. Rozszerzając
                <code>Zend_Controller_Request_Http</code> dodatkowo pozwala na 
                uzyskanie dostępu do wartości zawartych w superglobalnych 
                tablicach jako do publicznych właściwości obiektu i zarządza 
                obecnym bazowym adresem URL oraz adresem URL żądania. 
                Superglobalne wartości nie mogą być ustawione w obiekcie 
                żądania, zamiast tego użyj metod setParam/getParam aby ustawić 
                lub odebrać parametry użytkownika.
            </para>

            <note>
                <title>Dane superglobalne</title>
                <para>
                    Kiedy uzyskujemy dostęp do danych superglobalnych za pomocą
                    klasy <code>Zend_Controller_Request_Http</code> jak do jej 
                    publicznych właściwości, ważne jest aby pamiętać, że nazwa właściwości 
                    (klucz tablicy superglobalnej) jest dopasowana do superglobalnych 
                    w określonej kolejności: 1. GET, 2. POST, 3. COOKIE, 4. SERVER, 5. ENV.
                </para>
            </note>

            <para>
                Konkretne zmienne superglobalne mogą być alternatywnie dostępne 
                za pomocą publicznej metody. Na przykład, wartość 
                <code>$_POST['user']</code> może być dostępna przez wywołanie 
                metody <code>getPost('user')</code> na obiekcie żądania.
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.baseurl">
            <title>Bazowy Url oraz podkatalogi</title>

            <para>
                Klasa <code>Zend_Controller_Request_Http</code> pozwala na użycie 
                klasy Zend_Controller_Router_Rewrite w podkatalogach. 
                Zend_Controller_Request_Http spróbuje automatycznie wykryć twój 
                bazowy adres URL i ustawi go odpowiednio.
            </para>

            <para>
                Na przykład jeśli twój plik <code>index.php</code> jest w
                podkatalogu nazwanym <code>/projects/myapp/index.php</code>, 
                bazowy URL (bazowy adres przepisania) powinien być ustawiony na
                <code>/projects/myapp</code>. Ten łańcuch znaków zostanie 
                obcięty z początu ścieżki zanim będą dopasowane jakiekolwiek trasy.
                To zwalnia z konieczności dołączania tego adresu do każdej z tras. 
                Trasa <code>'user/:username'</code> dopasuje adresy URI takie
                jak <code>http://localhost/projects/myapp/user/martel</code> oraz
                <code>http://example.com/user/martel</code>.
            </para>

            <note>
                <title>Detekcja URL jest wrażliwa na małe i duże litery</title>
                <para>
                    Automatyczna detekcja adresów URL jest wrażliwa na małe i duże
                    litery, więc upewnij się, że adres URL zostanie dobrze dopasowany
                    do nazwy podkatalogu w systemie plików (nawet w systemie 
                    Windows). Jeśli nie zostanie, zostanie wywołana akcja noRoute.
                </para>
            </note>

            <para>
                Jeśli bazowy adres URL jest wykrywany nieprawidłowo, możesz
                go nadpisać w obiekcie Zend_Http_Request wywołując metodę
                <code>setBaseUrl()</code> lub tą samą metodę klasy
                <code>Zend_Controller_Request_Http</code> lub klasy
                <code>Zend_Controller_Front</code>. Najłatwiejszy sposób
                to ustawienie tego w klasie <code>Zend_Controller_Front</code>, 
                która przekaże to do obiektu żądania. Przykładowe użycie
                ustawiania własnego bazowego adresu URL:
            </para>

            <programlisting role="php"><![CDATA[
/** 
 * Uruchom żądanie z własnym bazowym URL za pomocą Zend_Controller_Front.
 */
$router     = new Zend_Controller_Router_Rewrite();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // ustaw bazowy URL!
$response   = $controller->dispatch();]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.rewriterouter">
        <title>Zend_Controller_Router_Rewrite</title>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.introduction">
            <title>Wprowadzenie</title>
            <para>
                <code>Zend_Controller_Router_Rewrite</code> jest standardowym
                routerem we frameworku. Routing jest procesem pobrania adresu 
                URI i rozłożenia go w celu ustalenia jaki kontroler i jaka akcja 
                powinny otrzymać żądanie. Ta informacja o kontrolerze, akcji i 
                opcjonalnych parametrach jest pakowana do obiektu 
                <code>Zend_Controller_Request_Http</code>, który jest potem 
                przetwarzany przez <code>Zend_Controller_Dispatcher_Standard</code>. 
                Routing ma miejsce tylko raz: wtedy gdy żądanie jest po raz 
                pierwszy otrzymane, przed wywołaniem pierwszego kontrolera.
            </para>

            <para>
                <code>Zend_Controller_Router_Rewrite</code> jest zaprojektowany w 
                celu uzyskania w czystym PHP takiej funkcjonalności jak w 
                mod_rewrite. Jest to luźno wzorowane na routingu Ruby on Rails i 
                nie wymaga żadnej wiedzy o przepisywaniu adresów przez serwer 
                www. Jest to zaprojektowane w taki sposób, aby działało po 
                dodaniu tylko jednej reguły mod_rewrite (jednej z poniższych):
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

            <para>
            lub:
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>
            
            <para>
                Rewrite router może być także użyty z serwerem IIS, jeśli moduł
                <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink>
                jest zainstalowany jako rozszerzenie Isapi, z taką regułą 
                przepisywania:
            </para>

            <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

            <note>
                <title>IIS Isapi_Rewrite</title>
                <para>
                    Jeśli używasz serwera IIS, to wartość 
                    <code>$_SERVER['REQUEST_URI']</code> nie istnieje lub jest 
                    pustym łańcuchem znaków. W takim wypadku, 
                    <code>Zend_Controller_Request_Http</code> spróbuje użyć wartości 
                    <code>$_SERVER['HTTP_X_REWRITE_URL']</code> ustawionej przez 
                    rozszerzenie Isapi_Rewrite.
                </para>
            </note>

            <para>Jeśli używasz serwera Lighttpd, poniższa reguła jest prawidłowa:</para>

            <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.usage">
            <title>Użycie routera</title>

            <para>
                Aby prawidłowo użyć rewrite routera musisz utworzyć jego 
                instancję, zdefiniować jakieś trasy i przekazać ten obiekt do 
                kontrolera. Poniższy kod pokazuje tą procedurę:
            </para>

            <programlisting role="php"><![CDATA[
/* Utwórz router */

$router = $ctrl->getRouter(); // domyślnie zwraca rewrite router
$router->addRoute(
	'user',
	new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.basic">
            <title>Podstawowe operacje RewriteRoutera</title>

            <para>
                Sercem RewriteRoutera jest definicja tras zdefiniowanych przez
                użytkownika. Trasy są dodawane przez wywołanie metody addRoute 
                RewriteRoutera i przekazanie do niej nowej instancji 
                klasy implementującej interfejs
                <code>Zend_Controller_Router_Route_Interface</code>. Np.:
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

            <para>
                RewriteRouter posiada cztery podstawowe typy tras (z których 
                jedna jeest specjalna): 
            </para>

            <itemizedlist mark="opencircle">
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.standard-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.static-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.regex-routes" /></para></listitem>
                <listitem><para><xref linkend="zend.controller.providedsubclasses.rewriterouter.default-routes" /> *</para></listitem>
            </itemizedlist>
            
            <para>
                Routes may be used numerous times to create a chain or user 
                defined application routing schema. 
                
                You may use any number of routes in any configuration, with the 
                exception of Module route which should rather be used once and 
                probably as the most generic route (ie. as a default). 
                
                Każdy typ tras zostanie szerzej opisany w dalszej części 
                rozdziału.
            </para>

            <para>
                Pierwszy parametr do metody addRoute jest nazwą trasy. Jest on
                używany do obsługi pobierania tras z routera np. w celu
                wygenerowania URL. Drugi parametr jest samą trasą.
            </para>

            <note>
                <para>
                    The most common use of the route name is through the means 
                    of Zend_View url helper:
                </para>
                    
                <programlisting role="php"><![CDATA[
<a href="<?= $this->url('user', array('username' => 'martel')) ?>">Martel</a>]]></programlisting>

                <para>
                    Co spowoduje utworzenie łącza: <code>user/martel</code>
                </para>

            </note>

            <para>
                Routing is a simple process of iterating through all provided 
                routes and matching it's definitions to current request URI. 

                When a positive match is found, variable values are returned 
                from the Route instance and are injected into 
                Zend_Controller_Request object for later use in dispatcher as 
                well as in user created controllers. 
                
                On a negative match next route in chain is checked.
            </para>

            <note>
                <title>Odwrotne dopasowanie</title>
                <para>
                    Trasy są dopasowane w odwrotnej kolejności, więc upewnij się,
                    że najbardziej podstawowe trasy są zdefiniowane na początku.
                </para>
            </note>

            <note>
                <title>Zwracane wartości</title>
                <para>
                    Wartości zwracane przez proces routingu pochodzą z parametrów
                    URL lub z domyślnych wartości zmiennych zdefiniowanych w trasach.
                    Te zmiene są później dostępne za pomocą metod 
                    Zend_Controller_Request::getParam oraz 
                    Zend_Controller_Action::_getParam.
                </para>
            </note>

            <para>
                Są trzy specjalne zmienne, ktorych możesz użyć w swoich trasach
                 - 'module', 'controller' oraz 'action'. Te specjalne zmienne są
                 używane przez obiekt Zend_Controller_Dispatcher w celu 
                 znalezienia kontrolera i akcji do uruchomienia.
            </para>

            <note>
                <title>Specjalne zmienne</title>
                <para>
                    Nazwy tych specjalnych zmiennych moga być inne jeśli
                    zdecydujesz się zmienić domyślne wartości w obiekcie
                    <code>Zend_Controller_Request_Http</code> za pomocą metod
                    setControllerKey oraz setActionKey.
                </para>
            </note>

        </sect3>
        
        <sect3 id="zend.controller.providedsubclasses.rewriterouter.default-routes">
            <title>Domyślne trasy</title>

            <para>
                Zend_Controller_Router_Rewrite comes preconfigured with a 
                default route, which will match URIs in the shape of 
                <code>controller/action</code>. 
                
                Additionally, a module name may be specified as the first path 
                element, allowing URIs of the form <code>module/controller/action</code>. 
                
                Finally, it will also match any additional parameters appended to the URI by 
                default - <code>controller/action/var1/value1/var2/value2</code>.
            </para>

            <para>
                Kilka przykładów dopasowania tras:
            </para>

            <programlisting role="php"><![CDATA[
// Zakładamy poniższe:
$ctrl->setControllerDirectory(
    array(
        'default' => '/path/to/default/controllers',
        'news'    => '/path/to/blog/controllers',
        'blog'    => '/path/to/blog/controllers'
    )
);

Tylko moduł:
http://example/news
    module == news

Nieprawidłowy moduł mapuje do nazwy kontrolera:
http://example/foo
    controller == foo

Moduł oraz kontroler:
http://example/blog/archive
    module     == blog
    controller == archive

Moduł, kontroler oraz akcja:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

Moduł, kontroler, akcja oraz parametry:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]></programlisting>

            <para>
                Domyślna trasa jest po prostu obiektem 
                <code>Zend_Controller_Router_Route_Module</code> przechowywanym 
                pod nazwą 'default' w RewriteRouterze. Jest ona utworzona mniej
                więcej w taki sposób:
            </para>

            <programlisting role="php"><![CDATA[
$compat = new Zend_Controller_Router_Route_Module(array(), $dispatcher, $request);
$this->addRoute('default', $compat);]]></programlisting>

            <para>
                Jeśli nie chcesz mieć takiej domyślnej trasy w swoim schemacie
                routingu, możesz nadpisać ją tworząc własną domyślną trasę 
                (np. zapisując ją pod nazwą 'default') lub usuwając tę trasę
                używając metody <code>removeDefaultRoutes()</code>:
            </para>

            <programlisting role="php"><![CDATA[
// Usuwamy domyślne trasy
$router->removeDefaultRoutes();]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.rewritebase">
            <title>Bazowy URL i podkatalogi</title>

            <para>
                The rewrite router can be used in subdirectories (eg. 
                <code>http://domain.com/~user/application-root/</code>>) in 
                which case the base URL of the application 
                (<code>/~user/application-root</code>) should be automatically 
                detected by <code>Zend_Controller_Request_Http</code> and used 
                accordingly.
            </para>

            <para>
                Should the base URL be detected incorrectly you can override it
                with your own base path with the help of 
                <code>Zend_Controller_Request_Http</code> by calling the 
                <code>setBaseUrl()</code> method (see 
                <xref linkend="zend.controller.providedsubclasses.request.http.baseurl" />):
            </para>

            <programlisting role="php"><![CDATA[
$request->setBaseUrl(/~user/application-root/);]]></programlisting>

        </sect3>
        
        <sect3 id="zend.controller.providedsubclasses.rewriterouter.standard-routes">
            <title>Zend_Controller_Router_Route</title>
            
            <para>
            <code>Zend_Controller_Router_Route</code> is a standard framework 
            route which combines ease of use with flexible route definition. 
            Each route consists primarily of URL mapping (of static and dynamic 
            parts (variables)) and may be initialized with defaults as well as 
            with variable requirements.
            </para>
            
            <para>
                Let's imagine our fictional application will need some 
                informational page about the content authors. We want to be able 
                to point our web browsers to 
                <code>http://domain.com/author/martel</code> to see the 
                information about this "martel" guy. And route for such 
                functionality could look like:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'author/:username', 
             array('controller' => 'profile', 'action' => 'userinfo')
         );

$router->addRoute('user', $route);]]></programlisting>            

            <para>
                First parameter in the
                <code>Zend_Controller_Router_Route</code>
                constructor is a route definition that will be matched to a URL. 
                Route definition consists of static and dynamic parts separated 
                by the slash ('/') character. Dynamic parts, called variables,
                are marked by the colon prepended to the variable name (eg. 
                <code>:username</code>). Static parts are just a simple text 
                (eg. <code>author</code>).
            </para>

            <note>
                <title>Użycie znaków</title>
                <para>
                    Current implementation allows you to use any
                    characters (except a slash) as a variable identifier but it is
                    strongly recommended that one uses only php variable friendly
                    characters. Implementation may be altered in the future which 
                    could result in hidden bugs in your code.
                </para>
            </note>

            <para>
                This example route should be matched when you point your browser to 
                <code>'http://domain.com/author/martel'</code> in which case all it's 
                variables will be injected to the <code>Zend_Controller_Request</code> object
                and will be accessible in your ProfileController. Variables returned by 
                this example may be represented as an array of following key 
                and value pairs:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'username' => 'martel',
  'controller' => 'profile',
  'action' => 'userinfo'
);]]></programlisting>            

            <para>
                Later on <code>Zend_Controller_Dispatcher</code> should invoke 
                userinfoAction method of your ProfileController class (in 
                default module) based on these values. There you will be able to 
                access all variables by the means of 
                Zend_Controller_Action::_getParam or 
                Zend_Controller_Request::getParam methods:
            </para>
            
            <programlisting role="php"><![CDATA[
public function userinfoAction() 
{
    $request = $this->getRequest();
    $username = $request->getParam('username');
    
    $username = $this->_getParam('username');
}
]]></programlisting>    

            <para>
                Route definition can contain one more special character - a 
                wildcard - represented by '*' symbol. It is used to gather 
                parameters similarly to Module route (var => value pairs defined 
                in the URI). Following route mimicks Module route behavior:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(':controller/:action/*');
$router->addRoute('default', $route);]]></programlisting>            
            

        <sect4 id="zend.controller.providedsubclasses.rewriterouter.variable-defaults">
            <title>Domyślne wartości zmiennych</title>

            <para>
                Every variable in the route can have a default and this is what 
                the second parameter of the 
                <code>Zend_Controller_Router_Route</code> constructor is used 
                for. This parameter is an array with keys representing variable 
                names and with values as desired defaults:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                Above route will match URLs like <code>'http://domain.com/archive/2005'</code> and
                <code>'http://example.com/archive'</code>. In the latter case the variable
                year will have an initial default value of 2006.
            </para>

            <para>
                This example will result in injecting a year variable to the 
                request object. And since no routing information is present (no 
                controller and action parameters are defined) application will 
                be dispatched to default controller and action method (which are 
                both defined in <code>Zend_Controller_Dispatcher_Abstract</code>). 
                To make it more usable you have to provide a valid controller and 
                a valid action as route's defaults:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006, 
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                Taka trasa spowoduje uruchomienie akcji showAction z kontrolera
                ArchiveController.
            </para>

        </sect4>

        <sect4 id="zend.controller.providedsubclasses.rewriterouter.variable-requirements">
            <title>Wymagania zmiennych</title>

            <para>
                One can add a third parameter to the <code>Zend_Controller_Router_Route</code>
                constructor where variable requirements may be set. These are defined 
                as parts of a regular expression:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
             'archive/:year', 
             array(
                 'year' => 2006, 
                 'controller' => 'archive',
                 'action' => 'show'
             ),
             array('year' => '\d+')
         );
$router->addRoute('archive', $route);]]></programlisting>

        </sect4>

        <para>
            With route defined like above, Rewrite Router will match it 
            only when the year variable will contain numeric data, eg. 
            <code>http://domain.com/archive/2345</code>. URL of 
            <code>http://example.com/archive/test</code> will not be matched 
            and control will be passed to the next route in chain instead.
        </para>

        </sect3>        

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.static-routes">
            <title>Zend_Controller_Router_Route_Static</title>

            <para>
                The examples above all use dynamic routes -- routes that contain
                patterns to match against. Sometimes, however, a particular
                route is set in stone, and firing up the regular expression
                engine would be an overkill. The answer to this situation is to use
                static routes:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Static(
             'login', 
             array('controller' => 'auth', 'action' => 'login')
         );
$router->addRoute('login', $route);]]></programlisting>

        <para>
            Powyższa trasa dopasuje URL <code>http://domain.com/login</code>
        </para>
        
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.regex-routes">
            <title>Zend_Controller_Router_Route_Regex</title>

            <para>
                In addition to the default and static route types, a Regular
                Expression route type is available. This route offers more power
                and flexibility over the others, but at a slight cost of
                complexity. And should be faster than a standard Route at the same time.
            </para>

            <para>
                As well as the standard route, this route has to be initialized with 
                route definition and some defaults. Let's create an archive route as 
                an example, similar to the previoulsy defined one, only using Regex 
                route this time:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array(
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>
            
            <para>
                Every defined regex subpattern will be injected 
                to the request object. With our above example, after successful matching 
                <code>http://domain.com/archive/2006</code>, the resulting value array 
                may look like:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  1 => '2006',
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <note>
                <para>
                    Leading and trailing slashes are trimmed from the URL in the Router 
                    prior to a match. As a result, matching the URL <code>http://domain.com/foo/bar/</code>,
                    would involve a regex of <code>foo/bar</code>.
                </para>
            </note>

            <note>
                <para>
                    Line start and line end anchors ('^' and '$', respectively)
                    are automatically pre- and appended to all expressions.
                    Thus, you should not use these in your regular expressions.
                </para>
            </note>

            <note>
                <para>
                    This route class uses the <code>#</code> character for a delimiter. This
                    means that you will need to escape hash characters ('#') in your route definitions.
                    But since these characters aren't passed to the webserver (named anchors), 
                    you will rarely need to do so.
                </para>
            </note>

            <para>
                You can get the contents of the defined subpatterns the usual way:
            </para>

            <programlisting role="php"><![CDATA[
public function showAction() 
{
    $request = $this->getRequest();
    $year = $request->getParam(1); // $year = '2006';
}
]]></programlisting>    

            <note>
                <para>Zauważ, że klucz jest liczbą rzeczywistą (1), a nie łańcuchem
                znaków ('1').</para>
            </note>
            
            <para>
                This route will not yet work exactly the same as it's standard route counterpart since
                the default for 'year' is not yet set. And what may not yet be evident we will 
                have a problem with a trailing slash even if we declare default for the year 
                and make the subpattern optional. The solution is to make the whole year part optional 
                along with the slash but catch only the numeric part:
            </para>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive(?:/(\d+))?', 
             array(
                 'year' => '2006',
                 'controller' => 'archive',
                 'action' => 'show'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>
            
            <para>
                Now let's get to the problem you have probably noticed on your 
                own by now. Using integer based keys for parameters is not 
                an easily manageable solution and may be potentially problematic 
                in the long run. And that's where the third parameter comes in. One which
                represents a map of regex subpatterns to parameter named keys. Let's work 
                on our easier example:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array(
                 'controller' => 'archive',
                 'action' => 'show'
             ),
             array(
                1 => 'year'
             )
         );
$router->addRoute('archive', $route);]]></programlisting>

            <para>
                This will result in following values injected into Request:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'year' => '2006',
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <para>
                The map may be defined in both ways to make it work in any 
                environment (eg. Zend_Config). Keys may contain variable names
                or subpattern numbers. 
            </para>
            
            <note>
                <para>
	                 Subpattern keys have to be represented by integers
                </para>
            </note>
            
            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                1 => 'year'
             )
         );

// LUB
         
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             )
         );       
]]></programlisting>
           
            <para>
                Notice that the numeric index in Request values is now gone and 
                a named variable is shown in it's place. Of course you can mix 
                numeric and named variables if you wish:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)/page/(\d+)',
             array( ... ),
             array(
                'year' => 1
             )
         );
]]></programlisting>

            <para>
                Which will result in mixed values available in the Request. 
                Example URL <code>http://domain.com/archive/2006/page/10</code>
                will result in following values:
            </para>

            <programlisting role="php"><![CDATA[
$values = array(
  'year' => '2006',
  2 => 10,
  'controller' => 'archive',
  'action' => 'show'
);]]></programlisting>            

            <para>
                Since regex is not easily reversed, you will need to prepare 
                reverse URL if you wish to use an url helper or even an 
                assemble method of this class. This reversed path is represented 
                by a string parsable by sprintf() and is defined as a fourth 
                construct parameter:
            </para>

            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'archive/(\d+)', 
             array( ... ),
             array(
                'year' => 1
             ),
             'archive/%s'
         );       
]]></programlisting>

            <para>
                All of this is something which was already possible by the means of 
                a standard route object, so where's the benefit in using Regex Route, you ask?
                You can describe any type of URL without any restrictions. 
                Imagine you have a blog and wish to create URLs like:
                <code>http://domain.com/blog/archive/01-Using_the_Regex_Router.html</code>.
                Now that's something which was not possible before, is it? Here's the solution:
            </para>


            <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route_Regex(
             'blog/archive/(\d+)-(.+)\.html',
             array('controller' => 'blog', 'action' => 'view'), 
             array(1 => 'id', 2 => 'description'),
             'blog/archive/%d-%s.html'
         );
$router->addRoute('blogArchive', $route);
]]></programlisting>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.add-config">
            <title>Użycie Zend_Config z RewriteRouterem</title>

            <para>
                Czasem wygodniej jest uaktualnić plik konfiguracyjny z nowymi
                trasami niż zmieniać kod. Jest to możliwe za pomocą metody
                <code>addConfig()</code>. Zasadniczo tworzysz konfigurację
                kompatybilną z Zend_Config, a w kodzie odczytujesz ją i 
                przekazujesz ją do RewriteRoutera.
            </para>

            <para>
                Przeanalizuj poniższy przykładowy plik INI:
            </para>

            <programlisting role="php"><![CDATA[
[production]
routes.archive.route = "archive/:year/*"
routes.archive.defaults.controller = archive
routes.archive.defaults.action = show
routes.archive.defaults.year = 2000
routes.archive.reqs.year = "\d+"

routes.news.type = "Zend_Controller_Router_Route_Static"
routes.news.route = "news"
routes.news.defaults.controller = "news"
routes.news.defaults.action = "list"

routes.archive.type = "Zend_Controller_Router_Route_Regex"
routes.archive.route = "archive/(\d+)"
routes.archive.defaults.controller = "archive"
routes.archive.defaults.action = "show"
routes.archive.map.1 = "year" 
; OR: routes.archive.map.year = 1
]]></programlisting>

            <para>
                Powyższy plik INI może być odczytany przez obiekt 
                <code>Zend_Config</code> w taki sposób:
            </para>

            <programlisting role="php"><![CDATA[
$config = new Zend_Config_Ini('/path/to/config.ini', 'production');
$router = new Zend_Controller_Router_Rewrite();
$router->addConfig($config, 'routes');
]]></programlisting>

            <para>
                W powyższym przykładzie, nakazujemy routerowi użyć sekcji 'routes'
                pliku INI aby użyć tras zdefiniowanych w tym pliku. Każdy element
                pierwszego poziomu w tej sekcji będzie użyty do zdefiiniowania
                nazwy trasy; powyższy przekład definiuje trasy 'archive' oraz 
                'news'. Wymagane jest aby każda trasa miała określony przynajmniej 
                parametr 'route' i jeden lub więcej parametrów 'defaults'; 
                opcjonalnie mogą być zdeiniowane parametry 'reqs' (skrót
                'required'). Wszystkie te parametry odpowiadają trzem argumentom
                przekazywanym do obiektu <code>Zend_Controller_Router_Route_Interface</code> 
                Klucz opcji 'type' może być użyty aby określić typ
                klasy, która ma być użyta dla danej trasy; domyślnie używana jest
                klasa <code>Zend_Controller_Router_Route</code>. W powyższym 
                przykładzie, trasa 'news' jest zdefiniowana aby używała
                <code>Zend_Controller_Router_Route_Static</code>.
            </para>
        </sect3>

    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.http">
        <title>Zend_Controller_Response_Http</title>

        <para>
            <code>Zend_Controller_Response_Http</code> jest obiektem odpowiedzi
            odpowiednim do użycia w środowisku HTTP. Zawiera metody
            do ustawiania, odbierania i czyszczenia nagłówków, a metoda 
            <code>__toString()</code> wysyła wszystkie nagłówki na raz przed 
            wysłaniem zawartości odpowiedzi.
        </para>

        <para>
            Metoda <code>setHeader()</code> przyjmuje dwa argumenty, typ nagłówka
            oraz wartość nagłówka. Trzeci opcjonalny parametr, jeśli jest 
            przekazany i ma wartość true, spowoduje, że nowy nagłówek zastąpi
            inne zarejestrowane nagłówki o tym typie.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.cli">
        <title>Zend_Controller_Response_Cli</title>

        <para>
            <code>Zend_Controller_Response_Cli</code> jest obiektem odpowiedzi
            odpowiednim do użycia w środowisku CLI. Nie ma on metod do obsługi
            nagłówków i w prosty sposób zwraca całą zawartość gdy wywoływana jest
            metoda <code>__toString()</code>.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
