<sect1 id="zend.filter.filter">
    <title>Zend_Filter</title>
    
    <sect2 id="zend.filter.filter.introduction">
        <title>Wprowadzenie</title>
        <para><literal>Zend_Filter</literal> dostarcza bibliotekę statycznych metod
        filtrowania danych. Do filtrowania danych wejściowych powinieneś użyć klasy
        <xref linkend="zend.filter.input" />, ponieważ zapewnia ona strukturę do
        filtrowania danych wejściowych przy użyciu metod dostarczonych przez 
        klasę <literal>Zend_Filter</literal>. Jakkolwiek klasa 
        <literal>Zend_Filter_Input</literal> została pierwotnie zaprojektowana 
        dla tablic, klasa <literal>Zend_Filter</literal> może być użyteczna do 
        filtrowania danych skalarnych, ponieważ jej metod używamy podobnie jak
        funkcji PHP operujących na łańcuchach znaków:</para>
        <programlisting>
    <![CDATA[<?php
    
    $alphaUsername = Zend_Filter::getAlpha('John123Doe');
    
    /* $alphaUsername = 'JohnDoe'; */
    
    ?>]]>
        </programlisting>
    </sect2>
    <sect2 id="zend.filter.filter.usecases">
        <title>Użycie</title>
        <para>We wszystkich przykładach użycia, zmienna <literal>$value</literal> 
        ma wartość w postaci skalarnej.</para>
        <para>Filtrowanie Whitelist:</para>
        <programlisting>
    <![CDATA[<?php
    
    if ($email = Zend_Filter::testEmail($value)) {
        /* $email ma prawidłowy format. */
    } else {
        /* $email ma nieprawidłowy format. */
    }
    
    ?>]]>
        </programlisting>
        <para>Filtrowanie Blind:</para>
        <programlisting>
    <![CDATA[<?php
    
    $alphaName = Zend_Filter::getAlpha($value);
    
    ?>]]>
        </programlisting>
        <para>Filtrowanie Blacklist:</para>
        <programlisting>
    <![CDATA[<?php
    
    $taglessComment = Zend_Filter::noTags($value);
    
    ?>]]>
        </programlisting>
    </sect2>
</sect1>
    
<!--
vim:se ts=4 sw=4 et:
-->
