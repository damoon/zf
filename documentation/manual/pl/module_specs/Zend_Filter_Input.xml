<sect1 id="zend.filter.input">
    <title>Zend_Filter_Input</title>

    <sect2 id="zend.filter.input.introduction">
        <title>Wprowadzenie</title>
        <para>Klasa <literal>Zend_Filter_Input</literal> dostarcza proste metody, 
        które zapewniają poważne potraktowanie filtrowania danych przychodzących. 
        Jej przeznaczenie jest różnorodne, ponieważ zaspokaja ona potrzeby trzech 
        różnych grup ludzi:</para>
        <itemizedlist>
            <listitem>
                <para>Programiści</para>
                <para>Chociaż filtrowanie danych wejściowych nigdy nie może być
                tak łatwe jak nierobienie niczego, programiści potrzebują zapewnić
                integralną czystość swoim danym nie dodając w tym celu niepotrzebnej
                złożoności kodu.
                <literal>Zend_Filter_Input</literal> oferuje proste metody, które
                mogą być użyte w większości przypadków, przy zachowaniu sporej
                elastyczności w przypadkach skrajnych. Metody mają określone ścisłe 
                konwencje nazewnictwa co sprzyja pisaniu przejrzystego kodu.</para>
            </listitem>
            <listitem>
                <para>Menadżerzy</para>
                <para>
                Menadżerzy którzy chcą zachować kontrolę nad dużą grupą 
                programistów mogą narzucić gotowy sposób filtrowania danych
                wejściowych, a także mogą wyeliminować dostęp to niefiltrowanych 
                danych wejściowych.</para>
            </listitem>
            <listitem>
                <para>Audytorzy</para>
                <para>Ci, którzy sprawdzają kod aplikacji potrzebują szybko i solidnie
                sprawdzić kiedy i gdzie używane są dane wejściowe w czystej postaci.
                Zasady, które sprzyjają pisaniu przejrzystego kodu
                wspierają także audytorów zapewniając im jasne odróżnienie 
                pomiędzy różnymi sposobami filtrowania danych wejściowych.</para>
            </listitem>
        </itemizedlist>
        <para>Jest wiele różnych zdań na temat filtrowania danych przychodzących
        i jest wiele różnych metod, których programiści mogą użyć. Filtrowanie 
        whitelist, filtrowanie blacklist, wyrażenia regularne, wyrażenia warunkowe
        oraz natywne funkcje PHP są tylko kilkoma przykładami filtrowania danych
        przychodzących. <literal>Zend_Filter_Input</literal> łączy
        te metody w jedno API o jednolitym działaniu oraz o sztywnych
        konwencjach nazewnictwa. Wszystkie metody działają według prostej zasady 
        - jeśli dane są prawidłowe, są one zwracane, w przeciwnym wypadku zwracana
        jest wartość <literal>FALSE</literal>. Jest to maksymalnie proste.</para>
    </sect2>
        <sect2 id="zend.filter.input.introduction.whitelist">
            <title>Filtrowanie whitelist</title>
            <para>Metody filtrowania whitelist poprzedzone są przedrostkiem 
            <literal>test</literal>, na przykład <literal>testAlpha()</literal> czy
            <literal>testEmail()</literal>. Te metody sprawdzają dane według 
            zdefiniowanych kryteriów i zwracają dane tylko wtedy gdy są zgodne.
            Jeśli nie są, zwracana jest wartość <literal>FALSE</literal>. Oto
            prosty przykład:</para>
            <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    
    if ($alphaName = $filterPost->testAlpha('name')) {
        /* $alphaName zawiera tylko litery. */
    } else {
        /* $alphaName ma wartość FALSE. */
    }
    
    ?>]]>
            </programlisting>
            <para>To powoduje wystąpienie błędu podczas zamiany zwróconej 
            przefiltrowanej wartości na wartość logiczną. Jeśli chcesz porównać
            wartości, które w PHP zostają zamienione na wartość <literal>FALSE</literal> 
            (na przykład liczba <literal>0</literal> czy pusty łańcuch znaków), 
            możesz przeprowadzić ścisłe porównanie z <literal>FALSE</literal>:</para>
            <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $alphaName = $filterPost->testAlpha('name');
    
    if ($alphaName !== FALSE) {
        /* $alphaName zawiera tylko litery. */
    } else {
        /* $alphaName === FALSE */
    }
    
    ?>]]>
            </programlisting>
        </sect2>
        <sect2 id="zend.filter.input.introduction.blind">
            <title>Filtrowanie blind</title>
            <para>Metody filtrowania blind poprzedzone są przedrostkiem 
            <literal>get</literal>, na przykład <literal>getAlpha()</literal> czy
            <literal>getDigits()</literal>. Te metody nie sprawdzają danych, natomiast
            zwracają tylko te części które spełniają kryteria. Na przykład metoda
            <literal>getAlpha()</literal> zwraca tylko litery, jeśli jakieś istnieją
            w filtrowannych danych. (Jeśli nie istnieją zwracany jest pusty łańcuch.)
            Oto prosty przykład:</para>
            <programlisting>
    <![CDATA[<?php
    
    /* $_POST['username'] = 'John123Doe'; */
    
    $filterPost = new Zend_Filter_Input($_POST);
    $alphaUsername = $filterPost->getAlpha('username');
    
    /* $alphaUsername = 'JohnDoe'; */
    
    ?>]]>
            </programlisting>
        </sect2>
        <sect2 id="zend.filter.input.introduction.blacklist">
            <title>Filtrowanie blacklist</title>
            <para>Metody filtrowania blacklist poprzedzone są przedrostkiem 
            <literal>no</literal>, na przykład <literal>noTags()</literal> czy
            <literal>noPath()</literal>. Te metody działają identycznie jak metody
            blind, z wyjątkiem tego, że tutaj kryteria mówią o tym jakie dane są
            nieprawidłowe, a nie o tym jakie są prawidłowe. Dane nieprawidłowe
            są usuwane, a pozostałe dane (uznane za prawidłowe) są zwracane. Oto
            prosty przykład:</para>
            <programlisting>
    <![CDATA[<?php
    
    /* $_POST['comment'] = '<b>Kocham PHP!</b>'; */
    
    $filterPost = new Zend_Filter_Input($_POST);
    $taglessComment = $filterPost->noTags('comment');
    
    /* $taglessComment = 'Kocham PHP!'; */
    
    ?>]]>
            </programlisting>
        </sect2>
    <sect2 id="zend.filter.input.theoryofoperation">
        <title>Opis działania</title>
        <para><literal>Zend_Filter_Input</literal> łączy kilka różnych podejść do 
        filtrowania danych przychodzących w jedno API o jednolitym działaniu oraz 
        o sztywnych konwencjach nazewnictwa. (zobacz <xref linkend="zend.filter.input.introduction" />). 
        <!--Ten opis stawia <literal>Zend_Filter_Input</literal> na równi z 
        istniejącymi rozwiązaniami, ale nie robi nic, aby dodatkowo pomóc tym, 
        którzy potrzebują innych sposobów filtrowania. Dlatego domyślnie <literal>Zend_Filter_Input</literal>
        narzuca kontrolowany dostęp do danych wejściowych.-->
        </para>
        <para>Obsługiwane są dwa typy składni. W domyślnym sposobie do konstruktora 
        przekazywany jest pojedynczy argument - tablica która ma być filtrowana:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $email = $filterPost->testEmail('email');
    
    ?>]]>
        </programlisting>
        <para><literal>Zend_Filter_Input</literal> zmienia wartość tablicy, która
        została przekazana (<literal>$_POST</literal>) na <literal>NULL</literal>, 
        więc bezpośredni dostęp do niej nie jest już możliwy. (Dostęp do niefiltrowanych
        danych jest jedynie możliwe za pomocą metody <literal>getRaw()</literal>, 
        która jest dużo łatwiejsza do kontrolowania)</para>
        <para>W sposobie opcjonalnym, wartość <literal>FALSE</literal> 
        jest przekazywana jako drugi argument do konstruktora:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    $email = $filterPost->testEmail('email');
    
    ?>]]>
        </programlisting>
        <para>Użycie filtra jest identyczne, ale <literal>Zend_Filter_Input</literal> 
        nie ustawia wartości oryginalnej tablicy (<literal>$_POST</literal>) na 
        <literal>NULL</literal>, więc dalej jest możliwy bezpośredni dostęp do danych.
        Ten sposób nie jest polecany, polecany jest sposób pierwszy.</para>
        <para><literal>Zend_Filter_Input</literal> jest zaprojektowany głównie w celu 
        filtrowania tablic. Duża część danych wejściowych pochodzi z superglobalnych
        tablic PHP (<literal>$_GET</literal>, <literal>$_POST</literal>,
        <literal>$_COOKIE</literal>, itp.), a tablice także są najczęstszą strukturą
        używaną do przechowywania danych wejściowych pochodzących z innych źródeł.
        Jeśli potrzebujesz filtrować wartości skalarne (nietablicowe) zobacz 
        <xref linkend="zend.filter" />.</para>
    </sect2>
    <sect2 id="zend.filter.input.usecases">
        <title>Przykłady użycia</title>
        <para>Ścisłe filtrowanie whitelist (preferowane):</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    
    if ($email = $filterPost->testEmail('email')) {
        /* $email jest prawidłowym adresem email. */
    } else {
        /* $email nie jest prawidłowym adresem email. */
    }
    
    ?>]]>
        </programlisting>
        <para>Ścisłe filtrowanie blind:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $alphaName = $filterPost->getAlpha('name');
    
    ?>]]>
        </programlisting>
        <para>Ścisłe filtrowanie blacklist:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST);
    $taglessComment = $filterPost->noTags('comment');
    
    ?>]]>
        </programlisting>
        <para>Nieścisłe filtrowanie whitelist:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    
    if ($email = $filterPost->testEmail('email')) {
        /* $email jest prawidłowym adresem email. */
    } else {
        /* $email nie jest prawidłowym adresem email. */
    }
    
    ?>]]>
        </programlisting>
        <para>Nieścisłe filtrowanie blind:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    $name = $filterPost->getAlpha('name');
    
    ?>]]>
        </programlisting>
        <para>Nieścisłe filtrowanie blacklist:</para>
        <programlisting>
    <![CDATA[<?php
    
    $filterPost = new Zend_Filter_Input($_POST, FALSE);
    $comment = $filterPost->noTags('comment');
    
    ?>]]>
        </programlisting>
    </sect2>
</sect1>    
    
<!--
vim:se ts=4 sw=4 et:
-->
