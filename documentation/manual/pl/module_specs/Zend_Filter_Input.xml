<sect1 id="zend.filter.input">

    <title>Zend_Filter_Input</title>

    <sect2 id="zend.filter.input.introduction">

        <title>Wprowadzenie</title>

        <para>
            Klasa <literal>Zend_Filter_Input</literal> dostarcza metody, które zapewniają 
            uporządkowane podejście do filtrowania danych przychodzących. Jej przeznaczenie 
            jest różnorodne, ponieważ zaspokaja ona potrzeby trzech różnych grup ludzi:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Programiści
                </para>
                <para>
                    Chociaż filtrowanie danych wejściowych nigdy nie może być tak łatwe jak nierobienie niczego, programiści potrzebują zapewnić
                    integralną czystość swoim danym nie dodając w tym celu niepotrzebnej złożoności kodu.
                </para>
            </listitem>
            <listitem>
                <para>
                    Menadżerzy
                </para>
                <para>
                    Menadżerzy którzy chcą zachować kontrolę nad dużą grupą programistów mogą narzucić gotowy sposób filtrowania danych
                    wejściowych, a także mogą wyeliminować dostęp to niefiltrowanych danych wejściowych.
                </para>
            </listitem>
            <listitem>
                <para>
                    Audytorzy
                </para>
                <para>
                    Ci, którzy sprawdzają kod aplikacji potrzebują szybko i solidnie sprawdzić kiedy 
                    i gdzie używane są dane wejściowe w czystej postaci. Zasady, które sprzyjają 
                    pisaniu przejrzystego kodu wspierają także audytorów zapewniając im jasne 
                    odróżnienie pomiędzy różnymi sposobami filtrowania danych wejściowych.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Jest wiele różnych zdań na temat filtrowania danych przychodzących i jest wiele 
            różnych metod, których programiści mogą użyć. Filtrowanie whitelist, filtrowanie 
            blacklist, wyrażenia regularne, wyrażenia warunkowe oraz natywne funkcje PHP 
            są tylko kilkoma przykładami filtrowania danych przychodzących.
        </para>

    </sect2>

    <sect2 id="zend.filter.input.theory_of_operation">

        <title>Opis działania</title>

        <para>
            W celu zapewnienia uporządkowanego dostępu do filtrowania danych
            wejściowych, domyślnie <literal>Zend_Filter_Input</literal> próbuje
            forsować kontrolowany dostęp do danych wejściowych ustawiając 
            wartość źródłowej tablicy na <code>null</code>.
        </para>

        <para>
            W podejściu domyślnym (ścisłym), do konstruktora przekazywany jest
            jeden argument - tablica danych do filtrowania. Niefiltrowane dane
            są dostępnę tylko za pomocą metody <code>getRaw()</code>:
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// Filtruje dane z tablicy $_POST
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST);

// $_POST ma teraz wartość null
echo null === $_POST ? 'yes' : 'no'; // wyświetla 'yes'

// Pobiera niefiltrowaną wartość e-mail
echo $filterPost->getRaw('email'); // wyświetla 'webmaster@example.com']]></programlisting>

        <para>
            <literal>Zend_Filter_Input</literal> ustawia wartość przekazanej 
            tablicy (<literal>$_POST</literal>) na <literal>null</literal>, więc
            bezpośredni do niej dostęp nie jest już możliwy. (Dane niefiltrowane
            są wciąż dostępne za pomocą metody <literal>getRaw()</literal>, która
            jest łatwiejsza do monitorowania)
        </para>

        <para>
            W podejściu opcjnalnym (nieścisłym), wartość <literal>false</literal>
            jest przekazywana jako drugi argument do konstruktora:
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// Filtruje dane z tablicy $_POST
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST, false);

// tablica $_POST wciąż jest zdefiniowana
echo null === $_POST ? 'yes' : 'no'; // wyświetla 'no'

// Pobiera niefiltrowaną wartość e-mail
echo $filterPost->getRaw('email'); // wyświetla 'webmaster@example.com']]></programlisting>

        <para>
            Użycie filtra jest dokładnie takie same, ale 
            <literal>Zend_Filter_Input</literal> nie ustawia wartości 
            oryginalnej tablicy (<literal>$_POST</literal>) na 
            <literal>null</literal>, więc programiści wciąż mają do niej 
            bezpośredni dostęp. Te podejście jest odradzane na rzecz podejścia
            ścisłego.
        </para>

        <para>
            <literal>Zend_Filter_Input</literal> jest zaprojektowany do pracy
            z tablicami. Wiele źródeł danych wejścioywych jest oparta na 
            superglobalnych tablicach PHP (<literal>$_GET</literal>, 
            <literal>$_POST</literal>, <literal>$_COOKIE</literal>, itp.), a
            tablice są główną konstrukcją używaną do przechowywania danych
            wejściowych z innych źródeł. Jeśli potrzebujesz filtrować dane
            skalarne, zobacz <xref linkend="zend.filter" />.
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->