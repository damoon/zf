<sect1 id="zend.introduction">
    <title>Wstęp</title>
    <para>
    Klasa Zend jest podstawową klasą Zend Framework. Została ona wydzielona
    według zasady DRY (Don't Repeat Yourself - Nie Powtarzaj Siebie). Klasa zawiera
    jedynie statyczne metody, a te metody zawierają funkcjonalność wymaganą przez 
    wiele komponentów Zend Framework.
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>Zend::loadFile()</title>

    <para>
    <code>Zend::loadFile()</code> ładuje plik PHP, który może zawierać dowolny kod PHP. 
    Jest aliasem dla funkcji PHP <ulink url="http://php.net/include"><code>include()</code></ulink>, 
    który w przypadku niepowodzenia wyrzuca wyjątek <code>Zend_Exception</code>.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>

    <para>Parametr <code>$filename</code> określa nazwę pliku do załadowania. Nie może
    on zawierać żadnych informacji o ścieżce. Parametr <code>$filename</code> sprawdzany jest
    pod kątem bezpieczeństwa. Parametr <code>$filename</code> może zawierać jedynie znaki 
    alfanumeryczne, myślniki ("-"), podkreślniki ("_"), lub znaki kropki ("."). 
    Takich ograniczeń nie posiada parametr <code>$dirs</code>.
    </para>

    <para>Parametr <code>$dirs</code> określa ścieżki w których funkcja będzie szukała pliku.
    Jeżeli wartością parametru jest <code>NULL</code>, to sprawdzane są tylko ścieżki
    z dyrektywy <code>include_path</code>. Jeżeli wartością jest łańcuch znaków lub
    tablica to w pierwszej kolejności sprawdzana jest podana ścieżka (lub ścieżki), a 
    dopiero potem dyrektywa <code>include_path</code>.
    </para>

    <para>
    Parametr <code>$once</code> jest wartością logiczną określającą czy plik
    ma być załadowany za pomocą funkcji <ulink url="http://php.net/include"><code>include()</code></ulink> czy <ulink
    url="http://php.net/include_once"><code>include_once()</code></ulink>.
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
    <code>Zend::loadClass()</code> ładuje plik PHP o nazwie w postaci "<code>$className.php</code>", 
    a następnie sprawdza czy istnieje klasa o nazwie <code>$className</code>.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadClass($class, $dirs)

?>]]></programlisting>

    <para>
    Jeśli plik nie zostaje znaleziony lub gdy po załadowaniu pliku klasa nie istnieje
    wyrzucany jest wyjątek <code>Zend_Exception</code>. Do załadowania pliku używana
    jest metoda <code>Zend::loadFile()</code>, a parametr <code>$dirs</code> jest
    do niej bezpośrednio przekazywany.
    </para>

    <para>
    Jeśli próbuje się załadować klasę zawierającą podkreślniki w nazwie, a parametr 
    <code>$dirs</code> ma wartość null (wartość domyślna), to metoda <code>Zend::loadClass()</code> 
    spróbuje automatycznie pobrać parametr <code>$dirs</code> z nazwy klasy
    zamieniając podkreślniki na separatory katalogów. Na przykład jeżeli parametr
    <code>$class</code> ma wartość <code>Zend_Example_Class</code>, to zostanie
    załadowana klasa <code>Zend/Example/Class.php</code>.
    </para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>
    <code>Zend::loadInterface()</code> działa identycznie jak <code>Zend::loadClass()</code>, 
    jednak zamiast klasy ładuje interfejs.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
    Metoda <code>Zend::loadClass()</code> nie może być używana do ładowania interfejsów
    ponieważ funkcja PHP <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink> 
    nie może sprawdzać istnienia interfejsów (od wersji PHP 5.0.2). Zamiast niej używamy
    metody <code>Zend::loadInterface()</code>.
    </para>

    <para>
    Jeśli próbuje się załadować interfejs zawierający podkreślniki w nazwie, a parametr 
    <code>$dirs</code> ma wartość null (wartość domyślna), to metoda <code>Zend::loadInterface()</code> 
    spróbuje automatycznie pobrać parametr <code>$dirs</code> z nazwy interfejsu
    zamieniając podkreślniki na separatory katalogów. Na przykład jeżeli parametr <code>$interface</code> 
    ma wartość <code>Zend_Example_Interface</code>, to zostanie załadowany interfejs 
    <code>Zend/Example/Interface.php</code>.
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>Zwraca <code>TRUE</code> jeśli jest możliwy odczyt pliku, w przeciwnym
    wypadku zwraca FALSE.</para>

    <programlisting role="php"><![CDATA[<?php
	
isReadable($filename)

?>]]></programlisting>

    <para>Parametr <code>$filename</code> określa nazwę pliku do sprawdzenia, może
    on zawierać informacje o ścieżce. Ta metoda jest aliasem dla funkcji PHP
    <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>.  
    Różnią się one tym, że funkcja PHP nie sprawdza ścieżek z dyrektywy 
    <code>include_path</code>, a metoda <code>Zend::isReadable()</code> sprawdza.
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>

    <para>
    Metoda <code>Zend::dump()</code> wyświetla i/lub zwraca informacje o typie i wartości 
    zmiennej. Jest aliasem dla funkcji PHP <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>.  
    Metoda ujmuje dane wyjściowe w znaczniki (X)HTML <code>&lt;pre&gt;</code> oraz opcjonalnie dodaje
    etykietę.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
    Parametr <code>$var</code> określa wyrażenie lub zmienną na temat których 
    chcemy wyświetlić informacje.
    </para>

    <para>
    Parametr <code>$label</code> jest dowolnym tekstem dołączanym do informacji
    wyświetlanych przez metodę <code>Zend::dump()</code>. Jest przydatny gdy 
    na jednym ekranie wyświetlamy informacje na temat większej ilości zmiennych lub
    wyrażeń.
    </para>

    <para>Parametr logiczny <code>$echo</code> kontroluje czy informacje 
    na temat zmiennej lub wyrażenia są przez metodę <code>Zend::dump()</code> 
    wyświetlane. Jeśli parametr ma wartość <code>TRUE</code>, 
    to metoda wyświetli dane. Niezależenie od wartości parametru <code>$echo</code>, 
    metoda zawsze zwraca informacje na temat zmiennej lub wyrażenia.
    </para>
</sect1>


<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
    Rejestruje obiekt w rejestrze.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
register($name, $object)

?>]]></programlisting>

    <para>
    Rejestr jest mechanizmem umożliwiającym aplikacji dostęp do jednej instancji
    obiektu (singleton). Rejestrując obiekt w rejestrze, a następnie go odbierając
    zawsze otrzymamy tą samą instancję obiektu.
    </para>

    <para>
    Parametr <code>$name</code> jest nazwą obiektu przechowywanego w rejestrze.
    Nazwa ta jest przekazywana jako parametr do metody <code>Zend::registry()</code> 
    w celu powtórnego odebrania obiektu.
    </para>

    <para>
    Parametr <code>$name</code> musi być łańcuchem znaków, w rejestrze mogą być
    przechowywane tylko obiekty, obiekty nigdy nie mogą być usuwane z rejestru, a
    instancja obiektu może być zarejestrowana tylko raz. Złamanie tych zasad 
    spowoduje wyrzucenie wyjątku <code>Zend_Exception</code>.
    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
    Zwraca z rejestru obiekt lub listę obiektów.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
registry($name=null)

?>]]></programlisting>

    <para>
    Jeśli parametr <code>$name</code> ma wartość <code>NULL</code>, zostaje zwrócona
    tablica której kluczami są nazwy obiektów a wartościami nazwy ich klas.
    </para>

    <para>
    Jeśli parametr <code>$name</code> jest łańcuchem znaków, zostaje zwrócony
    uchwyt obiektu przypisanego do tej nazwy. Jeśli obiekt o nazwie <code>$name</code>
    nie istnieje w rejestrze zostaje wyrzucony wyjątek <code>Zend_Exception</code>.
    </para>

    <para>
    Do szybkiego sprawdzenia czy obiekt istnieje w rejestrze służy metoda Zend::isRegistered().
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->