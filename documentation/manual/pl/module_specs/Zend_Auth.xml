<sect1 id="zend.auth.introduction">

    <title>Wprowadzenie</title>

    <para>
        Zend_Auth zapewnia API do uwierzytelniania oraz zawiera konkretne
        adaptery uwierzytelniania dla najczęstszych przypadków użycia.
    </para>

    <para>
        Komponent Zend_Auth jest związany tylko z 
        <emphasis role="strong">uwierzytelnianiem</emphasis>, a nie z
        <emphasis role="strong">autoryzacją</emphasis>. 
        Uwierzytelnianie luźno definiujemy jako określanie w oparciu o pewien 
        zestaw danych tego, czy dana jednostka jest tym na co wygląda (np. 
        identyfikacja). Autoryzacja, proces decydowania o tym, czy zezwolić 
        danej jednostce na dostęp lub przeprowadzanie operacji na innych 
        jednostkach, jest poza polem działania Zend_Auth. Aby uzyskać więcej 
        informacji o autoryzacji i kontroli dostępu za pomocą Zend Framework, 
        proszę zobacz <link linkend="zend.acl">Zend_Acl</link>.
    </para>
    
    <note>
        <para>
            Klasa <code>Zend_Auth</code> implementuje wzorzec singletona, czyli
            dostępna jest tylko jej jedna instancja - za pomocą statycznej 
            metody <code>getInstance()</code>. Oznacza to, że użycie operatorów
            <code>new</code> oraz <code>clone</code> nie będzie możliwe z klasą
            <code>Zend_Auth</code>; zamiast nich użyj metody 
            <code>Zend_Auth::getInstance()</code>.
        </para>
    </note>

    <sect2 id="zend.auth.introduction.adapters">

        <title>Adaptery</title>

        <para>
            Adapter Zend_Auth jest używany do uwierzytelniania na podstawie
            serwisu konkretnego typu, takiego jak LDAP, RDBMS, lub system plików. 
            Różne adaptery mogą mieć różne opcje i mogą inaczej się zachowywać, 
            ale niektóre podstawowe funkcjonalności są wspólne dla wszystkich
            adapterów. Na przykład akceptowanie danych uwierzytelniania,
            przeprowadzanie zapytań do serwisu uwierzytelniania i zwracanie 
            rezultatów są wspólne dla adapterów Zend_Auth.
        </para>

        <para>
            Każda klasa adaptera Zend_Auth implementuje interfejs 
            <code>Zend_Auth_Adapter_Interface</code>. Ten interfejs definiuje 
            jedną metodę, <code>authenticate()</code>, którą klasa adaptera
            musi implementować dla zastosowań przeprowadzania zapytania 
            uwierzytelniania. Każda klasa adaptera musi być przygotowana przed 
            wywołaniem metody <code>authenticate()</code>. Przygotowanie takiego 
            adaptera obejmuje ustawienie danych uwierzytelniania (np. nazwy 
            użytkownika i hasła) oraz zdefiniowanie wartości dla specyficznych 
            opcji adaptera, na przykład ustawienie połączenia do bazy danych dla
            adaptera tabeli bazy danych.
        </para>

        <para>
            Poniżej jest przykładowy adapter uwierzytelniania, który do 
            przeprowadzenia procesu wymaga ustawionej nazwy użytkownika oraz 
            hasła. Inne szczegóły, takie jak sposób przeprowadzania zapytania
            uwierzytelniającego, zostały pominięte w celu zwiększenia czytelności:

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter/Interface.php';

class MyAuthAdapter implements Zend_Auth_Adapter_Interface
{
    /**
     * Ustawia nazwę użytkownika oraz hasła dla uwierzytelniania
     *
     * @return void
     */
    public function __construct($username, $password)
    {
        // ...
    }

    /**
     * Przeprowadza próbę uwierzytelniania
     *
     * @throws Zend_Auth_Adapter_Exception Jeśli uwierzytelnianie nie może być przeprowadzone
     * @return Zend_Auth_Result
     */
    public function authenticate()
    {
        // ...
    }
}]]></programlisting>

            Jak pokazano w bloku dokumentacyjnym , metoda <code>authenticate()</code> 
            musi zwracać instancję <code>Zend_Auth_Result</code> (lub instancję klasy
            rozszerzającej <code>Zend_Auth_Result</code>). Jeśli z jakiegoś 
            powodu przeprowadzenie zapytania uwierzytelniającego jest niemożliwe,
            metoda <code>authenticate()</code> powinna wyrzucić wyjątek 
            rozszerzający <code>Zend_Auth_Adapter_Exception</code>.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.results">

        <title>Resultat</title>

        <para>
            Adaptery Zend_Auth zwracają instancję <code>Zend_Auth_Result</code> 
            za pomocą metody <code>authenticate()</code> w celu przekazania
            rezultatu próby uwierzytelniania. Adaptery wypełniają obiekt 
            <code>Zend_Auth_Result</code> podczas konstrukcji, 
            dlatego poniższe trzy metody zapewniają podstawowy zestaw 
            operacji, które są wspólne dla rezultatów adapterów Zend_Auth:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>isValid()</code> - zwraca logiczną wartość true
                        tylko wtedy, gdy rezultat reprezentuje udaną próbę
                        uwierzytelniania.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getCode()</code> - returns a 
                        <code>Zend_Auth_Result</code> constant identifier for 
                        determining the type of authentication failure or 
                        whether success has occurred. This may be used in 
                        situations where the developer wishes to distinguish 
                        among several authentication result types. This allows 
                        developers to maintain detailed authentication result 
                        statistics, for example. Another use of this feature is 
                        to provide specific, customized messages to users for 
                        usability reasons, though developers are encouraged to 
                        consider the risks of providing such detailed reasons to 
                        users, instead of a general authentication failure 
                        message. For more information, see the notes below.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getIdentity()</code> - zwraca tożsamość próby
                        uwierzytelniania
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getMessages()</code> - zwraca tablicę wiadomości
                        odnoszących się do nieudanej próby uwierzytelniania
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        
        <para>
            A developer may wish to branch based on the type of authentication 
            result in order to perform more specific operations. Some operations 
            developers might find useful are locking accounts after too many
            unsuccessful password attempts, flagging an IP address after too 
            many nonexistent identities are attempted, and providing specific, 
            customized authentication result messages to the user. The following
            result codes are available:

            <programlisting role="php"><![CDATA[Zend_Auth_Result::SUCCESS
Zend_Auth_Result::FAILURE
Zend_Auth_Result::FAILURE_IDENTITY_NOT_FOUND
Zend_Auth_Result::FAILURE_IDENTITY_AMBIGUOUS
Zend_Auth_Result::FAILURE_CREDENTIAL_INVALID
Zend_Auth_Result::FAILURE_UNCATEGORIZED]]></programlisting>

        </para>

        <para>
            The following example illustrates how a developer may branch on the 
            result code:

            <programlisting role="php"><![CDATA[<?php
// wewnątrz akcji loginAction kontrolera AuthController
$result = $this->_auth->authenticate($adapter);

switch ($result->getCode()) {

    case Zend_Auth_Result::FAILURE_IDENTITY_NOT_FOUND:
        /** do stuff for nonexistent identity **/
        break;

    case Zend_Auth_Result::FAILURE_INVALID_CREDENTIAL:
        /** do stuff for invalid credential **/
        break;

    case Zend_Auth_Result::SUCCESS:
        /** do stuff for successful authentication **/
        break;

    default:
        /** do stuff for other failure **/
        break;
}]]></programlisting>

        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.persistence">

        <title>Trwałość uwierzytelnionej tożsamości</title>

        <para>
            Uwierzytelnianie żądania, które zawiera dane uwierzytelniające jest
            samo w sobie użyteczne, ale ważna jest także obsługa
            uwierzytelnionej tożsamości bez konieczności dołączania danych
            uwierzytelniających do każdego żądania.
        </para>

        <para>
            HTTP jest protokołem niezachowującym stanu pomiędzy żądaniami, 
            a techniki takie jak pliki cookie oraz sesje zostały stworzone w 
            celu ułatwienia zarządzania stanem pomiędzy żądaniami w aplikacjach 
            serwerowych.
        </para>

        <sect3 id="zend.auth.introduction.persistence.default">
        
            <title>Domyślne przechowywanie w sesji PHP</title>

            <para>
                 By default, <code>Zend_Auth</code> provides persistent storage 
                 of the identity from a successful authentication attempt using 
                 the PHP session. Upon a successful authentication attempt, 
                 <code>Zend_Auth::authenticate()</code> stores the identity from 
                 the authentication result into persistent storage. Unless 
                 configured otherwise, <code>Zend_Auth</code> uses a storage 
                 class named <code>Zend_Auth_Storage_Session</code>, which, in 
                 turn, uses <link linkend="zend.session">Zend_Session</link>. A 
                 custom class may instead be used by providing an object that 
                 implements <code>Zend_Auth_Storage_Interface</code> to 
                 <code>Zend_Auth::setStorage()</code>.
            </para>

            <note>
                <para>
                    If automatic persistent storage of the identity is not 
                    appropriate for a particular use case, then developers may 
                    forgo using the <code>Zend_Auth</code> class altogether, 
                    instead using an adapter class directly.
                </para>
            </note>

            <example id="zend.auth.introduction.persistence.default.example">

                <title>Modyfikowanie przestrzeni nazw sesji</title>

                <para>
                    <code>Zend_Auth_Storage_Session</code> używa przestrzeni 
                    nazw sesji o nazwie <code>'Zend_Auth'</code>. 
                    
                    This namespace may be 
                    overridden by passing a different value to the constructor 
                    of <code>Zend_Auth_Storage_Session</code>, and this value is 
                    internally passed along to the constructor of 
                    <code>Zend_Session_Namespace</code>. 
                    
                    This should occur 
                    before authentication is attempted, since 
                    <code>Zend_Auth::authenticate()</code> performs the 
                    automatic storage of the identity.

                    <programlisting role="php"><![CDATA[<?php
// Zapisujemy referencję do pojedynczej instancji Zend_Auth
require_once 'Zend/Auth.php';
$auth = Zend_Auth::getInstance();

// Używamy przestrzeni nazw 'someNamespace' zamiast 'Zend_Auth'
require_once 'Zend/Auth/Storage/Session.php';
$auth->setStorage(new Zend_Auth_Storage_Session('someNamespace'));

/**
 * @todo Ustawić adapter uwierzytelniania, $authAdapter
 */

// Uwierzytelniamy, zapisując wynik i przechowując tożsamość po udanym uwierzytelnieniu
$result = $auth->authenticate($authAdapter);]]></programlisting>

                </para>

            </example>

        </sect3>

        <sect3 id="zend.auth.introduction.persistence.custom">

            <title>Implementacja własnego pojemnika</title>

            <para>
                Sometimes developers may need to use different identity 
                persistence behavior than that provided by
                <code>Zend_Auth_Storage_Session</code>. For such cases 
                developers may simply implement 
                <code>Zend_Auth_Storage_Interface</code> and supply an instance 
                of the class to <code>Zend_Auth::setStorage()</code>.
            </para>

            <example id="zend.auth.introduction.persistence.custom.example">

                <title>Użycie własnej klasy do przechowywania tożsamości</title>

                <para>
                    In order to use a identity persistence storage class other than
                    <code>Zend_Auth_Storage_Session</code>, a developer implements
                    <code>Zend_Auth_Storage_Interface</code>:

                    <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Storage/Interface.php';

class MyStorage implements Zend_Auth_Storage_Interface
{
    /**
     * Zwraca wartość logiczną true tylko wtedy gdy pojemnik jest pusty
     *
     * @throws Zend_Auth_Storage_Exception If it is impossible to determine whether storage is empty
     * @return boolean
     */
    public function isEmpty()
    {
        /**
         * @todo implementacja
         */
    }

    /**
     * Zwraca zawartość pojemnika
     *
     * Behavior is undefined when storage is empty.
     *
     * @throws Zend_Auth_Storage_Exception If reading contents from storage is impossible
     * @return mixed
     */
    public function read()
    {
        /**
         * @todo implementacja
         */
    }

    /**
     * Zapisuje zawartość $contents w pojemniku
     *
     * @param  mixed $contents
     * @throws Zend_Auth_Storage_Exception If writing $contents to storage is impossible
     * @return void
     */
    public function write($contents)
    {
        /**
         * @todo implementacja
         */
    }

    /**
     * Czyści zawartość pojemnika
     *
     * @throws Zend_Auth_Storage_Exception If clearing contents from storage is impossible
     * @return void
     */
    public function clear()
    {
        /**
         * @todo implementacja
         */
    }

}]]></programlisting>

                </para>

                <para>
                    W celu użycia własnej klasy pojemnika, wywołaj metodę
                    <code>Zend_Auth::setStorage()</code> przed przeprowadzeniem
                    zapytania uwierzytelniającego:

                    <programlisting role="php"><![CDATA[<?php
// Instruct Zend_Auth to use the custom storage class
Zend_Auth::getInstance()->setStorage(new MyStorage());

/**
 * @todo Ustawić adapter uwierzytelniania, $authAdapter
 */

// Uwierzytelniamy, zapisując wynik i przechowując tożsamość po udanym uwierzytelnieniu
$result = Zend_Auth::getInstance()->authenticate($authAdapter);]]></programlisting>

                </para>

            </example>

        </sect3>

    </sect2>

    <sect2 id="zend.auth.introduction.using">

        <title>Użycie Zend_Auth</title>

        <para>
            Są dwa możliwe sposoby użycia adapterów Zend_Auth:
            <orderedlist>
            <listitem>
                <para>
                    pośrednio, za pomocą metody
                    <code>Zend_Auth::authenticate()</code>
                </para>
            </listitem>
            <listitem>
                <para>
                    bezpośrednio, za pomocą metody <code>authenticate()</code> 
                    adaptera
                </para>
            </listitem>
            </orderedlist>
        </para>

        <para>
            Poniższy przykład pokazuje jak użyć adaptera Zend_Auth pośrednio,
            poprzez użycie klasy <code>Zend_Auth</code>:

            <programlisting role="php"><![CDATA[<?php
// Pobieramy instancję Zend_Auth
require_once 'Zend/Auth.php';
$auth = Zend_Auth::getInstance();

// Ustawiamy adapter uwierzytelniania
$authAdapter = new MyAuthAdapter($username, $password);

// Przeprowadzamy uwierzytelnianie, zapisując rezultat
$result = $auth->authenticate($authAdapter);

if (!$result->isValid()) {
    // Uwierzytelnianie nieudane; wyświetlamy powody
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Uwierzytelnianie udane; tożsamość ($username) jest zapisana w sesji
    // $result->getIdentity() === $auth->getIdentity()
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

        <para>
            Jeśli uwierzytelnianie zostało przeprowadzone w żądaniu tak jak w 
            powyższym przykładzie, prostą sprawą  jest sprawdzenie czy istnieje
            pomyślnie uwierzytelniona tożsamość:
            <programlisting role="php"><![CDATA[<?php
$auth = Zend_Auth::getInstance();
if ($auth->hasIdentity()) {
    // Tożsamość istnieje; pobieramy ją
    $identity = $auth->getIdentity();
}]]></programlisting>
        </para>

        <para>
            Aby usunąć tożsamość z trwałego pojemnika, użyj po prostu metody
            <code>clearIdentity()</code>. Typowo może być to użyte do 
            implementacji w aplikacji operacji wylogowania:
            <programlisting role="php"><![CDATA[<?php
Zend_Auth::getInstance()->clearIdentity();]]></programlisting>
        </para>

        <para>
            Gdy automatyczne użycie trwałego pojemnika jest nieodpowiednie w 
            konkretnym przypadku, programista może w prostu sposób ominąć
            użycie klasy <code>Zend_Auth</code>, używając bezpośrednio klasy 
            adaptera. Bezpośrednie użycie klasy adaptera powoduje skonfigurowanie
            i przygotowanie obiektu adaptera, a następnie wywołanie metody 
            <code>authenticate()</code>. Szczegóły specyficzne dla adaptera są
            opisane w dokumentacji dla każdego z adapterów. Poniższy przykład 
            bezpośrednio używa <code>MyAuthAdapter</code>:

            <programlisting role="php"><![CDATA[<?php
// Ustawiamy adapter uwierzytelniania
$authAdapter = new MyAuthAdapter($username, $password);

// Przeprowadzamy uwierzytelnianie, zapisując rezultat
$result = $authAdapter->authenticate();

if (!$result->isValid()) {
    // Uwierzytelnianie nieudane; wyświetlamy powody
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Uwierzytelnianie udane
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->