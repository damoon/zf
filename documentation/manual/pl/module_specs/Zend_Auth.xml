<sect1 id="zend.auth.introduction">

    <title>Wprowadzenie</title>

    <para>
        Zend_Auth zapewnia API do uwierzytelniania oraz zawiera konkretne
        adaptery uwierzytelniania dla najczęstszych przypadków użycia.
    </para>

    <note>
        <para>
            Zend_Auth obecnie posiada
            <link linkend="zend.auth.adapter.digest">adapter uwierzytelniania digest</link>
            jako prosty przykład projektu adaptera. Planowane jest dodanie
            dodatkowych adapterów. Jesteś zainteresowany użyciem konkretnego adaptera? 
            Zapraszamy do <ulink url="http://framework.zend.com/wiki/x/qx4">oddania głosu 
            na adapter</ulink> oraz do 
            <ulink url="http://framework.zend.com/wiki/x/GgE">współpracy</ulink>!
        </para>
    </note>

    <para>
        Komponent Zend_Auth jest związany tylko z 
        <emphasis role="strong">uwierzytelnianiem</emphasis>, a nie z
        <emphasis role="strong">autoryzacją</emphasis>. 
        Uwierzytelnianie luźno definiujemy jako określanie w oparciu o pewien 
        zestaw danych tego, czy dana jednostka jest tym na co wygląda (np. 
        identyfikacja). Autoryzacja, proces decydowania o tym, czy zezwolić 
        danej jednostce na dostęp lub przeprowadzanie operacji na innych 
        jednostkach, jest poza polem działania Zend_Auth. Aby uzyskać więcej 
        informacji o autoryzacji i kontroli dostępu za pomocą Zend Framework, 
        proszę zobacz <link linkend="zend.acl">Zend_Acl</link>.
    </para>

    <sect2 id="zend.auth.introduction.adapters">

        <title>Adaptery</title>

        <para>
            Adapter Zend_Auth jest używany do uwierzytelniania na podstawie
            serwisu konkretnego typu, takiego jak LDAP, RDBMS, lub system plików. 
            Różne adaptery mogą mieć różne opcje i mogą inaczej się zachowywać, 
            ale niektóre podstawowe funkcjonalności są wspólne dla wszystkich
            adapterów. Na przykład akceptowanie danych uwierzytelniania,
            uwierzytelnianie i zwracanie pewnego rezultatu są wspólne dla
            adapterów Zend_Auth.
        </para>

        <para>
            Każda klasa adaptera Zend_Auth implementuje interfejs 
            <code>Zend_Auth_Adapter_Interface</code>. Ten interfejs definiuje 
            jedną metodę, <code>authenticate()</code>, którą klasa adaptera
            implementuje dla zastosowań uwierzytelniania. Każda klasa adaptera 
            musi być przygotowana przed wywołaniem metody 
            <code>authenticate()</code>. Oznacza to, że każdy adapter daje
            możliwość ustawienia danych uwierzytelniania (np. nazwy użytkownika
            i hasła) oraz zdefiniowania wartości dla specyficznych opcji 
            adaptera, na przykład ustawienia połączenia do bazy danych dla
            adaptera tabeli bazy danych.
        </para>

        <para>
            Poniżej jest przykładowy adapter uwierzytelniania, który do 
            przeprowadzenia procesu wymaga ustawionej nazwy użytkownika oraz 
            hasła. Inne szczegóły, takie jak sposób przeprowadzania zapytania
            uwierzytelniającego, zostały pominięte w celu zwiększenia czytelności:

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter/Interface.php';

class MyAuthAdapter implements Zend_Auth_Adapter_Interface
{
    /**
     * Ustawia nazwę użytkownika oraz hasła dla uwierzytelniania
     *
     * @return void
     */
    public function __construct($username, $password)
    {
        // ...
    }

    /**
     * Przeprowadza próbę uwierzytelniania
     *
     * @throws Zend_Auth_Adapter_Exception Jeśli uwierzytelnianie nie może być przeprowadzone
     * @return Zend_Auth_Result
     */
    public function authenticate()
    {
        // ...
    }
}]]></programlisting>

            Jak pokazano w bloku dokumentacyjnym , metoda <code>authenticate()</code> 
            musi zwracać instancję <code>Zend_Auth_Result</code> (lub instancję klasy
            rozszerzającej <code>Zend_Auth_Result</code>). Jeśli z jakiegoś 
            powodu przeprowadzenie zapytania uwierzytelniającego jest niemożliwe,
            metoda <code>authenticate()</code> powinna wyrzucić wyjątek 
            rozszerzający <code>Zend_Auth_Adapter_Exception</code>.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.results">

        <title>Resultat</title>

        <para>
            Adaptery Zend_Auth zwracają instancję <code>Zend_Auth_Result</code> 
            za pomocą metody <code>authenticate()</code> w celu przekazania
            rezultatu próby uwierzytelniania. Adaptery wypełniają obiekt 
            <code>Zend_Auth_Result</code> podczas konstrukcji, 
            więc dlatego poniższe trzy metody zapewniają podstawowy zestaw 
            operacji wspólnych dla rezultatów adapterów Zend_Auth:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>isValid()</code> - zwraca logiczną wartość true
                        tylko wtedy, gdy rezultat reprezentuje udaną próbę
                        uwierzytelniania.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getIdentity()</code> - zwraca tożsamość próby
                        uwierzytelniania
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getMessages()</code> - zwraca tablicę wiadomości
                        odnoszących się do nieudanej próby uwierzytelniania
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.persistence">

        <title>Trwałość uwierzytelnionej tożsamości</title>

        <para>
            Uwierzytelnianie żądania, które zawiera dane uwierzytelniające jest
            samo w sobie użyteczne, ale ważna jest także obsługa
            uwierzytelnionej tożsamości bez konieczności dołączania danych
            uwierzytelniających do każdego żądania.
        </para>

        <para>
            HTTP jest protokołem niezachowującym stanu pomiędzy żądaniami, 
            a techniki takie jak pliki cookie oraz sesje zostały stworzone w 
            celu ułatwienia zarządzania stanem pomiędzy żądaniami w aplikacjach 
            serwerowych. Klasa <link linkend="zend.session">Zend_Session</link> 
            jest domyślnie używana w Zend_Auth aby zapewnić trwały pojemnik na 
            tożsamość pochodzącą z udanej próby uwierzytelniania używając sesji 
            PHP.
        </para>

        <para>
            Po udanej próbie uwierzytelnienia, metoda <code>Zend_Auth::authenticate()</code> 
            składuje dane tożsamości z rezultatu uwierzytelniania w trwałym
            pojemniku. Domyślnie, <code>Zend_Auth</code> używa klasy pojemnika
            opartej na <link linkend="zend.session">Zend_Session</link>. Klasa 
            pojemnika może być zmieniona poprzez ustawienie innego obiektu
            pojemnika za pomocą metody <code>Zend_Auth::setStorage()</code>.
        </para>

        <para>
            Gdy automatyczne użycie trwałego pojemnika dla tożsamości jest 
            nieodpowiednie w konkretnym przypadku, to programista może przestać
            używać klasy <code>Zend_Auth</code>, a zamiast niej użyć 
            bezpośrednio klasy adaptera.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.using">

        <title>Użycie Zend_Auth</title>

        <para>
            Są dwa możliwe sposoby użycia adapterów Zend_Auth:
            <orderedlist>
            <listitem>
                <para>
                    pośrednio, za pomocą metody
                    <code>Zend_Auth::authenticate()</code>
                </para>
            </listitem>
            <listitem>
                <para>
                    bezpośrednio, za pomocą metody <code>authenticate()</code> 
                    adaptera
                </para>
            </listitem>
            </orderedlist>
        </para>

        <para>
            Poniższy przykład pokazuje jak użyć adaptera Zend_Auth pośrednio,
            poprzez użycie klasy <code>Zend_Auth</code>:

            <programlisting role="php"><![CDATA[<?php
// Pobieramy instancję Zend_Auth
require_once 'Zend/Auth.php';
$auth = Zend_Auth::getInstance();

// Ustawiamy adapter uwierzytelniania
$authAdapter = new MyAuthAdapter($username, $password);

// Przeprowadzamy uwierzytelnianie, zapisując rezultat
$result = $auth->authenticate($authAdapter);

if (!$result->isValid()) {
    // Uwierzytelnianie nieudane; wyświetlamy powody
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Uwierzytelnianie udane; tożsamość ($username) jest zapisana w sesji
    // $result->getIdentity() === $auth->getIdentity()
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

        <para>
            Jeśli uwierzytelnianie zostało przeprowadzone w żądaniu tak jak w 
            powyższym przykładzie, prostą sprawą  jest sprawdzenie czy istnieje
            pomyślnie uwierzytelniona tożsamość:
            <programlisting role="php"><![CDATA[<?php
$auth = Zend_Auth::getInstance();
if ($auth->hasIdentity()) {
    // Tożsamość istnieje; pobieramy ją
    $identity = $auth->getIdentity();
}]]></programlisting>
        </para>

        <para>
            Aby usunąć tożsamość z trwałego pojemnika, użyj po prostu metody
            <code>clearIdentity()</code>. Typowo może być to użyte do 
            implementacji w aplikacji operacji wylogowania:
            <programlisting role="php"><![CDATA[<?php
Zend_Auth::getInstance()->clearIdentity();]]></programlisting>
        </para>

        <para>
            Gdy automatyczne użycie trwałego pojemnika jest nieodpowiednie w 
            konkretnym przypadku, programista może w prostu sposób ominąć
            użycie klasy <code>Zend_Auth</code>, używając bezpośrednio klasy 
            adaptera. Bezpośrednie użycie klasy adaptera powoduje skonfigurowanie
            i przygotowanie obiektu adaptera, a następnie wywołanie metody 
            <code>authenticate()</code>. Szczegóły specyficzne dla adaptera są
            opisane w dokumentacji dla każdego z adapterów. Poniższy przykład 
            bezpośrednio używa <code>MyAuthAdapter</code>:

            <programlisting role="php"><![CDATA[<?php
// Ustawiamy adapter uwierzytelniania
$authAdapter = new MyAuthAdapter($username, $password);

// Przeprowadzamy uwierzytelnianie, zapisując rezultat
$result = $authAdapter->authenticate();

if (!$result->isValid()) {
    // Uwierzytelnianie nieudane; wyświetlamy powody
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Uwierzytelnianie udane
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->