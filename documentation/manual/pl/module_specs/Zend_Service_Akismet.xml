<sect1 id="zend.service.akismet">
    <title>Zend_Service_Akismet</title>

    <sect2 id="zend.service.akismet.introduction">
        <title>Wprowadzenie</title>

        <para>
            Komponent <code>Zend_Service_Akismet</code> jest klientem dla <ulink
                url="http://akismet.com/development/api/">API serwisu Akismet</ulink>.
            Serwis Akismet jest używany do określenia czy nadesłane dane są
            potencjalnym spamem; udostępnia on także metody do nadsyłania danych,
            które uznamy za spam, oraz danych, które niesłusznie zostały uznane
            za spam (czyli ham). Pierwotnie serwis Akismet służył do kategoryzowania
            i identyfikowania spamu dla aplikacji Wordpress, ale obecnie może być
            użyty do dowolnych danych.
        </para>

        <para>
            Do użycia serwisu Akismet wymagane jest posiadanie klucza API. Możesz
            go otrzymać rejestrując konto w serwisie
            <ulink url="http://wordpress.com/">WordPress.com</ulink>. Nie musisz
            aktywować bloga; samo założenie konta umożliwi ci otrzymanie klucza
            API.
        </para>

        <para>
            Additionally, Akismet requires that all requests contain a URL to
            the resource for which data is being filtered, and, because of
            Akismet's origins in WordPress, this resource is called the blog
            url. This value should be passed as the second argument to the
            constructor, but may be reset at any time using the
            <code>setBlogUrl()</code> accessor, or overridden by specifying a
            'blog' key in the various method calls.
        </para>
    </sect2>

    <sect2 id="zend.service.akismet.verifykey">
        <title>Weryfikowanie klucza API</title>

        <para>
            Metoda <code>Zend_Service_Akismet::verifyKey($key)</code> jest
            używana do weryfikowania poprawności klucza API Akismet.
            W większości przypadków nie musisz tego sprawdzać, ale jeśli chcesz
            przeprowadzić .... lub sprawdzić czy otrzymany klucz jest aktywny, 
            możesz to zrobić za pomocą poniższej metody:

            , but if you need a sanity check, or
            to determine if a newly acquired key is active, you may do
            so with this method.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Service/Akismet.php';

// Tworzymy instancję podając klucz API i adres URL używanej aplikacji
$akismet = new Zend_Service_Akismet($apiKey, 'http://framework.zend.com/wiki/');
if ($akismet->verifyKey($apiKey) {
echo "Key is valid.\n";
} else {
echo "Key is not valid\n";
}
?>]]></programlisting>

        <para>
            Jeśli metoda <code>verifyKey()</code> jest wywołana bez żadnych
            argumentów, to używany jest klucz API, który był podany do
            konstruktora.
        </para>

        <para>
            Metoda <code>verifyKey()</code> implementuje metodę REST
            <code>verify-key</code> serwisu Akismet.
        </para>
    </sect2>

    <sect2 id="zend.service.akismet.isspam">
        <title>Sprawdzanie czy dane są spamem</title>

        <para>
            Metoda <code>Zend_Service_Akismet::isSpam($data)</code> jest używana
            do sprawdzenia, czy przekazane dane są uznane przez Akismet jako 
            spam. Metoda przyjmuje tablicę asocjacyjną jako jedyny argument.
            Tablica ta wymaga zdefiniowania poniższych kluczy:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>user_ip</code>, adres IP użytkownika wysyłającego
                    dane (nie twój adres IP, tylko użytkownika twojego serwisu)
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>user_agent</code>, the reported UserAgent
                    string (przeglądarka oraz wersja) of the user submitting
                    the data.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Poniższe klucze są także rozpoznawane przez API:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>blog</code>, the fully qualified URL to the
                    resource or application. If not specified, the URL
                    provided to the constructor will be used.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>referrer</code>, the content of the
                    HTTP_REFERER header at the time of submission. (Note
                    spelling; it does not follow the header name.)
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>permalink</code>, the permalink location, if
                    any, of the entry the data was submitted to.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>comment_type</code>, typ przesyłanych danych.
                    Możliwe wartości określone w API to 'comment', 'trackback', 
                    'pingback', oraz pusty łańcuch znaków (''), ale wartość 
                    może być dowolna. 
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>comment_author</code>, nazwa osoby dodającej dane.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>comment_author_email</code>, adres email osoby
                    dodającej dane.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>comment_author_url</code>, adres URL lub strona
                    domowa osoby dodającej dane.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>comment_content</code>, aktualnie wysłana zawartość
                    komentarza.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Możesz także przesłać dowolne inne zmienne opisujące środowisko, 
            ktore według ciebie mogą być pomocne w zweryfikowaniu danych pod 
            kątem spamu. Serwis Akismet sugeruje, aby była to cała zawartość
            tablicy $_SERVER.
        </para>

        <para>
            Metoda <code>isSpam()</code> zwróci wartość logiczną true lub false,
            a w przypadku gdy klucz API jest nieprawidłowy, wyrzuci wyjątek.
        </para>

        <example>
            <title>Użycie metody isSpam()</title>

            <programlisting role="php"><![CDATA[<?php
$data = array(
    'user_ip'              => '111.222.111.222',
    'user_agent'           => 'Mozilla/5.0 (Windows; U; Windows NT 5.2; en-GB; rv:1.8.1) Gecko/20061010 Firefox/2.0',
    'comment_type'         => 'contact',
    'comment_author'       => 'John Doe',
    'comment_author_email' => 'nospam@myhaus.net',
    'comment_content'      => "I'm not a spammer, honest!"
);
if ($akismet->isSpam($data)) {
    echo "Sorry, but we think you're a spammer.";
} else {
    echo "Welcome to our site!";
}
?>]]></programlisting>
        </example>

        <para>
            Metoda <code>isSpam()</code> implementuje metodę <code>comment-check</code>
            API serwisu Akismet.
        </para>
    </sect2>

    <sect2 id="zend.service.akismet.submitspam">
        <title>Submitting known spam</title>

        <para>
            Occasionally spam data will get through the filter. If in your
            review of incoming data you discover spam that you feel should have
            been caught, you can submit it to Akismet to help improve their
            filter.
        </para>

        <para>
            <code>Zend_Service_Akismet::submitSpam()</code> takes the same data
            array as passed to <code>isSpam()</code>, but does not return a
            value. An exception will be raised if the API key used is invalid.
        </para>

        <example>
            <title>Użycie metody submitSpam()</title>

            <programlisting role="php"><![CDATA[<?php
$data = array(
    'user_ip'              => '111.222.111.222',
    'user_agent'           => 'Mozilla/5.0 (Windows; U; Windows NT 5.2; en-GB; rv:1.8.1) Gecko/20061010 Firefox/2.0',
    'comment_type'         => 'contact',
    'comment_author'       => 'John Doe',
    'comment_author_email' => 'nospam@myhaus.net',
    'comment_content'      => "I'm not a spammer, honest!"
);
$akismet->submitSpam($data));
?>]]></programlisting>
        </example>

        <para>
            Metoda <code>submitSpam()</code> implementuje metodę <code>submit-spam</code>
            API serwisu Akismet.
        </para>
    </sect2>

    <sect2 id="zend.service.akismet.submitham">
        <title>Submitting false positives (ham)</title>

        <para>
            Occasionally data will be trapped erroneously as spam by Akismet.
            For this reason, you should probably keep a log of all data
            trapped as spam by Akismet and review it periodically. If you find
            such occurrences, you can submit the data to Akismet as "ham", or a
            false positive (ham is good, spam is not). 
        </para>

        <para>
            <code>Zend_Service_Akismet::submitHam()</code> takes the same data
            array as passed to <code>isSpam()</code> or
            <code>submitSpam()</code>, and, like <code>submitSpam()</code>, does
            not return a value. An exception will be raised if the API key used
            is invalid.
        </para>

        <example>
            <title>Użycie metody submitHam()</title>

            <programlisting role="php"><![CDATA[<?php
$data = array(
    'user_ip'              => '111.222.111.222',
    'user_agent'           => 'Mozilla/5.0 (Windows; U; Windows NT 5.2; en-GB; rv:1.8.1) Gecko/20061010 Firefox/2.0',
    'comment_type'         => 'contact',
    'comment_author'       => 'John Doe',
    'comment_author_email' => 'nospam@myhaus.net',
    'comment_content'      => "I'm not a spammer, honest!"
);
$akismet->submitHam($data));
?>]]></programlisting>
        </example>

        <para>
            Metoda <code>submitHam()</code> implementuje metodę <code>submit-ham</code>
            API serwisu Akismet.
        </para>
    </sect2>

    <sect2 id="zend.service.akismet.accessors">
        <title>Specyficzne metody dostępowe</title>

        <para>
            O ile API serwisu Akismet określa jedynie cztery metody,
            komponent <code>Zend_Service_Akismet</code> posiada kilka 
            dodatkowych metod dostępowych, które mogą być użyte do modyfikowania
            wewnętrznych właściwości.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Metody <code>getBlogUrl()</code> oraz <code>setBlogUrl()</code>
                    pozwalają ci na odebranie oraz modyfikację adresu URL bloga
                    używanego w żądaniach.
                </para>
            </listitem>

            <listitem>
                <para>
                    Metody <code>getApiKey()</code> oraz <code>setApiKey()</code>
                    pozwalają ci na odebranie oraz modyfikację klucza API
                    używanego w żądaniach.
                </para>
            </listitem>

            <listitem>
                <para>
                    Metody <code>getCharset()</code> oraz <code>setCharset()</code>
                    pozwalają ci na odebranie oraz modyfikację zestawu znaków
                    używanego w żądaniach.
                </para>
            </listitem>

            <listitem>
                <para>
                    Metody <code>getPort()</code> oraz <code>setPort()</code>
                    pozwalają ci na odebranie oraz modyfikację portu TCP
                    używanego w żądaniach.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getUserAgent()</code> and <code>setUserAgent()</code>
                    allow you to retrieve and modify the HTTP user agent used to
                    make the request. Note: this is not the user_agent used in
                    data submitted to the service, but rather the value provided
                    in the HTTP User-Agent header when making a request to the
                    service.
                </para>

                <para>
                    The value used to set the user agent should be of the form
                    <code>some user agent/version | Akismet/version</code>. The
                    default is <code>Zend Framework/0.7.0 | Akismet/1.11</code>.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
