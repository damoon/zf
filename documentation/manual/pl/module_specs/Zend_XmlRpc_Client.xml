<sect1 id="zend.xmlrpc.client">
    <title>Zend_XmlRpc_Client</title>
    <sect2 id="zend.xmlrpc.client.introduction">
        <title>Introduction</title>
        <para>
            Using the <code>Zend_XmlRpc_Client</code> is very similar to using <code>SoapClient</code> objects (<ulink url="http://www.php.net/soap">SOAP web service extension</ulink>).
            You can simply call the XML-RPC service procedures as <code>Zend_XmlRpc_Client</code> methods.
            Specify the service's full address in the <code>Zend_XmlRpc_Client</code> constructor.
        </para>
        <example>
            <title>A basic XML-RPC request</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connect to framework.zend.com server and an array describing
 * the methods available.
 */
require_once 'Zend/XmlRpc/Client.php';

$server = new Zend_XmlRpc_Client('http://framework.zend.com/xmlrpc');

print_r( $server->system->listMethods() );

?>]]>
            </programlisting>
        </example>
        <para>
            <note>
                <code>Zend_XmlRpc_Client</code> attempts to make remote methods look as much like
                native methods as possible.  If a remote method contains namespaces, such as 
                <code>system.listMethods()</code> above, the call is made using object
                chaining in PHP: <code>$server->system->listMethods()</code>.
            </note>
        </para>
    </sect2>
    <sect2 id="zend.xmlrpc.client.parameters">
        <title>Using parameters</title>
        <para>
            Some XML-RPC service procedures require parameters, the necessary parameters are passed as parameters for the <code>Zend_XmlRpc_Client</code> method.
            XML-RPC procedure parameters must be a specific XML-RPC type.
            Parameters can be passed in 2 ways: as PHP natives or <code>Zend_XmlRpc_Value</code> objects which represent XML-RPC types.
        </para>
        <sect3 id='zend.xmlrpc.client.parameters.php_native'>
            <title>Passing PHP native variables as parameters</title>
            <para>
                Parameters passed as native PHP variables, meaning as a string, integer, float, boolean, array or an object.
                In this case, each PHP native type will be auto-detected and converted into one of the XML-RPC types according to this table:
            </para>
            <table>
                <title>PHP native values convertion to XML-RPC types</title>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>PHP native type</entry>
                            <entry>XML-RPC type</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>integer</entry>
                            <entry>int</entry>
                        </row>
                        <row>
                            <entry>double</entry>
                            <entry>double</entry>
                        </row>
                        <row>
                            <entry>boolean</entry>
                            <entry>boolean</entry>
                        </row>
                        <row>
                            <entry>string</entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>array</entry>
                            <entry>array</entry>
                        </row>
                        <row>
                            <entry>associative array</entry>
                            <entry>struct</entry>
                        </row>
                        <row>
                            <entry>object</entry>
                            <entry>array</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <programlisting role="php"><![CDATA[...
/** 2 parameters are passed in this procedure
 *  The first parameter is a string that will be auto-converted into an XML-RPC string type
 *  The second parameter is an associative array that will be converted into an XML-RPC struct 
 */

$p1 = 'parameter 1';
$p2 = array('name' => 'Joe', 'age' => 30);

$service->serviceProcedure($p1, $p2);
...]]>
            </programlisting>
        </sect3>
        <sect3 id='zend.xmlrpc.client.parameters.xmlrpc_value'>
            <title>Passing <code>Zend_XmlRpc_Value</code> objects as parameters</title>
            <para>
                Parameters passed as <code>Zend_XmlRpc_Value</code> objects. You can create one of the <code>Zend_XmlRpc_Value</code> instances to specify the exact XML-RPC type of your parameters.
                The main reasons for explictly specifing the XML-RPC types are:
                <itemizedlist>
                    <listitem>
                        When you want to make sure the correct parameter type is passed to the procedure (i.e. the procedure requires an integer and you may receive the parameter from the $_GET array as a string)
                    </listitem>
                    <listitem>
                        When the procedure requires base64 or dateTime.iso8601 type (which doesn't exists as a PHP native type)
                    </listitem>
                    <listitem>
                        When auto-convertion may fail (i.e. you want to pass an empty XML-RPC struct as a parameter. Empty structs are represented as empty arrays in PHP but, if you give an empty array as a parameter it will be auto-converted to an XML-RPC array since it's not an associative array)
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                There are 2 ways to create an <code>Zend_XmlRpc_Value</code> object: the explicit way (call the object's constructor) or using the <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> static function with the required XML-RPC type constant.
            </para>
            <table>
                <title><code>Zend_XmlRpc_Value</code> object representing the XML-RPC types</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>XML-RPC type</entry>
                            <entry>Matching <code>Zend_XmlRpc_Value</code> constant</entry>
                            <entry><code>Zend_XmlRpc_Value</code> object</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>int</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_INTEGER</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Integer</code></entry>
                        </row>
                        <row>
                            <entry>double</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_DOUBLE</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Double</code></entry>
                        </row>
                        <row>
                            <entry>boolean</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_BOOLEAN</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Boolean</code></entry>
                        </row>
                        <row>
                            <entry>string</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_STRING</code></entry>
                            <entry><code>Zend_XmlRpc_Value_String</code></entry>
                        </row>
                        <row>
                            <entry>base64</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_BASE64</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Base64</code></entry>
                        </row>
                        <row>
                            <entry>dateTime.iso8601</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_DATETIME</code></entry>
                            <entry><code>Zend_XmlRpc_Value_DateTime</code></entry>
                        </row>
                        <row>
                            <entry>array</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_ARRAY</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Array</code></entry>
                        </row>
                        <row>
                            <entry>struct</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_STRUCT</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Struct</code></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <programlisting role="php"><![CDATA[...
/** 2 parameters are passed to this procedure
 *  The first parameter is an XML-RPC base64 type that is created using the static Zend_XmlRpc_Value::getXmlRpcValue() function
 *  The second parameter is an XML-RPC structure that is created explictly
 */

$p1 = ZXmlRpcValue::getXmlRpcValue('encoded string', Zend_XmlRpc_Value::XMLRPC_TYPE_BASE64);
$p2 = new Zend_XmlRpc_Value_Struct(array('name' => 'Joe', 'age' => 30));

$service->serviceProcedure($p1, $p2);
...]]>
            </programlisting>
            <para>
                <note>
                    The value of the parameter is still given in a PHP variable but will be converted to the specified type using PHP conversion techniques (i.e. if a string is given as a value to the <code>Zend_XmlRpc_Value_Integer</code> object, it will be converted using <code>(int)$value</code>).
                </note>
            </para>
        </sect3>
        <sect3 id='zend.xmlrpc.client.parameters.as_xml'>
            <title>Parse an XML string into XML-RPC parameter</title>
            <para>
                This method of passing parameters is used internaly in the <code>Zend_XmlRpc</code> package and it's not recommended.
            </para>
            <para>
                If you still need to use this method, you should use the <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> static function to parse an XML string into a <code>Zend_XmlRpc_Value</code> object which represents the corresponding XML-RPC type.
                The <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> function should receive 2 parameters: the XML string and the <code>Zend_XmlRpc_Value::XML_STRING</code> constant.
            </para>
        </sect3>
    </sect2>
    <sect2 id="zend.xmlrpc.client.wsdl">
        <title>Type hinting of parameters</title>
        <para>
            The main difference between the XML-RPC and SOAP web services is the WSDL file. The SOAP protocol usualy has a WSDL file that describes the interface to the web service. According to this interface, the SOAP client knows what are the necessary parameter types it has to send to the server and what is the return value type.
            Without the WSDL file, the user might have a problem knowing these types.
        </para>
        <para>
            The XML-RPC protocol solution uses a special procedure of the service called <code>system.methodSignature</code>. This procedure gets a procedure name as a parameter and returns the signature of the given procedure. The signature is the necessary parameter's type and return value type of that procedure. 
        </para>
        <note>
            Not all XML-RPC servers support the special <code>system.methodSignature</code> procedure, servers who don't support it cannot support type hinting.
        </note>
        <para>
            The <code>Zend_XmlRpc_Client</code> implements a sort of 'WSDL' type file for XML-RPC servers using the <code>system.methodSignature</code> procedure.
            If requested, the <code>Zend_XmlRpc_Client</code> will request a list of all the procedures of an XML-RPC server, request all the signatures of those procedures, and keep all this data in an XML file (similar to the SOAP WSDL file).
            When using the same XML-RPC server again, the user can supply the XML file and the <code>Zend_XmlRpc_Client</code> will type hint all the parameters for the requested procedure according to their signatures.
        </para>
        <para>
            The procedures signatures XML file is created by calling the <code>Zend_XmlRpc_Client::__getMethodsXml()</code> function (the function returns an XML string containing all the signature's data).
            To set an existing signatures XML file, the user can pass the XML data as a parameter in the <code>Zend_XmlRpc_Client</code> constructor or call the <code>Zend_XmlRpc_Client::__setMethodsXml()</code> function.
        </para>
        <example>
            <title>Calling an XML-RPC service with type hinting</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connect to an XML-RPC server, and save it's signatures file (the XML-RPC eqvivilant to a SOAP WSDL file)
 */
require_once 'Zend/XmlRpc/Client.php';

$service = new Zend_XmlRpc_Client('http://www.example.org/xmlrpc');

file_put_contents('/tmp/xmlrpc-signatures/example.xml', $service->__getMethodsXml());

/* The $service object contains all the signatures of the XML-RPC server,
    when the serviceProcedure is called, its parameter ($param) is converted
    to the necessary type according to the procedure's signature.
 */
$service->serviceProcedure($param);
?>]]>
            </programlisting>
            <programlisting role="php"><![CDATA[<?php
/**
 * Connect to an XML-RPC server, using an existing signature file, we make sure
 * that the type of the parameters passed to the procedures are of the necessary type
 */
require_once 'Zend/XmlRpc/Client.php';

$signature_file_xml = file_get_contents('/tmp/xmlrpc-signatures/example.xml');
$service = new Zend_XmlRpc_Client('http://www.example.org/xmlrpc', 'namespace', $signature_file_xml);

/* The $service object contains all the signatures of the XML-RPC server,
    when the serviceProcedure is called, its parameter ($param) is converted
    to the necessary type according to the procedure's signature.
 */
$service->serviceProcedure($param);
?>]]>
            </programlisting>
        </example>
    </sect2>
    <sect2 id="zend.xmlrpc.client.response">
        <title>Getting the response</title>
        <para>
            The XML-RPC procedure returns a value in an XML-RPC type.
            The <code>Zend_XmlRpc_Client</code> method which calls the XML-RPC procedure returns a PHP native type that was converted from the returned XML-RPC type.
        </para>
        <para>
            You can use the <code>Zend_XmlRpc_Client::__getResponse()</code> function to retrieve the return value of the requested procedure.
            The <code>__getResponse()</code> function receives a parameter which indicates the type of the return value.
            The response options are:
            <itemizedlist>
                <listitem>
                    <code>Zend_XmlRpc_Client::RESPONSE_PHP_NATIVE</code> - Return the procedure return value as a PHP native type (convert the XML-RPC type into a PHP type).
                </listitem>
                <listitem>
                    <code>Zend_XmlRpc_Client::RESPONSE_XML_STRING</code> - Return the XML string representation of the XML-RPC response.
                </listitem>
                <listitem>
                    <code>Zend_XmlRpc_Client::RESPONSE_ZXMLRPC_OBJECT</code> - Return a <code>Zend_XmlRpc_Value</code> object which represents the returned XML-RPC type.
                </listitem>
            </itemizedlist>
        </para>
        <programlisting role="php"><![CDATA[...
$service->serviceProcedure();

$response = $service->__getResponse();
// $response is the PHP variable converted from the XML-RPC type return value
  
$response = $service->__getResponse(ZXmlRpcClient::RESPONSE_XML_STRING);
// $response is a string containing the XML representing the procedure return value

$response = $service->__getResponse(ZXmlRpcClient::RESPONSE_ZXMLRPC_OBJECT);
// $response is a Zend_XmlRpc_Value instance representing the XML-RPC type return value
...]]>
        </programlisting>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
