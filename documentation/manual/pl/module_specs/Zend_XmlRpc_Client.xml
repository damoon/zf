<sect1 id="zend.xmlrpc.client">
    <title>Zend_XmlRpc_Client</title>
    <sect2 id="zend.xmlrpc.client.introduction">
        <title>Wprowadzenie</title>
        <para>
            Użycie klienta <code>Zend_XmlRpc_Client</code> jest bardzo podobne do użycia 
            obiektów <code>SoapClient</code> (<ulink url="http://www.php.net/soap">rozszerzenie 
            SOAP</ulink>). Możesz w prosty sposób wywołać procedury XML-RPC jako metody
            obiektu <code>Zend_XmlRpc_Client</code>. Pełny adres serwisu możesz 
            określić w konstruktorze <code>Zend_XmlRpc_Client</code>.
        </para>
        <example>
            <title>Proste zapytanie XML-RPC</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Łączy się  z serwerem framework.zend.com i pobiera
 * tablicę z dostępnymi metodami.
 */
require_once 'Zend/XmlRpc/Client.php';

$server = new Zend_XmlRpc_Client('http://framework.zend.com/xmlrpc');

print_r( $server->system->listMethods() );

?>]]>
            </programlisting>
        </example>
        <para>
            <note>
                <code>Zend_XmlRpc_Client</code> dąży do tego, aby użycie zdalnych metod
                były tak podobne do metod natywnych jak to tylko możliwe. Jeśli zdalne
                metody zawierają przestrzenie nazw jak np. <code>system.listMethods()</code>, 
                powinny one być wywoływane w PHP w sposób łańcuchowy: 
                <code>$server->system->listMethods()</code>.
            </note>
        </para>
    </sect2>
    <sect2 id="zend.xmlrpc.client.parameters">
        <title>Użycie parametrów</title>
        <para>
            Niektóre procedury serwisów XML-RPC wymagają parametrów, potrzebne
            parametry są przekazywae jako parametry do metody <code>Zend_XmlRpc_Client</code>.
            Parametry procedur XML-RPC muszą mieć określony typ XML-RPC. Parametry
            mogą być przekazane na dwa sposoby: jako natywna zmienna PHP lub jako obiekt
            <code>Zend_XmlRpc_Value</code> reprezentujący wartość typu XML-RPC.
        </para>
        <sect3 id='zend.xmlrpc.client.parameters.php_native'>
            <title>Przekazywanie natywnych wartości PHP jako parametrów</title>
            <para>
                Parametery są przekazywane jako natywne zmienne PHP, czyli
                łańcuch znaków (string), liczba całkowita (integer), liczba 
                zmiennoprzecinkowa (float), wartość logiczna (boolean), 
                tablica (array) lub obiekt (object). W tym przypadku każda 
                natywna wartość PHP zostanie automatycznie wykryta i skonwertowana
                do typu XML-RPC zgodnie z tą tabelą:
            </para>
            <table>
                <title>Konwersja natywnych wartości PHP do typów XML-RPC</title>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Natywny typ PHP</entry>
                            <entry>Typ XML-RPC</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>integer</entry>
                            <entry>int</entry>
                        </row>
                        <row>
                            <entry>double</entry>
                            <entry>double</entry>
                        </row>
                        <row>
                            <entry>boolean</entry>
                            <entry>boolean</entry>
                        </row>
                        <row>
                            <entry>string</entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>array</entry>
                            <entry>array</entry>
                        </row>
                        <row>
                            <entry>associative array</entry>
                            <entry>struct</entry>
                        </row>
                        <row>
                            <entry>object</entry>
                            <entry>array</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <programlisting role="php"><![CDATA[...
/** 2 parametry są przekazywane w tej procedurze
 *  Pierwszy parametr jest łańcuchem znaków więc zostanie skonwertowany do łańcucha znaków XML-RPC
 *  Drugi parametr jest tablicą asocjacyjną i będzie skonwertowany do struktury XML-RPC 
 */

$p1 = 'parameter 1';
$p2 = array('name' => 'Joe', 'age' => 30);

$service->serviceProcedure($p1, $p2);
...]]>
            </programlisting>
        </sect3>
        <sect3 id='zend.xmlrpc.client.parameters.xmlrpc_value'>
            <title>Przekazywanie obiektów <code>Zend_XmlRpc_Value</code> jako parametrów</title>
            <para>
                Parametry są przekazywane jako obiekty <code>Zend_XmlRpc_Value</code>. 
                Możesz utworzyć jedną z instancji <code>Zend_XmlRpc_Value</code> 
                aby określić dokładny typ XML-RPC parametrów. Głównymi powodami
                dokładnego określania typów XML-RPC są:
                <itemizedlist>
                    <listitem>
                        Gdy chcesz być pewny, że parametr poprawnego typu jest
                        przekazywany do procedury (np. gdy procedura wymaga 
                        parametru typu integer a ty możesz otrzymać parametr
                        z tablicy $_GET, który jest łańcuchem znaków)
                    </listitem>
                    <listitem>
                        Gdy procedura wymaga typu base64 lub dateTime, typu iso8601 
                        (który nie istnieje jako natywny typ PHP)
                    </listitem>
                    <listitem>
                        Gdy automatyczna konwersja zawiedzie (np. gdy chcesz 
                        przekazać pustą strukturę XML-RPC jako parametr. Puste 
                        struktury są reprezentowane jako puste tablice w PHP, ale 
                        gdy w parametrze przekażesz pustą tablicę to będzie ona
                        automatycznie skonwertowana do tablicy XML-RPC ponieważ
                        nie jest ona tablicą asocjacyjną.)
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                Są dwa sposoby utworzenia obiektu <code>Zend_XmlRpc_Value</code>: 
                sposób ścisły (wywołanie konstruktora obiektu) lub użycie statycznej
                funkcji <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> z
                wymaganą stałą XML-RPC.
            </para>
            <table>
                <title>Obiekt <code>Zend_XmlRpc_Value</code> reprezentujący typy XML-RPC</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>Typ XML-RPC</entry>
                            <entry>Odpowiadająca stała <code>Zend_XmlRpc_Value</code></entry>
                            <entry>Obiekt <code>Zend_XmlRpc_Value</code></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>int</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_INTEGER</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Integer</code></entry>
                        </row>
                        <row>
                            <entry>double</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_DOUBLE</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Double</code></entry>
                        </row>
                        <row>
                            <entry>boolean</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_BOOLEAN</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Boolean</code></entry>
                        </row>
                        <row>
                            <entry>string</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_STRING</code></entry>
                            <entry><code>Zend_XmlRpc_Value_String</code></entry>
                        </row>
                        <row>
                            <entry>base64</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_BASE64</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Base64</code></entry>
                        </row>
                        <row>
                            <entry>dateTime.iso8601</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_DATETIME</code></entry>
                            <entry><code>Zend_XmlRpc_Value_DateTime</code></entry>
                        </row>
                        <row>
                            <entry>array</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_ARRAY</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Array</code></entry>
                        </row>
                        <row>
                            <entry>struct</entry>
                            <entry><code>Zend_XmlRpc_Value::XMLRPC_TYPE_STRUCT</code></entry>
                            <entry><code>Zend_XmlRpc_Value_Struct</code></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <programlisting role="php"><![CDATA[...
/** 2 parametry przekazane do procedury
 *  Pierwszy parametr jest typu base64 XML-RPC  i jest tworzony przy użyciu statycznej metody Zend_XmlRpc_Value::getXmlRpcValue()
 *  Drugi parametr jest strukturą XML-RPC i jest tworzony bezpośrednio za pomocą konstruktora
 */

$p1 = ZXmlRpcValue::getXmlRpcValue('encoded string', Zend_XmlRpc_Value::XMLRPC_TYPE_BASE64);
$p2 = new Zend_XmlRpc_Value_Struct(array('name' => 'Joe', 'age' => 30));

$service->serviceProcedure($p1, $p2);
...]]>
            </programlisting>
            <para>
                <note>
                    Wartość parametru jest także podana jako zmienna PHP, ale jest
                    ona konwertowana do określonego typu przy użyciu technik 
                    konwersji (np. jeśli łańcuch znaków zostanie przekazany do
                    obiektu <code>Zend_XmlRpc_Value_Integer</code>, to będzie
                    on skonwertowany przy użyciu <code>(int)$value</code>).
                </note>
            </para>
        </sect3>
        <sect3 id='zend.xmlrpc.client.parameters.as_xml'>
            <title>Konwersja danych XML do parametrów XML-RPC</title>
            <para>
                Ta metoda przekazywania parametrów jest używana wewnętrznie w 
                pakiecie <code>Zend_XmlRpc</code> i nie jest polecana.
            </para>
            <para>
                Jeśli wciąż potrzebujesz użyć tej metody, powinieneś użyć statycznej
                funkcji <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> aby przeprowadzić
                konwersję łańcucha znaków XML do obiektu <code>Zend_XmlRpc_Value</code>, 
                który reprezentuje odpowiedni typ XML-RPC. Funkcja 
                <code>Zend_XmlRpc_Value::getXmlRpcValue()</code> powinna otrzymać 2 
                parametry: łańcuch znaków XML i stałą <code>Zend_XmlRpc_Value::XML_STRING</code>.
            </para>
        </sect3>
    </sect2>
    <sect2 id="zend.xmlrpc.client.wsdl">
        <title>Informacje o parametrach</title>
        <para>
            Główną różnicą między XML-RPC a serwisami SOAP jest plik WSDL. Protokół
            SOAP zazwyczaj ma plik WSDL który opisuje interfejs serwisu. Zależnie
            od tego interfejsu, klient SOAP wie jakiego typu parametry musi wysłać
            do serwera i jaki jest typ zwracanej wartości. Bez pliku WSDL użytkownik
            mógłby mieć problem ze zidentyfikowaniem tych typów.
        </para>
        <para>
            Protokół XML-RPC używa specjalnej procedury zwanej <code>system.methodSignature</code>. 
            Ta procedura przekazuje w jako parametr nazwę procedury i zwraca sygnaturę
            tej procedury. Sygnatura informuje o wymaganych typach parametrów i o typie
            zwracanej przez nią wartości.
        </para>
        <note>
            Nie wszystkie serwery XML-RPC obsługują procedurę <code>system.methodSignature</code>, 
            serwery które jej nie obsługują, nie umożliwiają identyfikowania typów
            parametrów.
        </note>
        <para>
            Klient <code>Zend_XmlRpc_Client</code> implementuje plik rodzaju 'WSDL' 
            dla serwerów XML-RPC przy użyciu procedury <code>system.methodSignature</code>.
            Jeśli zostanie ona wywołana, klient <code>Zend_XmlRpc_Client</code> zażąda
            listy wszystkich procedur serwera XML-RPC, następnie zażąda sygnatur
            wszystkich tych procedur, i zatrzyma te dane w pliku XML (podobnym
            do pliku SOAP WSDL).
            Gdy użyjemy tego samego serwera XML-RPC ponownie, użytkownik może dostarczyć
            plik XML i wtedy <code>Zend_XmlRpc_Client</code> skonwertuje wszystkie
            parametry dla wywołanych procedur według ich sygnatur.
        </para>
        <para>
            Plik XML z sygnaturami tworzony jest przez wywołanie funkcji
            <code>Zend_XmlRpc_Client::__getMethodsXml()</code> (funkcja zwraca
            łańcuch znaków XML zawierający wszystkie sygnatury).
            Aby wybrać istniejący plik XML z sygnaturami, użytkownik może przekazać
            dane XML jako parametr do konstruktora <code>Zend_XmlRpc_Client</code> 
            lub wywołać metodę <code>Zend_XmlRpc_Client::__setMethodsXml()</code>.
        </para>
        <example>
            <title>Wywołanie serwisu XML-RPC z użyciem pliku sygnatur</title>
            <programlisting role="php"><![CDATA[<?php
/**
 * Łączy się z serwerem XML-RPC i zapisuje jego plik z sygnaturami (odpowiednik XML-RPC pliku SOAP WSDL)
 */
require_once 'Zend/XmlRpc/Client.php';

$service = new Zend_XmlRpc_Client('http://www.example.org/xmlrpc');

file_put_contents('/tmp/xmlrpc-signatures/example.xml', $service->__getMethodsXml());

/* Obiekt $service zawiera wszystkie sygnatury serwera XML-RPC, teraz
   gdy wywołana jest procedura serviceProcedure, jej parametr ($param) jest
   konwertowany do odpowiedniego typu według sygnatury.
 */
$service->serviceProcedure($param);
?>]]>
            </programlisting>
            <programlisting role="php"><![CDATA[<?php
/**
 * Łączy się z serwerem XML-RPC przy użyciu istniejącego pliku sygnatury, mamy pewność,
 * że typy parametrów przekazane do procedur są odpowiednie.
 */
require_once 'Zend/XmlRpc/Client.php';

$signature_file_xml = file_get_contents('/tmp/xmlrpc-signatures/example.xml');
$service = new Zend_XmlRpc_Client('http://www.example.org/xmlrpc', 'namespace', $signature_file_xml);

/* Obiekt $service zawiera wszystkie sygnatury serwera XML-RPC, teraz
   gdy wywołana jest procedura serviceProcedure, jej parametr ($param) jest
   konwertowany do odpowiedniego typu według sygnatury.
 */
$service->serviceProcedure($param);
?>]]>
            </programlisting>
        </example>
    </sect2>
    <sect2 id="zend.xmlrpc.client.response">
        <title>Uzyskiwanie odpowiedzi</title>
        <para>
            Procedura XML-RPC zwraca wartość typu XML-RPC. Metoda <code>Zend_XmlRpc_Client</code> 
            która wywołuje procedurę XML-RPC zwraca wartość natywnego typu PHP, która
            jest skonwertowana ze zwróconego typu XML-RPC.
        </para>
        <para>
            Możesz użyć funkcji <code>Zend_XmlRpc_Client::__getResponse()</code> 
            aby otrzymać zwróconą wartość wywołanej procedury. Funkcja <code>__getResponse()</code> 
            przyjmuje parametr, który mówi jakiego typu wartość ma zwrócić.
            Opcje odpowiedzi:
            <itemizedlist>
                <listitem>
                    <code>Zend_XmlRpc_Client::RESPONSE_PHP_NATIVE</code> - Zwraca
                    wartość jako natywną wartość PHP (konwertuje typ XML-RPC do typu PHP).
                </listitem>
                <listitem>
                    <code>Zend_XmlRpc_Client::RESPONSE_XML_STRING</code> - Zwraca odpowiedź
                    serwisu XML-RPC w postaci łańcucha znaków XML.
                </listitem>
                <listitem>
                    <code>Zend_XmlRpc_Client::RESPONSE_ZXMLRPC_OBJECT</code> - Zwraca
                    obiekt <code>Zend_XmlRpc_Value</code> który reprezentuje zwrócony
                    typ XML-RPC.
                </listitem>
            </itemizedlist>
        </para>
        <programlisting role="php"><![CDATA[...
$service->serviceProcedure();

$response = $service->__getResponse();
// $response jest zmienną PHP skonwertowaną ze zwróconej wartości XML-RPC
  
$response = $service->__getResponse(ZXmlRpcClient::RESPONSE_XML_STRING);
// $response jest zmienną zawierającą łańcuch znaków XML reprezentującą zwróconą wartość

$response = $service->__getResponse(ZXmlRpcClient::RESPONSE_ZXMLRPC_OBJECT);
// $response jest instancją obiektu Zend_XmlRpc_Value reprezentującą zwróconą wartość XML-RPC
...]]>
        </programlisting>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
