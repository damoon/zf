<sect1 id="zend.validate.introduction">

    <title>Wprowadzenie</title>

    <para>
        Komponent Zend_Filter zapewnia zestaw najczęściej potrzebnych 
        walidatorów. Zapewnia też prosty mechanizm łańcuchowego wywoływania 
        walidatorów, dzięki ktoremu wiele filtrów może być dodanych do jednej 
        danej w kolejności zdefiniowanej przez programistę.
    </para>

    <para>
        <emphasis role="strong">Czym jest walidator?</emphasis>
    </para>

    <para>
        Walidator bada dane wejściowe w oparciu o pewne wymagania i tworzy
        wynik w postaci wartości logicznej - wartość ta mówi czy dane wejściowe 
        spełniają te wymagania. Jeśli dane wejściowe nie spełniają wymagań, 
        walidator może dodatkowo przekazać informacje o tym, które z wymagań nie 
        zostały spełnione.
    </para>

    <para>
        Na przykład, aplikacja web może wymagać, aby długość nazwy użytkownika 
        mieściła się pomiędzy sześcioma a dwunastoma znakami, a znaki te były
        jedynie z grupy znaków alfanumerycznych. Walidator może być użyty do
        sprawdzenia czy nazwa użytkownika spełnia te wymagania. Jeśli wybrana
        nazwa użytkownika nie spełni jednego lub obu tych wymagań, użytecznie
        by było wiedzieć, które z wymagań nie zostało spełnione.
    </para>

    <para>
        Mająć ustaloną w ten sposób definicję walidacji, możemy zapewnić 
        podstawę dla interfejsu <code>Zend_Validate_Interface</code>, który 
        wymaga zaimplementowania przez klasę walidatora dwóch metod,  
        <code>isValid()</code> oraz <code>getMessages()</code>. Metoda
        <code>isValid()</code> przeprowadza walidację podanej wartości, 
        zwracając <code>true</code> wtedy i tylko wtedy, gdy wartość 
        spełnia kryteria walidacji. Jeśli metoda <code>isValid()</code> zwróci
        <code>false</code>, za pomocą metody <code>getMessages()</code> można
        pobrać tablicę wiadomości wyjaśniających powody niepowodzenia walidacji.
    </para>

    <note>
        <para>
            Metoda <code>getMessages()</code> zwraca wiadomości nieudanej 
            walidacji tylko dla ostatniego wywołania metody
            <code>isValid()</code>, ponieważ metoda <code>isValid()</code> 
            czyści wszystkie wiadomości pochodzące z poprzednich wywołań metody 
            <code>isValid()</code>.
        </para>
    </note>

    <para>
        Poniższy przykład ilustruje walidację adresu e-mail:

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/EmailAddress.php';
$validator = new Zend_Validate_EmailAddress();
if ($validator->isValid($email)) {
    // email jest prawidłowy
} else {
    // email nie jest prawidłowy; wyświetl powody
    foreach ($validator->getMessages() as $message) {
        echo "$message\n";
    }
}]]></programlisting>

    </para>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->