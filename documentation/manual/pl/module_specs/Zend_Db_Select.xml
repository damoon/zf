<sect1 id="zend.db.select">

    <title>Zend_Db_Select</title>

    <sect2 id="zend.db.select.introduction">

        <title>Wprowadzenie</title>

        <para>
            Zend_Db_Select jest narzędziem pomagającym w budowaniu zapytań SQL 
            SELECT w sposób niezależny od rodzaju bazy danych. Oczywiście nie 
            może to być perfekcyjne, ale pomaga w tym, aby zapytania były 
            przenośne pomiędzy różnymi systemami bazodanowymi. Dodatkowo
            pomaga to w uodpornieniu zapytań na ataki SQL injection.
        </para>

        <para>
            Najprostszy sposób utworzenia instancji Zend_Db_Select to użycie 
            metody Zend_Db_Adapter::select().
        </para>

        <programlisting role="php"><![CDATA[<?php
	
require_once 'Zend/Db.php';

$params = array (
    'host'     => '127.0.0.1',
    'username' => 'malory',
    'password' => '******',
    'dbname'   => 'camelot'
);

$db = Zend_Db::factory('PDO_MYSQL', $params);

$select = $db->select();
// $select jest teraz obiektem Zend_Db_Select skonfigurowanym do użycia z adapterem PDO_MYSQL.

?>]]></programlisting>

        <para>
            Wtedy konstruujesz zapytanie SELECT używając tego obiektu i jego metod,
            a następnie generujesz łańcuch znaków który przekazujesz spowrotem 
            do obiektu Zend_Db_Adapter w celu wykonania zapytania.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
//
// SELECT round_table.*
// FROM `round_table` round_table
// WHERE `noble_title` = 'Sir'
// ORDER BY `first_name`
// LIMIT 10 OFFSET 20
//

// możesz użyć stylu iteracyjnego...
$select->from('round_table');
$select->where('noble_title = ?', 'Sir');
$select->order('first_name');
$select->limit(10,20);

// ...lub stylu łańcuchowego:
$select->from('round_table')
       ->where('noble_title = ?', 'Sir')
       ->order('first_name')
       ->limit(10,20);

// pobieramy dane:
$sql = $select->__toString();
$result = $db->fetchAll($sql);

// druga alternatywa: możesz przekazać sam obiekt $select;
$result = $db->fetchAll($select);

// trzecia alternatywa: produce a Zend_Db_Statement
// or PDOStatement directly from the $select object:
$stmt = $select->query();
$result = $stmt->fetchAll();

?>]]></programlisting>

        <para>
            Możesz także użyć parametrów wstawianych w miejsce nazwanych 
            znaczników, zamiast cytowania parametrów po kolei.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
//
// SELECT round_table.*
// FROM `round_table` round_table
// WHERE noble_title = 'Sir'
// ORDER BY `first_name`
// LIMIT 10 OFFSET 20
//

$select->from('round_table', '*')
       ->where('noble_title = :title')
       ->order('first_name')
       ->limit(10,20);

// pobieramy wyniki używająć parametrów wstawianych w miejsce znaczników
$params = array('title' => 'Sir');
$result = $db->fetchAll($select, $params);

?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.fromcols">

        <title>Kolumny z tabel (FROM)</title>

        <para>
            Aby wybrać kolumny z określonej tabeli, użyj metody from(),
            określając tabelę oraz kolumny których potrzebujesz. Możesz 
            użyć aliasów dla tabel oraz kolumn, i możesz używać metody from() 
            tyle razy ile potrzebujesz.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// tworzymy obiekt $db, zakładając, że adapter to Mysql
$select = $db->select();

// SELECT some_table.`a`, some_table.`b`, some_table.`c`
// FROM `some_table` some_table

$select->from('some_table', array('a', 'b', 'c'));

// SELECT bar.`col`
// FROM `foo` bar

$select->from(array('foo' => 'bar'), 'col');

?>]]></programlisting>

        <para>
            The second argument to the from() method is a scalar
            to name a single column, or an array to name multiple
            columns.  The scalar or element of the array can be
            a string, which is interpreted as a plain column name,
            and is quoted and prepended with the table alias.
            If you omit the second argument, it defaults to <code>'*'</code>,
            which is not quoted but is prepended with the table alias.
            If you want no columns from this table to be in the result
            set, use an empty <code>array()</code>.
        </para>

        <para>
            Do not specify multiple columns as a single string of
            comma-separated column names.  This syntax used in
            earlier preview releases of Zend_Db is no longer supported.
            Use an array instead.
        </para>

        <para>
            The table alias is applied to every string element of the
            second argument, but if the element is an object of type
            Zend_Db_Expr, its string value is used without quoting
            or prepending with the table alias.
        </para>

        <programlisting role="php"><![CDATA[<?php

$select = $db->select();

// SELECT foo.col AS col1, bar.col AS col2
// FROM foo, bar
$select->from('foo', array(
    new Zend_Db_Expr('foo.col AS col1'),
    new Zend_Db_Expr('CURDATE()')
);
$select->from('bar', new Zend_Db_Expr('bar.col AS col2'));

?>]]></programlisting>

        <para>
            Use an associative array to declare table aliases.
            The key is the table name and the value is the alias.
            If you specify a table as a simple string instead of an associative
            array to declare the alias, Zend_Db_Select generates a table alias.
            By default, the generated table alias is spelled the same as each
            table name, as if you had written a SQL query
            "<code>SELECT foo.* FROM `foo` foo</code>".
            If you add the same table more than once, for example in a
            self-join, Zend_Db_Select declares unique aliases for each table
            instance, like "<code>foo_1</code>", "<code>foo_2</code>", etc.
        </para>

    </sect2>

    <sect2 id="zend.db.select.joincols">

        <title>Kolumny ze złączonych tabel (JOIN)</title>

        <para>
            Aby wybrać kolumny używając złączonych tabel, użyj metody join().
            Wpierw określ nazwę złączanej tabeli, następnie wyrażenie łączące,
            a na końcu kolumny które potrzebujesz dołączyć. Możesz użyć metody
            join() tyle razy ile potrzebujesz.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// tworzymy obiekt $db, zakładając, że adapter to Mysql
$select = $db->select();

// SELECT foo.*, bar.*
// FROM `foo` foo
// JOIN `bar` bar ON foo.id = bar.id

$select->from('foo');
$select->join('bar', 'foo.id = bar.id');

?>]]></programlisting>

        <para>
            The first argument to the join() method is a table specifier.
            This is the same as the first argument of the from() method,
            in that it can be a string that names a table, or it can be an
            associative array mapping the table name to an alias name.
        </para>

        <para>
            The second argument to the join() method is an expression that
            forms the join condition.  You can use table aliases here, but 
            remember that unless you specified the table alias, Zend_Db_Select
            generates one.  If you omit the join condition, this is
            equivalent to a CROSS JOIN or cartesian product.
        </para>

        <para>
            The third argument to the join() method is a list of columns from
            the joined table to include in the select-list.  This is the same
            as the second argument of the from() method, in that it can be
            a scalar that names a column, or an array of scalars to name
            multiple columns.  Each scalar can be either a string or an object
            of type Zend_Db_Expr.  If you omit the columns argument, the default
            is <code>'*'</code>.  If you want no columns from this table to
            be in the result set, use an empty <code>array()</code>.
        </para>

        <para>
            Do not specify multiple columns as a single string of
            comma-separated column names.  This syntax used in
            earlier preview releases of Zend_Db is no longer supported.
            Use an array instead.
        </para>

        <para>
            The following join types are supported:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <command>INNER JOIN</command> with the
                    <code>join()</code> or <code>joinInner()</code> methods.
                    All RDBMS brands support this join type.
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>LEFT JOIN</command> with the
                    <code>joinLeft()</code> method.
                    All RDBMS brands support this join type.
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>RIGHT JOIN</command> with the
                    <code>joinRight()</code> method.
                    Some RDBMS brands do not support this join type.
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>FULL JOIN</command> with the
                    <code>joinFull()</code> method.
                    Some RDBMS brands do not support this join type.
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>CROSS JOIN</command> with the
                    <code>joinCross()</code> method.
                    There is no parameter for this method to specify 
                    the join condition.
                    Some RDBMS brands do not support this join type.
                </para>
            </listitem>
            <listitem>
                <para>
                    <command>NATURAL JOIN</command> with the
                    <code>joinNatural()</code> method.
                    There is no parameter for this method to specify 
                    the join condition; a natural join assumes an
                    equi-join on columns of the same name in the
                    two tables.
                    Only NATURAL INNER JOIN is supported.
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.db.select.where">

        <title>Warunki WHERE</title>

        <para>
            Aby dodać warunki WHERE, użyj metody where(). Możesz przekazać
            zwykły łańcuch znaków lub możesz przekazać łańcuch znaków
            ze znacznikiem w postaci znaku zapytania oraz wartość która
            ma być zacytowana. (wartość będzie zacytowana za pomocą
            metody Zend_Db_Adapter::quoteInto).
        </para>

        <para>
            Kolejne wywołania where() będą łączyć warunki za pomocą AND;
            jeśli chcesz je złączyć za pomocą OR, użyj metody orWhere().
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// tworzymy obiekt $db, a następie odbieramy narzędzie SELECT.
$select = $db->select();

// SELECT r.*
// FROM `round_table` r
// WHERE noble_title = 'Sir'
//   AND favorite_color = 'yellow'

$select->from(array('round_table' => 'r'));
$select->where("noble_title = 'Sir'"); // osadzona wartość
$select->where('favorite_color = ?', 'yellow'); // cytowana wartość

// SELECT foo.*
//     FROM `foo` foo
//     WHERE bar = 'baz'
//     OR id IN('1', '2', '3')

$select->from('foo');
$select->where('bar = ?', 'baz');
$select->orWhere('id IN(?)', array(1, 2, 3));

?>]]></programlisting>

        <para>
            Zend_Db_Select does not apply quoting or table aliases to
            columns named in WHERE clauses.  If you combine PHP 
            variables into the string for a WHERE expression, you
            should use the Zend_Db_Adapter quoteIdentifier() method
            to protect against illegal syntax.
        </para>
        <programlisting role="php"><![CDATA[<?php
...
$columnName = 'bar'; // or set by an untrusted source
$whereExpr = $db->quoteIdentifier($columnName) . ' = ?';
$select->where($whereExpr, 'baz');
?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.group">

        <title>Warunek GROUP BY</title>

        <para>
            Aby grupować wiersze użyj metody group() tyle razy ile potrzebujesz.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// tworzymy obiekt $db, a następie odbieramy narzędzie SELECT.
$select = $db->select();

// SELECT COUNT(id)
// FROM `foo` foo
// GROUP BY `bar`, `baz`

$select->from('foo', new Zend_Db_Expr('COUNT(id)'));
$select->group('bar');
$select->group('baz');

// wywołanie metody group():
$select->group(array('bar', 'baz'));

?>]]></programlisting>

        <para>
            Do not specify multiple columns as a single string of
            comma-separated column names.  This syntax used in
            earlier preview releases of Zend_Db is no longer supported.
            Use an array instead.
        </para>

        <para>
            Quoting is applied to every string element of the
            group() argument, but if the element is an object of type
            Zend_Db_Expr, its string value is used without quoting.
        </para>

    </sect2>

    <sect2 id="zend.db.select.having">

        <title>Warunki HAVING</title>

        <para>
            Aby dodać warunki HAVING dla wybranych wyników użyj metody having().
            Ta metoda jest identyczna w użyciu jak metoda where().
        </para>

        <para>
            Kolejne wywołania having() będą łączyć warunki za pomocą AND;
            jeśli chcesz je złączyć za pomocą OR, użyj metody orHaving().
        </para>
        <programlisting role="php"><![CDATA[<?php
	
// tworzymy obiekt $db, a następie odbieramy narzędzie SELECT.
$select = $db->select();

// SELECT COUNT(id) AS count_id
//     FROM `foo` foo
//     GROUP BY `bar`, `baz`
//     HAVING count_id > '1'

$select->from('foo', new Zend_Db_Expr('COUNT(id) AS count_id'));
$select->group(array('bar', 'baz'));
$select->having('count_id > ?', 1);

?>]]></programlisting>

        <para>
            Zend_Db_Select does not apply quoting or table aliases to
            columns named in HAVING clauses.  If you combine PHP 
            variables into the string for a HAVING expression, you
            should use the Zend_Db_Adapter quoteIdentifier() method
            to protect against illegal syntax.
        </para>
        <programlisting role="php"><![CDATA[<?php
...
$columnName = 'count_id'; // or set by an untrusted source
$havingExpr = $db->quoteIdentifier($columnName) . ' > ?';
$select->having($havingExpr, 1);
?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.order">

        <title>Warunek ORDER BY</title>

        <para>
            Aby sortować dane użyj metody order() tyle razy ile potrzebujesz.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// tworzymy obiekt $db, a następie odbieramy narzędzie SELECT.
$select = $db->select();

// SELECT r.*
// FROM `round_table` r
// ORDER BY `noble_title` DESC, `first_name` ASC

$select->from('round_table');
$select->order('noble_title DESC');
$select->order('first_name');

// wywołanie metody order():
$select->order(array('noble_title DESC', 'first_name'));

?>]]></programlisting>

        <para>
            Do not specify multiple columns as a single string of
            comma-separated column names.  This syntax used in
            earlier preview releases of Zend_Db is no longer supported.
            Use an array instead.
        </para>

        <para>
            Quoting is applied to every string element of the
            order() argument, but if the element is an object of type
            Zend_Db_Expr, its string value is used without quoting.
        </para>

    </sect2>

    <sect2 id="zend.db.select.limit">

        <title>LIMIT w oparciu o ilość wyników i offset</title>

        <para>
            Zend_Db_Select oferuje obsługę bazodanowej składni LIMIT.
            Dla wielu baz danych, np. MySQL czy PostgreSQL, jest to
            relatywnie proste, ponieważ obsługują one składnię "LIMIT :count
            [OFFSET :offset]".
        </para>
        
        <para>
            Dla niektórych innych baz danych, nie jets to takie proste, ponieważ 
            nie obsługują one składni LIMIT. Microsoft SQL Server posiada 
            składnię TOP, która daje taki sam rezultat. Oracle oraz DB2 wymagają 
            zapytań napisanych w specjalny sposób  aby emulować składnię LIMIT.
            Zend_Db_Select może przepisać zapytanie SELECT odpowiednio dla 
            każdego ze sterowników bazy danych aby umożliwiać obsługę 
            funkcjonalności LIMIT.
        </para>

        <para>
            Aby limitować zwracane wyniki na podstawie ilości i offsetu użyj 
            metody limit() podając ilość oraz opcjonalny offset.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// na początek prosty "LIMIT :count"
$select = $db->select();
$select->from('foo');
$select->order('id');
$select->limit(10);

// W MySQL/PostgreSQL/SQLite odpowiada to zapytaniu:
//
// SELECT foo.*
// FROM "foo" foo
// ORDER BY "id" ASC
// LIMIT 10
//
// A w Microsoft SQL Server odpowiada to zapytaniu:
//
// SELECT TOP 10 foo.*
// FROM [foo] foo
// ORDER BY [id] ASC

// a teraz bardziej złożony "LIMIT :count OFFSET :offset"
$select = $db->select();
$select->from('foo', '*');
$select->order('id');
$select->limit(10, 20);

// W MySQL/PostgreSQL/SQLite odpowiada to zapytaniu:
//
// SELECT foo.*
// FROM "foo" foo
// ORDER BY "id" ASC
// LIMIT 10 OFFSET 20
//
// Microsoft SQL Server nie obsługuje offset, więc odpowiada to zapytaniu:
//
// SELECT * FROM (
//     SELECT TOP 10 * FROM (
//         SELECT TOP 30 *
//         FROM [foo] foo
//         ORDER BY [id] DESC
//     ) ORDER BY id ASC
// )
//
// Zend_Db_Adapter automatycznie tłumaczy zapytanie.

?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.paging">

        <title>LIMIT w oparciu o ilość wyników i numer strony</title>

        <para>
            Zend_Db_Select oferuje limitowanie wyników oparte na stronach. Jeśli
            chcesz pobrać pewną stronę wyników, użyj metody limitPage();
            wpierw przekaż numer strony którą potrzebujesz, a nąstępnie ilość
            wierszy jaka ma się pojawiać na każdej ze stron.
        </para>

        <programlisting role="php"><![CDATA[<?php
	
// budujemy podstawowe zapytanie select...
$select = $db->select();
$select->from('foo');
$select->order('id');

// ... i limitujemy do strony 3 gdzie każda strona ma 10 wierszy
$select->limitPage(3, 10);

// W MySQL/PostgreSQL/SQLite, odpowiada to zapytaniu:
//
// SELECT foo.*
// FROM `foo` foo
// ORDER BY `id` ASC
// LIMIT 10 OFFSET 20

?>]]></programlisting>
    </sect2>

    <sect2>
        <title>Other methods</title>

        <para>
            The distinct() method enables you to add the DISTINCT
            keyword to your SQL query.
        </para>
        <programlisting role="php"><![CDATA[<?php

// SELECT DISTINCT foo.`non_unique_column`
// FROM `foo` foo

$select = $db->select();
$select->distinct();
$select->from('foo', 'non_unique_column');

?>]]></programlisting>

        <para>
            The forUpdate() method enables you to add the FOR UPDATE
            keywords to your SQL query.
        </para>
        <programlisting role="php"><![CDATA[<?php

// SELECT FOR UPDATE foo.*
// FROM `foo` foo

$select = $db->select();
$select->forUpdate();
$select->from('foo');

?>]]></programlisting>

        <para>
            The query() method is like the query() method of
            the Zend_Db_Adapter.  It returns an object of type
            Zend_Db_Statement or PDOStatement, depending on the
            adapter type.
        </para>
        <programlisting role="php"><![CDATA[<?php

$select = $db->select();
$select->from('foo');
$stmt = $select->query();
$result = $stmt->fetchAll();

// This is equivalent to the following:
$select = $db->select();
$select->from('foo');
$stmt = $db->query($select);
$result = $stmt->fetchAll();

?>]]></programlisting>

        <para>
            The getPart() method returns the data you provided
            for part of the SQL query.  The Zend_Db_Select class
            includes constant definitions that you can use for
            parts of the SQL query.
        </para>
        <programlisting role="php"><![CDATA[<?php

// SELECT foo.*
// FROM `foo` foo
// ORDER `keyColumn`

$select = $db->select();
$select->from('foo');
$select->order('keyColumn');

print_r( $select->getPart( Zend_Db_Select::ORDER ) );

?>]]></programlisting>

        <para>
            The reset() method enables you to clear one specified
            part of the SQL query, or else clear all parts of
            the SQL query if you omit the argument.
        </para>
        <programlisting role="php"><![CDATA[<?php

// SELECT foo.*
// FROM `foo` foo
// ORDER BY `column1`

$select = $db->select();
$select->from('foo');
$select->order('column1');

// Instead we want a different order criterion:
//
// SELECT foo.*
// FROM `foo` foo
// ORDER BY `column2`

// Clear one part so we can redefine it
$select->reset( Zend_Db_Select::ORDER );
$select->order('column2');

// Clear all parts of the query
$select->reset();

?>]]></programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
