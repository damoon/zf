<sect1 id="zend.view.introduction">

    <title>Wprowadzenie</title>
    
    <para>
        Zend_View jest klasą zapewniającą obsługę części widoku ("view")
        we wzorcu projektowym MVC (model-view-controller). Istnieje ona 
        w celu oddzielenia wyglądu aplikacji od kontrolerów i danych.
        Zapewnia system skryptów pomocników i filtrów.
    </para>
    
    <para>
        Zend_View jest bardzo prostym systemem; możesz użyć PHP jako
        jezyka szablonów lub utworzyć instancje innych systemów szablonów,
        a następnie manipulować nimi wewnątrz skryptu widoku.
    </para>

    <para>
        Zasadniczo użycie Zend_View składa się z dwóch kroków:
        
        1. Twój skrypt kontrolera tworzy instancję klasy 
        Zend_View i przekazuje zmienne do tej instancji.
        
        2. Kontroler mówi obiektowi Zend_View aby przetworzył określony skrypt 
        widoku, skutkiem tego jest wygenerowanie wyjściowego widoku.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Skrypt kontrolera</title>
        
        <para>
            Aby pokazać prosty przykład załóżmy, że kontroler ma dane w postaci 
            listy książek i chcemy aby były one przetworzone jako widok. Skrypt
            kontrolera mógłby wyglądać tak:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// użyjmy modelu aby uzyskać dane o autorach książek i ich tytułach
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// przekażmy dane o książkach do instancji Zend_View
Zend_Loader::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// wygenerujemy wyjściowy widok o nazwie "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>Skrypt widoku</title>
        
        <para>
            Teraz potrzebujemy skryptu widoku "booklist.php". Jest
            to skrypt PHP jak każdy inny, z jednym wyjątkiem: jest on wykonywany
            w przestrzeni instancji Zend_View, co oznacza, że odnosi się on do 
            właściwości i metod klasy Zend_View za pomocą $this. (Zmienne
            przekazane do tej instancji przez kontroler sa publicznymi 
            właściwościami instancji Zend_View.) Więc bardzo prosty skrypt
            mógłby wyglądać tak:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Tabela z książkami. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Tytuł</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Nie ma żadnych książek do wyświetlenia.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Zauważ, że używamy metody "escape()" aby przefiltrować zmienne
            wyjściowe.
        </para>
        
    </sect2>

    <sect2 id="zend.view.introduction.options">
        <title>Options</title>

        <para>
            <code>Zend_View</code> has several options that may be set to
            configure the behaviour of your view scripts.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>basePath:</code> indicate a base path from which to set
                    the script, helper, and filter path. It assumes a directory
                    structure of:
                </para>

                <programlisting role="php"><![CDATA[
base/path/
    helpers/
    filters/
    scripts/
]]]></programlisting>

                <para>
                    This may be set via <code>setBasePath()</code>,
                    <code>addBasePath()</code>, or the <code>basePath</code>
                    option to the constructor.
                </para>
            </listitem>

            <listitem><para>
                <code>encoding:</code> indicate the character encoding to use
                with <code>htmlentities()</code>,
                <code>htmlspecialchars()</code>, and other operations. Defaults
                to ISO-8859-1 (latin1). May be set via
                <code>setEncoding()</code> or the <code>encoding</code> option
                to the constructor.
            </para></listitem>

            <listitem><para>
                <code>escape:</code> indicate a callback to be used by
                <code>escape()</code>. May be set via <code>setEscape()</code>
                or the <code>escape</code> option to the constructor.
            </para></listitem>

            <listitem><para>
                <code>filter:</code> indicate a filter to use after rendering
                a view script. May be set via <code>setFilter()</code>,
                <code>addFilter()</code>, or the <code>filter</code> option to
                the constructor.
            </para></listitem>

            <listitem><para>
                <code>strictVars:</code> force <code>Zend_View</code> to emit
                notices and warnings when uninitialized view variables are
                accessed. This may be set by calling
                <code>strictVars(true)</code> or passing the
                <code>strictVars</code> option to the constructor.
            </para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.view.introduction.accessors">
        <title>Utility Accessors</title>

        <para>
            Typically, you'll only ever need to call on <code>assign()</code>,
            <code>render()</code>, or one of the methods for setting/adding
            filter, helper, and script paths. However, if you wish to extend
            <code>Zend_View</code> yourself, or need access to some of its
            internals, a number of accessors exist:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>getVars()</code> will return all assigned variables.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearVars()</code> will clear all assigned variables;
                    useful when you wish to re-use a view object, but want to
                    control what variables are available..
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getScriptPath($script)</code> will retrieve the
                    resolved path to a given view script.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getScriptPaths()</code> will retrieve all registered
                    script paths.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHelperPath($helper)</code> will retrieve the
                    resolved path to the named helper class.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHelperPaths()</code> will retrieve all registered
                    helper paths.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilterPath($filter)</code> will retrieve the
                    resolved path to the named filter class.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilterPaths()</code> will retrieve all registered
                    filter paths.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->