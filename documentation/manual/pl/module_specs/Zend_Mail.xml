<sect1 id="zend.mail.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Mail</code> provides generalized functionality to compose and send both text and MIME-compliant
        multipart e-mail messages. Mail can be sent with <code>Zend_Mail</code> via the php built-in
        <ulink url="http://php.net/mail"><code>mail()</code></ulink> function or via direct SMTP connection.
    </para>
    <example>
        <title>Simple E-Mail with Zend_Mail</title>
        <para>
            A simple e-mail consists of some recipients, a subject, a body and a sender. To send such a mail using
            the PHP <ulink url="http://php.net/mail"><code>mail()</code></ulink> function, do the following:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('This is the text of the mail.');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>       </programlisting>
       </para>
    </example>
    <note>
        In order to send an e-mail with <code>Zend_Mail</code> you have to specify at least one recipient, a
        sender (e.g., with <code>setFrom()</code>), and a message body (text and/or HTML).
    </note>
    <para>
        For most mail attributes there are "get" methods to read the information stored in the mail object. For
        further details, please refer to the API documentation. A special one is <code>getRecipients()</code>.
        It returns an array with all recipient e-mail addresses that were added prior to the method call.
    </para>
    <para>
        For security reasons, <code>Zend_Mail</code> filters all header fields to prevent header injection with
        newline (<code>\n</code>) characters.
    </para>
</sect1>
<sect1 id="zend.mail.sending">
    <title>Sending via SMTP</title>
    <para>
        To send mail via SMTP, <code>Zend_Mail_Transport_Smtp</code> needs to be created and registered with
        <code>Zend_Mail</code> before the <code>send()</code> method is called. For all remaining
        <code>Zend_Mail::send()</code> calls in the current script, the SMTP transport will then be used:
    </para>
    <example>
        <title>Sending E-Mail via SMTP</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
?>]]>   </programlisting>
    </example>
    <para>
        The <code>setDefaultTransport()</code> method and the constructor of
        <code>Zend_Mail_Transport_Smtp</code> are not expensive. These two lines can be processed at script
        setup time (e.g., config.inc or similar) to configure the behaviour of the <code>Zend_Mail</code> class
        for the rest of the script. This keeps configuration information out of the application logic - whether
        mail is sent via SMTP or <ulink url="http://php.net/mail"><code>mail()</code></ulink>, what mail server
        to use, etc.
    </para>
</sect1>
<sect1 id="zend.mail.multiple-emails">
    <title>Sending Multiple Mails per SMTP Connection</title>
    <para>
        By default, an SMTP connection is established for every e-mail that is sent. If you want to send
        multiple e-mails through one SMTP connection, you can handle the <code>connect()</code> yourself. If the
        transport has already established a connection before <code>send()</code> is called, it will be used
        and will not be closed:
    </para>
    <example>
        <title>Sending Multiple Mails per SMTP Connection</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
$tr->connect();
for ($i = 0; $i < 5; $i++) {    
$mail->send();
}
$tr->disconnect();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.different-transports">
    <title>Using Different Transports</title>
    <para>
        In case you want to send different e-mails through different connections, you can also pass the
        transport object directly to <code>send()</code> without a prior call to
        <code>setDefaultTransport()</code>. The passed object will override the default transport for the
        actual <code>send()</code> request:
    </para>
    <example>
        <title>Using Different Transports</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr1 = new Zend_Mail_Transport_Smtp('server@example.com');
$tr2 = new Zend_Mail_Transport_Smtp('other_server@example.com');
$mail->send($tr1);
$mail->send($tr2);
$mail->send();  // use default again
?>]]>   </programlisting>
    </example>
    <note>
        Additional transports can be written by implementing <code>Zend_Mail_Transport_Interface</code>.
    </note>
</sect1>
<sect1 id="zend.mail.html-mails">
    <title>HTML E-Mail</title>
    <para>
        To send an e-mail in HTML format, set the body using the method <code>setBodyHTML()</code> instead of
        <code>setBodyText()</code>. The MIME content type will automatically be set to <code>text/html</code>
        then. If you use both HTML and Text bodies, a multipart/alternative MIME message will automatically be
        generated:
    </para>
    <example>
        <title>Sending HTML E-Mail</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('My Nice Test Text');
$mail->setBodyHtml('My Nice <b>Test</b> Text');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.attachments">
    <title>Attachments</title>
    <para>
        Files can be attached to an e-mail using the <code>addAttachment()</code> method. The default behaviour
        of <code>Zend_Mail</code> is to assume the attachment is a binary object (application/octet-stream),
        should be transferred with base64 encoding, and is handled as an attachment. These assumptions can be
        overridden by passing more parameters to <code>addAttachment()</code>:
    </para>
    <example>
        <title>E-Mail Messages with Attachments</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
$mail->addAttachment($someBinaryString);
$mail->addAttachment($myImage, 'image/gif', Zend_Mime::DISPOSITION_INLINE, Zend_Mime::ENCODING_8BIT);
?>]]>   </programlisting>
    </example>
    <para>
        If you want more control over the MIME part generated for this attachment you can use the return value
        of <code>addAttachment()</code> to modify its attributes. The <code>addAttachment()</code> method
        returns a <code>Zend_Mime_Part</code> object:
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();

$at = $mail->addAttachment($myImage); 
$at->type        = 'image/gif'; 
$at->disposition = Zend_Mime::DISPOSITION_INLINE; 
$at->encoding    = Zend_Mime::ENCODING_8BIT; 
$at->filename    = 'test.gif'; 

$mail->send();
?>]]></programlisting> 
    </para>
</sect1>
<sect1 id="zend.mail.adding-recipients">
    <title>Adding Recipients</title>
    <para>
        Recipients can be added in three ways:
        <itemizedlist>
        <listitem>
        <para><code>addTo()</code>: Adds a recipient to the mail with a "To" header</para>
        </listitem>
        <listitem>
        <para><code>addCc()</code>: Adds a recipient to the mail with a "Cc" header</para>
        </listitem>
        <listitem>
        <para><code>addBcc()</code>: Adds a recipient to the mail not visible in the header.</para>
        </listitem>
        </itemizedlist>
    </para>
    <note>
        <code>addTo()</code> and <code>addCc()</code> accept a second optional parameter that is used as a
        human-readable name of the recipient for the header.
    </note>
</sect1>
<sect1 id="zend.mail.boundary">
    <title>Controlling the MIME Boundary</title>
    <para>
        In a multipart message a MIME boundary for separating the different parts of the message is normally
        generated at random. In some cases, however, you might want to specify the MIME boundary that is used.
        This can be done using the <code>setMimeBoundary()</code> method, as in the following example:
    </para>
    <example>
        <title>Changing the MIME Boundary</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setMimeBoundary('=_' . md5(microtime(1) . $someId++);
// build message...
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.additional-headers">
    <title>Additional Headers</title>
    <para>
        Arbitrary mail headers can be set by using the <code>addHeader()</code> method. It requires two
        parameters containing the name and the value of the header field. A third optional parameter determines
        if the header should have only one or multiple values:
    </para>
    <example>
        <title>Adding E-Mail Message Headers</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->addHeader('X-MailGenerator', 'MyCoolApplication');
$mail->addHeader('X-greetingsTo', 'Mom', true); // multiple values
$mail->addHeader('X-greetingsTo', 'Dad', true);
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.character-sets">
    <title>Character Sets</title>
    <para>
        <code>Zend_Mail</code> does not check for the correct character set of the mail parts. When
        instantiating <code>Zend_Mail</code>, a charset for the e-mail itself may be given. It defaults to
        iso8859-1. The application has to make sure that all parts added to that mail object have their content
        encoded in the correct character set. When creating a new mail part, a different charset can be given for
        each part.
    </para>
    <note>
        Character sets are only applicable for message parts in text format.
    </note>
</sect1>
<sect1 id="zend.mail.encoding">
    <title>Encoding</title>
    <para>
        Text and HTML message bodies are encoded with the quotedprintable mechanism by default. All other
        attachments are encoded via base64 if no other encoding is given in the <code>addAttachment()</code>
        call or assigned to the MIME part object later. 7Bit and 8Bit encoding currently only pass on the
        binary content data.
    </para>
    <para>
        <code>Zend_Mail_Transport_Smtp</code> encodes lines starting with one dot or two dots so that the mail
        does not violate the SMTP protocol.
    </para>
</sect1>
<sect1 id="zend.mail.smtp-authentication">
    <title>SMTP Authentication</title>
    <para>
        Various SMTP authentication methods may be added later but are currently unsupported.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->