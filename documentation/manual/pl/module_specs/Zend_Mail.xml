<sect1 id="zend.mail.introduction">
    <title>Wprowadzenie</title>
    <para>
        <code>Zend_Mail</code> zapewnia możliwość tworzenia i wysyłania tekstowych 
        wiadomości e-mail oraz wieloczęściowych wiadomości e-mail zgodnych z MIME.
        Wiadomość może być wysłana przez <code>Zend_Mail</code> za pomocą wbudowanej
        funkcji PHP <ulink url="http://php.net/mail"><code>mail()</code></ulink> 
        lub za pomocą zdalnego połączenia SMTP.
    </para>
    <example>
        <title>Wysyłanie prostego e-maila za pomocą Zend_Mail</title>
        <para>
            Prosty e-mail składa się z odbiorców, z tematu, treści i z nadawcy. Aby wysłać taki 
            e-mail używając funkcji PHP <ulink url="http://php.net/mail"><code>mail()</code></ulink> 
            możesz zrobić to w ten sposób:
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('Treść wiadomości e-mail.');
$mail->setFrom('somebody@example.com', 'Nadawca');
$mail->addTo('somebody_else@example.com', 'Odbiorca');
$mail->setSubject('Testowy Temat');
$mail->send();
?>]]>   </programlisting>
    </example>
    <note>
        Aby wysłać e-mail za pomocą <code>Zend_Mail</code> musisz określić chociaż
        jednego odbiorcę, nadawcę (np., za pomocą <code>setFrom()</code>), i treść
        wiadomości (tekst i/lub HTML).
    </note>
    <para>
         Dla większości atrybutów obiektu mail są dostępne metody "get" w służące do 
         odczytywania przechowywanych w nim informacji. Więcej informacji można znaleść
         w dokumentacji API. Specjalną metodą jest <code>getRecipients()</code>. Zwraca
         ona tablicę w wszystkimi adresami e-mail odbiorców, które zostały dodane.
    </para>
    <para>
        Ze względów bezpieczeństwa, <code>Zend_Mail</code> filtruje wszystkie nagłówki
        aby zapobiec dołączeniu niechcianych nagłówków za pomocą znaku nowej linii 
        (<code>\n</code>).
    </para>
</sect1>
<sect1 id="zend.mail.sending">
    <title>Wysyłanie przez SMTP</title>
    <para>
        Aby wysłać mail przez SMTP, obiekt <code>Zend_Mail_Transport_Smtp</code> 
        musi być utworzony i zarejestrowany w obiekcie <code>Zend_Mail</code> 
        zanim zostanie wywołana metoda <code>send()</code>. Dla kolejnych wywołań
        <code>Zend_Mail::send()</code> w tym skrypcie będzie także użyty transport SMTP:
    </para>
    <example>
        <title>Wysyłanie e-maila przez SMTP</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
?>]]>   </programlisting>
    </example>
    <para>
        Metoda <code>setDefaultTransport()</code> oraz konstruktor <code>Zend_Mail_Transport_Smtp</code> 
        nie są czasochłonne. Te dwie linie mogą być wykonane w czasie przygotowania 
        skryptu (np. w pliku config.inc czy w podobnym) w celu skonfigurowania zachowania 
        klasy <code>Zend_Mail</code> w reszcie skryptu. To utrzymuje informacje 
        konfiguracyjne poza logiką aplikacji - to czy wiadomości mają być wysyłane 
        przez SMTP czy przez funkcję PHP <ulink url="http://php.net/mail"><code>mail()</code></ulink>, 
        jaki serwer poczty ma być użyty itp.
    </para>
</sect1>
<sect1 id="zend.mail.multiple-emails">
    <title>Wysyłanie wielu maili podczas jednego połączenia SMTP</title>
    <para>
        Domyślnie, połączenie SMTP jest tworzone za każdym razem gdy wysyłamy e-mail.
        Jeśli chcesz wysłać wiele wiadomości za pomocą jednego połączenia SMTP
        możesz użyć funkcji <code>connect()</code>. Jeśli transport ma już utworzone
        połączenie przez wywołaniem metody <code>send()</code>, będzie ono użyte
        i nie będzie zamknięte:
    </para>
    <example>
        <title>Wysyłanie wielu maili podczas jednego połączenia SMTP</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// tworzymy wiadomość
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
$tr->connect();
for ($i = 0; $i < 5; $i++) {    
$mail->send();
}
$tr->disconnect();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.different-transports">
    <title>Używanie innych transportów</title>
    <para>
        W przypadku gdy chcesz wysłać różne e-maile poprzez różne połączenia, możesz 
        także przekazać obiekt transportu bezpośrednio do metody <code>send()</code> 
        bez wcześniejszego wywołania <code>setDefaultTransport()</code>. Przekazany
        obiekt nadpisze domyślny transport dla aktualnego wywołania <code>send()</code>:
    </para>
    <example>
        <title>Używanie innych transportów</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// tworzymy wiadomość...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr1 = new Zend_Mail_Transport_Smtp('server@example.com');
$tr2 = new Zend_Mail_Transport_Smtp('other_server@example.com');
$mail->send($tr1);
$mail->send($tr2);
$mail->send();  // znów używamy domyślnego transportu
?>]]>   </programlisting>
    </example>
    <note>
        Dodatkowe transporty mogą być napisane poprzez zaimplementowanie interfejsu
        <code>Zend_Mail_Transport_Interface</code>.
    </note>
</sect1>
<sect1 id="zend.mail.html-mails">
    <title>E-mail w postaci HTML</title>
    <para>
        Aby wysłać e-mail w formacie HTML, ustaw treść za pomocą metody <code>setBodyHTML()</code> 
        zamiast <code>setBodyText()</code>. Typ MIME zostanie automatycznie ustawiony na 
        <code>text/html</code>. Jeśli używasz zarówno treści HTML jak i tekstowej to
        automatycznie zostanie wygenerowana wiadomość o typie MIME <code>multipart/alternative</code>:
    </para>
    <example>
        <title>Wysyłanie e-maila w postaci HTML</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('Testowy tekst');
$mail->setBodyHtml('<b>Testowy</b> tekst');
$mail->setFrom('somebody@example.com', 'Nadawca');
$mail->addTo('somebody_else@example.com', 'Odbiorca');
$mail->setSubject('Testowy temat');
$mail->send();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.attachments">
    <title>Załączniki</title>
    <para>
        Pliki mogą być dołączone do e-maila za pomocą metody <code>addAttachment()</code>. 
        Domyślnie <code>Zend_Mail</code> założy, że załącznik jest obiektem binarnym
        (application/octet-stream), który będzie zakodowany w base64. Te założenie
        może być nadpisane przez przekazanie opcjonalnych parametrów do metody
        <code>addAttachment()</code>:
    </para>
    <example>
        <title>Wiadomości e-mail z załącznikami</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// tworzymy wiadomość
$mail->addAttachment($someBinaryString);
$mail->addAttachment($myImage, 'image/gif', Zend_Mime::DISPOSITION_INLINE, Zend_Mime::ENCODING_8BIT);
?>]]>   </programlisting>
    </example>
    <para>
        Jeśli chcesz mieć większą kontrolę nad częścią MIME wygenerowaną dla tego
        załącznika możesz użyć wartości zwróconej przez <code>addAttachment()</code>
        aby zmodyfikować jej atrybuty. Metoda <code>addAttachment()</code> zwraca 
        obiekt <code>Zend_Mime_Part</code>:
    </para>
    <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();

$at = $mail->addAttachment($myImage); 
$at->type        = 'image/gif'; 
$at->disposition = Zend_Mime::DISPOSITION_INLINE; 
$at->encoding    = Zend_Mime::ENCODING_8BIT; 
$at->filename    = 'test.gif'; 

$mail->send();
?>]]></programlisting> 
</sect1>
<sect1 id="zend.mail.adding-recipients">
    <title>Dodawanie odbiorców</title>
    <para>
        Odbiorcy mogą być dodawani na trzy sposoby:
        <itemizedlist>
        <listitem>
        <para><code>addTo()</code>: Dodaje odbiorcę do maila w nagłówku "To"</para>
        </listitem>
        <listitem>
        <para><code>addCc()</code>: Dodaje odbiorcę do maila w nagłówku "Cc"</para>
        </listitem>
        <listitem>
        <para><code>addBcc()</code>: Dodaje do maila odbiorcę niewidocznego w nagłówku.</para>
        </listitem>
        </itemizedlist>
    </para>
    <note>
        Metody <code>addTo()</code> oraz <code>addCc()</code> akceptują drugi opcjonalny
        parametr, który jest używany jako nazwa odbiorcy.
    </note>
</sect1>
<sect1 id="zend.mail.boundary">
    <title>Pole rozgraniczające MIME</title>
    <para>
        W wieloczęściowej wiadomości pole rozgraniczające MIME używane do oddzielania
        różnych części wiadomości zwykle jest generowane losowo. W niektórych przypadkach
        możesz chciec określić jakie wartości ma mieć pole rozgraniczające. Możesz to
        zrobić używając metody <code>setMimeBoundary()</code> jak w poniższym przykładzie:
    </para>
    <example>
        <title>Zmiana pola rozgraniczającego MIME</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setMimeBoundary('=_' . md5(microtime(1) . $someId++);
// tworzymy wiadomość
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.additional-headers">
    <title>Dodatkowe nagłówki</title>
    <para>
        Dodatkowe nagłówki wiadomości mogą być ustawione za pomocą metody 
        <code>addHeader()</code>. Wymaga ona dwóch parametrów: nazwy nagłówka oraz
        jej wartości. Trzeci opcjonalny parametr decyduje o tym, czy nagłówek
        powinien mieć jedną czy wiele wartości:
    </para>
    <example>
        <title>Dodawanie nagłówków do wiadomości e-mail</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->addHeader('X-MailGenerator', 'MyCoolApplication');
$mail->addHeader('X-greetingsTo', 'Mom', true); // wiele wartości
$mail->addHeader('X-greetingsTo', 'Dad', true);
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.character-sets">
    <title>Zestawy znaków</title>
    <para>
        <code>Zend_Mail</code> nie sprawdza poprawności zestawu znaków poszczególnych
        części wiadomości. Kiedy tworzymy instancję <code>Zend_Mail</code>, możemy
        wybrać zestaw znaków dla wiadomości. Domyślny to <code>iso-8859-1</code>. 
        Aplikacja musi zapewnić to, żeby wszystkie części dodane do obiektu 
        wiadomości miały zawartośc zakodowaną w prawidłowym zestawie znaków. Kiedy 
        tworzymy nową część wiadomości, możemy użyć innego zestawu znaków dla każdej 
        z części.
    </para>
    <note>
        Zestawy znaków mają jedynie zastosowanie dla części wiadomości które są
        w formacie tekstowym.
    </note>
</sect1>
<sect1 id="zend.mail.encoding">
    <title>Kodowanie</title>
    <para>
        Treści wiadomości w formacie Text oraz HTML są domyślnie kodowane przy użyciu
        mechanizmu quotedprintable. Wszystkie inne załączniki są kodowane za pomocą
        base64 jeśli inne kodowanie nie zostało wybrane podczas wywołania metody
        <code>addAttachment()</code> lub nie zostało później dodane do obiektu MIME.
        Kodowania 7Bit oraz 8Bit obecnie działają jedynie z danymi binarnymi.
    </para>
    <para>
        <code>Zend_Mail_Transport_Smtp</code> koduje linie zaczynając je jedną
        lub dwoma kropkami, więc wiadomość nie łamie zasad protokołu SMTP.
    </para>
</sect1>
<sect1 id="zend.mail.smtp-authentication">
    <title>Uwierzytelnianie SMTP</title>
    <para>
        Różne metody uwierzytelniania SMTP będą dodane w przyszłości, obecnie żadna 
        nie jest obsługiwana.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->