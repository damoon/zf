<sect1 id="zend.controller.overview">
	<title>Wstęp</title>

	<sect2 id="zend.controller.overview.introduction">
		<title>Wprowadzenie</title>
		<para>
			<code>Zend_Controller</code> dostarcza system umożliwiający budowę witryny
			opartej na wzorcu MVC (Model-View-Controller - Model-Widok-Kontroler).
		</para>

		<para>
			System <code>Zend_Controller</code> został zaprojektowany aby być lekkim, modułowym
			i rozszerzalnym. Projekt jest minimalistyczny w celu zapewnienia elastyczności 
		    i wolności użytkownikom, jednak zapewniając wystarczającą strukturę powoduje, że
		    systemy zbudowane w oparciu o <code>Zend_Controller</code> będą napisane
		    w podobnych konwencjach.
		</para>

		<para>
			System <code>Zend_Controller</code> został zaimplementowany jako kilka komponentów. Nie jest
			wymagane posiadanie dokładnej wiedzy na temat działania wszystkich tych komponentów, jednak
			znajomość tego procesu może być pomocna.
			<itemizedlist>
				<listitem>
					<para>
						<code>Zend_Controller_Front</code>
						instrumentuje całą przestrzeń systemu <code>Zend_Controller</code>. Jest
						interpretacją wzorca projektowego FrontController. Obiekt <code>Zend_Controller_Front</code>
						przetwarza wszystkie żądania otrzymywane przez serwer i jest ostatecznie odpowiedzialny
						za przekazywanie żądań do odpowiednich kontrolerów (<code>Zend_Controller_Action</code>).
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Router</code> jest routerem. Routing jest
						procesem pobierania adresu URI i rozkładania go w celu ustalenia,
						który kontroler i która akcja powinny otrzymać żądanie. Nazwa 
						kontrolera, nazwa akcji oraz opcjonalne parametry są pakowane 
						do obiektu <code>Zend_Controller_Dispatcher_Token</code>.
						Te dane są obraniane przez <code>Zend_Controller_Dispatcher</code>.  
						Proces routingu ma miejsce tylko raz: pomiędzy odebraniem
						żądania a wywołaniem pierwszego kontrolera.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Dispatcher</code> jest dispatcherem. Dispatching 
						(wysyłanie) jest procesem pobierania obiektu <code>Zend_Controller_Dispatcher_Token</code>, 
						szukania odpowiedniego kontrolera, tworzenia instancji klasy kontrolera z tego pliku 
						(klasa ta musi implementować <code>Zend_Controller_Action</code>) i ostatecznie 
						wywoływania metody akcji w tym obiekcie kontrolerze. W przeciwieństwie do routingu
						który ma miejsce tylko raz, proces dispatchingu odbywa się w pętli.  
						<code>Zend_Controller_Dispatcher</code> jest wywoływany przez
						<code>Zend_Controller_Front</code> dopóki wszystkie akcje nie zostaną
						wywołane.
					</para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Action</code> jest podstawowym komponentem kontrolera. Każdy kontroler
						jest pojedynczą klasą, która rozszerza klasę <code>Zend_Controller_Action</code>,
						a ta klasa posiada metody które są akcjami.
					</para>
				</listitem>
			</itemizedlist>

			Przestrzeń systemu <code>Zend_Controller</code> jest stosunkowo prosta. Żądanie jest odbierane
			przez obiekt <code>Zend_Controller_Front</code>, który wywołuje <code>Zend_Controller_Router</code> 
			w celu określenia kontrolera (i akcji w tym kontrolerze) do uruchomienia. <code>Zend_Controller_Router</code> 
			rozkłada adres URI na części i zapisuje je w obiekcie <code>Zend_Controller_Dispatcher_Token</code>, który
			zawiera informacje o tym który kontroler i akcję ma uruchomić. Wtedy <code>Zend_Controller_Front</code> 
			rozpoczyna pętlę uruchamiania akcji z kontrolerów. Uruchamia <code>Zend_Controller_Dispatcher</code>,
			przekazując mu token w celu uruchomienia odpowiedniego kontrolera i akcji. Gdy kontroler kończy działanie,
		    kontrola wraca do obiektu <code>Zend_Controller_Front</code>. Jeśli kontroler zwracając nowy token
		    wskazał kolejny kontroler, który powinien być uruchomiony pętla kontynuuje działanie i kolejny 
		    kontroler zostaje uruchomiony. W przeciwnym wypadku proces się kończy.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Proces Routingu</title>

		<para>
		    Zanim zbudujesz swój pierwszy kontroler, powinieneś zrozumieć jak działa proces
		    routingu który jest zaimplementowany jako <code>Zend_Controller_Router</code>. Pamiętaj,
		    że przestrzeń działania jest podzielona na routing, który ma miejsce tylko raz oraz na
		    proces dispatchingu, który odbywa się w pętli.
		</para>

		<para>
			<code>Zend_Controller_Front</code> wywołuje <code>Zend_Controller_Router</code> 
			aby zmapować adres URI do kontrolera oraz do akcji wewnątrz kontrolera. 
			<code>Zend_Controller_Router</code> pobiera adres URI a następnie rozkłada 
			go na części i zapisuje w obiekcie <code>Zend_Controller_Dispatcher_Token</code>,
			który będzie przekazany do dispatchera (<code>Zend_Controller_Dispatcher</code>).
		</para>

		<para>
			Router używa bardzo prostego mapowania nazwy kontrolera i nazwy akcji z tego kontrolera:
        </para>

		<programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
		</programlisting>
        <para>
			Pamiętaj, że powyżej pierwsza część adresu jest nazwą kontrolera, a druga
			część jest zawsze nazwą akcji.
		</para>

		<para>
		    Opcjonalnie w adresie URI mogą być zdefiniowane parametry które zostaną
		    przekazane do kontrolera. Przyjmują one postać par klucz/wartość:
        </para>
	    <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
		</programlisting>

		<para>
			Jeśli pierwsza część adresu URI (<code>/controller/</code>) jest pusta, 
			zostanie przyjęta nazwa domyślnego kontrolera czyli "<code>index</code>". 
			Jeśli pusta jest część <code>/action/</code>, zostanie przyjęta nazwa
			akcji domyślnej czyli "<code>index</code>". Oto przykłady:
        </para>
	    <programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Kontroler: roadmap
Akcja    : future

http://framework.zend.com/roadmap/
Kontroler: roadmap
Akcja    : index

http://framework.zend.com/
Kontroler: index
Akcja    : index]]>
	    </programlisting>

		<note>
		    <title>Nowy silnik przepisywania adresów</title>
		    <para>
			    Obecnie pracujemy nad nowym routerem z silnikiem przepisywania adresów URI,
	            który da o wiele szersze możliwosci niż te obecnie dostępne w routerze.
			    Będzie to dostępne w niedalekiej przyszłości.
			</para>
		</note>

		<para>
		    Nazwa kontrolera, nazwa akcji z tego kontrolera oraz opcjonalne parametry są pakowane
		    do tokena <code>Zend_Controller_Dispatcher_Token</code>. Ten token jest przekazywany
			do obiektu <code>Zend_Controller_Front</code>, który rozpocznie pętlę uruchamiania 
		    kontrolerów. Gdy pętla trwa, token jest przekazywany do obiektu <code>Zend_Controller_Dispatcher</code>.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatch-token">
		<title>Dispatch Token</title>

		<para>
			Token jest prostym obiektem który jest przekazywany pomiędzy obiektem <code>Zend_Controller_Front</code>
			a klasami które implementują interfejsy routera i dispatchera. Przechowuje on informacje o kontrolerze,
			akcji oraz o parametrach które mają być przekazane do akcji.
		</para>

		<itemizedlist>
			<listitem><para>
				Dostęp do nazwy kontrolera uzyskujemy za pomocą metod <code>getControllerName()</code> oraz <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
			    Dostęp do nazwy akcji uzyskujemy za pomocą metod <code>getActionName()</code> oraz <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
			    Parametry przekazane do akcji są tablicą asocjacyjną składającą
			    się z par klucz/wartość, które są dostępne za pomocą metod <code>getParams()</code>
				oraz <code>setParams()</code>.
			</para></listitem>
		</itemizedlist>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Proces Dispatchingu</title>

		<para>
			Dispatching (wysyłanie) jest procesem pobierania tokena <code>Zend_Controller_Dispatcher_Token</code>, 
			rozpakowania informacji które on zawiera: nazwy kontrolera, nazwy akcji oraz opcjonalnych
			parametrów i ostatecznie utworzeniem instancji kontrolera i wywołaniem akcji z tego kontrolera.
		</para>
	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
