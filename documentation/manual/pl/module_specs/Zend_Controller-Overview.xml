<sect1 id="zend.controller.overview">
	<title>Wstęp</title>

	<sect2 id="zend.controller.overview.introduction">
		<title>Wprowadzenie</title>
		<para>
			<code>Zend_Controller</code> dostarcza system umożliwiający budowę witryny
			opartej na wzorcu MVC (Model-View-Controller - Model-Widok-Kontroler).
		</para>

		<para>
			System <code>Zend_Controller</code> został zaprojektowany aby być lekkim, 
			modułowym i rozszerzalnym. Projekt jest minimalistyczny w celu zapewnienia 
			elastyczności i wolności użytkownikom, jednak zapewniając wystarczającą 
			strukturę powoduje, że systemy zbudowane w oparciu o 
			<code>Zend_Controller</code> będą napisane w podobnych konwencjach.
		</para>

		<para>
			System <code>Zend_Controller</code> został zaimplementowany jako kilka 
			komponentów. Nie jest wymagane posiadanie dokładnej wiedzy na temat 
			działania wszystkich tych komponentów, jednak znajomość tego procesu 
			może być pomocna.

			<itemizedlist>
				<listitem>
					<para>
						<code>Zend_Controller_Front</code> instrumentuje całą 
						przestrzeń systemu <code>Zend_Controller</code>. Jest
						interpretacją wzorca projektowego FrontController. 
						Obiekt <code>Zend_Controller_Front</code> przetwarza 
						wszystkie żądania otrzymywane przez serwer i jest 
						ostatecznie odpowiedzialny za przekazywanie żądań do 
						odpowiednich kontrolerów 
						(<code>Zend_Controller_Action</code>).
					</para>
				</listitem>

				<listitem>
					<para>
                        <code>Zend_Controller_Request_Abstract</code> 
                        reprezentuje środowisko żądania i zapewnia metody do
                        ustawienia i odebrania nazw kontrolera i akcji oraz
                        parametrów żądania. Dodatkowo przechowuje informacje o
                        tym, czy akcja z tego żądania została uruchomiona przez
                        <code>Zend_Controller_Dispatcher</code> czy nie.
                        Rozszerzenia do abstrakcyjnego obiektu żądania mogą być
                        użyte aby obudować całe środowisko żądania, pozwalając
                        routerom na wyciągnięcie informacji ze środowiska 
                        żądania w celu ustawienia nazwy kontrolera i akcji.
					</para>
					
                    <para>
                        Domyślnie używany jest obiekt, 
                        <code>Zend_Controller_Request_Http</code>, ktory zapewnia
                        dostęp do całości środowiska żądania HTTP.
                    </para>
				</listitem>

				<listitem>
					<para>
                        Interfejs <code>Zend_Controller_Router_Interface</code> 
                        jest używany do definiowania tras. Routing jest procesem
                        badania środowiska żądania w celu określenia który
                        kontroler i która akcja tego kontrolera powinny odebrać
                        żądanie. Nazwa tego kontrolera, akcji oraz opcjonalnych
                        parametrów są ustawione w obiekcie żądania a następnie
                        przetwarzane przez <code>Zend_Controller_Dispatcher</code>.  
                        Routing przeprowadzany jest tylko raz: wtedy kiedy
                        żądanie jest po raz pierwszy odebrane, a przed 
                        uruchomieniem pierwszego kontrolera.
                    </para>

                    <para>
                        Domyślny router, <code>Zend_Controller_Router</code>,
                        pobiera adres URI, który jest określony w obiekcie
                        <code>Zend_Controller_Request_Http</code> i wyciąga z
                        niego informacje o kontrolerze, akcji oraz parametrach
                        w oparciu o informacje z adresu url. Na przykład, adres 
                        URL <code>http://localhost/foo/bar/key/value</code> 
                        może być zdekodowany jako kontroler <code>foo</code>,
                        akcja <code>bar</code>, i parametr <code>key</code> 
                        o wartości <code>value</code>.
					</para>
				</listitem>
				
				<listitem>
					<para>
                        <code>Zend_Controller_Dispatcher_Interface</code> jest
                        używany do definiowania klas uruchamiających.
                        Uruchamianie jest procesem pobierania kontrolera i akcji
                        z obiektu żądania, określania na ich podstawie pliku
                        kontrolera, klasy oraz metody akcji w klasie kontrolera.
                        Jeśli kontroler lub akcja nie istnieje, obsługuje on
                        określanie domyślnych kontrolerów i akcji do 
                        uruchomienia.
                    </para>

                    <para>
                        Aktualny proces uruchamiania składa się z tworzenia 
                        instancji klasy kontrolera i wywoływania metody akcji 
                        tej klasy. W przeciwieństwie do routingu, który występuje
                        raz, uruchamianie występuje w pętli. Jeśli status 
                        uruchomienia w obiekcie żądania zostanie w którymkolwiek
                        momencie zresetowany, pętla zostanie powtórzona, wywołując
                        akcję która jest obecnie ustawiona w obiekcie żądania.
                        Za pierwszym razem pętla kończy się z ustawioną flagą 
                        statusu uruchomienia obiektu żądania (jako wartość 
                        logiczna true), co kończy uruchamianie.
                    </para>

                    <para>
                        Domyślną klasą uruchamiającą jest
                        <code>Zend_Controller_Dispatcher</code>. Definiuje ona
                        kontroler jako CamelCasedClasses zakończone słowem
                        Controller, oraz metody akcji jako camelCasedMethods
                        zakończone słowem Action:
                        <code>SomeFooController::barAction</code>. W tym przypadku,
                        odpowiadałoby to kontrolerowi o nazwie <code>somefoo</code> 
                        oraz akcji o nazwie <code>bar</code>.
					</para>
					
                    <para>
                        Dodatkowo możesz określić moduł, który ma zostać użyty
                        gdy ładowany jest kontroler. Moduł jest używany aby
                        określić podkatalog oraz/lub przedrostek klasy, które
                        mają być użyte gdy ładowany jest kontroler. Najprościej
                        możesz to zrobić wtedy kiedy ustawiasz ścieżki 
                        kontrolera:
                    </para>

                    <programlisting role="php"><![CDATA[
$front->setControllerDirectory(array(
    'default' => '/path/to/controllers',
    'user'    => '/path/to/controllers/user',
    'admin'   => '/path/to/controllers/admin'
));
]]></programlisting>
                    
                    <para>
                        W powyższym przykładzie jeśli określony jest moduł 'user' 
                        z kontrolerem 'news', będzie on wpierw poszukiwany w 
                        pliku <code>NewsController.php</code> w katalogu
                        <code>/path/to/controllers/user</code>, zanim będą
                        przeszukane inne ścieżki. Dodatkowo wpierw założone 
                        zostanie, że klasa jest nazwana
                        <code>User_NewsController</code>, a dopiero potem
                        <code>NewsController</code>. Żądaniem do takich zasobów
                        może być: 
                        <code>http://localhost/news/action/module/user</code>
                        dla domyślnego routera, a 
                        <code>http://localhost/module/news/action</code> dla
                        routera RewriteRouter.
                    </para>

                    <para>
                        Moduły są użyteczne gdy chcesz oddzielić kod w powiązanych
                        katalogach, użyć kodu z innej aplikacji, lub użyć tej
                        samej biblioteki kontrolera w różnych aplikacjach.
                    </para>
				</listitem>

				<listitem>
					<para>
						<code>Zend_Controller_Action</code> jest podstawowym 
						komponentem kontrolera. Każdy kontroler jest pojedynczą 
						klasą, która rozszerza klasę <code>Zend_Controller_Action</code>,
						a ta klasa posiada metody które są akcjami.
					</para>
				</listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Response_Abstract</code> definiuje
                        podstawową klasę odpowiedzi używaną do zbierania i 
                        zwracania odpowiedzi z kontrolerów akcji. Zbiera ona 
                        zarówno nagłówki jak i zawartość treści, oraz z tego 
                        względu, że implementuje metodę <code>__toString()</code>,
                        może być bezpośrednio wyświetlona w celu wysłania wszystkich
                        nagłówków i całej zawartości na raz.
                    </para>

                    <para>
                        Domyślną klasą odpowiedzi jest 
                        <code>Zend_Controller_Response_Http</code>, która jest
                        odpowiednia do użycia w środowisku HTTP.
                    </para>
                </listitem>
			</itemizedlist>

			Przestrzeń systemu <code>Zend_Controller</code> jest stosunkowo 
			prosta. Żądanie jest odbierane przez obiekt <code>Zend_Controller_Front</code>, 
			który wywołuje <code>Zend_Controller_Router</code> w celu określenia 
			kontrolera (i akcji w tym kontrolerze) do uruchomienia. 
			<code>Zend_Controller_Router</code> rozkłada adres URI na części 
			w celu określenia nazwy kontrolera i akcji w żądaniu.
			Wtedy <code>Zend_Controller_Front</code> rozpoczyna pętlę uruchamiania 
			akcji z kontrolerów. Uruchamia <code>Zend_Controller_Dispatcher</code>,
			przekazując mu żądanie w celu uruchomienia kontrolera i akcji, 
			określonych w żądaniu (lub domyślnych). Gdy kontroler kończy działanie, 
			kontrola wraca do obiektu <code>Zend_Controller_Front</code>. Jeśli 
			kontroler resetując status wykonania żądania wskazał kolejny kontroler, 
			który powinien być uruchomiony pętla kontynuuje działanie i kolejny 
			kontroler zostaje uruchomiony. W przeciwnym wypadku proces się 
			kończy.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.request">
		<title>Obiekt żądania</title>

		<para>
            Obiekt żądania jest prostym obiektem przekazywanym pomiędzy 
            obiektem <code>Zend_Controller_Front</code>, routerem, dispatcherem
            i klasami kontrolerów. Przechowuje on nazwę kontrolera, akcji 
            oraz parametrów, które mają być przekazane do akcji, tak samo jak
            resztę środowiska żądania, które mogą być w środowisku HTTP, CLI
            lub PHP-GTK.
		</para>

		<itemizedlist>
			<listitem><para>
                Nazwa kontrolera jest dostępna za pomocą metod
                <code>getControllerName()</code> oraz 
                <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
                Nazwa akcji kontrolera która ma być wywołana jest dostępna za
                pomocą metod <code>getActionName()</code> oraz
                <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
			    Parametry, które mają być przekazane do tej akcji są asocjacyjną
			    tablicą par klucz/wartość, ktore są dostępne za pomocą metod 
                <code>getParams()</code> oraz <code>setParams()</code>, lub
                pojedynczo za pomocą metod <code>getParam()</code> oraz 
                <code>setParam()</code>.
			</para></listitem>
		</itemizedlist>

        <para>
            Zależnie od typu żądania, może być dostępnych więcej metod.
            Domyślny obiekt żądania, <code>Zend_Controller_Request_Http</code>,
            ma na przykład metody do pobierania zażądanego adresu URI, 
            informacji o ścieżce, parametrów $_GET oraz $_POST itp.
        </para>

        <para>
            Obiekt żądania jest przekazywany do kontrolera frontowego, lub jeśli
            nie istnieje zostaje utworzona jego instancja na początku procesu
            uruchomiania, zanim przeprowadzany jest routing. Jest on przekazywany
            przez każdy obiekt w łańcuchu uruchamiania.
        </para>

        <para>
            Dodatkowo obiekt żądania jest użyteczny przy testowaniu. Programista
            może utworzyć środowisko żądania, włączając w to kontroler, akcję, 
            parametry, URI itp. i przekazać obiekt żądania do kontrolera 
            frontowego aby testować działanie aplikacji. Gdy do tego dołożymy 
            obiekt odpowiedzi, precyzyjne testowanie jednostkowe aplikacji MVC
            staje się możliwe.
        </para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Proces Routingu</title>

		<para>
		    Zanim zbudujesz swój pierwszy kontroler, powinieneś zrozumieć jak 
		    działa proces routingu który jest zaimplementowany jako 
		    <code>Zend_Controller_Router</code>. Pamiętaj, że przestrzeń 
		    działania jest podzielona na routing, który ma miejsce tylko raz 
		    oraz na proces dispatchingu, który odbywa się w pętli.
		</para>

		<para>
			<code>Zend_Controller_Front</code> wywołuje 
			<code>Zend_Controller_Router</code> (lub inny zarejestrowany router)
			aby zmapować adres URI do kontrolera oraz do akcji wewnątrz 
			kontrolera. <code>Zend_Controller_Router</code> pobiera adres URI z 
			obiektu żądania a następnie rozkłada go na części aby określić nazwę 
			kontrolera, akcji i inne parametry z adresu URL a następnie ustawia 
			je w obiekcie żądania.
		</para>

		<para>
		    <code>Zend_Controller_Router</code>	używa bardzo prostego mapowania 
		     w celu określenia nazwy kontrolera oraz akcji wewnątrz kontrolera:
        </para>

		<programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
		</programlisting>
        <para>
			Pamiętaj, że powyżej pierwsza część adresu jest nazwą kontrolera, 
			a druga część jest zawsze nazwą akcji.
		</para>

		<para>
		    Opcjonalnie w adresie URI mogą być zdefiniowane parametry które zostaną
		    przekazane do kontrolera. Przyjmują one postać par klucz/wartość:
        </para>
	    <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
		</programlisting>

		<para>
			Jeśli w adresie URI brakuje informacji o kontrolerze lub akcji
			<code>Zend_Controller_Dispatcher</code> spróbuje pobrać wartości
			z parametrów obiektu żądania i jeśli nie zostaną w nim znalezione, 
			użyje domyślnych wartości. Zarówno dla kontrolera jak i dla akcji
			domyślną wartością jest "<code>index</code>". Pokazuje to ten przykład:
        </para>
	    <programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Kontroler: roadmap
Akcja    : future

http://framework.zend.com/roadmap/
Kontroler: roadmap
Akcja    : index

http://framework.zend.com/
Kontroler: index
Akcja    : index]]>
	    </programlisting>
	    
        <para>
            Dodatkowo możesz określić kontrolery w podkatalogach lub modułach
            na kilka sposobów:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    W nazwach kontrolera może być użyty myślnik (-) lub podkreślnik 
                    (_). Na przykład adres
                    <code>http://framework.zend.com/admin-roadmap/future</code>
                    wskazywałby na klasę kontrolera Admin_RoadmapController.
                </para>
            </listitem>
            <listitem>
                <para>
                    Określając parametr <code>useModules</code> w kontrolerze
                    frontowym, możesz wskazwać na podkatalogi używając czystych
                    adresów URI. Poprzedni przykładowy adres URL mógłby być
                    zamieniony na 
                    <code>http://framework.zend.com/admin/roadmap/future</code>.
                    Aby to zrobić, określ parametr <code>useModules</code> w
                    kontrolerze frontowym lub w routerze:
                </para>

                <programlisting><![CDATA[
$front->setParam('useModules', true);
// lub
$router->setParam('useModules', true);
]]></programlisting>

                <para>
                    To będzie działało zarówno dla podstawowego routera jaki
                    i dla routera RewriteRouter.
                </para>
            </listitem>
        </itemizedlist>

	    <note>
		    <title>Elastyczność</title>
		    <para>
                Jeśli chcesz bardziej elastyczne możliwości, możesz sprawdzić
                <xref linkend="zend.controller.providedsubclasses.rewriterouter"/>.
            </para>
		</note>

		<para>
            Nazwa kontrolera, nazwa akcji w kontrolerze i parametry opcjonalne
            są ustawione w obiekcie żądania. Kiedy kontroler frontowy
            <code>Zend_Controller_Front</code> wchodzi w pętlę uruchomieniową, 
            obiekt żądania będzie przekazany do obiektu
            <code>Zend_Controller_Dispatcher</code>.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Proces uruchamiania</title>

		<para>
            Uruchamianie jest procesem pobierania obiektu żądania,
            <code>Zend_Controller_Request_Abstract</code>, wyciągania z niego
            nazwy kontrolera, nazwy akcji oraz opcjonalnych parametrów zawartych
            w nim, następnie tworzenia instancji kontrolera i uruchamiania akcji
            tego kontrolera. Jeśli kontroler lub akcja nie zostaną znalezione,
            zostaną użyte wartości domyślne. <code>Zend_Controller_Dispatcher</code>
            ustawi wartość <code>index</code> zarówno dla kontrolera jak i akcji,
            ale pozwala programiście zmienić domyślne wartości używając metod 
            <code>setDefaultController()</code> oraz
            <code>setDefaultAction()</code>.
		</para>

        <para>
            Uruchamianie działa w pętli w kontrolerze frontowym. Zanim zacznie 
            się uruchamianie, kontroler frontowy sprawdza żądanie aby określić
            nazwę kontrolera, akcji oraz opcjonalne parametry. Wtedy wchodzi w 
            pętlę urchomieniową, uruchamiając żądanie.
        </para>

        <para>
            Na początku każdej iteracji, w obiekcie żądania ustawiana jest
            flaga określająca czy akcja została uruchomiona. Jeśli akcja lub
            metoda pre/postDispatch plugina zresetuje tę flagę, pętla uruchamiania
            będzie kontynuowana i spróbuje uruchomić żądanie ponownie. Zmieniając
            nazwę kontrolera oraz/lub akcji w żądaniu i resetując flagę, programista
            może zdefiniować łańcuch żądań do uruchomienia.
        </para>

        <para>
            Metodą kontrolera akcji, która kontroluje takie uruchamianie jest 
            <code>_forward()</code>; wywołaj tę metodę w metodach
            pre/postDispatch() lub w metodach akcji podając nazwę kontrolera,
            akcji i opcjonalnie dodatkowe parametry które chcesz wysłać do
            nowej akcji:
        </para>
        
        <programlisting role="php"><![CDATA[
public function myAction()
{
    // coś przetwarzaj...
    // przenieś do innej akcji, FooController::barAction():
    $this->_forward('foo', 'bar', array('baz' => 'bogus'));
}
]]></programlisting>
	</sect2>

	<sect2 id="zend.controller.overview.response">
		<title>Obiekt odpowiedzi</title>

		<para>
            Obiekt odpowiedzi jest logiczną parą dla obiektu żądania. Jego
            zadaniem jest zebranie zawartości oraz/lub nagłówków aby mogły
            być one zwrócone wszystkie na raz. Dodatkowo, kontroler frontowy
            przekaże wszystkie złapane wyjątki do obiektu odpowiedzi, pozwalając
            programiście wdzięcznie obsłużyć wyjątki. Ta funkcjonalność może
            być nadpisana przez ustawienie 
            <code>Zend_Controller_Front::throwExceptions(true)</code>:
        </para>

        <programlisting role="php"><![CDATA[
$front->throwExceptions(true);
]]></programlisting>

        <para>
            Z tego względu, że obiekt odpowiedzi implementuje <code>__toString()</code>, 
            może on być bezpiecznie wyświetlony. To pozwala na takie użycie:
        </para>

        <programlisting role="php"><![CDATA[
echo $controller->getResponse();

// lub
$response = $controller->getResponse();
echo $response;
]]></programlisting>
        
        <para>
            Programiści powinni użyć obiektu odpowiedzi w ich kontrolerach 
            akcji. Zamiast bezpośrednio wyświetlać dane wyjściowe i wysyłać
            nagłowki powinni przekazywać je do obiektu odpowiedzi:
        </para>

        <programlisting role="php"><![CDATA[
// Wewnątrz akcji kontrolera:
// Ustaw nagłówek
$this->getResponse()
    ->setHeader('Content-Type', 'text/html')
    ->appendBody($content);
]]></programlisting>

        <para>
            Dzięki temu wszystkie nagłówki są wysyłane na raz, zaraz przed
            wyświetleniem zawartości.
        </para>

        <para>
            To czy wyjątek wystąpił w aplikacji możesz sprawdzić za pomocą metody 
            <code>isException()</code>, a odebrać wyjątek możesz używając
            metody <code>getException()</code>. Dodatkowo możesz
            stworzyć własny obiekt odpowiedzi, który może przekierowywać do
            stron błędów, zapisywać informacje o wyjątku, ładnie formatować
            informacje o wyjątku (dla potrzeb programistycznych) itp.
        </para>

        <para>
            Możesz odebrać obiekt odpowiedzi po wywołaniu metody
            dispatch(), lub powodując aby kontroler frontowy zwrócił obiekt 
            odpowiedzi zamiast renderowania danych wyjściowych.
        </para>

        <programlisting role="php"><![CDATA[
// odbierz obiekt po uruchomieniu:
$front->dispatch();
$response = $front->getResponse();
if ($response->isException()) {
    // zaloguj, wyślij mailem itp.
}

// lub spowoduj aby metoda dispatch() zwróciła obiekt odpowiedzi
$front->returnResponse(true);
$response = $front->dispatch();

// coś przetwarzaj...

// ostatecznie wyświetl odpowiedź
echo $response;
]]></programlisting>

        <para>
            Domyślnie komunikaty wyjątków nie są wyświetlane. Te zachowanie może
            być zmienione przez wywołanie metody <code>renderException()</code>.
        </para>
	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
