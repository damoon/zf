<sect1 id="zend.view.scripts">
    
    <title>Skrypty widoków</title>
        
    <para>
        Kiedy już kontroler przypisze zmienne i wywoła metodę render(),
        Zend_View dołącza wymagany skrypt widoku i wykonuje go "wewnątrz"
        instancji Zend_View. Dlatego w skrypcie widoku, odwołania do zmiennych
        i metod obsługiwane są za pomocą $this.
    </para>
    
    <para>
        Zmienne przypisane do widoku przez kontroler odnoszszą się do właściwości
        tej instancji. Na przykład, jeśli kontroler przypisał zmienną 'cos', w
        skrypcie widoku możesz odwołać się do niej za pomocą $this->cos.
        (To pozwala Ci na śledzenie zmiennych które zostały przypisane do skryptu 
        i tych które są zmiennymi wewnętrznymi skryptu).
    </para>
    
    <para>
        W celu przypomnienia, oto przykład skryptu widoku pokazanego we wprowadzeniu
        do Zend_View.
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Tabela z książkami. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Tytuł</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Nie ma żadnych książek do wyświetlenia.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Filtrowanie danych wyjściowych</title>

        <para>
            Jedną z najważniejszych rzeczy do zrobienia w skrypcie widoku
            jest uzyskanie pewności, że dane wyjściowe zostały prawidłowo
            przefiltrowane. Pomaga to w przeciwdziałaniu atakom XSS. Jeśli
            nie używasz funkcji, metody lub pomocnika (helper) w celu 
            filtrowania danych wyjściowych, powinieneś zawsze je filtrować 
            wtedy gdy chcesz je wyświetlić.
        </para>
        
        <para>
            Zend_View dostarcza metodę zwaną escape() która filtruje dane 
            wyjściowe.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// zły zwyczaj wyświetlania zmiennej:
echo $this->variable;

// dobryy zwyczaj wyświetlania zmiennej:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            Domyślnie metoda escape() używa funkcji PHP htmlspecialchars() do
            filtrowania danych wyjściowych. Jakkolwiek, zależenie od Twojego
            środowiska możesz chciec filtrować dane wyjściowe w inny sposób.
            Użyj metody setEscape() na poziomie kontrolera by przekazać istancji
            Zend_View informację o tym, jakiej metody filtrowania ma używać.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// utwórz instancje Zend_View
$view = new Zend_View();

// wybierz funkcję htmlentities() jako metodę filtrowania 
$view->setEscape('htmlentities');

// lub wybierz statyczną klasę jako metodę filtrowania
$view->setEscape(array('SomeClass', 'methodName'));

// lub instancję
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// a teraz wygeneruj skrypt widoku
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            Metoda lub funkcja filtrująca powinna przyjmować wartość do 
            przefiltrowania jako pierwszy parametr, a wszystkie inne parametry 
            powinny być opcjonalne.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Użycie alternatywnych systemów szablonów</title>
        
        <para>
            Chociaż PHP jest sam w sobie potężnym systemem szablonów, wielu
            programistów czuje, że jest on jednak zbyt potężny lub skomplikowany
            dla projektantów szablonów i mogą chcieć użyć alternatywnego systemu
            szablonów. Zend_View zapewnia do tego dwa mechanizmy, pierwszy przez
            skrypty widoku, drugi przez zaimplementowanie interfejsu
            Zend_View_Interface.
        </para>

        <sect3 id="zend.view.scripts.templates.scripts">
            <title>Template Systems Using View Scripts</title>

            <para>
                A view script may be used to instantiate and manipulate a
                separate template object, such as a PHPLIB-style template.  The
                view script for that kind of activity might look something like
                this:
            </para>

            <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]></programlisting>
        
            <para>
                I mogłoby to być powiązane z takim plikiem szablonu:
            </para>

            <programlisting role="html"><![CDATA[

<!-- booklist.tpl -->
<table>
    <tr>
        <th>Autor</th>
        <th>Tytuł</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>Nie ma żadnych książek do wyświetlenia.</p>
]]></programlisting>

        </sect3>

        <sect3 id="zend.view.scripts.templates.interface">
            <title>Template Systems Using Zend_View_Interface</title>

            <para>
                Some may find it easier to simply provide a Zend_View-compatible
                template engine. <code>Zend_View_Interface</code> defines the
                minimum interface needed for compatability:
            </para>

            <programlisting role="php"><![CDATA[
/**
 * Return the actual template engine object
 */
public function getEngine();

/**
 * Set the path to view scripts/templates
 */
public function setScriptPath($path);

/**
 * Overloading methods for assigning template variables as object properties
 */
public function __set($key, $value);
public function __get($key);
public function __isset($key);
public function __unset($key);

/**
 * Manual assignment of template variables, or ability to assign multiple
 * variables en masse.
 */
public function assign($spec, $value = null);

/**
 * Unset all assigned template variables
 */
public function clearVars();

/**
 * Render the template named $name
 */
public function render($name);
]]></programlisting>

            <para>
                Using this interface, it becomes relatively easy to wrap a
                third-party template engine as a Zend_View-compatible class. As
                an example, the following is one potential wrapper for Smarty:
            </para>

            <programlisting role="php"><![CDATA[
require_once 'Zend/View/Interface.php';
require_once 'Smarty.class.php';

class Zend_View_Smarty implements Zend_View_Interface
{
    /**
     * Smarty object
     * @var Smarty
     */
    protected $_smarty;

    /**
     * Constructor
     *
     * @param string $tmplPath
     * @param array $extraParams
     * @return void
     */
    public function __construct($tmplPath = null, $extraParams = array())
    {
        $this->_smarty = new Smarty;

        if (null !== $tmplPath) {
            $this->setScriptPath($tmplPath);
        }

        foreach ($extraParams as $key => $value) {
            $this->_smarty->$key = $value;
        }
    }

    /**
     * Return the template engine object
     *
     * @return Smarty
     */
    public function getEngine()
    {
        return $this->_smarty;
    }

    /**
     * Set the path to the templates
     *
     * @param string $path The directory to set as the path.
     * @return void
     */
    public function setScriptPath($path)
    {
        if (is_readable($path)) {
            $this->_smarty->template_dir = $path;
            return;
        }

        throw new Exception('Invalid path provided');
    }

    /**
     * Assign a variable to the template
     *
     * @param string $key The variable name.
     * @param mixed $val The variable value.
     * @return void
     */
    public function __set($key, $val)
    {
        $this->_smarty->assign($key, $val);
    }

    /**
     * Retrieve an assigned variable
     *
     * @param string $key The variable name.
     * @return mixed The variable value.
     */
    public function __get($key)
    {
        return $this->_smarty->get_template_vars($key);
    }

    /**
     * Allows testing with empty() and isset() to work
     *
     * @param string $key
     * @return boolean
     */
    public function __isset($key)
    {
        $value = $this->_smarty->get_template_vars($key);
        return null === $value;
    }

    /**
     * Allows unset() on object properties to work
     *
     * @param string $key
     * @return void
     */
    public function __unset($key)
    {
        $this->_smarty->clear_assign($key);
    }

    /**
     * Assign variables to the template
     *
     * Allows setting a specific key to the specified value, OR passing an array
     * of key => value pairs to set en masse.
     *
     * @see __set()
     * @param string|array $spec The assignment strategy to use (key or array of key
     * => value pairs)
     * @param mixed $value (Optional) If assigning a named variable, use this
     * as the value.
     * @return void
     */
    public function assign($spec, $value = null)
    {
        if (is_array($spec)) {
            $this->_smarty->assign($spec);
            return;
        }

        $this->_smarty->assign($spec, $value);
    }

    /**
     * Clear all assigned variables
     *
     * Clears all variables assigned to Zend_View either via {@link assign()} or
     * property overloading ({@link __get()}/{@link __set()}).
     *
     * @return void
     */
    public function clearVars()
    {
        $this->_smarty->clear_all_assign();
    }

    /**
     * Processes a template and returns the output.
     *
     * @param string $name The template to process.
     * @return string The output.
     */
    public function render($name)
    {
        return $this->_smarty->fetch($name);
    }
}
]]></programlisting>

            <para>
                In this example, you would instantiate the
                <code>Zend_View_Smarty</code> class instead of
                <code>Zend_View</code>, and then use it in roughly the same
                fashion as <code>Zend_View</code>:
            </para>

            <programlisting role="php"><![CDATA[
$view = new Zend_View_Smarty();
$view->setScriptPath('/path/to/templates');
$view->book = 'Zend PHP 5 Certification Study Guide';
$view->author = 'Davey Shafik and Ben Ramsey'
$rendered = $view->render('bookinfo.tpl');
]]></programlisting>

        </sect3>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->