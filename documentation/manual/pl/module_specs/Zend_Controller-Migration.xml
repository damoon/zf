<sect1 id="zend.controller.migration">
    <title>Migracja z poprzednich wersji</title>

    <para>
        API komponentów MVC zmieniało się z biegiem czasu. Jeśli zacząłeś używać 
        Zend Framework we wczesnej wersji, postępuj według poniższych wskazówek 
        aby przeprowadzić migrację swoich skryptów aby używały nowej architektury.
    </para>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Migracja z wersji 0.2.0 lub z poprzednich do 0.6.0</title>

        <para>
            Najbardziej podstawowe użycie komponentów MVC nie zmieniło się; 
            możesz nadal zrobić jak poniżej:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- utwórz router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- ustawić go w kontrolerze -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- ustawić katalog kontrolerów i uruchomić -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            Jakkolwiek, po dodaniu obiektu <xref linkend="zend.controller.overview.response" />, 
            będziesz potrzebował zmienić ostatnią linię z tego przykładu na:
        </para>

        <programlisting role="php"><![CDATA[
echo $ctrl->dispatch();
]]></programlisting>
        
        <para>
            Zalecamy użycie obiektu odpowiedzi (Response) do łączenia zawartości 
            i nagłówków. To pozwala na bardziej elastyczne zmiany formatu danych
            wyjściowych (na przykład JSON lub XML zamiast XHTML) w twoich
            aplikacjach. Konieczność wyświetlenia wartości zwróconej przez 
            <code>dispatch()</code> gwarantuje, że żadna zawartość przekazana 
            do obiektu odpowiedzi nie będzie zwrócona tak samo jak i wszystkie 
            nagłówki przekazane do tego obiektu.
        </para>

        <para>
            Jest wiele dodatkowych funkcjonalności, które rozszerzają istniejące 
            API i są one opisane w dokumentacji.
        </para>

        <para>
            Główne zmiany na które będziesz musiał uważać znajdziesz gdy będziesz
            tworzył klasy pochodne różnych kompnentów. Kluczowe zmiany to:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                teraz przyjmuje i zwraca obiekt <xref linkend="zend.controller.overview.request" />
                zamiast tokena dispatchera.
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                teraz przyjmuje i zwraca obiekt <xref linkend="zend.controller.overview.request" />
                zamiast tokena dispatchera.
            </para></listitem>

            <listitem>
                <para>Zmiany w <code>Zend_Controller_Action</code> to:</para>

                <itemizedlist>
                    <listitem><para>
                        Kontruktor teraz przyjmuje dokładnie trzy argumenty,
                        <code>Zend_Controller_Request_Abstract $request</code>, 
                        <code>Zend_Controller_Response_Abstract $response</code>, 
                        oraz <code>array $params (opcjonalny)</code>.
                        <code>Zend_Controller_Action::__construct()</code> używa
                        ich aby ustawić żądanie, odpowiedź, i właściwości 
                        invokeArgs obiektu i jeśli nadpisujesz konstruktor,
                        powinieneś je także ustawić. Lepiej jednak użyj
                        metody <code>init()</code> aby skonfigurować instancję,
                        ponieważ ta metoda jest wywoływana jako ostatnia akcja
                        konstruktora.
                    </para></listitem>

                    <listitem><para>
                        <code>run()</code> nie jest już zdefiniowana jako finalna, 
                        ale nie jest też już używana przez kontroler frontowy; 
                        Jej jedynym celem jest użycie klasy jako kontrolera strony.
                        Przyjmuje ona teraz dwa opcjonalne argumenty, 
                        <code>Zend_Controller_Request_Abstract $request</code> 
                        oraz <code>Zend_Controller_Response_Abstract $response</code>.
                    </para></listitem>

                    <listitem><para>
                        Akcja <code>indexAction()</code> nie musi być już
                        zdefiniowana, ale jest zalecana jako domyślna akcja. 
                        To pozwala routerowi RewriteRouter oraz kontrolerom akcji
                        na określenie innych domyślnych metod akcji.
                    </para></listitem>

                    <listitem><para>
                        Metoda <code>__call()</code> powinna być nadpisana aby
                        obsłużyć automatycznie niezdefiniowane akcje.
                    </para></listitem>

                    <listitem><para>
                        Metoda <code>_redirect()</code> przyjmuje teraz opcjonalny
                        drugi argument, kod HTTP, który ma być zwrócony z 
                        przekierowaniem oraz opcjonalny trzeci argument, 
                        <code>$prependBase</code>, który może zdecydować czy
                        bazowy adres URL zarejestrowany w obiekcie żądania ma być
                        dodany do adresu URL.
                    </para></listitem>

                    <listitem>
                        <para>
                            Właściwość <code>_action</code> nie jest już
                            zdefiniowana. Ta właściwość była obiektem 
                            <code>Zend_Controller_Dispatcher_Token</code>, który
                            nie istnieje już w aktualnej wersji. Jedynym 
                            zastosowaniem tokena było przechowanie informacji o
                            zażądanym kontrolerze, akcji i parametrach URL. Te
                            informacje są teraz dostępne w obiekcie żądania w 
                            taki sposób:
                        </para>

                        <programlisting role="php"><![CDATA[
// Pobierz nazwę kontrolera z żądania
// Dotychczas dostęp do niej był za pomocą: $this->_action->getControllerName().
// Poniższy przykład używa metody getRequest(), ale możesz także bezpośrednio
// użyć właściwości $_request; użycie getRequest() jest zalecane ponieważ klasa 
// rodzica może nadpisać dostęp do obiektu żądania.
$controller = $this->getRequest()->getControllerName();

// Pobierz nazwę akcji z żądania
// Dotychczas dostęp do niej był za pomocą: $this->_action->getActionName().
$action = $this->getRequest()->getActionName();

// Pobierz parametry z żądania
// To się nie zmieniło; metody _getParams() oraz _getParam() teraz w prosty 
// sposób wskazują na obiekt żądania.
$params = $this->_getParams();
$foo = $this->_getParam('foo', 'default'); // pobierz parametr 'foo', używając
                                           // wartości 'default' jako domyślnej

]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            Metoda <code>noRouteAction()</code> została usunięta. 
                            Aby w poprawny sposób obsługiwać nieistniejące 
                            metody akcji powinieneś przekierować je do domyślnej
                            akcji używając metody <code>__call()</code>:
                        </para>

                        <programlisting role="php"><![CDATA[
public function __call($method, $args)
{
    // Jeśli została zażądania nieistniejąca metoda 'Action', żądanie zostanie
    // przekazane do domyślnej metody akcji:
    if ('Action' == substr($method, -6)) {
        return $this->defaultAction();
    }
    
    throw new Zend_Controller_Exception('Nieprawdiłowa metoda');
}
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                Akcja <code>Zend_Controller_RewriteRouter::setRewriteBase()</code>
                została usunięta. Zamiast niej użyj 
                <code>Zend_Controller_Front::setBaseUrl()</code> 
                (lub Zend_Controller_Request_Http::setBaseUrl(), jeśli używasz
                tej klasy).
            </para></listitem>

            <listitem><para>
                Interfejs <code>Zend_Controller_Plugin_Interface</code> został
                zamieniony na <code>Zend_Controller_Plugin_Abstract</code>. 
                Wszystkie metody przyjmują i zwracają obiekt 
                <xref linkend="zend.controller.overview.request" />
                zamiast tokena dispatchera.
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
