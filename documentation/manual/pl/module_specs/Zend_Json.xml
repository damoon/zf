<sect1 id="zend.json.introduction">
    <title>Wprowadzenie</title>
    <para>
        <code>Zend_Json</code> dostarcza wygodne metody serializowania danych 
        PHP do formatu JSON i dekodowania z formatu JSON do PHP. Aby dowiedzieć
        się więcej o JSON <ulink url="http://www.json.org/">odwiedź stronę 
        projektu JSON</ulink>.
    </para>
    <para>
        Format JSON, JavaScript Object Notation, może być użyty do wymiany danych
        między JavaScript a innymi językami. Dzięki temu, że JSON może być 
        bezpośrednio odebrany przez JavaScript jest on dużo bardziej efektywnym
        i lżejszym formatem wymiany danych z JavaScript niż XML.
    </para>
</sect1>

<sect1 id="zend.json.basics">
    <title>Podstawowe użycie</title>
    <para>
        Użycie <code>Zend_Json</code> sprowadza się do dwóch dostępnych 
        statycznych metod: <code>Zend_Json::encode()</code> oraz
        <code>Zend_Json::decode()</code>. 
    </para>
    <programlisting role="php"><![CDATA[<?php
// Odkoduj wartość:
$phpNative = Zend_Json::decode($encodedValue);

// Zakoduj wartość:
$json = Zend_Json::encode($phpNative);
?>]]></programlisting>
</sect1>

<sect1 id="zend.json.objects">
    <title>Obiekty JSON</title>
    <para>
        Kiedy kodujemy obiekt PHP jako JSON, wszystkie publiczne właściwości
        tego obiektu zostaną zakodowane w obiekcie JSON.
    </para>
    <para>
        Odkodowanie obiektów JSON sprawia już lekką trudność, ponieważ obiekty
        Javascript prawie dokładnie odpowiadają tablicom asocjacyjnym PHP.
        Jedni proponują aby przekazywać identyfikator klasy, a następnie 
        tworzyć instancję obiektu tej klasy i wypełniać ją parami klucz/wartość
        obiektu JSON; inni ostrzegają, że mogłoby to być istotną luką w bezpieczeństwie.
    </para>
    <para>
        Domyślnie <code>Zend_Json</code> odkoduje obiekty JSON jako tablice
        asocjacyjne. Jednak jeśli chcesz odebrać obiekt, możesz to określić
        w ten sposób:
    </para>
    <programlisting role="php"><![CDATA[<?php
// Odkoduj obiekty jako obiekty
$phpNative = Zend_Json::decode($encodedValue, Zend_Json::TYPE_OBJECT);
?>]]></programlisting>
    <para>
        Wszystkie dekodowane obiekty są zwracane jako obiekty klasy 
        <code>StdClass</code> z właściwościami odpowiadającymi parom
        klucz/wartość z obiektu JSON.
    </para>
    <para>
        Zalecane jest aby to programista decydował o tym w jaki sposób mają być
        odkodowane obiekty JSON. Jeśli powinien być utworzony obiekt konkretnego
        typu, może być on utworzony w kodzie aplikacji, a następnie wypełniony 
        wartościami odkodowanymi za pomocą <code>Zend_Json</code>.
    </para>
</sect1>
        
<!--
vim:se ts=4 sw=4 et:
-->
