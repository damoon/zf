<sect1 id="zend.view.introduction">

    <title>Wprowadzenie</title>
    
    <para>
        Zend_View jest klasą zapewniającą obsługę części widoku ("view")
        we wzorcu projektowym MVC (model-view-controller). Istnieje ona 
        w celu oddzielenia wyglądu aplikacji od kontrolerów i danych.
        Zapewnia system skryptów pomocników i filtrów.
    </para>
    
    <para>
        Zend_View jest bardzo prostym systemem; możesz użyć PHP jako
        jezyka szablonów lub utworzyć instancje innych systemów szablonów,
        a następnie manipulować nimi wewnątrz skryptu widoku.
    </para>

    <para>
        Zasadniczo użycie Zend_View składa się z dwóch kroków:
        
        1. Twój skrypt kontrolera tworzy instancję klasy 
        Zend_View i przekazuje zmienne do tej instancji.
        
        2. Kontroler mówi obiektowi Zend_View aby przetworzył określony skrypt 
        widoku, skutkiem tego jest wygenerowanie wyjściowego widoku.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Skrypt kontrolera</title>
        
        <para>
            Aby pokazać prosty przykład załóżmy, że kontroler ma dane w postaci 
            listy książek i chcemy aby były one przetworzone jako widok. Skrypt
            kontrolera mógłby wyglądać tak:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// użyjmy modelu aby uzyskać dane o autorach książek i ich tytułach
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// przekażmy dane o książkach do instancji Zend_View
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// wygenerujemy wyjściowy widok o nazwie "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>Skrypt widoku</title>
        
        <para>
            Teraz potrzebujemy skryptu widoku "booklist.php". Jest
            to skrypt PHP jak każy inny, z jednym wyjątkiem: jest on wykonywany
            w przestrzeni instancji Zend_View, co oznacza, że odnosi się on do 
            właściwości i metod klasy Zend_View za pomocą $this. (Zmienne
            przekazane do tej instancji przez kontroler sa publicznymi 
            właściwościami instancji Zend_View.) Więc bardzo prosty skrypt
            mógłby wyglądać tak:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Tabela z książkami. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Tytuł</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Nie ma żadnych książek do wyświetlenia.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Zauważ, że używamy metody "escape()" aby przefiltrować zmienne
            wyjściowe.
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>Skrypt kontrolera</title>
    
    <para>
        Kontroler jest miejscem, w którym tworzysz i konfigurujesz instancję 
        Zend_View. Potem przypisujesz do tej instancji zmienne zawierające dane,
        a następnie wybierasz skrypt widoku, który ma być zrenderowany.
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>Przekazywanie zmiennych</title>
        
        <para>
            Twój skrypt kontrolera powinien przypisać potrzebne zmienne do 
            instancji widoku, zanim przekaże kontrolę do skryptu widoku. Możesz 
            to zrobić przypisując zmienne do zmiennych instancji widoku:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>
            Jednak mogłoby być niewygodnie gdy zmienne, które masz przekazać
            są zebrane w tablicy lub obiekce.
        </para>
        
        <para>
            Metoda assign() pozwala na automatyczne przypisanie wszystkich 
            zmiennych z tablicy lub obiektu. Poniższe przykłady dają taki sam
            efekt jak poprzedni przykład, w którym zmienne były przypisywane
            pojedynczo:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// przypisuje tablicę zmiennych w postaci par
// klucz-wartość, gdzie klucz jest nazwą przypisanej
// zmiennej, a wartość jest jej wartościa.
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// robi to samo z publicznymi właściwościami
// obiektu. zauważ jak rzutujemy obiekt na 
// tablicę podczas przypisywania
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
            Oczywiście możesz także przypisywać zmienne jedna po drugiej,
            przekazując nazwę zmiennej jako łańcuch znaków, a potem wartość 
            zmiennej:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>Wykonywanie skryptu widoku</title>
        
        <para>
            Kiedy już przypisałeś wszystkie zmienne, kontroler powinien przekazać
            obiektowi Zend_View informację o wykonaniu konkretnego skryptu widoku.
            Zrób to wywołując metodę render(). Zauważ, że ta metoda zwróci
            wygenerowany widok zamiast wyświetlając go, więc musisz sam go wyświetlić
            za pomocą funkcji echo() lub print().
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>Ścieżki skryptu widoku</title>
        
        <para>
            Domyślnie, Zend_View oczekuje, że skrypty widoku są umieszczone
            w tym samym katalogu co skrypty kontrolera. Na przykład jeśli 
            Twój skrypt kontrolera jest w katalogu "/path/to/app/controllers" 
            i wywołuje on $view->render('someView.php'), to Zend_View będzie
            szukać pliku "/path/to/app/controllers/someVire.php".
        </para>
        
        <para>
            Oczywiście, Twoje skrypty są pewnie umieszczone gdzieś indziej.
            Aby poinformować Zend_View o tym, gdzie ma szukać skryptów, użyj
            metody setScriptPath().
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            Teraz kiedy wywołasz metodę $view->render('someView.php'), będzie ona
            szukać pliku "/path/to/app/views/someView.php".
        </para>
        
        <para>
            Oczywiście możesz dodawać ścieżki na stos używająć metody addScriptPath().
            Gdy dodajesz ścieżki na stos, Zend_View będzie szukać skryptu widoku
            począwszy od ostatnio dodanej ścieżki. To pozwala na nadpisanie domyślnych 
            widoków za pomocą innych widoków, dzięki czemu możesz tworzyć różne 
            "motywy" czy "skórki" dla niektórych widoków, zostawiając inne bez zmian.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// teraz gdy wywołasz $view->render('booklist.php'), Zend_View będzie
// wpierw szukać pliku "/path/to/custom/booklist.php", potem
// "/path/to/app/views/booklist.php", a ostatecznie pliku "booklist.php"
// w bieżącym katalogu
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>Skrypty widoków</title>
        
    <para>
        Kiedy już kontroler przypisze zmienne i wywoła metodę render(),
        Zend_View dołącza wymagany skrypt widoku i wykonuje go "wewnątrz"
        instancji Zend_View. Dlatego w skrypcie widoku, odwołania do zmiennych
        i metod obsługiwane są za pomocą $this.
    </para>
    
    <para>
        Zmienne przypisane do widoku przez kontroler odnoszszą się do właściwości
        tej instancji. Na przykład, jeśli kontroler przypisał zmienną 'cos', w
        skrypcie widoku możesz odwołać się do niej za pomocą $this->cos.
        (To pozwala Ci na śledzenie zmiennych które zostały przypisane do skryptu 
        i tych które są zmiennymi wewnętrznymi skryptu).
    </para>
    
    <para>
        W celu przypomnienia, oto przykład skryptu widoku pokazanego we wprowadzeniu
        do Zend_View.
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Tabela z książkami. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Tytuł</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Nie ma żadnych książek do wyświetlenia.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Filtrowanie danych wyjściowych</title>

        <para>
            Jedną z najważniejszych rzeczy do zrobienia w skrypcie widoku
            jest uzyskanie pewności, że dane wyjściowe zostały prawidłowo
            przefiltrowane. Pomaga to w przeciwdziałaniu atakom XSS. Jeśli
            nie używasz funkcji, metody lub pomocnika (helper) w celu 
            filtrowania danych wyjściowych, powinieneś zawsze je filtrować 
            wtedy gdy chcesz je wyświetlić.
        </para>
        
        <para>
            Zend_View dostarcza metodę zwaną escape() która filtruje dane 
            wyjściowe.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// zły zwyczaj wyświetlania zmiennej:
echo $this->variable;

// dobryy zwyczaj wyświetlania zmiennej:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            Domyślnie metoda escape() używa funkcji PHP htmlspecialchars() do
            filtrowania danych wyjściowych. Jakkolwiek, zależenie od Twojego
            środowiska możesz chciec filtrować dane wyjściowe w inny sposób.
            Użyj metody setEscape() na poziomie kontrolera by przekazać istancji
            Zend_View informację o tym, jakiej metody filtrowania ma używać.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// utwórz instancje Zend_View
$view = new Zend_View();

// wybierz funkcję htmlentities() jako metodę filtrowania 
$view->setEscape('htmlentities');

// lub wybierz statyczną klasę jako metodę filtrowania
$view->setEscape(array('SomeClass', 'methodName'));

// lub instancję
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// a teraz wygeneruj skrypt widoku
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            Metoda lub funkcja filtrująca powinna przyjmować wartość do 
            przefiltrowania jako pierwszy parametr, a wszystkie inne parametry 
            powinny być opcjonalne.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>System szablonów</title>
        
        <para>
            Chociaż PHP jest sam w sobie potężnym systemem szablonów, wielu
            programistów czuje, że jest on jednak zbyt potężny lub skomplikowany
            dla projektantów szablonów. Jako taki, skrypt widoku może być użyty
            do utworzenia instancji odrębnego systemu szablonów, a następnie 
            do manipulowania nią. Może to być na przykład system taki jak w 
            PHPLIB. Skrypt widoku mógłby wtedy wyglądać w ten sposób:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            I mogłoby to być powiązane z takim plikiem szablonu:
        </para>
        
        <programlisting role="html"><![CDATA[

<!-- booklist.tpl -->
<table>
    <tr>
        <th>Autor</th>
        <th>Tytuł</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>Nie ma żadnych książek do wyświetlenia.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>Klasy pomocników</title>
    
    <para>
        W skryptach widoków często potrzebne jest przeprowadzanie złożonych 
        funkcji; na przykład formatowanie daty, generowanie elementów formularzy, 
        czy wyświetlanie odnośnikow akcji. Możesz użyć klas pomocników w tym celu.
    </para>
    
    <para>
        Aby użyć pomocnika w swoim skrypcie widoku, wywołaj go za pomocą
        $this->nazwaPomocnika(). Obiekt Zend_View załaduje klasę 
        Zend_View_Helper_NazwaPomocnika, utworzy obiekt tej klasy i wywoła
        metodę nazwaPomocnika(). Instancja obiektu istnieje teraz w instancji
        Zend_View i będzie ona ponownie używana przy następnych wywołaniach 
        $this->nazwaPomocnika().
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Wbudowane klasy pomocników</title>
        
        <para>
            Zend_View posiada wbudowany zbiór klas pomocników, z których
            wszystkie odnoszą się do generowania formularzy. Każda z nich
            autmatycznie filtruje dane wyjściowe. Są to:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): Tworzy element &lt;input
                type="button" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): Tworzy element 
                &lt;input type="checkbox" /&gt;. Parametr $options jest tablicą
                w której pierwszy element jest wartością dla pola zaznaczonego 
                ("checked"), a drugi wartością dla niezaznaczonego ("unchecked")
                (domyślnie są to wartości '1' i '0'). Jeśli wartość $value odpowiada
                wartości pola zaznaczonego ("checked"), to pole zostanie zaznaczone.
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): Tworzy element &lt;input
                type="file" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): Tworzy element &lt;input
                type="hidden" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): Tworzy element &lt;input
                type="password" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): Tworzy serię
                elementów &lt;input type="radio" /&gt;, po jednym dla każdego
                elementu tablicy $options. W tablicy $options, klucz
                jest wartością przycisku radio, a wartość elementu tablicy 
                jest etykietą przycisku radio. Zmienna $value określa wartość
                przycisku, który ma być początkowo zaznaczony.
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): Tworzy element &lt;input
                type="reset" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): Tworzy blok
                &lt;select&gt;...&lt;/select&gt;, z elementami 
                &lt;option&gt; po jednym dla każdego elementu tablicy $options.  
                W tablicy $options klucz jest wartościa elementu, a wartość
                jest etykietą. Zmienna $value określa wartośc elementu (lub
                elementów), który ma być początkowo zaznaczony.
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): Tworzy element &lt;input
                type="submit" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): Tworzy element &lt;input
                type="text" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): Tworzy element 
                &lt;textarea&gt;...&lt;/textarea&gt;.
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Użycie tych metod w Twoim skrypcie jest bardzo łatwe, poniżej
            znajduje się przykład. Zauważ, że wszystko czego potrzebujesz
            to wywołanie tych metod; załadowanie ich i utworzenie instancji
            odbędzie się automatycznie.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// wewnątrz skryptu widoku, $this odnosi się do instancji Zend_View.
// 
// załóżmy, że już przypisałeś serię elementów opcji jako tablicę
// o nazwie $countries = array('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany').
?>
<form action="action.php" method="post">
    <p><label>Adres Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Kraj:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Czy zgadzasz się?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no')) ?>
    </label></p>
</form>]]>
        </programlisting>

        <para>
            Rezultat wyglądałby w ten sposób:    
        </para>

        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Adres Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Kraj:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Czy zgadzasz się?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Ścieżki klas pomocników</title>
        
        <para>
            Tak jak ze skryptami widoków, kontroler może określić stos ścieżek,
            w których Zend_View ma szukać klas pomocników. Domyślnie Zend_View 
            szuka klas pomocników w katalogu "Zend/View/Helper/*". Możesz wybrać
            inny katalog używając metod setHelperPath() oraz addHelperPath().
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            Oczywiście możesz dodawać ścieżki na stos używająć metody addHelperPath().
            Gdy dodajesz ścieżki na stos, Zend_View będzie szukać klasy pomocnika
            począwszy od ostatnio dodanej ścieżki. To pozwala na dodanie (lub 
            nawet nadpisanie) podstawowego pakietu klas pomocników swoimi własnymi 
            klasami.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// teraz kiedy wywołasz $this->helperName(), Zend_View będzie wpierw szukał w
// "/other/path/to/helpers/HelperName.php", potem w
// "/path/to/some/helpers/HelperName" i ostatecznie w
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Pisanie własnych klas pomocników</title>
        
        <para>
            Pisanie własnych klas pomocników jest łatwe; po prostu pisz według 
            poniższych zasad:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                Nazwa klasy musi być w postaci Zend_View_Helper_*, gdzie * oznacza
                nazwę pomocnika. Na przykład jeśli chcesz napisać pomocnika
                nazwanego "twojPomocnik", klasa powinna nazywać się 
                "Zend_View_Helper_TwojPomocnik" (zwróć uwagę na początkowe
                wielkie litery).
            </para></listitem>
            
            <listitem><para>
                Klasa musi posiadać publiczną metodę która jest taka jak nazwa 
                pomocnika; jest to metoda która zostanie wywołana gdy skrypt
                widoku wywoła "$this->twojPomocnik()". W przykładzie pomocnika
                "twojPomocnik", wymaganą deklaracją metody powinno być
                "public function twojPomocnik()". 
            </para></listitem>
            
            <listitem><para>
                Klasa nie powinna wyświetlać ani w inny sposób generować danych 
                wyjściowych. Zamiast tego powinna zwrócić dane do wyświetlenia.
                Zwracane wartości powinny być odpowiednio przefiltrowane.
            </para></listitem>
            
            <listitem><para>
                Klasa musi znajdować się w pliku odpowiednio do nazwy pomocnika.
                Przykladowo dla pomocnika o nazwie "twojPomocnik", plik powinien
                nazywać się "TwojPomocnik.php".
            </para></listitem>
        </itemizedlist>
        
        <para>
            Umieść plik klasy pomocnika w katalogu który był dodany do stosu 
            ścieżek, a Zend_View automatycznie załaduje klasę, utworzy instancję,
            i uruchomi metodę. 
        </para>
        
        <para>
            Poniżej przykład kodu naszego przykładowego pomocnika twojPomocnik:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_TwojPomocnik {
    protected $_count = 0;
    public function twojPomocnik()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            Teraz w skrypcie widoku możesz wywołać pomocnika TwojPomocnik
            tyle razy ile zechcesz; instancja zostanie utworzona raz i będzie
            ona istniała przez cały okres istnienia instancji Zend_View.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// pamiętaj, że w skrypcie widoku $this odnosi się do instancji Zend_View.
echo $this->twojPomocnik();
echo $this->twojPomocnik();
echo $this->twojPomocnik();
?>]]>
        </programlisting>
        
        <para>
            Dane wyjściowe wyglądałyby w ten sposób:
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->