<sect1 id="zend.config.introduction">
    <title>Wprowadzenie</title>
    <para>
        Klasa <code>Zend_Config</code> została stworzona aby uprościć użycie danych
        konfiguracyjnych dla aplikacji web. Dostarcza ona interfejs służący do odczytywania
        konfiguracji z różnych źródeł w których dane konfiguracyjne są przechowywane
        hierarchiczne. Obecnie <code>Zend_Config</code> dostarcza klasy obsługujące
        dane konfiguracyjne przechowywane w plikach tekstowych:
        <link linkend="zend.config.classes.array"><code>Zend_Config_Array</code></link>,
        <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>, oraz
        <link linkend="zend.config.classes.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <para>
        <code>Zend_Config</code> wspiera model pojedynczego dziedziczenia, w którym
        jedna sekcja danych konfiguracyjnych może dziedziczyć z innej sekcji. 
        Chociaż <code>Zend_Config</code> obsługuje drzewo o dowolnej strukturze, to
        sekcja danych konfiguracyjnych może dziedzieczyć tylko z jednej sekcji źródłowej.
    </para>
    <para>
        Klasa <code>Zend_Config</code> implementuje interfejsy countable oraz iterator 
        w celu zapewnienia łatwego dostępu do danych konfiguracyjnych. Dane są przekazywane 
        do <code>Zend_Config</code> za pomocą tablicy asocjacyjnej, która może być
        wielowymiarowa. Klasa pomocnicza tak jak <code>Zend_Config_Ini</code> zasadniczo
        przekazuje taką tablicę do <code>Zend_Config</code>, ale interfejs nie wymaga 
        używania tej konwencji.
    </para>
    <note>
        Klasa <code>Zend_Config</code> pozwala na modyfikację załadowanych danych konfiguracyjnych w pamięci
        aplikacji, ale nie umożliwia zapisywania tych zmian do plików konfiguracyjnych. Narzędzia do tworzenia
        oraz modyfikowania danych konfiguracyjnych są obecnie poza polem działania Zend Framework. Oczywiście
        w celu tworzenia i modyfikowania danych konfiguracyjnych dostępne są rozwiązania w postaci innych 
        aplikacji.
    </note>
    <example>
        <title>Ładowanie danych konfiguracyjnych z pliku INI</title>
        <para>
            W tym przykładzie dane konfiguracyjne aplikacji rozbudowywanej są ładowane z pliku 
            INI za pomocą <link linkend="zend.config.classes.ini"><code>Zend_Config_Ini</code></link>:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'production'));
?>]]>       </programlisting>
            Teraz dane konfiguracyjne są dostępne jako właściwości obiektu <code>$config</code>.
            Załóżmy, że dane konfiguracyjne zawierają parametry połączenia z bazą danych
            i umieszczone są one w pliku INI w takiej postaci:
            <programlisting role="ini"><![CDATA[[production]
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname]]>
            </programlisting>
            Aplikacja może utworzyć połączenie w taki sposób:
            <programlisting role="php"><![CDATA[<?php
$myApplicationObject->databaseConnect($config->database->type,
                                      $config->database->host,
                                      $config->database->username,
                                      $config->database->password,
                                      $config->database->name);
?>]]>       </programlisting>
            Jak pokazano wyżej, dane konfiguracyjne dostępne są jako właściwości obiektu.            
       </para>
    </example>
    <para>
        Możemy także w prosty sposób rozwinąć klasę <code>Zend_Config</code>. W tym
        przypadku klasa pochodna definiuje metodę <code>dump()</code> umożliwiającą 
        szybkie wyświetlenie załadowanych danych konfiguracyjnych:
        <programlisting role="php"><![CDATA[<?php
class MyConfig extends Zend_Config
{
    protected $_indent;

    public function dump()
    {
        $this->_indent = 0;
        echo "<pre>\n";
        $this->_dumpRecursor($this);
        echo "</pre>";
    }

    protected function _dumpRecursor($config)
    {
        foreach ($config as $key => $value) {
            echo str_repeat("    ", $this->_indent) . "$key =>";
            if ($value instanceof Zend_Config) {
                echo "\n";
                $this->_indent++;
                $this->_dumpRecursor($value);
                $this->_indent--;
            } else {
                echo " $value\n";
            }
        }
    }
}

$config = new MyConfig(Zend_Config_Ini::load('/path/to/config.ini', 'production'));

$config->dump();
?>]]>   </programlisting>
        Dla danych z powyższego przykładu zostałoby wyświetlone:
        <programlisting role="text"><![CDATA[<pre>
database =>
    type => pdo_mysql
    host => db.example.com
    username => dbuser
    password => secret
    name => dbname
</pre>]]>
        </programlisting>
    </para>
</sect1>
<sect1 id="zend.config.classes.array">
    <title>Zend_Config_Array</title>
    <sect2 id="zend.config.classes.array.introduction">
        <title>Wprowadzenie</title>
        Klasa <code>Zend_Config_Array</code> umożliwia programistom przechowywanie
        danych konfiguracyjnych w wielowymiarowych tablicach PHP i uzyskanie dostępu
        do nich jak do właściwości obiektu za pomocą <code>Zend_Config</code>.
        <example>
            <title>Dane konfiguracyjne przechowywane jako tablice PHP</title>
            <para>
                Ten przykład pokazuje proste użycie klasy <code>Zend_Config_Array</code> 
                do ładowania danych konfiguracyjnych z tablic PHP. Wpierw tworzymy
                tablice PHP zawierające dane konfiguracyjne:
                <programlisting role="php"><![CDATA[<?php
// Podstawowe dane konfiguracyjne
$config['production'] = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'type'     => 'pdo_mysql',
        'host'     => 'db.example.com',
        'username' => 'dbuser',
        'password' => 'secret',
        'name'     => 'dbname'
    )
);

// Konfiguracja aplikacji rozbudowywanej dziedziczy z podstawowej
// konfiguracji, a niektóre wartości są nadpisywane
$config['staging'] = $config['production'];
$config['staging']['webhost'] = 'dev.example.com';
$config['staging']['database']['host'] = 'dev.example.com';
$config['staging']['database']['username'] = 'devuser';
$config['staging']['database']['password'] = 'devsecret';
?>]]>           </programlisting>
                <note>
                    Tablica zawierająca dane konfiguracyjne znajdująca się w załadowanym
                    skrypcie powinna nazywać się <code>$config</code>.
                </note>
                Dziedzieczenie w powyższym przykładzie jest obsługiwane przez
                przypisanie wartości sekcji <code>production</code> do sekcji 
                <code>staging</code>. Teraz prostą sprawą jest załadowanie danych 
                konfiguracyjnych za pomocą <code>Zend_Config_Array</code>:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';

$config = new Zend_Config(Zend_Config_Array::load('/path/to/config.php', 'staging'));

echo $config->database->host; // wyświetla "dev.example.com"
?>]]>           </programlisting>
            </para>
        </example>
        <para>
            Ten sposób jest godny uwagi, ponieważ dane konfiguracyjne są bezpośrednio
            przechowywane w tablicach PHP, a każda wartość danych konfiguracyjnych 
            ma ten sam typ jak w tablicy <code>$config</code> z pliku konfiguracyjnego.
            <programlisting role="php"><![CDATA[<?php
$config['staging']['debug']   = 'false'; // wartośc jest łańcuchem znaków
$config['staging']['console'] = false; // wartość jest zmienną logiczną
$config['staging']['timeout'] = 30; // wartość jest liczbą całkowitą
?>]]>       </programlisting>
        </para>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.ini">
    <title>Zend_Config_Ini</title>
    <sect2 id="zend.config.classes.ini.introduction">
        <title>Wprowadzenie</title>
        Klasa <code>Zend_Config_Ini</code> umożliwia programistom przechowywanie
        danych konfiguracyjnych w plikach INI i uzyskanie dostępu
        do nich jak do właściwości obiektu za pomocą <code>Zend_Config</code>.
        <example>
            <title>Dane konfiguracyjne przechowywane w plikach INI</title>
            <para>
                Ten przykład pokazuje proste użycie klasy <code>Zend_Config_Ini</code> 
                do ładowania danych konfiguracyjnych z plików INI. Załóżmy, że mamy
                następujące dane konfiguracyjne w pliku <code>/path/to/config.ini</code>:
                <programlisting role="ini"><![CDATA[; Podstawowe dane konfiguracyjne
[production]
webhost           = www.example.com
database.type     = pdo_mysql
database.host     = db.example.com
database.username = dbuser
database.password = secret
database.name     = dbname

; Konfiguracja aplikacji rozbudowywanej dziedziczy z podstawowej
; konfiguracji, a niektóre wartości są nadpisywane
[staging]
extends = production
database.host     = dev.example.com
database.username = devuser
database.password = devsecret]]>
                </programlisting>
                <note>
                    Zauważ, że składnia pliku INI jest podobna do tej wymaganej przez funkcję PHP
                    <ulink url="http://php.net/parse_ini_file"><code>parse_ini_file()</code></ulink>, 
                    której używa <code>Zend_Config_Ini</code>. Proszę przejrzeć jej dokumentację 
                    aby znać specyfikę działania klasy <code>Zend_Config_Ini</code>, na przykład
                    w kwestii traktowania specjalnych wartości takich jak <code>true</code>, 
                    <code>false</code>, <code>yes</code>, <code>no</code>, oraz <code>null</code>.
                </note>
                Dziedziczenie jest obsługiwane w składni pliku INI przez użycie słowa <code>extends</code>. 
                Wartością klucza <code>extends</code> powinna być nazwa sekcji z której ma dziedziczyć
                nowa sekcja. Dane konfiguracyjne są wtedy ładowane z pliku INI w taki sposób:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';

$config = new Zend_Config(Zend_Config_Ini::load('/path/to/config.ini', 'staging'));

echo $config->database->host; // wyświetla "dev.example.com"
?>]]>           </programlisting>
            </para>
        </example>
    </sect2>
</sect1>
<sect1 id="zend.config.classes.xml">
    <title>Zend_Config_Xml</title>
    <sect2 id="zend.config.classes.xml.introduction">
        <title>Wprowadzenie</title>
        Klasa <code>Zend_Config_Xml</code> umożliwia programistom przechowywanie
        danych konfiguracyjnych w plikach XML i uzyskanie dostępu
        do nich jak do właściwości obiektu za pomocą <code>Zend_Config</code>.
        <example>
            <title>Dane konfiguracyjne przechowywane w plikach XML</title>
            <para>
                Ten przykład pokazuje proste użycie klasy <code>Zend_Config_Xml</code> 
                do ładowania danych konfiguracyjnych z plików XML. Załóżmy, że mamy
                następujące dane konfiguracyjne w pliku <code>/path/to/config.xml</code>:
                <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<config>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <type>pdo_mysql</type>
            <host>db.example.com</host>
            <username>dbuser</username>
            <password>secret</password>
            <name>dbname</name>
        </database>
    </production>
    <staging extends="production">
        <database>
            <host>dev.example.com</host>
            <username>devuser</username>
            <password>devsecret</password>
        </database>
    </staging>
</config>]]>    </programlisting>
                Dziedziczenie jest obsługiwane w składni pliku XML przez użycie 
                atrybutu <code>extends</code>. Wartością klucza <code>extends</code> 
                powinna być nazwa sekcji z której ma dziedziczyć nowa sekcja. Dane 
                konfiguracyjne są wtedy ładowane z pliku XML w taki sposób:
                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config(Zend_Config_Xml::load('/path/to/config.xml', 'staging'));

echo $config->database->host; // wyświetla "dev.example.com"
?>]]>           </programlisting>
            </para>
            <note>
                Wartości danych konfiguracyjnych z <code>Zend_Config_Xml</code>
                są zawsze traktowane jako łańcuchy znaków.
            </note>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->