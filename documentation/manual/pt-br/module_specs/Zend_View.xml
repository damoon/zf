<sect1 id="zend.view.introduction">

    <title>Introdução</title>
    
    <para>
        Zend_View é uma classe para trabalhar com a parte de visualização do padrão de projeto MVC.  Basicamente ela existe para  separar o script de visualização dos controladores e modelos.  Ela fornece um sistema de assistentes, filtros de saída e escape de variáveis.
    </para>
    
    <para>
        Zend_View é um sistema de template agnóstico; você pode usar o PHP como sua linguagem de template, ou criar instâncias de outros sistemas de template e manipulá-las dentro do seu script de visualização.
    </para>

    <para>
        Essencialmente, o funcionamento do Zend_View acontece em duas etapas principais:
        
        1.  Seu script controlador cria uma instância de Zend_View, atribuindo-lhe variáveis.
        
        2. O controlador instrui o Zend_View a rederizar uma determinada visualização , passando o controle ao script de visualização, responsável pela geração da saída a ser visualizada.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Script Controlador</title>
        
        <para>
            Neste exemplo simples, suponhamos que seu controlador tenha uma listagem contendo dados sobre livros, que queremos renderizar para uma visualização. O controlador poderia ser algo como isto:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// use um modelo para obter dados sobre autores e títulos dos livros.
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// atribua os dados à instância de Zend_View
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// renderize uma visualização chamada "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>Script Visualizador</title>
        
        <para>
            Agora necessitaremos do script de visualização associado, "booklist.php". Trata-se de um script PHP como qualquer outro, com uma exceção:  ele executa dentro do escopo da instância de Zend_View instance, o que implica que as referências a $this apontam para as propriedades e métodos da instância Zend_View.  (Variáveis atribuídas à instância pelo controlador são propriedades públicas da instância de Zend_View.)  Deste modo, um script de visualição muito básico poderia se parecer com isto:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Uma tabela contendo alguns livros. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Título</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Não existem livros a serem exibidos.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Observe a forma como empregamos o método "escape()" para escapar o conteúdo das variáveis para a saída.
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>Scripts Controladores</title>
    
    <para>
        O controlador é onde você instancia e configura o Zend_View. Você atribui variáveis ao visualizador, instruindo-o a renderizar a saída usando um script particular.
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>Atribuindo Variáveis</title>
        
        <para>
            Seu script controlador deverá atribuir as variáveis necessárias ao visualizador antes de passar o controle para ele. Normalmente, você pode fazer isso atribuindo valores aos nomes de propriedades da instância do visualizador:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>
            Porém, isto pode ser tedioso quando você coletar os valores a serem atribuídos a partir de um array ou objeto.
        </para>
        
        <para>
            O método assign() permite a atribuições a partir de um array ou objeto "a granel."  O exemplo seguinte tem o mesmo efeito que o exemplo de atribuição de propriedades uma a uma.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// Atribua um array associativo onde a chave é nome da variável
// e o valor é proprio valor atribuído.
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// faça o mesmo com as propriedades públicas do objeto;
// note a forma a conversão ao tipo array na atribuição.
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
            Alternativamente, você pode usar o método assign para fazer atribuições uma-a-uma passando a string contendo o nome da variável, e logo em seguida o valor a ser atribuído.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>Renderizando um Script de Visualização</title>
        
        <para>
            Uma vez que tenhamos atribuído todas as variáveis necessárias, o controlador irá instruir o Zend_View a renderizar um script de visualização particular. Ele fará isso chamando o método render().  Note que o método irá retornar a visualização renderizada, mas não irá imprimí-la, ficando ao seu encargo fazê-lo (echo() ou print()) no momento apropriado.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>View Script Paths</title>
        
        <para>
            Por padrão, Zend_View espera encontrar os scripts de visualização localizados no mesmo diretório onde reside o script controlador.  Por exemplo, se o seu script controlador estiver em "/path/to/app/controllers" e chamar $view->render('someView.php'), Zend_View irá procurar por ele em "/path/to/app/controllers/someView.php".
        </para>
        
        <para>
            Obviamente, os seus scripts de visualização estarão provavelmente situados em outro lugar.  Para informar ao Zend_View  onde procurar pelos referidos scripts, use o método setScriptPath().
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            Agora quando você chamar $view->render('someView.php'), ele irá procurar em "/path/to/app/views/someView.php".
        </para>
        
        <para>
            De fato, você pode "empilhar" caminhos usando o método addScriptPath(). A medida que você acrescenta caminhos à pilha, Zend_View irá procurar pela visão no caminho mais recentemente adicionado à pilha.  Isto permite sobrepor visões padronizadas por visões customizadas, permitindo a criação de temas e peles para algumas visões, deixando outras intocadas.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// agora quando você chamar $view->render('booklist.php'), 
// Zend_View procurará primeiro em "/path/to/custom/booklist.php",
// depois em "/path/to/app/views/booklist.php", e finalmente no 
// diretório corrente, por "booklist.php".
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>Scripts de Visualização</title>
        
    <para>
        Uma vez que seu controlador tenha atribuido as variáveis e chamado o método, Zend_View incluirá o script de visualização requerido e o executará dentro do escopo de sua própria instância.  Portanto, em seus scripts de visualização, as referências a $this apontarão para a própria instância de Zend_View.
    </para>
    
    <para>
        Variáveis atribuídas à visualização pelo controlador são referidas como propriedades de instância. Por exemplo, se o controlador atribuir a variável 'algumacoisa', você deve referir-se a ela como $this->algumacoisa em seu scritp de visualização.  (Isto permite um rastreamento dos valores que foram atribuidos ao script, e que são internos ao mesmo).
    </para>
    
    <para>
        A fim de lembrar, aqui está um exemplo de script de visualização originado da introdução do Zend_View.
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Uma tabela contendo alguns livros. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Título</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Não existem livros a serem exibidos.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Escapando a Saída</title>
        
        <para>
            Uma das tarefas mais importantes a ser executada por scripts de visualização é assegurar que a saída seja corretamente escapada; entre outras coisas, isto ajuda a evitar ataques do tipo site-cruzado. A menos que você esteja usando uma função, método, ou assistente que realize o escape, você sempre deverá escapar o conteúdo das variáveis antes de exibí-lo.
        </para>
        
        <para>
            Zend_View implementa um método chamado escape() que realiza corretamente o escape para você.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// maneira ruim:
echo $this->variable;

// maneira recomendada:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
        Por padrão, o método escape() usa a função PHP htmlspecialchars() para fazer o escape.  Mas, dependendo do seu ambiente, você pode desejar um comportamento diferente para o escape. Use o método setEscape() no nível do controlador para instruir o  Zend_View sobre qual função de callback utilizar para fazer o escape.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// cria uma instância de Zend_View
$view = new Zend_View();

// instrui o uso de htmlentities como método de escape
$view->setEscape('htmlentities');

// ou instrui o uso de um método estático de classe
$view->setEscape(array('SomeClass', 'methodName'));

// ou mesmo um método de instância
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// e renderiza a visualização
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            A função ou método de callback deverá tomar o valor a ser escapado como seu primeiro parâmetro, e os demais parâmetros deverão ser opcionais.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Sistemas de Template</title>
        
        <para>
            Embora o PHP em sí seja um poderoso sistema de template, muitos desenvolvedores sentiram que ele é muito potente ou complexo para seus designers de templates.  Como tal, o script de visualização pode ser usado para instanciar e manipular um objeto de template separadamente, tal como um template ao estilo PHPLIB (ou Smarty).  O script de visualização para este tipo de tarefa pode ser algo como isto:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            Estes seriam os arquivos de template relacionados:
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Author</th>
        <th>Title</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>There are no books to display.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>Assistentes de Visualização (Modificadores)</title>
    
    <para>
        Em seus scripts de visualização, frequentemente é necessário a execução de certas tarefas complexas repetidas vezes; exemplo: formatar uma data, gerar um elemento de formulário, ou exibir links de acionamento.  Você pode empregar classes assistentes para executar estas tarefas para você.
    </para>
    
    <para>
        Para usar um assistente em seu script de visualização, chame-o usando $this->helperName(). Em segundo plano, Zend_View irá carregar a classe Zend_View_Helper_HelperName, instanciá-la e chamar seu método helperName().  O objeto criado é persistente dentro do escopo da instância Zend_View e será reutilizado por todas as chamadas futuras a $this->helperName().
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Assistentes Padrão</title>
        
        <para>
            Zend_View vem com um conjunto padrão de assistentes, todos dedicados à geração de elementos de formulários. Cada um deles automaticamente escapa a saída apropriada. São eles:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): Cria um elemento &lt;input type="button" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): Cria um elemento &lt;input type="checkbox" /&gt;.  O parâmetro $options é um array cujo primeiro valor é o valor "checked" e o segundo é o valor "unchecked" (os valores padrão são '1' e '0').  O controle sera preselecionado de acordo com o conteúdo de $value.
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): Cria um elemento &lt;input type="file" /&gt;.
                </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): Cria um elemento &lt;input type="hidden" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): Cria um elemento &lt;input type="password" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): Cria uma série de elementos &lt;input type="radio" /&gt;, um para cada elemento em $options.  No array $options, a chave e seu valor estão associados ao valor do controle e seu rótulo, respecitvamente. O conteúdo de $value será preselecionado.
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): Cria um elemento &lt;input type="reset" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): Cria um bloco &lt;select&gt;...&lt;/select&gt;, com um &lt;option&gt;para elemento em $options.  No array $options, a chave e seu valor estão associados ao valor do controle e seu rótulo.  O conteúdo de $value será preselecionado.
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): Cria um elemento &lt;input type="submit" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): Cria um elemento &lt;input type="text" /&gt;.
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): Cria um bloco &lt;textarea&gt;...&lt;/textarea&gt;.
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Utilizar estes assistentees em seus scripts de visualização é muito fácil, aqui está um exemplo. Note que tudo que você necessita fazer é chamá-los; eles carregam e instanciam a sí próprios a medida que tornam-se necessários.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// dentro do seu script de visualização, $this aponta para a instância de Zend_View.
// digamos que você já atribuiu uma serie de valores ao array 
// $countries = array('us' => 'United States', 'il' =>'Israel', 'de' => 'Germany').
?>
<form action="action.php" method="post">
    <p><label>Your Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Your Country:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Would you like to opt in?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no') ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            A saída resultante do script de visualização deverá se parecer com isto:
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Your Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Your Country:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Would you like to opt in?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Localizando os Assistentes</title>
        
        <para>
            Assim como os scripts de visualização, seu controlador pode especificar uma lista de caminhos onde o Zend_View deve procurar pelas classes assistentes. Por padrão, Zend_View procura pelas classes assistentes em  "Zend/View/Helper/*". Você pode instruir o Zend_View a procurar em outros locais usando os métodos setHelperPath() e addHelperPath().
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            De fato, você pode "empilhar" caminhos usando o método addHelperPath(). A medida que você adiciona caminhos à pilha,  Zend_View procurará no caminho mais recentemente adicionado.  Isto permite a você incrementar o conjunto original de assistentes (ou susbstituir) com os seus próprios personalizados.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// now when you call $this->helperName(), Zend_View will look first for
// "/other/path/to/helpers/HelperName.php", then for
// "/path/to/some/helpers/HelperName", and finally for
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Escrevendo Assistentes Personalizados</title>
        
        <para>
            Escrever assistentes personalizados é fácil; basta seguir estas regras:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                O nome da classe deve ser no formato Zend_View_Helper_*, onde * é o nome do assistente a ser criado.  Ex:, se você criar um assistente chamado "specialPurpose", o nome da classe deverá ser "Zend_View_Helper_SpecialPurpose" (Observe a capitalização).
            </para></listitem>
            
            <listitem><para>
                A classe deve ter um método público que coincida com o nome do assistente; este é o método que será chamado quando o seu template chamar "$this->specialPurpose()".  Em nosso exemplo "specialPurpose", o método requerido deverá ser declarado como "public function specialPurpose()". 
            </para></listitem>
            
            <listitem><para>
                Em geral, a classe não deve ecoar ou imprimir a saída gerada.  Em lugar disso, ela deve retornar os valores a serem impressos. Os valores retornados deverão estar devidamente escapados.
            </para></listitem>
            
            <listitem><para>
                A classe deve estar no arquivo chamado após o método assistente. Voltando ao exemplo "specialPurpose", o arquivo rebeu o nome "SpecialPurpose.php".
            </para></listitem>
        </itemizedlist>
        
        <para>
            Localize o arquivo com a classe assistente em algum dos caminhos armazenados na pilha, e o Zend_View automaticamente irá carregar, instanciar, persistir, e executar o código para você.
        </para>
        
        <para>
            Aqui está um exemplo do assistente SpecialPurpose:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            Em um script de visualização, você pode chamar o assistente SpecialPurpose helper quantas vezes desejar; ele será instanciado apenas uma vez; e persistirá durante todo o tempo de vida da instãncia de Zend_View.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// remember, in a view script, $this refers to the Zend_View instance.
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            A saída deverá se parecer com isto:
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->