<sect1 id="zend.log.introduction">
    <title>Introdução</title>
    <para>
        <code>Zend_Log</code> é uma classe de geração de registros de uso geral. <code>Zend_Log</code> é uma classe estática que
        não pode ser instanciada diretamente. Ele manipula uma matriz de instancias de <code>Zend_Log</code>, uma para
        cada registro usado pela aplicação. Cada instância do agente de registro usa um adaptador que implementa uma
	    <code>Zend_Log_Adapter_Interface</code>.
    </para>

    <para>
        Para usar o <code>Zend_Log</code>, <ulink url="http://php.net/include">include()</ulink> a classe
        <code>Zend_Log</code> e as suas classes adaptadoras que seram usadas. Por exemplo, se uma aplicação
        irá registrar ambos, console (buffer de saída do PHP) e arquivos de texto, as seguintes linhas 
		deverão ser incluídas:

        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                  // Classe base Zend_Log
require_once 'Zend/Log/Adapter/Console.php';  // Adaptador de registro para console
require_once 'Zend/Log/Adapter/File.php';     // Adaptador de registro para arquivos
]]></programlisting>

        <code>Zend_Log</code> pode ser usado de uma forma simplificada para um único registro, pode ser configurado
		para diversos registros, e pode também, ser usado para registrar as operações internas de muitas classes do 
		Framework Zend.
    </para>
</sect1>

<sect1 id="zend.log.simple-logging">
    <title>Gravando um registro único</title>
    <para>
		Um agente de registro é criado chamando o método <code>Zend_Log::registerLogger()</code> com uma instância 
		<code>Zend_Log_Adapter_Interface</code> como um argumento.

        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                // Classe base Zend_Log
require_once 'Zend/Log/Adapter/File.php';   // Adaptador de registro para arquivos

// Registra um agente de registro de arquivo
Zend_Log::registerLogger(new Zend_Log_Adapter_File('/logs/simple.txt'));
]]></programlisting>
    </para>

    <para>
		Mensagens são então enviadas para o registro com <code>Zend_Log::log()</code>.

        <programlisting role="php"><![CDATA[
/**
 * Envia uma mensagem para o registro. Um segundo argumento opcional especifica o nível de registro.
 * Se nenhum nível é fornecido, LEVEL_DEBUG é assumido.
 */
Zend_Log::log('Primeira mensagem de registro.');

/**
 * Registra uma mensagem grave.
 */
Zend_Log::log('Um erro grave ocorreu.', Zend_Log::LEVEL_SEVERE);
]]></programlisting>
    </para>
</sect1>

<sect1 id="zend.log.log-levels">
   <title>Níveis de registro</title>
   <para>
       <code>Zend_Log::log()</code> registrará todas as mensagens como <code>LEVEL_DEBUG</code> até que um nível diferente
	   seja fornecido como um segundo argumento opcional. Os níveis a seguir estão disponíveis como constantes da classe
       <code>Zend_Log</code>.

       <programlisting role="php"><![CDATA[
LEVEL_DEBUG     = 1
LEVEL_WARNING   = 4
LEVEL_ERROR     = 8
LEVEL_SEVERE    = 16
]]></programlisting>
   </para>
</sect1>

<sect1 id="zend.log.advanced-logging">
   <title>Registro avançado: Múltiplos Agentes de Registro</title>
   <para>
        <code>Zend_Log</code> oferece suporte de registro para diversos adaptadores de registro. Que podem enviar uma mensagem
		para todos os registros, ou uma mensagem para um registro específico.
   </para>

   <para>
		Quando são criados multiplos agentes de registro, cada registro deve receber um nome único. Agentes de registro 
		são registrados com o método <code>registerLogger()</code>, com o nome do registro fornecido como o segundo argumento opcional.
   </para>

   <para>
        No exemplo abaixo, dois agentes de registro são criados: um para o console, e outro para um arquivo. Eles irão 
		receber os nomes <code>Console</code> e <code>File</code>, respectivamente.

        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                 // Classe base do Zend_Log
require_once 'Zend/Log/Adapter/File.php';    // Adaptador de log File
require_once 'Zend/Log/Adapter/Console.php'; // Adaptador de log Console

Zend_Log::registerLogger(new Zend_Log_Adapter_File('/logs/framework.txt'), 'File');
Zend_Log::registerLogger(new Zend_Log_Adapter_Console(), 'Console');
]]></programlisting>
   </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
