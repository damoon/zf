<sect1 id="zend.controller.overview">
  <title>Visão Geral</title>

  <sect2 id="zend.controller.overview.introduction">
    <title>Introdução</title>

    <para><code>Zend_Controller</code> fornece os alicerces para construção de
    websites baseados no padrão de projeto Modelo-Visão-Controlador
    (MVC).</para>

    <para>O sistema <code>Zend_Controller</code> foi projetado para ser leve,
    modular, e extensível. É um design minimalista cujo objetivo é oferecer
    flexibilidade e alguma liberdade aos usuários, ao mesmo tempo em que
    fornece uma estrutura que permite aos sistemas construídos com base no
    <code>Zend_Controller</code> compartilharem algumas convenções comuns e
    padrões similares de código.</para>

    <para>O fluxo de trabalho do <code>Zend_Controller</code> é implementado
    por alguns componentes. Não é necessário entender completamente a
    orquestração destes componentes para usar o sistema, sendo mais útil
    compreender a maneira como os processos trabalham. <itemizedlist>
        <listitem>
          <para><code>Zend_Controller_Front</code> rege todo o fluxo de
          trabalho do sistema <code>Zend_Controller</code>. Trata-se de uma
          implementação do padrão FrontController.
          <code>Zend_Controller_Front</code> processa todas as requisições
          recebidas pelo servidor e atualmente é responsável por delegar
          requisições para os ActionControllers
          (<code>Zend_Controller_Action</code>).</para>
        </listitem>

        <listitem>
          <para><code>Zend_Controller_Router</code> é o roteador. Roteamento é
          p processo de tomar a parte final de uma URI e desmembrá-la para
          determinar qual controlador, e a respectiva ação deste controlador,
          deverá receber a requisição. Esta definição de controlador, ação, e
          parâmetros opcionais, está empacotada em um valor do objeto chamado
          <code>Zend_Controller_Dispatcher_Token</code>. Este é então
          processado pelo <code>Zend_Controller_Dispatcher</code>. O
          roteamento ocorre somente uma vez: quando o pedido inicial é
          recebido e antes do primeiro controlador ser despachado.</para>
        </listitem>

        <listitem>
          <para><code>Zend_Controller_Dispatcher</code> é o despachante.
          Despachar é o processo de tomar o
          <code>Zend_Controller_Dispatcher_Token</code>, localizar o arquivo
          de controle apropriado, instanciar uma classe controladora contida
          neste arquivo (deve implementar
          <code>Zend_Controller_Action</code>), e finalmente executar o método
          de ação do objeto controlador. Diferentemente do roteamento, que
          ocorre somente uma vez, os despacho são executados em um laço.
          <code>Zend_Controller_Dispatcher</code> é repetidamente chamado pelo
          <code>Zend_Controller_Front</code> até que todas as ações tenham
          sido despachadas sequencialmente.</para>
        </listitem>

        <listitem>
          <para><code>Zend_Controller_Action</code> é o componente controlador
          base. Cada controlador é uma classe simples, que extende a classe
          <code>Zend_Controller_Action class</code>, e esta classe possui
          métodos de ação.</para>
        </listitem>
      </itemizedlist> O fluxo de trabalho do <code>Zend_Controller</code> é
    relativamente simples. Um pedido é recebido pelo
    <code>Zend_Controller_Front</code>, que por sua vez chama
    <code>Zend_Controller_Router</code> para determinar qual controlador (e
    respectiva ação deste controlador) será despachado.
    <code>Zend_Controller_Router</code> decompõe a URI em um objeto
    <code>Zend_Controller_Dispatcher_Token</code> que descreve para onde
    despachar. <code>Zend_Controller_Front</code> entra então em um laço de
    despacho. Ele chama <code>Zend_Controller_Dispatcher</code>, passando-lhe
    a ficha de despacho, para ser despachada ao controlador atual (e
    respectiva ação). Quando o controlador termina, o controle retorna ao
    <code>Zend_Controller_Front</code>. Se o controlador indicar que outro
    controlador deverá ser despachado para retornar uma nova ficha de
    despacho, o laço continuará e outro despacho será executado. Caso
    contrário, o processo termina.</para>
  </sect2>

  <sect2 id="zend.controller.overview.routing-process">
    <title>Processo de Roteamento</title>

    <para>Antes de poder contruir seu primeiro controlador, você precisa
    entender comom o processo de roteamento funciona e como foi implementado
    em <code>Zend_Controller_Router</code>. Lembre-se que o fluxo de trabalho
    está dividido em "roteamento", que ocorre apenas uma vez, e "despacho",
    que ocorre logo após, repetidas vezes em um laço.</para>

    <para><code>Zend_Controller_Front</code> chama
    <code>Zend_Controller_Router</code> para mapear uma URI para um
    controlador -- e uma ação deste controlador.
    <code>Zend_Controller_Router</code> toma a URI e decompõe-na em objetos
    <code>Zend_Controller_Dispatcher_Token</code>, que são passados ao
    despachante (<code>Zend_Controller_Dispatcher</code>).</para>

    <para>Este roteador emprega um mapeamento muito simples para determinar o
    nome do controlador e sua respectiva ação: <programlisting role="php">
http://framework.zend.com/controller/action/
			</programlisting> Observe, no exemplo acima, que o primeiro segmento
    conterá sempre o nome do controlador e o segundo o nome da ação.</para>

    <para>Opcionalmente, parâmetros podem ser definidos na URI passada ao
    controlador. Estes tomarão a forma de pares chave/valor: <programlisting
    role="php">
http://framework.zend.com/controller/action/key1/value1/
			</programlisting></para>

    <para>Se nada for informado na parte <code>/controller/</code> da URI, ele
    será tomado por "<code>index</code>". Da mesma forma, se nada contiver a
    parte <code>/action/</code>, ela também será tomada por
    "<code>index</code>". Este exemplo ilustra: <programlisting role="php">
http://framework.zend.com/roadmap/future/
Controller: roadmap
Action    : future

http://framework.zend.com/roadmap/
Controller: roadmap
Action    : index

http://framework.zend.com/
Controller: index
Action    : index
				</programlisting></para>

    <note>
        <para>Atualmente estamos desenvolvendo um novo roteador baseado em uma engine de reescrita que conferirá maior flexibilidade às funcionalidades atualmente presentes. Isto será incluído nas próximas versões do framework em um futuro bem próximo.</para>
    </note>

    <para>O nome do controlador, de sua respectiva ação, e quaisquer
    parâmetros opcionais são empacotados em uma ficha de despacho,
    <code>Zend_Controller_Dispatcher_Token</code>. Esta ficha é retornada para
    <code>Zend_Controller_Front</code>, que irá entrar em laço de despacho.
    Uma vez no laço de despacho, a ficha é passada para
    <code>Zend_Controller_Dispatcher</code>.</para>
  </sect2>

  <sect2 id="zend.controller.overview.dispatch-token">
    <title>Ficha de Despacho</title>

    <para>A ficha de despacho é um simples valor do tipo objeto, que é passado
    entre <code>Zend_Controller_Front</code> e as classes que implementam as
    interfaces do roteador e do despachante. Ela empacota a definição de um
    controlador, uma ação, e parâmetros a serem passados à ação.</para>

    <itemizedlist>
      <listitem>
        <para>O nome do controlador é acessado por
        <code>getControllerName()</code> e
        <code>setControllerName()</code>.</para>
      </listitem>

      <listitem>
        <para>O nome da ação chamada é acessada por
        <code>getActionName()</code> e <code>setActionName()</code>.</para>
      </listitem>

      <listitem>
        <para>Os parãmetros a serem passados à ação estão em um array
        associativo são acessados por <code>getParams()</code> e
        <code>setParams()</code>.</para>
      </listitem>
    </itemizedlist>
  </sect2>

  <sect2 id="zend.controller.overview.dispatching">
    <title>Processo de Despacho</title>

    <para>Despachar é o processo de tomar uma ficha,
    <code>Zend_Controller_Dispatcher_Token</code>, extrair a informação
    contida nela: um nome de controlador, um nome de ação, e parâmetros
    opcionais, e instanciar um controlador, chamando uma ação deste.</para>
  </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
