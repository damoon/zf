<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="zend.gdata.introduction">
  <title>Introdução a Gdata</title>

  <para>As "Google Data APIs" disponibilizam interfaces programáticas a alguns
  dos serviços online do Google. As aplicações cliente submetem consultas e
  dados via HTTP, e recuperam resultados. O componente Zend_Gdata é uma
  interface PHP 5 para acesso aos dados do Google via PHP.</para>

  <para>Veja <ulink
  url="http://code.google.com/apis/gdata/">http://code.google.com/apis/gdata/</ulink>
  para mais informações sobre a "Google Data API".</para>

  <para>Dentre os serviços acessíveis por Zend_Gdata estão inclusos os
  seguintes: <itemizedlist>
      <listitem>
        <para><link linkend="zend.gdata.base">Google Base</link> oferece uma
        ferramenta de busca online para produtos, empregos, eventos, anúncios
        pessoais e outros tipos de registros. As pessoas postam ítens,
        descrevendo-os com os atributos comumente nomeados.</para>
      </listitem>

      <listitem>
        <para><link linkend="zend.gdata.blogger">Google Blogger</link> é um
        provedor popular de "push-button publishing" e sindicação.</para>
      </listitem>

      <listitem>
        <para><link linkend="zend.gdata.calendar">Google Calendar</link> é uma
        ferramenta de colaboração e calendário online.</para>
      </listitem>

      <listitem>
        <para><link linkend="zend.gdata.codesearch">Google CodeSearch</link>
        permite a você pesquisar por codigo fonte público em diferentes
        projetos.</para>
      </listitem>
    </itemizedlist></para>

  <note>
    <title>Serviços não suportados</title>

    <para>Google Data API suporta também Google Spreadsheets, mas Zend_Gdata
    não provê uma classe auxiliar para Spreadsheets neste release.</para>

    <para>Zend_Gdata não implementa interfaces para nenhum outro serviço do
    Google, como Search, Gmail, Translation, ou Maps. Somente os serviços que
    suportam a Google Data API são suportados.</para>
  </note>

  <sect2 id="zend.gdata.introduction.authentication">
    <title>Autenticação Cliente no Google Data</title>

    <para>A maioria dos serviços do Google Data exigem que as aplicações
    cliente autentiquem-se em um servidor do Google para poderem acessar dados
    privados, salvar ou deletar informações. Existem duas implementações de
    autenticação para o Google Data: <link
    linkend="zend.gdata.authsub">AuthSub</link> e <link
    linkend="zend.gdata.clientlogin">ClientLogin</link>. Zend_Gdata
    disponibiliza classes de interface para ambos os métodos.</para>

    <para>Os demais tipos de consultas aos serviços do Google Data não
    requerem autenticação.</para>
  </sect2>

  <sect2 id="zend.gdata.introduction.dependencies">
    <title>Dependências</title>

    <para>Zend_Gdata faz uso de <link
    linkend="zend.feed.introduction">Zend_Feed</link> e <link
    linkend="zend.http.client">Zend_Http_Client</link> para enviar requisições
    ao google.com e recuperar resultados. A maioria das respostas às
    requisições são retornadas como objetos Zend_Feed object no formato de um
    feed Atom ou RSS.</para>

    <para>Zend_Gdata assume que sua aplicação PHP está rodando em um host com
    conexão direta à internet. O cliente Zend_Gdata funciona contatando os
    servidores do Google Data.</para>
  </sect2>

  <sect2 id="zend.gdata.introduction.creation">
    <title>Criando um novo cliente Gdata.</title>

    <para>Crie um novo objeto da classe Zend_Gdata ou uma das subclasses
    disponíveis que ofereça métodos auxiliares com comportamento inerente ao
    serviço.</para>

    <para>O único parâmetro opcional passado para o construtor de Zend_Gdata é
    uma instância de <link linkend="zend.http.client">Zend_Http_Client</link>.
    Se você omitir este parâmetro, Zend_Gdata cria um objeto Zend_Http_Client
    default. Especificar um objeto Zend_Http_Client permite a passagem de
    opções de configuração para o objeto cliente.</para>

    <programlisting role="php">&lt;?php
require_once 'Zend/Gdata.php';
require_once 'Zend/Http/Client.php';

$client = new Zend_Http_Client();
$client-&gt;setConfig( ...options... );

$gdata = new Zend_Gdata($client);
?&gt;</programlisting>

    <para>Consulte também, nas seções sobre autenticação, sobre como criar um
    objeto Zend_Http_Client autenticado.</para>
  </sect2>

  <sect2 id="zend.gdata.introduction.parameters">
    <title>Parâmetros comuns de consultas.</title>

    <para>Você pode customizar as consultas com Zend_Gdata especificando
    parâmetros. Certos parâmetros são aplicávies somente a determinados
    serviçoes do Google Data. Estes parâmetros estão documentados nas seções
    anteriores, para cada serviço. Alguns parâmetros são comuns aos vários
    serviços do Google Data. Estes parâmetros estão descritos abaixo:</para>

    <itemizedlist>
      <listitem>
        <para>O parâmetro <code>alt</code> especifica o tipo de "feed". O
        valores para o parâmetro podem ser:<code> atom</code>,
        <code>rss</code>, <code>json</code>, ou <code>json-in-script</code>.
        Se omitido, o valor padrão será <code>atom</code>.</para>

        <para>Defina o valor deste parâmetro com a função
        <code>setAlt()</code>.</para>
      </listitem>

      <listitem>
        <para>O parâmetro <code>maxResults</code> limita o número de registros
        em um "feed". O valor padrão é um inteiro. O número de registros
        retornados pelo "feed" não deverá exceder este valor.</para>

        <para>Defina o valor deste parâmetro com a função
        <code>setMaxResults()</code>.</para>
      </listitem>

      <listitem>
        <para>O parâmetro <code>startIndex</code> especifica o número de ordem
        do primeiro registro retornado no "feed". Registros anteriores a este
        índice serão ignorados.</para>

        <para>Defina o valor deste parâmetro com a função
        <code>setStartIndex()</code>.</para>
      </listitem>

      <listitem>
        <para>Os parâmetros <code>updatedMin</code> e <code>updatedMax</code>
        especificam limites para a data dos registros. Registros com datas
        anteriores a <code>updatedMin</code>, e posteriores a
        <code>updatedMax</code> serão ignorados.</para>

        <para>Você pode empregar timestamps numéricas, ou uma variedade de
        strings representativas de data/hora como valor para estes
        parâmetros.</para>

        <para>Defina o valor deste parâmetro com as funções
        <code>setUpdatedMin()</code> e <code>setUpdatedMax()</code>.</para>
      </listitem>
    </itemizedlist>

    <para>Para cada função <code>set</code> existe uma respectiva função
    <code>get</code>.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata();
$gdata-&gt;setMaxResults(10);
echo $gdata-&gt;getMaxResults();   // returns 10
?&gt;</programlisting>

    <para>A classe Zend_Gdata implementa também métodos "magicos" para setar
    ou ler valores, desta forma, podemos usar o nome do parâmetro como membro
    virtual de uma classe. Podemos usar <code>isset()</code> e
    <code>unset()</code> nestes membros virtuais.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata();
$gdata-&gt;maxResults = 10;
echo $gdata-&gt;maxResults;        // returns 10
echo isset($gdata-&gt;maxResults); // returns true
unset($gdata-&gt;maxResults);      // clears parameter
?&gt;</programlisting>

    <para>Podemos limpar todos os parâmetros com a função
    <code>resetParameters()</code>. Isto é particularmente útil quando
    queremos reutilizar um objeto Zend_Gdata para múltiplas consultas.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata();
$gdata-&gt;maxResults = 10;
// ...get feed...

$gdata-&gt;resetParameters();      // clears all parameters
// ...get a different feed...
?&gt;</programlisting>
  </sect2>

  <sect2 id="zend.gdata.introduction.getfeed">
    <title>Recuperando um "feed"</title>

    <para>Use a função <code>getFeed()</code> para recuperar um "feed" de um
    determinado URI. Esta função retorna um objeto da classe Zend_Feed.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata();
$gdata-&gt;setQuery('digital camera');
$gdata-&gt;setMaxResults(10);
$uri = 'http://www.google.com/base/feeds/snippets'
    . $gdata-&gt;getQueryString();
$feed = $gdata-&gt;getFeed($uri);
?&gt;</programlisting>

    <para>Consulte a documentação de <link
    linkend="zend.feed.introduction">Zend_Feed</link> para mais informações
    sobre sua utilização.</para>

    <para>Consulte as seções anteriores sobre as funções especiais de cada
    classe auxiliar para serviços do Google Data. Estas funções auxiliam na
    obtenção de "feeds" selecionando a URI mais apropriada de cada respectivo
    serviço.</para>
  </sect2>

  <sect2 id="zend.gdata.introduction.post">
    <title>Postando registros em servidores do Google</title>

    <para>O objeto Zend_Gdata possui uma função <code>post()</code> usada para
    enviar dados a serem gravados em novos registros do serviço Google
    Data.</para>

    <para>É de responsabilidade do programador a construção de uma string
    contendo a estrutura XML correta para um registro do respectivo serviço
    Google Data que o mesmo estiver utilizando. Podemos usar bibliotecas de
    classe PHP tais como DOM XML ou SimpleXML.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata($authenticatedHttpClient);

$xmlString = &lt;&lt;&lt;XML
&lt;entry xmlns='http://www.w3.org/2005/Atom'
    xmlns:gd='http://schemas.google.com/g/2005'&gt;
  &lt;category scheme='http://schemas.google.com/g/2005#kind'
    term='http://schemas.google.com/g/2005#event'&gt;&lt;/category&gt;
  &lt;title type='text'&gt;Tennis with Beth&lt;/title&gt;
  &lt;content type='text'&gt;Meet for a quick lesson.&lt;/content&gt;
  &lt;author&gt;
    &lt;name&gt;Jo March&lt;/name&gt;
    &lt;email&gt;jo@gmail.com&lt;/email&gt;
  &lt;/author&gt;
  &lt;gd:transparency
    value='http://schemas.google.com/g/2005#event.opaque'&gt;
  &lt;/gd:transparency&gt;
  &lt;gd:eventStatus
    value='http://schemas.google.com/g/2005#event.confirmed'&gt;
  &lt;/gd:eventStatus&gt;
  &lt;gd:where valueString='Rolling Lawn Courts'&gt;&lt;/gd:where&gt;
  &lt;gd:when startTime='2006-04-17T15:00:00.000Z'
    endTime='2006-04-17T17:00:00.000Z'&gt;&lt;/gd:when&gt;
&lt;/entry&gt;
XML;

$xml = new SimpleXMLElement($xmlString);

$myCalendar = 'http://www.google.com/calendar/feeds/default/private/full';
$gdata-&gt;post($xml-&gt;asXML(), $myCalendar);
?&gt;</programlisting>

    <para>Para postar registros, devemos usar um objeto Zend_Http_Client
    autenticado que criamos com as classes Zend_Gdata_AuthSub ou
    Zend_Gdata_ClientLogin.</para>
  </sect2>

  <sect2 id="zend.gdata.introduction.delete">
    <title>Deletando registros em servidors do Google</title>

    <para>O objeto Zend_Gdata possui uma função <code>delete()</code> usada
    para remover registros em serviços do Google Data. Passe o valor
    <code>&lt;id&gt;</code> do registro de um "feed" para o método
    <code>delete()</code>.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata($authenticatedHttpClient);
// a Google Data feed
$feedUri = ...;
$feed = $gdata-&gt;getFeed($feedUri);
foreach ($feed as $feedEntry) {
    // extract the &lt;id&gt; element
    $id = $feedEntry-&gt;id();
    $gdata-&gt;delete($id);
}
?&gt;</programlisting>

    <para>Você pode usar também o método <code>delete()</code> sem um objeto
    "feed", se você passar um URI que identifique corretamente um
    registro.</para>

    <programlisting role="php">&lt;?php
$gdata = new Zend_Gdata($authenticatedHttpClient);
$uri = 'http://www.google.com/calendar/feeds/default/private/entryID';
$gdata-&gt;delete($uri);
?&gt;</programlisting>

    <para>No exemplo acima, substitua "<code>entryID</code>" com o valor ID do
    registro que você quer deletar.</para>

    <para>Para deletar registros, você deve usar um objeto Zend_Http_Client
    autenticado que você criou usando as classes Zend_Gdata_AuthSub ou
    Zend_Gdata_ClientLogin.</para>
  </sect2>
</sect1>