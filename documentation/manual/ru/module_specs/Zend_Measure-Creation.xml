<sect1 id="zend.measure.creation">

    <title>Creation of Measurements</title>

    <para>
        When creating a measurement object, <code>Zend_Measure</code> methods expect the input/original value as the
        first parameter. This can be a
        <link linkend="zend.measure.creation.number"><code>numeric argument</code>
        </link>
        , a
        <link linkend="zend.measure.creation.string"><code>string</code>
        </link>
        without units, or a
        <link linkend="zend.measure.creation.localized"><code>localized string</code> with unit(s) specified.
        </link>
        . The second parameter defines the type of the measurement. Both parameters are mandatory. As an optional third
        parameter, the language can be defined.
    </para>

    <sect2 id="zend.measure.creation.number">

        <title>Measurements from variables</title>

        <example>
            <title>Creation using integer variables</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Measure');

$integer = 1234;
$unit = new Zend_Measure($integer,Zend_Measure::LENGTH);

echo $unit;
// outputs '1234 m'
?>]]></programlisting>
        </example>

        <note>
            <title>Using floating point</title>
            <para>
                Instead of integer types, floating point types may be used, but
                <ulink url="http://www.php.net/float">"simple decimal fractions like 0.1 or 0.7 cannot be converted into their internal binary counterparts without a little loss of precision,"</ulink>
                sometimes giving surprising results. Also, do not compare two "float" type numbers for equality.
            </para>
        </note>

    </sect2>

    <sect2 id="zend.measure.creation.string">

        <title>Measurements from strings</title>

        <para>
            Many measurements received as input to ZF applications can only be passed to <code>Zend_Measure</code>
            classes as strings, such as numbers written using
            <ulink url="http://en.wikipedia.org/wiki/Roman_numerals">roman numerals</ulink>
            or extremely large binary values that exceed the precision of PHP's native integer and float types. Since
            integers can be denoted using strings, if there is any risk of losing precision due to limitations of PHP's
            native integer and float types, using strings instead. <code>Zend_Measure_Number</code> uses the BCMath
            extension to support arbitrary precision, as shown in the example below, to avoid limitations in many PHP
            functions, such as
            <ulink url="http://php.net/bin2dec"><code>bin2dec()</code>
            </ulink>
            .
        </para>

        <example>
            <title>Creation using strings</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Measure');
Zend::loadClass('Zend_Measure_Number');

$mystring = "10010100111010111010100001011011101010001";
$unit = new Zend_Measure($mystring,Zend_Measure_Number::BINARY);

echo $unit;
?>]]></programlisting>
        </example>

        <para>
            Measurements can also be just a part of an arbitrary string. Usually, <code>Zend_Measure</code> can
            automatically extract the desired measurement. Only the first identifiable number will be used for
            measurement creation. If there are more numbers in the string, the rest will be ignored.
        </para>

        <example>
            <title>Arbitrary texts</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Measure');

$mystring = "My house is 125m² in size";
$unit = new Zend_Measure($mystring,Zend_Measure::AREA);

echo $unit;
?>]]></programlisting>
        </example>

        <example>
            <title>Arbitrary texts</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Measure');

$mystring = "My house is 125m² in size, it has 5 rooms of 25m² each.";
$unit = new Zend_Measure($mystring,Zend_Measure::AREA);

echo $unit;
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.measure.creation.localized">

        <title>Measurements from localized strings</title>

        <para>
            When a string is entered in a localized notation, the correct interpretation can not be determined without
            knowing the intended locale. The division of decimal digits with "." and grouping of thousands with "," is
            common in the English language, but not so in other languages. For example, the English number "1,234.50"
            would be interpreted as meaning "1.2345" in German. To deal with such problems, the locale-aware
            <code>Zend_Measure</code> family of classes offer the possibility to specify a language or region to
            disambiguate the input data and properly interpret the intended semantic value.
        </para>

        <example>
            <title>Localized string</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend.php';
Zend::loadClass('Zend_Measure');

$locale = new Zend_Locale('de');
$mystring = "1.234.567,89 Meter";
$unit = new Zend_Measure($mystring,Zend_Measure::LENGTH, $locale);

echo $unit;
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
