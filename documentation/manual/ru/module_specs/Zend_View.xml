<sect1 id="zend.view.introduction">

    <title>Введение</title>
    
    <para>
        <code>Zend_View</code> является классом для работы с частью view (вид)
        паттерна MVC (model-view-controller). То есть он предназначен для
        того, чтобы помочь держать скрипты видов отдельно от
        скриптов модели и контроллера. Он предоставляет систему вспомогательных классов,
        фильтрации вывода и экранизации переменных.
<!--
        Zend_View is a class for working with the "view" portion of
        the model-view-controller pattern.  That is, it exists to
        help keep the view script separate from the model and
        controller scripts.  It provides a system of helpers, output
        filters, and variable escaping.
-->
    </para>
    
    <para>
        <code>Zend_View</code> является агностическим шаблонизатором;
        вы можете использовать PHP как язык шаблонов или создавать
        экземпляры других шаблонизаторов и работать с ними
        с помощью ваших скриптов вида. 
<!--
        Zend_View is template system agnostic; you may use PHP as
        your template language, or create instances of other
        template systems and manipulate them within your view
        script.
-->
    </para>

    <para>
        Использование <code>Zend_View</code> заключается главным образом в двух
        основных шагах:
        
        1.  Ваш скрипт контроллера создает экземпляр <code>Zend_View</code> и
        объявляет переменные этого экземпляра.
        2. Контроллер приказывает <code>Zend_View</code> воспроизвести
        данный вид, посредством этого производится контроль за скриптом
        вида, который генерирует выходные данные вида.
<!--
        Essentially, using Zend_View happens in two major steps:
        
        1.  Your controller script creates an instance of
        Zend_View and assigns variables to that instance.
        
        2. The controller tells the Zend_View to render a particular
        view, thereby handing control over the view script, which 
        generates the view output.
-->
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Скрипт контроллера<!--Controller Script--></title>
        
        <para>
            В качестве простого примера предположим, что ваш контроллер имеет
            список данных по книгам, который нужно воспроизвести через вид.
            Скрипт контроллера может выглядеть наподобие этого:
<!--
            As a simple example, let us say your controller has a list
            of book data that it wants to have rendered by a view.  The
            controller script might look something like this:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// использование модели для получения данных для заголовков и авторов книг
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// теперь объявляем данные по книгам экземпляру Zend_View 
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// и выполняем скрипт вида "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>Скрипт вида<!--View Script--></title>
        
        <para>
            Теперь нам нужен сопутствующий скрипт вида "booklist.php".
            Это такой же скрипт PHP, как и остальные, за одним исключением:
            он выполняется в области видимости экземпляра <code>Zend_View</code>,
            это означает, что ссылки на <code>$this</code> ссылаются на свойства
            и методы экземпляра <code>Zend_View</code> (переменные, объявляемые
            контроллером для экземпляра, являются открытыми
            свойствами экземпляра <code>Zend_View</code>). Таким образом,
            базовый скрипт вида может похожим на этот: 
<!--
            Now we need the associated view script, "booklist.php". 
            This is a PHP script like any other, with one exception:  it
            executes inside the scope of the Zend_View instance, which
            means that references to $this point to the Zend_View
            instance properties and methods.  (Variables assigned to the
            instance by the controller are public properties of the
            Zend_View instance.)  Thus, a very basic view script could
            look like this:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Таблица нескольких книг. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Нет книг для отображения.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Обратите внимание, что мы используем метод <code>escape()</code>
            для экранизации переменных.
<!--
            Note how we use the "escape()" method to apply output
            escaping to variables.
-->
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>Скрипты контроллера<!--Controller Scripts--></title>
    
    <para>
        В контроллере вы создаете и конфигурируете экземпляр <code>Zend_View</code>.
        Затем вы объявляете переменные для этого экземпляра и подаете ему команду
        воспроизвести выходные данные, используя указанный скрипт.
<!--
        The controller is where you instantiate and configure Zend_View.
        You then assign variables to the view, and tell the view to 
        render output using a particular script.
-->
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>Объявление переменных<!--Assigning Variables--></title>
        
        <para>
            Ваш скрипт контроллера должен объявить
            необходимые переменные для вида до того, как будет передан
            контроль скрипту вида. Обычно вы можете делать одно объявление
            за раз посредством объявления свойств экземпляра вида. 
<!--
            Your controller script should assign necessary variables to the view
            before it hands over control to the view script.  Normally, you
            can do assignments one at a time by assigning to property names
            of the view instance:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>
            Однако это может оказаться утомительным, если вы уже имеете
            набор значений для присвоения в массиве или объекте.  
<!--
            However, this can be tedious when you have already collected the
            values to be assigned into an array or object.
-->
        </para>
        
        <para>
            Методы <code>assign()</code> дают возможность присваивать значения
            из массива или объекта "партиями". Следующий пример делает
            то же самое, что и приведенное выше последовательное объявление
            свойств.
<!--
            The assign() method lets you assign from an array or object "in
            bulk."  The following examples have the same effect as the above
            one-by-one property assignments.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// определение массива из пар ключ-значение, где
// ключ является именем переменной,
// а значение - значением объявляемой переменной
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// делаем то же самое с открытыми свойствами объекта;
// обратите внимание, что при объявлении мы приводим объект к массиву
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
            В качестве альтернативы вы можете использовать методы для
            последовательного объявления посредством передачи строки с
            именем переменной и значения переменной после нее.
<!--
            Alternatively, you can use the assign method to assign
            one-by-one by passing a string variable name, and then the
            variable value.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>Выполнение скрипта вида<!--Rendering a View Script--></title>
        
        <para>
            После того, как вы определили все необходимые переменные, контроллер
            должен дать <code>Zend_View</code> команду выполнить указанный
            скрипт вида. Делайте это посредством вызова метода
            <code>render()</code>. Обратите внимание, что этот метод будет
            возвращать результат выполнения, но не выводить его,
            поэтому вам нужно самостоятельно вывести его посредством функции
            <code>echo()</code> или <code>print()</code> в подходящее время. 
<!--
            Once you have assigned all needed variables, the controller
            should tell Zend_View to render a particular view script.
            Do so by calling the render() method.  Note that the method will
            return the rendered view, not print it, so you need to print or
            echo it yourself at the appropriate time.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>Пути к скриптам вида<!--View Script Paths--></title>
        
        <para>
            По умолчанию <code>Zend_View</code> ожидает, что ваши скрипты
            вида будут в том же каталоге, что и скрипты контроллера.
            Например, если ваш скрипт контроллера находится в
            <code>/path/to/app/controllers</code> и он вызывает
            <code>$view->render('someView.php')</code>,
            <code>Zend_View</code> будет искать
            <code>/path/to/app/controllers/someView.php</code>.    
<!--
            By default, Zend_View expects your view scripts to be in the
            same directory as the controller script.  For example, if
            your controller script is at "/path/to/app/controllers" and
            it calls $view->render('someView.php'), Zend_View will look
            for "/path/to/app/controllers/someVire.php".
-->
        </para>
        
        <para>
            Очевидно, что ваши скрипты вида могут находиться в другом месте.
            Чтобы указать <code>Zend_View</code>, где искать скрипты вида,
            используйте метод <code>setScriptPath()</code>.
<!--
            Obviously, your view scripts are probably located elsewhere.  To
            tell Zend_View where it should look for view scripts, use the
            setScriptPath() method.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            Теперь вы можете вызывать <code>$view->render('someView.php')</code>,
            он будет искать <code>/path/to/app/views/someView.php</code>.
<!--
            Now when you call $view->render('someView.php'), it will look
            for "/path/to/app/views/someView.php".
-->
        </para>
        
        <para>
            Вы можете "складывать" в стек пути,
            используя метод <code>addScriptPath()</code>. Если вы добавили
            пути в стек, то <code>Zend_View</code> будет искать запрошенный
            скрипт вида в этих путях, начиная с пути, добавленного последним.
            Это дает возможность замещать виды, принятые по умолчанию,
            специальными видами, для того, чтобы можно было создавать
            специальные "темы" и "скины" для некотрых видов, оставляя в то
            же время другие в единственном варианте.
<!--
            In fact, you can "stack" paths using the addScriptPath()
            method. As you add paths to the stack, Zend_View will look
            at the most-recently-added path for the requested view
            script.  This allows you override default views with custom
            views so that you may create custom "themes" or "skins" for
            some views, while leaving others alone.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// теперь, когда вы вызываете $view->render('booklist.php'), Zend_View
// будет искать "/path/to/custom/booklist.php",
// затем "/path/to/app/views/booklist.php", 
// и под конец "booklist.php" в текущем каталоге.    
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>Скрипты вида<!--View Scripts--></title>
        
    <para>
        После того, как ваш контроллер определил переменные и вызвал
        метод <code>render()</code>, <code>Zend_View</code> включает
        требуемый скрипт представления и выполняет его "внутри" области
        видимости <code>Zend_View</code>. Поэтому в вашем скрипте представления
        ссылки на $this в действительности будут ссылаться на сам экземляр
        <code>Zend_View</code>.
<!--
        Once your controller has assigned variables and called render(),
        Zend_View then includes the requested view script and executes
        it "inside" the scope of the Zend_View instance.  Therefore,
        in your view scripts, references to $this actually point to the
        Zend_View instance itself.
-->
    </para>
    
    <para>
        Переменные, объявленные для вида в контроллере, ссылаются на
        свойства экземпляра. Например, если контроллер объявил
        переменную 'something', вы можете ссылаться на нее как
        на <code>$this->something</code> в скрипте вида (это дает
        вам возможность отслеживать, какие переменные были объявлены
        для скрипта, и какие были объявлены самим скриптом). 
<!--
        Variables assigned to the view from the controller are referred
        to as instance properties.  For example, if the controller were
        to assign a variable 'something', you would refer to it as
        $this->something in the view script.  (This allows you to keep
        track of which values were assigned to the script, and which are
        internal to the script itself.)
-->
    </para>
    
    <para>
        Для напоминания, здесь приведен пример скрипта представления из
        введения.
<!--
        By way of reminder, here is the example view script from the
        Zend_View introduction.
-->
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Таблица нескольких книг. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Нет книг для отображения.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Экранизация вывода<!--Escaping Output--></title>
        
        <para>
            Одной из наиважнейших задач, которую должен решать скрипт вида,
            является обеспечение того, что выходные данные должным образом
            экранизированны; помимо прочего, это помогает
            предотвратить XSS-атаки.
            За исключением тех случаев, когда используете функции,
            методы или вспомогательные классы, которые делают экранизацию сами,
            вы должны всегда экранизировать переменные, когда выводите их.
<!--
            One of the most important tasks to perform in a view script
            is to make sure that output is escaped properly; among other
            things, this helps to avoid cross-site scripting attacks. 
            Unless you are using a function, method, or helper that does
            escaping on its own, you should always escape variables when
            you output them.
-->
        </para>
        
        <para>
            <code>Zend_View</code> снабжен методом <code>escape()</code>,
            который выполняет экранизацию. 
<!--
            Zend_View comes with a method called escape() that does such
            escaping for you.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// плохая практика для скриптов вида
echo $this->variable;

// хорошая практика для скриптов вида
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            По умолчанию метод <code>escape()</code> использует функцию PHP
            <code>htmlspecialchars()</code> для экранизации. Но, в зависимости
            от вашего окружения, может потребоваться выполнять экранизацию
            по-иному. Используйте метод <code>setEscape()</code> на уровне
            контроллера, чтобы указать <code>Zend_View</code>, какую
            экранизирующую функцию обратного вызова использовать.
<!--
            By default, the escape() method uses the PHP htmlspecialchars()
            function for escaping.  However, depending on your environment,
            you may wish for escaping to occur in a different way.  Use the
            setEscape() method at the controller level to tell Zend_View
            what escaping callback to use.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// создание экземпляра Zend_View
$view = new Zend_View();

// приказываем ему использовать htmlentities
// в качестве экранизирующей функции обратного вызова
$view->setEscape('htmlentities');

// либо приказываем ему использовать статический метод класса
$view->setEscape(array('SomeClass', 'methodName'));

// или даже метод экземпляра
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// и затем воспроизводим вид
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            Функции или методы обратного вызова должны принимать значение,
            которое требуется экранизировать как первый параметр,
            все остальные параметры должны быть необязателными.
<!--
            The callback function or method should take the value to be
            escaped as its first parameter, and all other parameters should
            be optional.
-->
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Шаблонизатор<!--Template Systems--></title>
        
        <para>
            Хотя PHP сам по себе представляет собой мощный шаблонизатор,
            многие разработчики считают его слишком мощным или сложным для
            верстальщиков. Как таковой, скрипт представления может
            использоваться для инстанцирования и манипулирования различными
            объектами шаблонов, такими, как шаблоны в стиле PHPLIB. Скрипты
            представления для такого рода действий должны выглядеть
            наподобие этого:
<!--
            Although PHP is itself a powerful template system, many
            developers feel it is too powerful or complex for their
            template designers.  As such, the view script may be used to
            instantiate and manipulate a separate template object, such
            as a PHPLIB-style template.  The view script for that kind
            of activity might look something like this:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            Это могло бы быть соответствующим файлом шаблона:
<!--
            These would be the related template files:
-->
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Author</th>
        <th>Title</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>Нет книг для отображения.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>Вспомогательные классы вида<!--View Helpers--></title>
    
    <para>
        В скрипте вида часто бывает так, что небходимо выполнять
        определенный набор функций повторно; например, формирование даты,
        генерация элементов формы, отображение ссылок. Вы можете использовать
        вспомогательные классы для выполнения этих действий.
<!--
        In your view scripts, often it is necessary to perform certain
        complex functions over and over; e.g., formatting a date,
        generating form elements, or displaying action links.  You can
        use helper classes to perform these behaviors for you.
-->
    </para>
    
    <para>
        Чтобы применять вспопогательные классы ("помощников") в своем скрипте вида,
        вызывайте их, используя <code>$this->имяПомощника()</code>.
        <code>Zend_View</code> загрузит класс <code>Zend_View_Helper_ИмяПомощника</code>,
        создаст его объект, и вызовет его метод <code>имяПомощника()</code>.
        Этот объект находится постоянно внутри экземпляра <code>Zend_View</code>
        и повторно испольуется во всех вызовах <code>$this->имяПомощника()</code>.       
<!--
        To use a helper in your view script, call it using
        $this->helperName(). Behind the scenes, Zend_View will load the
        Zend_View_Helper_HelperName class, create an object instance of
        it, and call its helperName() method.  The object instance is
        persistent within the Zend_View instance, and is reused for all
        future calls to $this->helperName().
-->
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Начальные вспомогательные классы<!--Initial Helpers--></title>
        
        <para>
            <code>Zend_View</code> снабжен начальным набором вспомогательных
            классов, все они имеют отношение к генерации элеметов форм.
            Каждый из них автоматически выполняет соответствующую экранизацию
            выходных данных. Это:   
<!--
            Zend_View comes with an initial set of helper classes, all of
            which relate to form element generation.  They each perform the
            appopriate output escaping automatically.  They are:
-->
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                <code>formButton($name, $value, $attribs)</code>: Создает элемент
                <code>&lt;input type="button" /&gt;</code>. 
<!--
                Creates an &lt;input
                type="button" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formCheckbox($name, $value, $attribs, $options)</code>:
                Создает элемент <code>&lt;input type="checkbox" /&gt;</code>
                (флажок опций). Параметр <code>$options</code> является массивом,
                в котором первым значением является "выбранное" (checked) значение,
                вторым -- "невыбранное" значение (по умолчанию это '1' and '0').
                Если <code>$value</code> соответствует "выбранному" значению,
                то этот флажок опций будет выбран.
<!--
                Creates
                an &lt;input type="checkbox" /&gt; element.  The
                $options param is an array where the first value is the
                "checked" value, and the second is the "unchecked" value
                (the defaults are '1' and '0').  If $value matches the
                "checked" value, the box will be checked for you.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formFile($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="file" /&gt;</code>.
<!--
                Creates an &lt;input
                type="file" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formHidden($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="hidden" /&gt;</code>. 
<!--
                Creates an &lt;input
                type="hidden" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formPassword($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="password" /&gt;</code>.
<!--
                Creates an &lt;input
                type="password" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formRadio($name, $value, $attribs, $options)</code>: Создает
                последовательность элементов <code>&lt;input type="radio" /&gt;</code>
                (переключатель опций). В массиве <code>$options</code> ключ
                элемента является значением переключателя, значение
                элемента является текстом к переключателю. Переключатель опций
                со значением <code>$value</code> будет предварительно выбран.
<!--
                Creates a
                series of &lt;input type="radio" /&gt; elements, one for
                each of the $options elements.  In the $options array, the
                element key is the radio value, and the element value is the
                radio label.  The $value radio will be preselected for you.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formReset($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="password" /&gt;</code>.
<!--
                Creates an &lt;input
                type="reset" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formSelect($name, $value, $attribs, $options)</code>:
                Создает блок <code>&lt;select&gt;...&lt;/select&gt;</code>,
                с одной опцией <code>&lt;option&gt;</code> на каждый 
                элемент массива <code>$options</code>. В массиве
                <code>$options</code> ключ элемента является значением опции,
                значение элемента является текстом опции. Опция со значением
                <code>$value</code> будет предварительно выбрана.
<!--
                Creates a
                &lt;select&gt;...&lt;/select&gt; block, with one
                &lt;option&gt;one for each of the $options elements.  In
                the $options array, the element key is the option value,
                and the element value is the option label.  The $value
                option(s) will be preselected for you.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formSubmit($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="submit" /&gt;</code>.
<!--
                Creates an &lt;input
                type="submit" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formText($name, $value, $attribs)</code>: Создает
                элемент <code>&lt;input type="text" /&gt;</code>.
<!--
                Creates an &lt;input
                type="text" /&gt; element.
-->
            </para></listitem>
            
            <listitem><para>
                <code>formTextarea($name, $value, $attribs)</code>: Создает
                блок <code>&lt;textarea&gt;...&lt;/textarea&gt;</code>.
<!--
                Creates a
                &lt;textarea&gt;...&lt;/textarea&gt; block.
-->
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Использование их в скрипте вида очень простое, вот пример.
            Обратите внимание, что это все, что вам нужно для их вызова -- они
            будут загружаться и инстанцироваться самостоятельно, когда
            будут нужны.
            
<!--
            Using these in your view scripts is very easy, here is an example.
            Note that you all you need to to is call them; they will load
            and instantiate themselves as they are needed.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// внутри вашего скрипта вида $this ссылается на экземпляр Zend_View
//
// предположим, что вы уже имеете последовательность опций
// в виде массива ('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany') именем $countries
<!--
// inside your view script, $this refers to the Zend_View instance.
// 
// say that you have already assigned a series of select options under
// the name $countries as array('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany').
-->
?>
<form action="action.php" method="post">
    <p><label>Your Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Your Country:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Would you like to opt in?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no') ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            Результрирующие выходные данные этого скрипта вида будут выглядеть
            наподобие этого:
<!--
            The resulting output from the view script will look something like this:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Your Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Your Country:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Would you like to opt in?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Пути к вспомогательным классам<!--Helper Paths--></title>
        
        <para>
            Как и для скриптов вида, ваш контроллер может задать
            стек путей, в которых <code>Zend_View</code> должен искать
            вспомогательные классы. По умолчанию <code>Zend_View</code>
            ищет вспомогательные классы в <code>Zend/View/Helper/*</code>. Вы можете
            приказать <code>Zend_View</code> искать в других местах,
            используя методы <code>setHelperPath()</code> и
            <code>addHelperPath()</code>. 
<!--
            As with view scripts, your controller can specify a stack of
            paths for Zend_View to search for helper classes. By
            default, Zend_View looks in "Zend/View/Helper/*" for helper
            classes. You can tell Zend_View to look in other locations
            using the setHelperPath() and addHelperPath() methods.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            Вы можете "складывать" в стек пути, испоьзуя метод
            <code>addHelperPath()</code>. Если вы добавили
            пути в стек, то <code>Zend_View</code> будет искать запрошенный
            вспомогательный класс в этих путях, начиная с пути, добавленного
            последним. Это дает возможность добавлять (или даже замещать)
            к начальному набору свои собственные вспомогательные классы. 
<!--
            In fact, you can "stack" paths using the addHelperPath()
            method. As you add paths to the stack, Zend_View will look
            at the most-recently-added path for the requested helper
            class.  This allows you to add to (or even override) the
            initial distribution of helpers with your own custom
            helpers.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// теперь, когда вы вызываете $this->helperName(), Zend_View будет искать
// сначала "/other/path/to/helpers/HelperName.php",
// затем "/path/to/some/helpers/HelperName", и под конец
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Написание собственных вспомогательных классов<!--Writing Custom Helpers--></title>
        
        <para>
            Написание собственных вспомогательных классов является довольно простым делом --
            просто следуйте этим правилам:
<!--
            Writing custom helpers is easy; just follow these rules:
-->
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                Имя класса должно быть <code>Zend_View_Helper_*</code>,
                где * является именем самого "помощника". Например, если
                вы написали "помощника", называющегося "specialPurpose",
                имя класса должно быть "Zend_View_Helper_SpecialPurpose"
                (обратите внимание на использование главных букв). 
<!--
                The class name must be Zend_View_Helper_*, where * is
                the helper name itself.  E.g., if you were writing a
                helper called "specialPurpose", the class name would be
                "Zend_View_Helper_SpecialPurpose" (note the
                capitalization).
-->
            </para></listitem>
            
            <listitem><para>
                Класс должен иметь открытый метод, имя которого
                соответствует имени "помощника". Это метод, который будет
                вызываться, когда ваш шаблон вызывает
                <code>$this->specialPurpose()</code>. В нашем примере c помощником
                "specialPurpose" объявление требуемого метода должно быть
                <code>public function specialPurpose()</code>. 
<!--
                The class must have a public method that matches the
                helper name; this is the method that will be called when
                your template calls "$this->specialPurpose()".  In our
                "specialPurpose" helper example, the required method
                declaration would be "public function specialPurpose()".
--> 
            </para></listitem>
            
            <listitem><para>
                Обычно класс не должен выполнять вывод, вместо этого
                он должен возвращать значение для вывода. Возвращаемое значение
                должно быть экранизировано должным образом. 
<!--
                In general, the class should not echo or print or otherwise
                generate output.  Instead, it should return values to be
                printed or echoed.  The returned values should be escaped
                appropriately.
-->
            </para></listitem>
            
            <listitem><para>
                Класс должен быть в файле, названном по имени метода.
                Снова используя пример с помощником "specialPurpose", мы
                должны дать файлу имя "SpecialPurpose.php".
<!--
                The class must be in file named after the helper method.
                Again using our "specialPurpose" helper example, the file
                has to be named "SpecialPurpose.php".
-->
            </para></listitem>
        </itemizedlist>
        
        <para>
            Размещайте вспомогательный класс где-либо в одном из находящихся в стеке путей
            к "помощникам", и <code>Zend_View</code> будет автоматически загружать,
            инстанцировать, сохранять и выполнять его. 
<!--
            Place the helper class file somewhere in your helper path stack,
            and Zend_View will automatically load, instantiate, persist,
            and execute it for you.
-->
        </para>
        
        <para>
            Вот пример кода нашего помощника "SpecialPurpose":
<!--
            Here is an example of our SpecialPurpose helper code:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            Далее в скрипте вида вы можете вызывать помощника SpecialPurpose
            столько раз, сколько вам нужно. Он будет инстанцирован один раз,
            и сохраняется в течение существования экземпляра Zend_View.
<!--
            Then in a view script, you can call the SpecialPurpose helper
            as many times as you like; it will be instantiated once, and
            then it persists for the life of that Zend_View instance.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// помните, что в скрипте вида $this ссылается на экземпляр Zend_View
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            Результат должен выглядеть наподобие этого:
<!--
            The output would look something like this:
-->
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
