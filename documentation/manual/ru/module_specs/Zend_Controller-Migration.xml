<sect1 id="zend.controller.migration">
    <title>Переход с предыдущих версий<!--Migrating from Previous Versions--></title>

    <para>
        API компонент системы MVC изменялся от версии к версии. Если вы начали
        использовать Zend Framework с его ранних версий, то следуйте дальнейшим
        рекомендациям по переводу вашего кода на новую архитектуру.
<!--
        The API of the MVC components has changed over time. If you started
        using Zend Framework in an early version, follow the guidelines below to
        migrate your scripts to use the new architecture.
-->
    </para>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Переход с 0.2.0 или более ранних версий к версии 0.6.0<!--Migrating from 0.2.0 or before to 0.6.0--></title>

        <para>
            Самые основы использования компонент системы MVC не изменились,
            следующий код будет корректно выполняться и в версии 0.6.0:  
<!--
            The most basic usage of the MVC components has not changed; you can
            still do each of the following:
-->
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- create a router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- set it in a controller -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- set controller directory and dispatch -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            Тем не менее, из-за добавления
            <xref linkend="zend.controller.overview.response">объекта ответа</xref>,
            вы можете захотеть изменить последнюю строку из последнего примера:
<!--
            However, due to the addition of the <xref
                linkend="zend.controller.overview.response">Response
                object</xref>, you will want to change the last line of the
            latter example to read:
-->
        </para>

        <programlisting role="php"><![CDATA[
echo $ctrl->dispatch();
]]></programlisting>
        
        <para>
            Рекомендуется использовать объект ответа для сбора содержимого и
            заголовков. Это предоставляет большую гибкость при переключении
            между разными форматами вывода (например, JSON или XML вместо XHTML)
            в ваших приложениях. При выводе возвращаемого методом
            <code>dispatch()</code> значения можно быть уверенным, что любой
            контент, добавленный в объект ответа, будет возвращен, так же будут
            возвращены и заголовки, добавленные в объект ответа.
<!--
            We encourage use of the Response object to aggregate content and
            headers. This will allow for more flexible output format switching
            (for instance, JSON or XML instead of XHTML) in your applications.
            Echoing the return value of <code>dispatch()</code> ensures that any
            content pushed to the response object will be returned, as well as
            any headers pushed to it.
-->
        </para>

        <para>
            Есть также много дополнительных инструментов, расширяющих
            существующий API, они описаны в этой документации. 
<!--
            There are many additional features that extend the existing API,
            and these are noted in the documentation.
-->
        </para>

        <para>
            Основные изменения, о которых следует знать, касаются расширения
            существующих компонент. Наиболее важные из них следующие:
<!--
            The main changes you will need to be aware of will be found when
            subclassing the various components. Key amongst these are:
-->
        </para>

        <itemizedlist>
            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                теперь принимает и возвращает объект запроса
                <xref linkend="zend.controller.overview.request">Zend_Controller_Request_Abstract</xref>
                вместо метки <code>Zend_Controller_Dispatcher_Token</code>.
<!--
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                now accepts and returns a <xref linkend="zend.controller.overview.request">Zend_Controller_Request_Abstract</xref>
                object instead of a dispatcher token.
-->
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                теперь принимает и возвращает объект ответа
                <xref linkend="zend.controller.overview.request">Zend_Controller_Request_Abstract</xref>
                вместо метки <code>Zend_Controller_Dispatcher_Token</code>
<!--
                <code>Zend_Controller_Router_Interface::route()</code>
                now accepts and returns a <xref linkend="zend.controller.overview.request">Zend_Controller_Request_Abstract</xref>
                object instead of a dispatcher token.
-->
            </para></listitem>

            <listitem>
                <para>
                    Среди изменений <code>Zend_Controller_Action</code> есть
                    следующие:
<!--
                    <code>Zend_Controller_Action</code> changes include:
-->
                </para>

                <itemizedlist>
                    <listitem><para>
                        Его конструктор теперь включает в себя три аргумента,
                        <code>Zend_Controller_Request_Abstract $request</code>, 
                        <code>Zend_Controller_Response_Abstract $response</code>,
                        и <code>array $params</code> (необязательный).
                        <code>Zend_Controller_Action::__construct()</code>
                        использует их для установки запроса, ответа и свойств
                        объекта
                        Еще лучше использовать метод <code>init()</code> для
                        выполнения любого начального конфигурирования, так
                        как этот метод вызывается в конце конструктора.
<!--
                        The constructor now accepts exactly three arguments,
                        <code>Zend_Controller_Request_Abstract $request</code>, 
                        <code>Zend_Controller_Response_Abstract $response</code>, 
                        and <code>array $params (optional)</code>.
                        <code>Zend_Controller_Action::__construct()</code> uses
                        these to set the request, response, and invokeArgs
                        properties of the object, and if overriding the
                        constructor, you should do so as well. Better yet, use
                        the <code>init()</code> method to do any instance
                        configuration, as this method is called as the final
                        action of the constructor.
-->
                    </para></listitem>

                    <listitem><para>
                        Метод <code>run()</code> теперь не определен с ключевым
                        словом final, но он также и не используется во
                        фронт-контроллере; единственным его назначением
                        является использование класса как контроллера страниц.
                        Теперь он принимает два необязательных аргумента –
                        <code>Zend_Controller_Request_Abstract $request</code> 
                        и <code>Zend_Controller_Response_Abstract $response</code>.
<!--
                        <code>run()</code> is no longer defined as final, but is
                        also no longer used by the front controller; it's sole
                        purpose is for using the class as a page controller. It
                        now takes two optional arguments, a
                        <code>Zend_Controller_Request_Abstract $request</code> 
                        and a <code>Zend_Controller_Response_Abstract $response</code>.
-->
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> уже не обязателен для
                        определения, но рекомендуется определять его в качестве
                        действия по умолчанию. Это позволяет использовать
                        RewriteRouter и контроллеры для указания различных
                        методов действий, используемых по умолчанию. 
<!--
                        <code>indexAction()</code> no longer needs to be
                        defined, but is encouraged as the default action. This
                        allows using the RewriteRouter and action controllers to
                        specify different default action methods.
-->
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> должен замещаться для приема
                        обращений к несуществующим действиям.  
<!--
                        <code>__call()</code> should be overridden to handle any
                        undefined actions automatically.
-->
                    </para></listitem>

                    <listitem><para>
                        Метод <code>_redirect()</code> теперь принимает второй
                        необязательный аргумент, HTTP-код для возвращения при
                        перенаправлении, и третий необязательный аргумент,
                        <code>$prependBase</code>, который указывает, что
                        основной URL, зарегистрированный в объекте запроса,
                        должен предшествовать URL, указанному в первом
                        аргументе.
<!--
                        <code>_redirect()</code> now takes an optional second
                        argument, the HTTP code to return with the redirect, and
                        an optional third argument, <code>$prependBase</code>,
                        that can indicate that the base URL registered with the
                        request object should be prepended to the url specified.
-->
                    </para></listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                Метод
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> был
                удален. Вместо него используйте
                <code>Zend_Controller_Front::setBaseUrl()</code> (или
                Zend_Controller_Request_Http::setBaseUrl(), если используется
                объект запроса). 
<!--
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> has
                been removed. Use <code>Zend_Controller_Front::setBaseUrl()</code> 
                instead (or Zend_Controller_Request_Http::setBaseUrl(), if using
                that request class).
-->
            </para></listitem>

            <listitem><para>
                Интерфейс <code>Zend_Controller_Plugin_Interface</code> заменен
                классом <code>Zend_Controller_Plugin_Abstract</code>. Все его
                методы теперь принимают и возвращают
                <xref linkend="zend.controller.overview.request">Zend_Controller_Request_Abstract</xref>
                вместо метки диспетчеризации.
<!--
                <code>Zend_Controller_Plugin_Interface</code> was replaced
                by <code>Zend_Controller_Plugin_Abstract</code>. All methods now
                accept and return a <xref linkend="zend.controller.overview.request">Zend_Controller_Request_Abstract</xref>
                object instead of a dispatcher token.
-->
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
