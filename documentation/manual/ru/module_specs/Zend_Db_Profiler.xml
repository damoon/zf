<sect1 id="zend.db.profiler">

    <title>Zend_Db_Profiler</title>

    <sect2 id="zend.db.profiler.introduction">  

        <title>Введение</title>

        <para>
            <code>Zend_Db_Profiler</code> может быть включен для
            профилирования запросов. Профили включают в
            себя запросы, обработанные адаптером, а также время, затраченное
            на обработку запроса. Это позволяет исследовать выполненные
            запросы без добавления дополнительного отладочного кода в классы.
            Расширенное использование также позволяет разработчикам
            фильтровать запросы, предназначенные для профилирования.
<!--
            <code>Zend_Db_Profiler</code> can be enabled to allow profiling of
            queries. Profiles include the queries processed by the adapter as
            well as elapsed time to run the queries, allowing inspection of the
            queries that have been performed without needing to add extra
            debugging code to classes. Advanced usage also allows the
            developer to filter which queries are profiled.
-->
        </para>

        <para>
            Включение профилировщика производится либо передачей директивы
            конструктору адаптера, либо более поздним обращением к адаптеру
            для включения. 
<!--
            Enable the profiler by either passing a directive to the adapter
            constructor, or by asking the adapter to enable it later.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Db.php';

$params = array (
    'host'     => '127.0.0.1',
    'username' => 'malory',
    'password' => '******',
    'dbname'   => 'camelot',
    'profiler' => true  // включение профилировщика;
                        // для отключения используется false (значение по умолчанию)
);

$db = Zend_Db::factory('pdoMysql', $params);

// отключение профилировщика:
$db->getProfiler()->setEnabled(false);

// включение профилировщика:
$db->getProfiler()->setEnabled(true);
?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.profiler.using">

        <title>Использование профилировщика</title>

        <para>
            Забор профилировщика производится в любой момент с использованием
            метода адаптера <code>getProfiler()</code>:
<!--
            At any point, grab the profiler using the adapter's
            <code>getProfiler()</code> method:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$profiler = $db->getProfiler();
?>]]></programlisting>

        <para>
            Это вернет экземпляр класса <code>Zend_Db_Profiler</code>. 
            С помощью этого экземпляра разработчик может изучать запросы,
            используя различные методы:
<!--
            This returns a <code>Zend_Db_Profiler</code> object instance. With
            that instance, the developer can examine your queries using a
            variety of methods:
-->
        </para>

        <itemizedlist>
            <listitem>
                <code>getTotalNumQueries()</code> возвращает общее количество
                запросов, которые были профилированы.
<!--
                <code>getTotalNumQueries()</code> returns the total number
                of queries that have been profiled.
-->
            </listitem>
            <listitem>
                <code>getTotalElapsedSeconds()</code> возвращает общее
                количество секунд, затраченное на все профилированные запросы.
<!--
                <code>getTotalElapsedSeconds()</code> returns the total
                number of seconds elapsed for all profiled queries.
-->
            </listitem>
            <listitem>
                <code>getQueryProfiles()</code> возвращает массив всех профилей
                запросов.
<!--
                <code>getQueryProfiles()</code> returns an array of all
                query profiles.
-->
            </listitem>
            <listitem>
                <code>getLastQueryProfile()</code> возвращает последний
                (самый недавний) профиль запроса, безотносительно того, был ли
                запрос завершен (Если не был завершен, то конечное время будет
                равно <code>NULL</code>).
<!--
                <code>getLastQueryProfile()</code> returns the last (most
                recent) query profile, regardless of whether or not the query
                has finished (if it hasn't, the end time will be null)
-->
            </listitem>
            <listitem>
                <code>clear()</code> удаляет все профили прошедших запросов из
                стека.
<!--
                <code>clear()</code> clears any past query profiles
                fromthe stack.
-->
            </listitem>
        </itemizedlist>

        <para>
            Возвращаемое значение <code>getLastQueryProfile()</code> и его
            отдельные элементы являются объектами
            <code>Zend_Db_Profiler_Query</code>, котроые дают возможность
            исследовать отдельные запросы:   
<!--
            The return value of <code>getLastQueryProfile()</code> and the
            individual elements of <code>getQueryProfiles()</code> are
            <code>Zend_Db_Profiler_Query</code> objects, which provide the
            ability to inspect the individual queries themselves:
-->
        </para>

        <itemizedlist>
            <listitem>
                <code>getQuery()</code> возвращает код SQL запроса.
<!--
                <code>getQuery()</code> returns the SQL text of the query.
-->
            </listitem>
            <listitem>
                <code>getElapsedSecs()</code> возвращает время выполнения запроса
                в секундах.
<!--
                <code>getElapsedSecs()</code> returns the number of
                seconds the query ran.
-->
            </listitem>
        </itemizedlist>

        <para>
            Информация, предоставляемая <code>Zend_Db_Profiler</code>, полезна
            для профилирования "узких мест" в приложениях и отладки запросов.
            Например, чтобы посмотреть, какой запрос выполнялся
            последним:
<!--
            The information <code>Zend_Db_Profiler</code> provides is useful for
            profiling bottlenecks in applications, and for debugging queries
            that have been run. For instance, to see the exact query that was
            last run:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$query = $profiler->getLastQueryProfile();

echo $query->getQuery();
?>]]></programlisting>

        <para>
            Возможно, страница генерируется медленно. Используйте профилировщик
            для того, чтобя сначала определить общее количество секунд для
            всех запросов, затем выполните обход всех запросов, чтобы найти
            тот, который выполняется дольше всех:  
<!--
            Perhaps a page is generating slowly; use the profiler to determine
            first the total number of seconds of all queries, and then step
            through the queries to find the one that ran longest:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
$totalTime    = $profiler->gettotalElapsedSeconds();
$queryCount   = $profiler->getTotalNumQueries();
$longestTime  = 0;
$longestQuery = null;

foreach ($profiler->getQueryProfiles() as $query) {
    if ($query->getElapsedSecs() > $longestTime) {
        $longestTime  = $query->getElapsedSecs();
        $longestQuery = $query->getQuery();
    }
}

echo 'Выполнено ' . $queryCount . ' запросов в ' . $totalTime . ' секунд' . "\n";
echo 'Среднее время выполнения запроса: ' . $queryCount / $totalTime . ' секунд' . "\n";
echo 'Наибольшее время выполнения запроса: ' . $longestTime . "\n";
echo "Запрос с наибольшим временем выполнения: \n" . $longestQuery . "\n";
?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.profiler.advanced">

        <title>Расширенное использование профилировщика<!--Advanced Profiler Usage--></title>

        <para>
            Кроме исследования запросов, профилировщик также дает
            возможность разработчикам фильтровать запросы, предназначенные
            для профилирования. Следующие методы работают на экземпляре
            <code>Zend_Db_Profiler</code>:
<!--
            In addition to query inspection, the profiler also allows the
            developer to filter which queries get profiled. The following
            methods operate on a <code>Zend_Db_Profiler</code> instance:
-->
        </para>

        <sect3 id="zend.db.profiler.advanced.filtertime">
            <title>
                Фильтрация по времени выполнения запроса
                <!-- Filter by query elapsed time -->
            </title>

            <para>
                <code>setFilterElapsedSecs()</code> дает возможность
                разработчикам устанавливать минимальное время запроса, после
                которого запросы будут профилироваться. Для того, чтобы убрать
                фильтрацию, передайте методу значение <code>NULL</code>.
<!--
                <code>setFilterElapsedSecs()</code> allows the developer to set
                a minimum query time before a query is profiled. To remove the
                filter, pass the method a null value.
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
// Профилировать только те запросы, которые отнимают по меньшей мере 5 секунд:
$profiler->setFilterElapsedSecs(5);

// Профилировать все запросы безотносительно времени выполнения:
$profiler->setFilterElapsedSecs(null);
?>]]></programlisting>
        </sect3>

        <sect3 id="zend.db.profiler.advanced.filtertype">
            <title>Фильтрация по типу запроса</title>

            <para>
                <code>setFilterQueryType()</code> дает разработчикам возможность
                указывать, какие типы запросов должны профилироваться; для
                профилирования нескольких типов запросов, используйте логическое
                <code>OR</code>. Типы запросов определены в следующих константах
                <code>Zend_Db_Profiler</code>:
<!--
                <code>setFilterQueryType()</code> allows the developer to set
                which types of queries should be profiled; to profile multiple
                types, logical OR them. Query types are defined as the following
                <code>Zend_Db_Profiler</code> constants:
-->
            </para>

            <itemizedlist>
                <listitem>
                    <code>Zend_Db_Profiler::CONNECT</code>: операции по установке
                    соединения или выбора базы данных.
<!--
                    <code>Zend_Db_Profiler::CONNECT</code>: connection
                    operations, or selecting a database.
-->
                </listitem>
                <listitem>
                    <code>Zend_Db_Profiler::QUERY</code>: обычные запросы к
                    базе данных, которые не подходят к другим типам.
<!--
                    <code>Zend_Db_Profiler::QUERY</code>: general database
                    queries that do not match other types.
-->
                </listitem>
                <listitem>
                    <code>Zend_Db_Profiler::INSERT</code>: любые запросы, которые
                    добавляют новые данные в базу данных; как правило,
                    это команда INSERT.
<!--
                    <code>Zend_Db_Profiler::INSERT</code>: any query that
                    adds new data to the database, generally SQL
                    INSERT.
-->
                </listitem>
                <listitem>
                    <code>Zend_Db_Profiler::UPDATE</code>: любые запросы,
                    которые обновляют существующие данные, обычно это команда
                    UPDATE.
<!--
                    <code>Zend_Db_Profiler::UPDATE</code>: any query that
                    updates existing data, usually SQL UPDATE.
-->
                </listitem>
                <listitem>
                    <code>Zend_Db_Profiler::DELETE</code>: любые запросы,
                    которые удаляют существующие данные, обычно это команда
                    DELETE.
<!--
                    <code>Zend_Db_Profiler::DELETE</code>: any query that
                    deletes existing data, usually SQL DELETE.
-->
                </listitem>
                <listitem>
                    <code>Zend_Db_Profiler::SELECT</code>: любые запросы, которые
                    извлекают существующие данные, обычно это команда SELECT. 
<!--
                    <code>Zend_Db_Profiler::SELECT</code>: any query that
                    retrieves existing data, usually SQL SELECT.
-->
                </listitem>
                <listitem>
                    <code>Zend_Db_Profiler::TRANSACTION</code>: любые
                    операции с транзакциями, такие, как начало транзакции,
                    фиксация транзакции или откат.
<!--
                    <code>Zend_Db_Profiler::TRANSACTION</code>: any
                    transactional operation, such as start transaction, commit,
                    or rollback.
-->
                </listitem>
            </itemizedlist>

            <para>
                Как и с <code>setFilterElapsedSecs()</code>, вы можете удалить
                все фильтры посредством передачи <code>NULL</code> в качестве
                единственного аргумента. 
<!--
                As with <code>setFilterElapsedSecs()</code>, you can remove any
                existing filters by passing <code>null</code> as the sole
                argument.
-->
            </para>

            <programlisting role="php"><![CDATA[<?php
// профилировать только запросы SELECT
$profiler->setFilterQueryType(Zend_Db_Profiler::SELECT);

// профилировать запросы SELECT, INSERT и UPDATE
$profiler->setFilterQueryType(Zend_Db_Profiler::SELECT | Zend_Db_Profiler::INSERT | Zend_Db_Profiler::UPDATE);

// профилировать запросы DELETE (так вы можете определить, почему данные удаляются)
$profiler->setFilterQueryType(Zend_Db_Profiler::DELETE);

// удалить все фильтры
$profiler->setFilterQueryType(null);
?>]]></programlisting>

        </sect3>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
