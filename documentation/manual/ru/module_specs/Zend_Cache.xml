<sect1 id="zend.cache.introduction">
    <title>Введение</title>
    <para>
        <code>Zend_Cache</code> предоставляет универсальное средство для кэширования
        данных.
<!--
        <code>Zend_Cache</code> provides a generic way to cache some datas.
-->
    </para>
    <para>
        Записи кэша хранятся в базе данных (<code>File</code>, <code>Sqlite</code>...)
        с гибкой системой идентификаторов и тегов. Например, легко удалить
        определенную часть кэшированных данных (все записи кэша помечаются тегами). 
<!--
        Cache records are stored through a backend (<code>File</code>, <code>Sqlite</code>...) with a flexible
        system of "ids" and "tags". Then, for example, it's easy to delete a specified part of cached 
        datas ("all cache records marked with a given tag"...).
-->
    </para>
    <para>
      Ядро модуля является очень гибким и универсальным. Еще для специфических нужд
      вы можете использовать пользовательский интерфейс
      (<code>Output</code>, <code>Function</code>...) для наиболее подходящего
      пути работы.
<!--
      The core of the module is really generic and flexible. Yet, for specific needs, you can use a
      frontend (<code>Output</code>, <code>Function</code>...) to get a more appropriate way of running.
-->
    </para>
    <example>
        <title>
            Первый пример с ядром Zend_Cache
<!--
            A first example with Zend_Cache core
-->
        </title>
        <para>
            В первом примере мы будем непосредственно использовать ядро Zend_Cache с
            серверной частью <code>File</code>.
<!--
            In this first example, we will use directly the core of Zend_Cache with the 
            <code>File</code> backend.
-->
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Cache.php';

$frontendOptions = array(
    'lifeTime' => 7200 // время жизни кэша - 2 часа
);

$backendOptions = array(
    'cacheDir' => '/tmp/' // каталог, в котором размещаются файлы кэша
);

// создаем объект Zend_Cache 
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);

$id = 'foo'; // идентификатор того, что мы хотим закэшировать

if (!($cache->test($id))) {
    // кэш отсутствует

    // require_once ... для большей производительности все включения производятся только если кэш отсутствует
    // require_once ...

    // формирование данных кэша
    // пример
    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    } 
	
    // сохраняем результат в кэше
    $cache->save($data);

} else {
    // получение кэша

    $data = $cache->get($id);

}

// делаем что-нибудь с данными :)
// [...]
?>]]>       </programlisting>
       </para>
    </example>
    <note>
        С <code>Zend_Cache_Core</code> вы можете управлять идентификатором кэша. 
<!--
        With Zend_Cache_Core, you have to manage the "cache identifier" by yourself.
-->  
    </note>
</sect1>

<sect1 id="zend.cache.factory">
    <title>
        Фабрика Zend_Cache 
<!--
        Zend_Cache factory
-->
    </title>
    <para>
      Есть только один способ создать объект <code>Zend_Cache_*</code>. Во всех
      случаях (серверная и/или пользовательская части) вы используете фабрику
      (factory) <code>Zend_Cache</code>. Не используйте непосредственно
      конструкторы серверной части, это не будет работать корректно!
<!--
      There is only one way to build a <code>Zend_Cache_*</code> object. In all cases 
      (backends and/or frontends), you have to use the <code>Zend_Cache</code> factory.
      Do not use frontends constructors directly, it won't work correctly !
-->  
    </para>
    <para>
      Правильный способ создания экземпляра класса <code>Zend_Cache_*</code> дан
      в следующем примере:
<!--
      The good way to build an usable instance of <code>Zend_Cache_*</code> is given
      in the following example :
-->
      <programlisting role="php"><![CDATA[<?php
    
# Загружаем фабрику Zend_Cache 
require 'Zend/Cache.php'; 

# Выбираем серверную часть (например, 'File', 'Sqlite'...)
$backendName = '[...]';

# Выбираем пользовательскую часть (например, 'Core', 'Output', 'Page'...)
$frontendName = '[...]';

# Устанавливаем массив опций для выбранной пользовательской части
$frontendOptions = array([...]);

# Устанавливаем массив опций для выбранной серверной части
$backendOptions = array([...]);

# Создаем экземпляр 
# (два последних аргумента являются необязательными)
$cache = Zend_Cache::factory($frontendName, $backendName, $frontendOptions, $backendOptions);

[...]

?>]]>   </programlisting> 
    </para> 
    <para>
      Далее мы будем предполагать, что переменная <code>$cache</code> установлена как
      показано в предыдущем примере.  
<!--
      In next lines of this documentation, we will assume that the <code>$cache</code>
      variable is set as shown in the previous example.
-->    
    </para> 
</sect1>

<sect1 id="zend.cache.core">
    <title>Zend_Cache_Core</title>
    <sect2 id="zend.cache.core.introduction">
      <title>Введение</title>
      <para>
        <code>Zend_Cache_Core</code> является особенным, т.к. это фактически
        ядро модуля. Все пользовательские части наследуют от этого класса. Поэтому
        большинство методов и опций, описааных ниже, доступны и в других
        пользовательских частях.  
<!--
        <code>Zend_Cache_Core</code> is a special frontend because it's actually the core
        of the module. All frontends inherit from this class. So most of methods and options
        described below are also available for other frontends.
-->
      </para>
    </sect2>
    <sect2 id="zend.cache.core.options">
      <title>
          Доступные опции
<!--
          Available options (for this frontend in Zend_Cache factory)
-->
      </title>
      <table>
        <title>
            Доступные опции
<!--
            Available options
-->
        </title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Опция</entry>
              <entry>Тип данных</entry>
              <entry>Значение по умолчанию</entry>
              <entry>Описание</entry>
            </row>
          </thead>
          <tbody>
             <row>
               <entry><code>caching</code></entry>
               <entry><code>boolean</code></entry>
               <entry><code>true</code></entry>
               <entry>
                 Включает / отключает кэширование (может быть очень полезным при
                 отладке кэшируемых скриптов)
<!--
                 enable / disable caching (can be very usefull for the debug of 
                 cached scripts)
-->
                </entry>
              </row>
              <row>
                <entry><code>lifeTime</code></entry>
                <entry><code>int</code></entry>
                <entry><code>3600</code></entry>
                <entry>
                  Время жизни кэша (в секундах), если установлен в
                  <code>null</code>, то кэш имеет бесконечное время жизни.
<!--
        					cache lifetime (in seconds), if set to <code>null</code>, the 
        					cache is valid forever.
-->       
                </entry>
              </row>
              <row>
                <entry><code>logging</code></entry>
                <entry><code>boolean</code></entry>
      					<entry><code>false</code></entry>
      					<entry>
      					  Если установлен в true, то включается логирование посредством
                  <code>Zend_Log</code> (система будет работать медленнее).  
<!--
        					if set to true, logging through <code>Zend_Log</code> is activated 
        					(but the system is slower)
--> 	    
      					</entry>
      				</row>
      				<row>
                <entry><code>writeControl</code></entry>
                <entry><code>boolean</code></entry>
                <entry><code>true</code></entry>
      					<entry>
                  Включает / отключает контроль записи (кэш читается сразу после
                  записи для выявления поврежденных записей), включение writeControl
                  немного замедлит запись кэша, но не чтение (этот контроль может выявить
                  некоторые поврежденные файлы кэша, но не является совершенным).
<!--
        					Enable / disable write control (the cache is read 
        					just after writing to detect corrupt entries), enabling writeControl
        					will lightly slow the cache writing but not the cache reading (it 
        					can detect some corrupt cache files but it's not a perfect control)
-->
                </entry>
              </row>
              <row>
                <entry><code>automaticSerialization</code></entry>
                <entry><code>boolean</code></entry>
                <entry><code>false</code></entry>
                <entry>
                  Включает / отключает автоматическую сериализацию, она может
                  использоваться для сохранения напрямую данных, которые не являются
                  строками (но это будет меденнее). 
<!--
        					Enable / disable automatic serialization, it can be used to save directly datas
	        				which aren't strings (but it's slower)
-->		    
      					</entry>
      				</row>
      				<row>
      					<entry><code>automaticCleaningFactor</code></entry>
      					<entry><code>int</code></entry>
      					<entry><code>0</code></entry>
      					<entry>
      					  Отключает / настраивает автоматический процесс очистки (сборщик мусора) :
      					  <code>0</code> означает, что автоматическая чистка кэша не производится,
                  <code>1</code> означает систематическую очистку кэша,
                  <code>x (integer) &gt; 1</code> означает, что автоматическая
                  чистка производится случайным образом 1 раз на x записей кэша.  
<!--
        					Disable / Tune the automatic cleaning process (garbage collector) :
        					0 means no automatic cache cleaning, 1 means systematic cache cleaning
        					and x (integer) &gt; 1 means automatic cleaning randomly 1 times on x cache write.
-->
      					</entry>
      				</row>
      			</tbody>
      		</tgroup>
      	</table>
    </sect2>
    <sect2 id="zend.cache.core.examples">
    	<title>Примеры</title>
    	<para>
    	  Первый пример дан в самом начале.
<!--
    		A first example is given in the tutorial at the very beginning.
-->
    	</para>
    	<para>
    	  Если вы храните в кэше только строки (с опцией "automaticSerialization"
        возможно хранить некоторые булевы значения), вы можете использовать
        более компактную конструкцию, похожую на:
<!--
    		If you store only strings into cache (because with "automaticSerialization" option, it's possible to store
			some booleans), you can use a more compact construction like :
-->			
     	    <programlisting role="php"><![CDATA[<?php  
     	    
// [...] // включения, конфигурирование, фабрика

$id = 'foo'; // идентификатор того, что мы хотим закэшировать

if (!($data = $cache->get($id))) {
	// кэш отсутствует
	
	$data = '';
	for ($i=0;$i<10000;$i++) {
		$data = $data . $i;
	}
	
    $cache->save($data);
    
} 

// [...] делаем что-нибудь с данными (например, "echo $data;")
     	    
?>]]>       </programlisting> 
        </para>  
        <para>
          Если вы хотите закэшировать несколько блоков данных, то принцип будет тот же:
<!--
        	If you want to cache multiple blocks or datas, the idea is the same :
-->
     	    <programlisting role="php"><![CDATA[<?php  
     	    
// [...] // включения, конфигурирование, фабрика

$id1 = 'foo'; // идентификатор кэша блока 1
$id2 = 'bar'; // идентификатор кэша блока 2

// БЛОК 1
if (!($data = $cache->get($id1))) {
	// кэш отсутствует
	
	$data = '';
	for ($i=0;$i<10000;$i++) {
		$data = $data . $i;
	}
	
    $cache->save($data);
    
} 
echo($data);

// НЕ КЭШИРУЕМЫЙ БЛОК
echo('НЕ КЭШИРУЕТСЯ!');

// БЛОК 2
if (!($data = $cache->get($id2))) {
	// кэш отсутствует
	
	$data = '';
	for ($i=0;$i<10000;$i++) {
		$data = $data . '!';
	}
	
    $cache->save($data);
    
} 
echo($data);


?>]]>       </programlisting>         	
        </para>   	 	
    </sect2>   
    <sect2 id="zend.cache.core.idandtags">
    	<title>Идетификатор и теги кэша<!--Cache ID and tags--></title>
    	<para>
    	  Идентификатором кэша является уникальный ключ, который идентифицирует
        данную запись кэша. В некоторых пользовательских частях (Core, Output...)
        вы имеете дело с идентификаторами кэша. Поэтому, например, будьте осторожны
        при использовании уникальных идентификаторов для данной страницы или блока.
<!--
    		A "cache id" is an unique key which identifies a given cache record. In some frontends
    		(Core, Output...), you have to deal with "cache ids" by yourself. So, for example,
    		be carefull to use an unique id for a given page or block.
-->
    	</para>
    	<para>
    	  Теги являются средством для категоризации записей кэша. Когда вы сохраняете
    	  кэш методом <code>save()</code>, вы можете установить массив тегов для
    	  для записи. Позже вы можете удалять все записи кэша, помеченные данным тегом...
    	  Это очень мощный способ для управления записями кэша по группам.
<!--
    		"tags" are a way to categorize cache records. When you save a cache with the <code>save()</code>
    		method, you can set an array of tags to apply for this record. Then, you will be 
    		able to clean all cache records tagged with a given tag... It's a really powerful
    		way to manage cache records by groups.
-->
    	</para>
    	<para>
    	  Вот полный синтаксис метода <code>save()</code>:
<!--
    		Here is the complete syntax of the <code>save()</code> method :
-->
    		<programlisting role="php"><![CDATA[<?php
     	    
    /**
     * Сохраняет данные в кэше 
     * 
     * @param mixed $data данные для размещения в кэше (может иметь тип, отличный от строкового, если automaticSerialization включен)
     * @param cache $id cache id (если не установлен, то будет использоваться последний id кэша)
     * @param array $tags теги кэша
     * @return boolean true, если не было ошибки
     */
    public function save($data, $id = null, $tags = array()) {}
    		
?>]]>       </programlisting>
      Так, например, вы можете использовать:    	 
<!--
			So for example, you can use :
-->
			<programlisting role="php"><![CDATA[<?php
			
// [...]
$cache->save('данные для сохранения', 'уникальный ID', array('тег1', 'тег4', 'тег5'));
// [...]	
			
?>]]>       </programlisting> 						   	
    	</para>
    </sect2>
    <sect2 id="zend.cache.core.clean">
    	<title>Очищение кэша</title>
    	<para>
    	  Чтобы удалить / сделать недействительным отдельный
        идентификатор кэша, вы можете использовать метод <code>remove()</code>:
<!--
    		To remove/invalidate in particular cache id, you can use the <code>remove()</code>
    		method :
-->
     	    <programlisting role="php"><![CDATA[<?php 
     	    
// [...]
$cache->remove('ID для удаления');
// [...]
    		
?>]]>       </programlisting>    		
    	</para>
    	<para>
    	  Чтобы удалить / сделать недействительными несколько идентификаторов
    	  за одну операцию вы можете использовать метод <code>clean()</code>.
    	  Например, для того, чтобы удалить все записи кэширования:
<!--
    		To remove/invalidate several cache ids in one operation, you can use the <code>clean()</code>
    		method. For example to remove all cache records :
-->
      	    <programlisting role="php"><![CDATA[<?php 
     	    
// [...]
$cache->clean(Zend_Cache::CLEANING_MODE_ALL);
// [...]
    		
?>]]>       </programlisting>
      Если вы хотите удалить только устаревшие записи:       		
<!--
			If you want to remove only outdated cache records :
-->
      	    <programlisting role="php"><![CDATA[<?php 
     	    
// [...]
$cache->clean(Zend_Cache::CLEANING_MODE_OLD);
// [...]
    		
?>]]>       </programlisting>
      Если вы хотите удалить записи кэша, соответствующие тегам 'тег1' и 'тег3': 
<!--
			If you want to remove cache entries matching the tags 'tag1' and 'tag3' :
-->
      	    <programlisting role="php"><![CDATA[<?php 
     	    
// [...]
$cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG, array('тег1', 'тег3'));
// [...]
    		
?>]]>       </programlisting>
			[...]	
    	</para>
    </sect2>
</sect1>
<sect1 id="zend.cache.output">
    <title>Zend_Cache_Output</title>
    <para>
    	В ПРОЦЕССЕ НАПИСАНИЯ
    </para>
</sect1>    
<sect1 id="zend.cache.page">
    <title>Zend_Cache_Page</title>
    <para>
    	В ПРОЦЕССЕ НАПИСАНИЯ
    </para>
</sect1>  
<sect1 id="zend.cache.file">
    <title>Zend_Cache_File</title>
    <para>
    	В ПРОЦЕССЕ НАПИСАНИЯ
    </para>
</sect1> 
<sect1 id="zend.cache.function">
    <title>Zend_Cache_Function</title>
    <para>
    	В ПРОЦЕССЕ НАПИСАНИЯ
    </para>
</sect1> 
<sect1 id="zend.cache.class">
    <title>Zend_Cache_Class</title>
    <para>
    	В ПРОЦЕССЕ НАПИСАНИЯ
    </para>
</sect1> 
<sect1 id="zend.cache.backends">
    <title>
        Доступные серверные части для Zend_Cache 
        <!--Available backends for Zend_Cache-->
    </title>
    <sect2 id="zend.cache.backends.file">
    	<title>Zend_Cache_Backend_File</title>
    	<para>
    	  Эта серверная часть хранит записи кэша в файлах (в выбранной директории). 
<!--
    		This backends stores cache records into files (in a choosen directory).
--> 
    	</para>
    	<para>
    	  Доступные опции:
<!--
    		Available options are :
-->
    	</para>  		
	    <table>
    		<title>Доступные опции</title>
    		<tgroup cols="4">
     			<thead>
      				<row>
       					<entry>Опция</entry>
				        <entry>Тип данных</entry>
				        <entry>Значение по умолчанию</entry>
				        <entry>Описание</entry>
				    </row>
     			</thead>
     			<tbody>
      				<row>
      					<entry><code>cacheDir</code></entry>
      					<entry><code>string</code></entry>
      					<entry><code>'/tmp/'</code></entry>
      					<entry>
      					  Директория, в которой хранятся файлы кэша
<!--
      						Directory where to store cache files
-->	
      					</entry>
      				</row>
      				<row>
      					<entry><code>fileLocking</code></entry>
      					<entry><code>boolean</code></entry>
      					<entry><code>true</code></entry>
      					<entry>
      					  Включает / отключает блокировку файлов : может помочь избежать
                  искажения данных кэша в плохих условиях, но это не поможет при
                  многопоточном веб-сервере или файловой системе NFS...
<!--
        					Enable / disable fileLocking : Can avoid cache corruption under 
        					bad circumstances but it doesn't help on multithread webservers 
        					or on NFS filesystems...
-->
      					</entry>
      				</row>
      				<row>
      					<entry><code>readControl</code></entry>
      					<entry><code>boolean</code></entry>
      					<entry><code>true</code></entry>
      					<entry>
      					  Включает / отключает контроль чтения : если включен, то в файл
      					  кэша добавляется контрольный ключ и этот ключ сравнивается
                  с другим, вычисляемым после чтения.  
<!--
        					Enable / disable read control : if enabled, a control key is 
        					embeded in the cache file and this key is compared with the 
        					one calculated after the reading.
-->	    
      					</entry>
      				</row>
      				<row>
      					<entry><code>readControlType</code></entry>
      					<entry><code>string</code></entry>
      					<entry><code>'crc32'</code></entry>
      					<entry>
      					  Тип контроля чтения (только если readControl включен).
      					  Возможные значения : 'md5' (лучший, но самый медленный),
                  'crc32' (немного менее безопасный, но быстрее, лучший выбор),
                  'strlen' для контроля толко по длине (самый быстрый).  
<!--
        					Type of read control (only if read control is enabled). Available values are :
        					'md5' (best but slowest), 'crc32' (lightly less safe but faster, better choice),
        					'strlen' for a length only test (fastest).
-->
        				</entry>
      				</row>
      				<row>
      					<entry><code>hashedDirectoryLevel</code></entry>
      					<entry><code>int</code></entry>
      					<entry><code>0</code></entry>
      					<entry>
      					  Уровень структуры хэшированного каталога: <code>0</code>
      					  означает "нет структуры хэшированного каталога", <code>1</code>
      					  означает "один уровень каталога", <code>2</code> означает
                  "два уровня"... Эта опция ускорит кэширование только если у
                  вас тысячи файлов кэша. Только сравнение может помочь вам
                  выбрать оптимальное для вас значение. Возможно, <code>1</code>
                  или <code>2</code> будут лучшими значениями для начала. 
<!--
        					Hashed directory structure level : 	0 means "no hashed directory 
     						structure", 1 means "one level of directory", 2 means "two levels"... 
     						This option can speed up the cache only when you have many thousands of 
     						cache files. Only specific benchs can help you to choose the perfect 
     						value for you. Maybe, 1 or 2 is a good start.
-->
      					</entry>
      				</row>
      				<row>
      					<entry><code>hashedDirectoryUmask</code></entry>
      					<entry><code>int</code></entry>
      					<entry><code>0700</code></entry>
      					<entry>
      						Маска режима создания файлов для стуктуры хэшированного каталога
<!--
      						Umask for the hashed directory structure
-->
        				</entry>
      				</row>
      			</tbody>
      		</tgroup>
      	</table>
    </sect2>
    <sect2 id="zend.cache.backends.sqlite">
    	<title>Zend_Cache_Backend_Sqlite</title>
    	<para>
    	  Эта серверная часть хранит записи кэша в базе данных SQLite. 
<!--
    		This backends stores cache records into a SQLite database.
-->
    	</para>
    	<para>
    	  Доступные опции:
<!--
    		Available options are :
-->
    	</para>
    	<table>
    		<title>Доступные опции</title>
    		<tgroup cols="4">
     			<thead>
      				<row>
       					<entry>Опция</entry>
				        <entry>Тип данных</entry>
				        <entry>Значение по умолчанию</entry>
				        <entry>Описание</entry>
				    </row>
     			</thead>
     			<tbody>
      				<row>
      					<entry><code>cacheDBCompletePath (обязательный)</code></entry>
      					<entry><code>string</code></entry>
      					<entry><code>null</code></entry>
      					<entry>
      					  Полный путь (с именем файла) к базе данных SQLite.
<!--
      						The complete path (filename included) of the SQLite database
-->
      					</entry>
      				</row>
      			</tbody>
      		</tgroup>
      	</table>
    </sect2>
</sect1> 
  
<!--
vim:se ts=4 sw=4 et:
-->
