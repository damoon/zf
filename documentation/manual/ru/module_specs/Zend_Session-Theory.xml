<sect1 id="zend.session.theory">

    <title>Теория</title>

    <para>
        <code>Zend_Session</code> предоставляет внутренний интерфейс для
        инкапсуляции всего доступа к сиглетону <code>$_SESSION</code> с
        использованием статических методов. В общем случае
        разработчики не должны иметь прямой доступ к <code>$_SESSION</code>,
        когда используют Zend_Session и Zend_Session_Namespace. Тем не менее,
        "унаследованный" код может сосуществовать с Zend_Session благодаря тому,
        что пространства имен, используемые Zend_Session_Namespace, не
        перекрываются с ключами в массиве <code>$_SESSION</code>, используемым
        унаследованным кодом. В настоящее время не проводилось исследований по
        выявлению проблемных ситуаций, кода действующий код (и другие
        PHP-приложения) совместно использует или пререкрывают постоянные данные
        сессий. Поэтому рекомендуется следовать лучшей практике
        программирования, описанной в следующих разделах, во избежание
        осложнений. 
<!--
        <code>Zend_Session</code> provides an internal interface to encapsulate all access to the singleton
        <code>$_SESSION</code> using all static methods. In general, developers should not directly access
        <code>$_SESSION</code>, when using the Zend_Session and Zend_Session_Namespace. However, it is possible for
        legacy code to coexist with Zend_Session, provided the namespaces used by Zend_Session_Namespace do not overlap
        with the keys in <code>$_SESSION</code> used by legacy code. Currently, no attempts are made to detect
        problematic situations where legacy code (or another PHP application) unintentionally share and overlap session
        state data. Thus, developers are urged to follow the best practices outlined in other sections to avoid
        complications.
-->
    </para>

    <para>
        Общее управление сессиями производится с использованием
        статических методов класса Zend_Session, это влияет на общее
        поведение сессий, управляемыми Zend_Session_Namespace и связанными с
        ним компонентами. Большинству разработчиков непосредственное
        использование Zend_Session может не понадобиться.
<!--
        All management and manipulation of global session management occurs using static "class" methods defined in
        Zend_Session that affect the overall behavior of sessions managed by Zend_Session_Namespace and related
        components. Most developers will not need to use Zend_Session directly.
-->
    </para>

    <para>
        В отличие от <code>$_SESSION</code>, Zend_Session_Namespace логически
        выделяет данные сессий в отдельные пространства имен посредством
        сохранения данных в массиве и
        сохранении этого массива в <code>$_SESSION</code>, используя
        имя пространства имен в качестве ключа. Создание экземпляра класса
        Zend_Session_Namespace вернет неуникальное "окно" к выбранному
        пространству имен. Одно и то же пространство имен может иметь множество
        "окон", несморя на то, что через определенный ключ (имя пространства
        имен) доступно только одно пространство имен. Эти экземпляры
        обеспечивают непосредственное манипулирование сессионными данными для
        определенных пространств имен. Таким образом, экземпляры
        Zend_Session_Namespace помогают ограничить область видимости посредством
        введения переменных с локальной областью видимости (объект
        Zend_Session_Namespace), фактически это импорт определенного
        пространства имен в локальную область видимости.   
<!--
        Unlike <code>$_SESSION</code>, Zend_Session_Namespace logically segregates all session data into separate
        namespaces, by storing data in a PHP array and storing the array in <code>$_SESSION</code> using the namespace
        as the key. Constructing an instance of Zend_Session_Namespace returns a non-unique "window" to the selected
        namespace. Multiple "windows" are possible for the same namespace, although there is only one namespace possible
        for a given programmatic key (the name of the namespace). These instances serve to restrict manipulation of
        session state data to specific namespaces, as explicitly specified when creating an instance of
        Zend_Session_Namespace. Zend_Session instances therefore help restrict scope by introducing a locally scoped
        variable (Zend_Session_Namespace instance object) that effectively imports a specific session namespace into the
        local scope.
-->
    </para>

</sect1>
