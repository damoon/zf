<sect1 id="zend.controller.rewriterouter.introduction">
    <title>Введение</title>
	<para>
	  <code>Zend_Controller_RewriteRouter</code> является новой версией маршрутизатора
	  фреймворка. Маршрутизация является процессом принятия конечной точки URI и ее
    декомпозиции для определения того, какой контроллер и какое действие этого
    контроллера должны получить запрос. Определение контроллера, действия
    и необязательных параметров упаковывается в объект значений, называемый
    <code>Zend_Controller_Dispatcher_Token</code> и обрабатывается
    <code>Zend_Controller_Dispatcher</code>. Маршрутизация производится только
    один раз -- когда вначале получен запрос и до того, как первый контроллер
    будет запущен.
<!--

		Zend_Controller_RewriteRouter is a new version of the framework router. Routing is the process of taking a URI
		endpoint and decomposing it to determine which controller and action of that controller, should receive the
		request. This definition of controller, action and optional parameters is packaged into a value object called
		Zend_Controller_Dispatcher_Token which is then processed by Zend_Controller_Dispatcher. Routing occurs only once:
		when the request is initially received and before the first controller is dispatched.
-->
	</para>
	<para>
	  <code>Zend_Controller_RewriteRouter</code> предназначен для того, чтобы
	  обеспечить функциональность, подобную mod_rewrite, с применением чистого
    php. Он отчасти основан на маршрутизации в Ruby on Rails и
    не требует каких-либо предварительных знаний о перезаписи URL веб-сервером.
    Он спроектирован для работы с единственным правилом mod_rewrite, одним из:
<!--
		Zend_Controller_RewriteRouter is designed to allow for mod_rewrite like functionality using pure php
		structures. It is very loosely based on Ruby on Rails routing and does not require any prior knowledge of
		webserver URL rewriting. It is designed to work with a single mod_rewrite rule (one of):
-->
	</para>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>
	<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1	]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.usage">
	<title>Использование маршрутизатора</title>

	<para>
	  Чтобы использовать RewriteRouter, нужно инстанцировать его, добавить
    маршруты и ввести в контроллер. Следующий код иллюстрирует
    эту процедуру:
<!--
		To properly use the RewriteRouter you have to instantiate it, add some user defined routes and inject it into the
		controller. The following code illustrates the procedure:
-->
	</para>

	<programlisting role="php"><![CDATA[
/* -- создание маршрутизатора -- */

$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user', 'action' => 'info'));

/* -- установка его в контроллере -- */

$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);]]></programlisting>
</sect1>

<sect1 id="zend.controller.rewriterouter.basic">
	<title>Основные маршруты</title>

	<para>
	  Основой RewriteRouter является определение пользователем маршрутов.
    Маршруты создаются вызовом метода <code>addRoute()</code>: 
<!--
		The heart of the RewriteRouter is the definition of user defined routes. Routes are created by calling the addRoute method of
		RewriteRouter:
-->
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', 'user/:username');]]></programlisting>

	<para>
	  Первым параметром является имя маршрута. На данный момент он является избыточным,
	  но в будущем будет использоваться в вспомогательном классе вида (view) для
    легкой генерации URL в ваших видах. Если нужно воспользоваться предварительно
    сконфигурированным маршрутом с именем, то можно получить его
    с помощью метода <code>getRoute</code>.
<!--
		The first parameter is the name of the route. It is redundant at the moment of writing but will be used in the future in
		a URL view helper to allow for easy URL generation in your views. Should you need to make use of a previously
		configured named route, you can retrieve it with the getRoute method of the RewriteRouter.
-->
	</para>

	<para>
	  Вторым параметром является маршрут, который будет сверяться с URL --
    например, приведенный выше маршрут будет соответствовать
    <code>http://example.com/user/martel</code>. Двоеточие в маршруте обозначает
    переменную URL, которая будет доступна через метод
    <code>Zend_Controller_Action::_getParam()</code>. В нашем примере параметру с
    именем <code>username</code> будет присвоено значение <code>'martel'</code>.
<!--
		The second parameter is a route that will be matched to a URL - for example, the above route will match
		<code>http://example.com/user/martel</code>. The colon in a route marks a URL variable which will be accessible
		through a Zend_Controller_Action::_getParam method. In our example a parameter named username will be set to a value of
		'martel'.
-->
	</para>

	<note>
	  Маршруты сверяются в обратном порядке, поэтому удостоверьтесь, что
	  наиболее общие маршруты определены первыми.
<!--
		Routes are matched in reverse order so make sure your most generic routes are defined first.
-->
	</note>

	<note>
	  На данный момент текущая реализация позволяет использовать любые символы,
	  кроме прямой косой черты (/), в идентификаторе переменной, но
	  сильно рекомендуется использовать в них только символы,
    допустимые для переменных в php. Есть вероятность, что в будущем реализация
    изменится, и это может вызвать ошибки в вашем коде.
<!--
		For now the current implementation allows for use of any characters except a slash (/) as a variable identifier but
		it is strongly recommended that one uses only php variable friendly characters. In future the implementation will probably be
		altered and this may introduce bugs to your code.
-->
	</note>

	<para>
	  Есть две специальные переменные, которые можно использовать в
    маршрутах -- 'controller' и 'action'. Эти специальные переменные могут
    использоваться для получения контроллера и/или действия, выбранных в URL.
    Переменная 'action' всегда должна быть определена в маршруте или как
    параметр по умолчанию. Переменная 'controller' по умолчанию будет
    <code>IndexController</code>, если не была определена.
<!--
		There are two special variables which can be used in your routes - 'controller' and 'action'. These special
		variables will be used to find a controller and/or an action chosen in the URL. The 'action' variable 
		must always be defined either in the route or as a default parameter. The 'controller' variable will default 
		to the IndexController if it is not defined.
-->
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('user', ':controller/:action');]]></programlisting>

	<para>
	  Адрес <code>http://example.com/news/latest</code> с таким маршрутом вызовет
    действие <code>latestAction</code> в контроллере <code>NewsController</code>.
	  
<!--
		If you point your browser to 'http://example.com/news/latest' with this route defined the
		Zend_Controller_Dispatcher will invoke the latestAction of your NewsController.
-->
	</para>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-defaults">
	<title>Значения переменных по умолчанию</title>

	<para>
	  Каждая переменная в маршруте может иметь значение по умолчанию.
	  Для того, чтобы определить его, нужно добавить третий параметр в
	  методе <code>addRoute</code>. Этот третий параметр является массивом
	  с ключами в качестве имен переменных и значениями в качестве задаваемых
    по умолчанию.
<!--
		Every variable in the route can have a default. To provide it you have to add a third parameter to the addRoute
		method. This third parameter is an array with keys as variable names and values as desired defaults.
-->
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006));]]></programlisting>
	<para>
	  Что может быть не очевидным, так это то, что приведенный выше маршрут
	  будет соответствовать таким URL-ам, как
    <code>http://example.com/archive/2005</code> и
    <code>http://example.com/archive</code>. В последнем случае переменная
    <code>year</code> будет иметь значение <code>2006</code>.
<!--
		What may not be clearly visible is that the above route will match URLs like 'http://example.com/archive/2005' and
		'http://example.com/archive'. In the latter case the variable year will have a value of 2006.
-->
	</para>

	<para>
	  В приведенном выше примере мы не установили контроллер, поэтому
	  это всегда будет иметь результатом действие <code>noRoute</code> в
    контроллере <code>IndexController</code>. Чтобы сделать его пригодным
    к применению, нужно установить действующие контроллер и действие по умолчанию:  
<!--
		In the above example we haven't set a controller so it will always result in a noRoute action of an
		IndexController. To make it usable you have to provide a valid controller and a valid action as a default:
-->
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show'));]]></programlisting>

</sect1>

<sect1 id="zend.controller.rewriterouter.variable-requirements">
	<title>Требования к переменным</title>

	<para>
	  Можно добавить четвертый параметр, в котором устанавливаются требования к
	  переменным. Они указываются в виде регулярных выражений.
<!--
		One can add a fourth parameter where variable requirements can be set. These are defined as regular
		expressions:
-->
	</para>

	<programlisting role="php"><![CDATA[
$router->addRoute('archive', 'archive/:year', array('year' => 2006), array('year' => '\d+'));]]></programlisting>

	<note>
	  В отличие от Ruby on Rails, ZF RewriteRouter будет использовать значение по умолчанию,
    если нет соответствия требованиям, определенным в четвертом параметре.
    Таким образом, в случае URL <code>http://example.com/archive/test</code>
    год будет равен 2006. Это поведение может быть изменено в будущем, так как
    все еще было предметом обсуждения в момент написания этой документпации.
<!--
		Unlike Ruby on Rails, ZF RewriteRouter will match a route and use a default when a fourth parameter variable requirement is not met. So the
		URL of 'http://example.com/archive/test' will match the above route and set the year to 2006. This functionality
		may be altered in the future as it is being discussed at the moment of writing of this documentation.
-->
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.rewritebase">
	<title>Основной URL и подкаталоги</title>

	<para>
	  В отличие от исходного маршрутизатора (Router), RewriteRouter может
	  использоваться в подкаталогах -- он автоматически определяет ваш основной
	  URL и устанавливает его. Например, если вы держите ваш <code>index.php</code>
	  в подкаталоге веб-сервера <code>/projects/myapp/index.php</code>, то основной
    URL будет установлен в <code>/projects/myapp</code>. Эта строка затем будет
    отсекаться от начала пути перед любым сопоставлением с маршрутом.
    Это освобождает от необходимости добавлять ее к каждому маршруту.
    Маршрут <code>'user/:username'</code> будет соответствовать таким путям, как
    <code>http://localhost/projects/myapp/user/martel</code> и
    <code>http://example.com/user/martel</code>.
<!--
		Unlike the original Router, RewriteRouter can be used in subdirectories - it automatically detects your base URL and
		sets it accordingly. For example: if you keep your <code>index.php</code> in a webserver subdirectory named
		<code>/projects/myapp/index.php</code> rewrite base (base URL) will be set to <code>/projects/myapp</code>. This string will then be 
		stripped from the beginning of the path before calculating any route matches. This frees one from the necessity of prepending it to
		any of your routes. The route of <code>'user/:username'</code> will match URIs like
		<code>http://localhost/projects/myapp/user/martel</code> and <code>http://example.com/user/martel</code>.
-->
	</para>

	<note>
	  Автоматическая замена основы URL чувствительна к регистру, поэтому удостоверьтесь,
	  что ваш URL будет соответствует имени подкаталога в файловой системе
	  (даже под Windows). Если вы не сделаете этого, то в результате может
    вызываться действие <code>noRoute</code>.
<!--
		Automatic rewrite base is case sensitive, so make sure your URL will match a subdirectory name in a filesystem
		(even on Windows machines). If it doesn't you will get to noRoute action.
-->
	</note>

	<para>
	  Если основной URL определяется неправильно, то вы можете заменить его своим
	  с помощью метода <code>setRewriteBase()</code> класса RewriteRouter:  
<!--
		Should rewrite base be detected incorrectly you can override it with your own base path with the help of the
		setRewriteBase method of the RewriteRouter class:
-->
	</para>

	<programlisting role="php"><![CDATA[
$router->setRewriteBase('/projects/myapp');]]></programlisting>

	<note>
	  В большинстве случаев этот шаг не является обязательным и сильно не
    рекомендуется, так как вносит дополнительную переменную конфигурации,
    которая должна изменяться, когда производится перемещение кода в
    другой каталог.
<!--
		This step won't be necessary in most cases and is strongly discouraged as it introduces another configuration variable
		which would have to be altered when one moves code to another directory configuration.
-->
	</note>

</sect1>

<sect1 id="zend.controller.rewriterouter.default-routes">
	<title>Маршрут по умолчанию</title>

	<para>
	  <code>Zend_Controller_RewriteRouter</code> предварительно сконфигурирован
	  с двумя маршрутами по умолчанию. Первый управляет вашим корневым URL
	  и соответствует действию <code>indexAction</code> в контроллере
    <code>IndexController</code>, так что вы можете подготавливать их, как описано
    в <xref linkend="zend.controller.getting-started" />
    (см. <xref linkend="zend.controller.overview.indexcontroller" />).
    Второй маршрут по умолчанию включен для того, чтовы обеспечить совместимость
    с первой версией маршрутизатора. Он будет соответствовать URI в виде
    <code>'controller/action'</code>.
<!--
		Zend_Controller_RewriteRouter is preconfigured with two default routes. The first handles  your root URL and is
		mapped to indexAction of IndexController: so you have to provide them as outlined in the
		<xref linkend="zend.controller.getting-started" />
		(see <xref linkend="zend.controller.overview.indexcontroller" />).
		The second default route is included to provide compatibility with the first version of the router. It will match URIs in
		the shape of <code>'controller/action'</code>.
-->
	</para>

	<para>
	  Правила по умолчанию сконфигурированны как:
<!--
		Default rules are configured as:
-->
	</para>

	<programlisting role="php"><![CDATA[
// Маршрут по умолчанию для корневого URL
$this->addRoute('default', '', array('controller' => 'index', 'action' => 'index'));

// Маршрут для совместимости с первой версией маршрутизатора
$this->addRoute('compat', ':controller/:action', array('controller' => 'index', 'action' => 'index'));]]></programlisting>

	<note>
	  Несмотря на то, что <code>Zend_Controller_RewriteRouter</code> сконфигурирован
	  для обратной совместимости, он еще не соответствует URI вида
	  <code>controller/action</code> с дополнительными параметрами.
<!--
		Though Zend_Controller_RewriteRouter is configured for backwards compatibility it will not match
		<code>controller/action</code> URIs with additional parameters just yet.
-->
	</note>

</sect1>
