<sect1 id="zend.filter.input">

    <title>Zend_Filter_Input</title>

    <sect2 id="zend.filter.input.introduction">

        <title>Введение</title>

        <para>
            <literal>Zend_Filter_Input</literal> предоставляет средства,
            способствующие сруктурированному подходу к фильтрации
            входных данных. Он преслеует несколько целей, поскольку должен удовлетворять потребности трех различных групп людей:
<!--
            <literal>Zend_Filter_Input</literal> provides facilities to promote a structured approach to input
            data filtering. It serves multiple purposes because it caters to the needs of three different
            groups of people:
-->
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Разработчики
<!--
                    Developers
-->
                </para>
                <para>
                    Хотя фильтрация входных данных всегда требует некоторых
                    усилий, разработчикам нужна уверенность в
                    целостности их данных без добавления лишней сложности в их
                    код.
<!--
                    Although filtering input can never be as easy as doing nothing, developers need to ensure
                    the integrity of their data without adding unnecessary complexity to their code.
-->
                </para>
            </listitem>
            <listitem>
                <para>
                    Менеджеры
<!--
                    Managers
-->
                </para>
                <para>
                    Менеджеры всех типов, которым необходим постоянный контроль
                    за большой группой разрабочиков, могут принудить
                    разработчиков к системному подходу к фильтрации входных
                    данных посредством ограничения или исключения доступа к
                    необработанным входным данным.
<!--
                    Managers of all types who need to maintain control over a large group of developers can
                    enforce a structured approach to input filtering by restricting or eliminating access to
                    raw input.
-->
                </para>
            </listitem>
            <listitem>
                <para>
                    Аудиторы
<!--
                    Auditors
-->
                </para>
                <para>
                    Тем, кто проверяет код приложения, нужно быстрое и
                    достоверное определение того, где и когда разрабочик
                    использует необработанные входные данные. Свойства, которые
                    способствуют ясности кода, также оказывают помощь аудиторам тем, что обеспечивают четкую различимость разных подходов к
                    фильтрации входных данных.
<!--
                    Those who audit an application's code need to quickly and reliably identify when and
                    where raw input is used by a developer. The characteristics that promote code clarity
                    also aid auditors by providing a clear distinction among the different approaches to
                    input filtering.
-->
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Есть множество подходов к фильтрации входных данных и средств,
            применяемых разработчиками PHP. Фильтрация по "белому списку",
            по "черному списку", регулярные выражения, условные операторы, встроенные функции PHP - только несколько примеров из всего
            разнообразия подходов к фильтрации входных данных.
<!--
            There are a variety of approaches to input filtering, and there are also a variety of methods
            that PHP developers can use. Whitelist filtering, blacklist filtering, regular expressions,
            conditional statements, and native PHP functions are just a few examples of the input filtering
            potpourri.
-->
        </para>

    </sect2>

    <sect2 id="zend.filter.input.theory_of_operation">

        <title>Теория<!--Theory of Operation--></title>

        <para>
            Для того, чтобы обеспечить структурный подход к фильтрации входных
            данных, <literal>Zend_Filter_Input</literal> пытается усилить контроль за доступом к входным данным поредством установки ссылки на массив исходных данных в <code>null</code>.
<!--
            In order to provide a structured approach to input filtering, by default,
            <literal>Zend_Filter_Input</literal> attempts to enforce controlled access to input by setting the
            reference to the source data array to <code>null</code>.
-->
        </para>

        <para>
            В подходе, принятом по умолчанию, (строгом) конструктору передается
            единственный аргумент - массив данных для фильтрации.
            Нефильтрованные данные могут быть получены только через метод <code>getRaw()</code>.
<!--
            In the default (strict) approach, a single argument is passed to the constructor - an array of data to filter. Unfiltered data may only be accessed through the <code>getRaw()</code> method:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// Фильтрация массива данных $_POST
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST);

// $_POST теперь равен null
echo null === $_POST ? 'yes' : 'no'; // prints 'yes'

// Получение необработанного значения e-mail
echo $filterPost->getRaw('email'); // prints 'webmaster@example.com']]></programlisting>

        <para>
            <literal>Zend_Filter_Input</literal> устанавливает переданный массив
            (<literal>$_POST</literal>) в <literal>null</literal>, поэтому
            прямой доступ будет невозможным. (Необработанные данные будут
            доступны только через метод <literal>getRaw()</literal>, через
            который легче контролировать доступ к необработанным данным и/или
            полностью исключить его).
<!--
            <literal>Zend_Filter_Input</literal> sets the array that is passed (<literal>$_POST</literal>) to
            <literal>null</literal>, so direct access is no longer possible. (The raw data are only available
            through the <literal>getRaw()</literal> method, which is much easier to monitor and/or avoid
            altogether.)
-->
        </para>

        <para>
            В опциональном (нестрогом) подходе конструктору в качестве второго
            аргумента передается <literal>false</literal>.
<!--
            In the optional (non-strict) approach, <literal>false</literal> is passed as the second argument
            to the constructor:
-->
        </para>

        <programlisting role="php"><![CDATA[<?php
// $_POST['email'] === 'webmaster@example.com'

// Фильтрация массива данных $_POST
require_once 'Zend/Filter/Input.php';
$filterPost = new Zend_Filter_Input($_POST, false);

// $_POST не равен null
echo null === $_POST ? 'yes' : 'no'; // выводит 'no'

// Получение необработанного значение e-mail
echo $filterPost->getRaw('email'); // prints 'webmaster@example.com']]></programlisting>

        <para>
            Использование фильтра будет в точности таким же, как в случае
            строгого подхода, но <literal>Zend_Filter_Input</literal> не
            устанавливает исходный массив (<literal>$_POST</literal>) в
            <literal>null</literal>, и таким образом, разработчики смогут
            по-прежнему обращаться к нему напрямую. Этот подход не
            рекомендуется, вместо него рекомендуется использовать строгий
            подход.
<!--
            The use of the filter is exactly the same, but <literal>Zend_Filter_Input</literal> does not set
            the original array (<literal>$_POST</literal>) to <literal>null</literal>, so developers can
            still access it directly. This approach is discouraged in favor of the strict approach.
-->
        </para>

        <para>
            <literal>Zend_Filter_Input</literal> спроектирован для использования
            массивов данных. Многие источники входных данных уже охвачены
            суперглобальными массивами PHP (<literal>$_GET</literal>,
            <literal>$_POST</literal>, <literal>$_COOKIE</literal> и т.д.),
            массивы являются конструкцией, наиболее часто используемой для
            хранения входных данных из других источников. Если вам нужно
            фильтровать скалярные значения, см. <xref linkend="zend.filter" />.
<!--
            <literal>Zend_Filter_Input</literal> is designed primarily with arrays in mind. Many sources of
            input are already covered by PHP's superglobal arrays (<literal>$_GET</literal>,
            <literal>$_POST</literal>, <literal>$_COOKIE</literal>, etc.), and arrays are a common construct
            used to store input from other sources. If you need to filter a scalar, see
            <xref linkend="zend.filter" />.
-->
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->