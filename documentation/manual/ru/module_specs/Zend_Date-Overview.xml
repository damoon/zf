<sect1 id="zend.date.overview">

    <title>Zend_Date API Overview</title>

    <para>
        While the <code>Zend_Date</code> API remains simplistic and unitary, its design remains flexible and powerful
        through the rich permutations of operations and operands.
    </para>

    <sect2 id="zend.date.values">

        <title>Working with Date Values</title>

        <para>
            Once input has been normalized via the creation of a <code>Zend_Date</code> object, it will have an
            associated timezone, but an internal representation using standard
            <ulink url="http://en.wikipedia.org/wiki/Unix_Time">UNIX timestamps</ulink>
            . In order for a date to be rendered in a localized manner, a timezone must be known first. The default
            timezone is always GMT/UTC. To examine an object's timezone use <code>getTimeZone())</code>. To change an
            object's timezone, use <code>setTimeZone())</code>. All manipulations of these objects are assumed to be
            relative to this timezone.
        </para>

        <para>
            Beware of mixing and matching operations with date parts between date objects for different timezones, which
            generally produce undesireable results, unless the manipulations are only related to the timestamp.
            Operating on <code>Zend_Date</code> objects having different timezones generally works, except as just
            noted, since dates are normalized to UNIX timestamps on instantiation of <code>Zend_Date</code>.
        </para>

        <para>
            Most methods expect a constant selecting the desired <code>$part</code> of a date, such as
            <code>Zend_Date::HOUR</code>. These constants are valid for all of the functions below. A list of all
            available constants is provided in
            <xref linkend="zend.date.constants.list" />
            . If no <code>$part</code> is specified, then <code>Zend_Date::TIMESTAMP</code> is assumed.
        </para>

        <para>
            If the optional <code>$locale</code> parameter is provided, then the <code>$locale</code> disambiguates the
            <code>$date</code> operand by replacing month and weekday names for string <code>$date</code> operands, and
            even parsing date strings expressed according to the conventions of that locale (see
            <link linkend="zend.locale.date.normalize">Zend_Locale_Format::getDate()</link>
            ). The automatic normalization of localized <code>$date</code> operands of a string type occurs when
            <code>$part</code> is one of the <code>Zend_Date::DATE*</code> or <code>Zend_Date::TIME*</code> constants.
            The locale identifies which language should be used to parse month names and weekday names, if the
            <code>$date</code> is a string containing a date. If there is no <code>$date</code> input parameter, then
            the <code>$locale</code> parameter specifies the locale to use for localizing output (e.g. the date format
            for a string representation). Note that the <code>$date</code> input parameter might actually have a type
            name instead (e.g. <code>$hour</code> for <code>addHour()</code>), although that does not prevent the use of
            <code>Zend_Date</code> objects as arguments for that parameter. If no <code>$locale</code> was specified,
            then the locale of the current object is used to interpret <code>$date</code>, or select the localized
            format for output.
        </para>

    </sect2>

    <sect2 id="id.date.basic">

        <title>Basic <code>Zend_Date</code> Operations Common to Many Date Parts</title>

        <para>
            The methods <code>add(), sub(), compare(), get(), and set()</code> operate generically on dates. In each
            case, the operation is performed on the date held in the instance object. The <code>$date</code> operand is
            required for all of these methods, except <code>get()</code>, and may be a <code>Zend_Date</code> instance
            object, a numeric string, or an integer. These methods assume <code>$date</code> is a timestamp, if it is
            not an object. However, the <code>$part</code> operand controls which logical part of the two dates are
            operated on, allowing operations on parts of the object's date, such as year or minute, even when
            <code>$date</code> contains a long form date string, such as, "December 31, 2007 23:59:59". The result of
            the operation changes the date in the object, except for <code>compare()</code>, and <code>get()</code>.
        </para>

        <example>
            <title>Operating on Parts of Dates</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date(); // $date's timestamp === time()

// changes $date by adding 12 hours
$date->add('12', Zend_Date::HOUR);
print $date;
?>]]></programlisting>
        </example>

        <para>
            Convenience methods exist for each combination of the basic operations and several common date parts as
            shown in the tables below. These convenience methods help us lazy programmers avoid having to type out the
            <link linkend="zend.date.constants.list">date part constants</link>
            when using the general methods above. Conveniently, they are named by combining a prefix (name of a basic
            operation) with a suffix (type of date part), such as <code>addYear()</code>. In the list below, all
            combinations of "Date Parts" and "Basic Operations" exist. For example, the operation "add" exists for each
            of these date parts, including <code>addDay()</code>, <code>addYear()</code>, etc.
        </para>

        <para>
            These convenience methods have the same equivalent functionality as the basic operation methods, but expect
            string and integer <code>$date</code> operands containing only the values representing the type indicated by
            the suffix of the convenience method. Thus, the names of these methods (e.g. "Year" or "Minute") identify
            the units of the <code>$date</code> operand, when <code>$date</code> is a string or integer.
        </para>

        <table>
            <title>Date Parts</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Date Part</entry>
                        <entry>Explanation</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Timestamp</entry>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/Unix_Time">UNIX timestamp</ulink>
                        </entry>
                    </row>
                    <row>
                        <entry>Year</entry>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian calendar</ulink> year</entry>
                    </row>
                    <row>
                        <entry>Month</entry>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/Month#Julian_and_Gregorian_calendars">Gregorian calendar month (1-12, localized names supported)</ulink>
                        </entry>
                    </row>
                    <row>
                        <entry>Hour</entry>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/24-hour_clock">24 hour clock</ulink> (0-23)</entry>
                    </row>
                    <row>
                        <entry>Minute</entry>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/Minute">minute</ulink> of the hour (0-59)</entry>
                    </row>
                    <row>
                        <entry>Second</entry>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/Second">second</ulink> usually used to denote the elapsed seconds, since the start of the minute (0-59)</entry>
                    </row>
                    <row>
                        <entry>
                            <ulink url="http://en.wikipedia.org/wiki/Millisecond">millisecond</ulink>
                        </entry>
                        <entry>thousands of a second (0-999)
            <code>Zend_Date</code> supports two additional methods for working with time units smaller than seconds. By
            default, <code>Zend_Date</code> instances precision defaults to track milliseconds, as seen using <code>getFractionalPrecision()</code>. To
            change the precision use <code>setFractionalPrecision($precision)</code>.
                        </entry>
                    </row>
                    <row>
                        <entry>Day</entry>
                        <entry>Zend_Date::DAY_SHORT is extracted from <code>$date</code> if the <code>$date</code> operand is an instance of <code>Zend_Date</code> or a numeric string.  Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW, Zend_Date::WEEKDAY_NAME, Zend_Date::WEEKDAY_SHORT, Zend_Date::WEEKDAY</entry>
                    </row>
                    <row>
                        <entry>Week</entry>
                        <entry>Zend_Date::WEEK is extracted from <code>$date</code> if the <code>$date</code> operand is an instance of <code>Zend_Date</code> or a numeric string. Otherwise an exception is raised.</entry>
                    </row>
                    <row>
                        <entry>Date</entry>
                        <entry>Zend_Date::DAY_MEDIUM is extracted from <code>$date</code> if the <code>$date</code> operand is an instance of <code>Zend_Date</code>.  Otherwise, an attempt is made to normalize the <code>$date</code> string into a Zend_Date::DATE_MEDIUM formatted date.</entry>
                    </row>
                    <row>
                        <entry>Weekday</entry>
                        <entry>Zend_Date::WEEKDAY_DIGIT is extracted from <code>$date</code> if the <code>$date</code> operand is an instance of <code>Zend_Date</code> or a numeric string.  Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW, Zend_Date::WEEKDAY_NAME, Zend_Date::WEEKDAY_SHORT, Zend_Date::WEEKDAY</entry>
                    </row>
                    <row>
                        <entry>DayOfYear</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Arpa</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Iso</entry>
                        <entry></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            These basic operations can be used instead of the convenience operations for specific date parts, if the
            appropriate constant is used for the <code>$part</code> parameter.
        </para>

        <table>
            <title>Basic Operations</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Basic Operation</entry>
                        <entry>Explanation</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>get()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">get($part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                returns the <code>$part</code> of object's date localized to <code>$locale</code> as a
                                formatted string or integer
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>set()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">set($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                sets the <code>$part</code> of the current object to the corresponding value for that
                                part found in the input <code>$date</code> having a locale <code>$locale</code>
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>add()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">add($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                adds the <code>$part</code> of <code>$date</code> having a locale <code>$locale</code>
                                to t the current object's date
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>sub()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">sub($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                subtracts the <code>$part</code> of <code>$date</code> having a locale
                                <code>$locale</code> to t the current object's date
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>copyPart()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">copyPart($part, $locale = null)</emphasis>
                            </para>
                            <para>
                                returns a cloned object, with only <code>$part</code> of the object's date copied to the
                                clone, with the clone have its locale arbitrarily set to <code>$locale</code> (if
                                specified)
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>compare()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">compare($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                compares <code>$part</code> of <code>$date</code> to this object's timestamp, returning
                                0 if they are equal, 1 if this object's part was more recent than $date's part,
                                otherwise -1.
                            </para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

    </sect2>

    <sect2 id="zend.date.overview.others">

        <title>Miscellaneous Methods</title>

        <para>
            The following basic operations do not have corresponding convenience methods for the data parts listed
            above:
        </para>

        <table>
            <title>Miscellaneous Methods</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Method</entry>
                        <entry>Explanation</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>equals()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">equals($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                returns true, if <code>$part</code> of <code>$date</code> having locale
                                <code>$locale</code> is the same as this object's date <code>$part</code>, otherwise
                                false
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>isEarlier()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">isEarlier($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                returns true, if <code>$part</code> of this object's date is earlier than
                                <code>$part</code> of <code>$date</code> having a locale <code>$locale</code>
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>isLater()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">isLater($date, $part = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                returns true, if <code>$part</code> of this object's date is later than
                                <code>$part</code> of <code>$date</code> having a locale <code>$locale</code>
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>isToday()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">isToday()</emphasis>
                            </para>
                            <para>
                                Tests if today's year, month, and day match this object's date value, using this
                                object's timezone.
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>isTomorrow()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">isTomorrow()</emphasis>
                            </para>
                            <para>
                                Tests if tomorrow's year, month, and day match this object's date value, using this
                                object's timezone.
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>isYesterday()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">isYesterday()</emphasis>
                            </para>
                            <para>
                                Tests if yesterday's year, month, and day match this object's date value, using this
                                object's timezone.
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>toString()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">toString($format = null, $locale = null)</emphasis>
                            </para>
                            <para>
                                Invoked directly or via the magic method <code>__toString()</code>. Returns this
                                object's date value formatted according to <code>$locale</code> (defaults to this
                                object's locale).
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>toValue()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">toValue($part = null)</emphasis>
                            </para>
                            <para>
                                Converts a date to a digit
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>now()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">now($locale = null)</emphasis>
                            </para>
                            <para>
                                This convenience function is equivalent to <code>new Zend_Date()</code>. It returns the
                                current date as a <code>Zend_Date</code> object, having <code>$locale</code>
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>isLeapYear()</entry>
                        <entry>
                            <para>
                                <emphasis role="strong">now($locale = null)</emphasis>
                            </para>
                            <para>
                                Use <code>isLeapYear()</code> to determine if the current object is a leap year, or use
                                Zend_Date::checkLeapYear($year) to check $year, which can be a string, integer, or
                                instance of <code>Zend_Date</code>. Is the year a leap year?
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="zend.date.other.sun.rise">getSunRise()</link>
                        </entry>
                        <entry>Return the date's time of sunrise</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="zend.date.other.sun.set">getSunSet()</link>
                        </entry>
                        <entry>Return the date's time of sunset</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="zend.date.other.sun.info">getSunInfo()</link>
                        </entry>
                        <entry>Return an array with the date's sun dates</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="zend.date.time.millisecond.getfrac">getFractionalPrecision()</link>
                        </entry>
                        <entry>Return the precision of the part seconds</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="zend.date.time.millisecond.setfrac">setFractionalPrecision()</link>
                        </entry>
                        <entry>Set the precision of the part seconds</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
