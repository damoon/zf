<sect1 id="zend.search.searching">
	<title>Поиск по индексу<!--Searching an Index--></title>

	<sect2 id="zend.search.searching.query-parser">
		<title>Построение запросов<!--Building Queries--></title>

        <para>
            Производить поиск по индексу можно двумя способами. Первый способ
            использует парсер запросов для построения запросов из строки.
            Второй способ дает возможность создавать свои запросы
            через программный интерфейс Zend_Search_Lucene.
<!--
            There are two ways to search the index. The first method uses
            Query Parser to construct query from a string. The second provides
            the ability to create your own queries through the Zend_Search_Lucene API.
-->
        </para>

        <para>
        Перед тем, как выбрать использование парсера запросов,
        пожалуйста, учтите следующее:
<!--
        Before choosing to use the provided Query Parser, please consider
        the following:
-->

            <orderedlist>
                <listitem>
                    <para>
                        Если вы программно генерируете  строку запроса и затем парсите
                        ее с помощью парсера запросов, то вам следует серьезно подумать
                        о построении запросов непосредственно через программный интерфейс.
                        Другими словами, парсер запросов предназначен для текста, вводимого
                        пользователем, а не генерируемого программным способом. 
<!--
                        If you are programmatically generating a query string and then parsing
                        it with the query parser then you should seriously consider building
                        your queries directly with the query API. In other words, the query
                        parser is designed for human-entered text, not for program-generated text.
-->
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Не разбитые на лексемы поля лучше добавлять непосредственно
                        в запросы, а не через парсер запросов. Если значения полей программно
                        генерируются приложением, то должны быть отдельные элементы
                        запроса для этого поля. Анализатор, используемый
                        парсером запросов, предназначен для преобразования
                        введенного пользователем текста в элементы запроса.
                        Программно генерируемые значения, такие, как даты, ключевые слова
                        и т.д., должны генерироваться единообразно.                    
<!--
                        Untokenized fields are best added directly to queries, and not through
                        the query parser. If a field's values are generated programmatically
                        by the application, then so should query clauses for this field.
                        An analyzer, which the query parser uses, is designed to convert
                        human-entered text to terms. Program-generated values, like dates,
                        keywords, etc., should be consistently program-generated.
-->
                    </para>
                </listitem>
                <listitem>
                    <para>
                        В форме запроса поля с основным текстом должны использовать
                        парсер запросов. Все остальные, такие, как периоды времени,
                        ключевые слова и т.д, лучше добавлять непосредственно
                        через программный интерфейс для запросов. Поля с ограниченным
                        набором значений, которые могут отображаться в виде выпадающего
                        списка, лучше не добавлять в строку запроса, которая
                        парсится, а как элемент запроса.
<!--
                        In a query form, fields which are general text should use the query parser.
                        All others, such as date ranges, keywords, etc. are better added directly
                        through the query API. A field with a limit set of values, that can be
                        specified with a pull-down menu should not be added to a query string
                        which is subsequently parsed, but rather added as a TermQuery clause.
-->
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Булевы запросы позволяют объединять несколько запросов в
                        один. Таким образом, это является наилучшим путем
                        добавления дополнительных критериев пользовательского
                        поиска, определяемых строкой запроса. 
<!--
                        Boolean queries allow to mix several other queries into new one.
                        Thus it's the best way to add some additional criteria to user search, defined by
                        a query string.
-->
                    </para>
                </listitem>
            </orderedlist>

        </para>

        <para>
            Оба способа используют один и тот же метод программного интерфейса
            для поиска в индексе:
<!--
            Both ways use the same API method to search through the index:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$index->find($query);

?>]]>   </programlisting>

        <para>
            Метод <code>Zend_Search_Lucene::find()</code> автоматически определяет
            тип ввода и использует парсер запросов для построения соответствующего
            объекта Zend_Search_Lucene_Search_Query.
<!--
            The <code>Zend_Search_Lucene::find()</code> method determines input type automatically and
            uses query parser to construct appropriate Zend_Search_Lucene_Search_Query object
            from a string.
-->
        </para>

        <para>
            Важно отметить, что парсер запросов использует стандартный
            анализатор для разбиения на лексемы отдельных частей строки запроса.
            Таким образом, все преобразования, проделываемые с индексируемым
            текстом, также проделываются и с частями строки запроса.
<!--
            It is important to note that query parser uses standard analyzer to tokenize separate parts of query string.
            Thus all transformations, whech are done on indexed text are also done on query string entries.
-->            
        </para>
        <para>
            Это могут быть приведение к нижнему регистру для того, чтобы сделать
            поиск нечувствительным к регистру, удаление запрещенных слов
            и т.д.
<!--
            It may be transforming to lower case to make search case-insensitive, removing stop-words, stamming and
            mauch more other things.
-->
        </para>
        <para>
            В противоположность парсеру запросов, методы API не преобразовывают
            или фильтруют входные элементы. Таким образом, API является более
            подходящим для сгенерированных компьютером или не разбитых на
            лексемы полей.
<!--
            As opposed to it, API method doesn't transform or filter input terms. Thus it's more suitable for
            computer generated or untokenized fields.
-->
        </para>
	  </sect2>
	
    <sect2 id="zend.search.searching.sorting">
        <title>Сортировка результатов поиска<!--Search Result Sorting--></title>
        <para>
            Результаты поиска по умолчанию сортируются по рангу. Вы можете
            изменить это поведение посредством установки поля (полей) для
            сортировки, типа сортировки и порядка соритровки.
              
<!--
            Search result is sorted by score by default. You change this by setting a sort field (or fields), sort type
            and sort order parameters.
-->
        </para>

        <para>
            Метод <code>$index->find()</code> может принимать несколько
            необязательных параметров: 
<!--
            <code>$index->find()</code> call may take several optional parameters:
-->
            <programlisting role="php"><![CDATA[
$index->find($query [, $sortField [, $sortType [, $sortOrder]]] [, $sortField2 [, $sortType [, $sortOrder]]] ...);
]]></programlisting>
        </para>

        <para>
            <code>$sortField</code> - имя сохраненного в индексе поля
            для сортировки результатов.
<!--
            <code>$sortField</code> is a name of stored field to sort result.
-->
        </para>

        <para>
            <code>$sortType</code> может быть пропущено или принимать значения
            <code>SORT_REGULAR</code> (сравнивает элементы списка как обычно,
            значение по умолчанию), <code>SORT_NUMERIC</code> (сравнивает
            элементы списка как числа), <code>SORT_STRING</code> (сравнивает
            элементы списка как строки).
<!--
            <code>$sortType</code> may be omitted or take values
            <code>SORT_REGULAR</code> (compare items normally, default value),
            <code>SORT_NUMERIC</code> (compare items numerically),
            <code>SORT_STRING</code> (compare items as strings).
-->
        </para>

        <para>
            <code>$sortOrder</code> может быть пропущен или принимать значения
            <code>SORT_ASC</code> (сортировка в возрастающем порядке, значение
            по умолчанию), <code>SORT_DESC</code> (сортировка в убывающем
            порядке).
<!--
            <code>$sortOrder</code> may be omitted or take values
            <code>SORT_ASC</code> (sort in ascending order, default value),
            <code>SORT_DESC</code> (sort in descending order).
-->
        </para>

        <para>
            Примеры:
            <programlisting role="php"><![CDATA[
$index->find($query, 'quantity', SORT_NUMERIC, SORT_DESC);
]]></programlisting>
            <programlisting role="php"><![CDATA[
$index->find($query, 'fname', SORT_STRING, 'lname', SORT_STRING);
]]></programlisting>
            <programlisting role="php"><![CDATA[
$index->find($query, 'name', SORT_STRING, 'quantity', SORT_NUMERIC, SORT_DESC);
]]></programlisting>
        </para>

        <para>
            Пожалуйста, будьте внимательны, когда используете порядок
            сортировки, отличный от принятого по умолчанию. Для него нужно
            полное извлечение документов из индекса, что может значительно
            снизить скорость поиска.
<!--
            Please be careful when using non-default search order.
            It needs to completely retrive documents from the index and may drammatically slow down search performance.
-->
        </para>
    </sect2>


	<sect2 id="zend.search.searching.results">
		<title>Результаты поиска<!--Search Results--></title>
        <para>
            Результаты поиска являются массивом объектов Zend_Search_Lucene_Search_QueryHit.
            Каждый из них имеет два свойства: <code>$hit->document</code>
            является номером документа в индексе, и <code>$hit->score</code>,
            который является рангом результата поиска. Результаты
            упорядочены по рангу (результаты с наивысшим рангом идут первыми). 
<!--
            The search result is an array of Zend_Search_Lucene_Search_QueryHit objects.  Each of these has
            two properties: <code>$hit->document</code> is a document number within
            the index and <code>$hit->score</code> is a score of the hit in
            a search result. Result is ordered by score (top scores come first).
-->
        </para>

        <para>
            Объект Zend_Search_Lucene_Search_QueryHit также предоставляет
            все поля Zend_Search_Lucene_Document, представляюшего собой найденный
            документ. Например, соответствующий документ имеет два поля:
            title (название) и author (автор).
<!--
            The Zend_Search_Lucene_Search_QueryHit object also exposes each field of the Zend_Search_Lucene_Document found by
            the hit as a property of the hit.  In this example, a hit is returned and
            the corresponding document has two fields: title and author.
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$hits = $index->find($query);

foreach ($hits as $hit) {
    echo $hit->id;
    echo $hit->score;

    echo $hit->title;
    echo $hit->author;
}

?>]]></programlisting>

        <para>
        При необходимости исходный объект Zend_Search_Lucene_Document (документ)
        может быть получен из Zend_Search_Lucene_Search_QueryHit.
        Вы можете извлечь сохраненные в индексе части документа, используя метод
        getDocument() объекта индекса, и затем получить их через метод
        getFieldValue().
<!--
        Optionally, the original Zend_Search_Lucene_Document object can be returned from the
        Zend_Search_Lucene_Search_QueryHit.

        You can retrieve stored parts of the document by using the <code>getDocument()</code>
        method of the index object and then get them by
        <code>getFieldValue()</code> method:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$hits = $index->find($query);
foreach ($hits as $hit) {
    // возвращает объект для этого "хита"
    echo $document = $hit->getDocument();

    // возвращает объект Zend_Search_Lucene_Field
    // из Zend_Search_Lucene_Document
    echo $document->getField('title');

    // возвращает строковое значение объекта Zend_Search_Lucene_Field
    echo $document->getFieldValue('title');

    // делает то же самое, что и getFieldValue()
    echo $document->title;
}

?>]]>   </programlisting>

        <para>
        Поля, доступные через объект Zend_Search_Lucene_Document, определяются во время
        индексирования. Поля документа либо только индексируются, либо индексируются и
        сохраняются в индексе индесирующим приложением (например, LuceneIndexCreation.jar).
<!--
        The fields available from the Zend_Search_Lucene_Document object are determined at
        the time of indexing.  The document fields are either indexed, or
        index and stored, in the document by the indexing application
        (e.g. LuceneIndexCreation.jar).
-->
        </para>

        <para>
        Обратите внимание, что идентификатор документа (в нашем примере — 'path')
        также сохраняется в индексе и должен извлекаться из него.
<!--
        Pay attention, that document identity ('path' in our example) is also stored
        in the index and must be retrieved from them.
-->
        </para>

	</sect2>


	<sect2 id="zend.search.searching.results-scoring">
		<title>Ранжирование результата<!--Results Scoring--></title>
        <para>
            Zend_Search_Lucene использует тот же самый алгоритм ранжирования,
            что и Java Lucene. Результаты поиска упорядочиваются по рангу
            (релевантности). "Хиты" с наибольшим рангом идут первыми.
<!--
            Zend_Search_Lucene uses the same scoring algorithms as Java Lucene.
            Saerch results are ordered by score. Hits with greater score come first.
-->
        </para>

        <para>
            Различные ранги результатов означают, что один документ больше
            соответствует запросу, чем другой.
<!--
            Different score means, that one document matches the query more then another.
-->
        </para>

        <para>
            Приблизительно говоря, документы, в которых искомый элемент или фраза
            встречаются чаще, будут иметь более высокий ранг.
<!--
            Roughly speaking, search hits, which contain searched term or phrase more frequently, have greater score.
-->
        </para>

        <para>
            Число, соответствующее рангу, может быть получено через
            свойство <code>score</code>: 
<!--
            Score can be retrived by <code>score</code> property of hit:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$hits = $index->find($query);

foreach ($hits as $hit) {
    echo $hit->id;
    echo $hit->score;
}

?>]]>   </programlisting>

        <para>
            Для вычисления ранга используется класс Zend_Search_Lucene_Search_Similarity.
            За подробностями см. раздел
            <link linkend="zend.search.extending.scoring">Расширяемость. Алгоритмы ранжирования</link>. 
<!--
            Zend_Search_Lucene_Search_Similarity class is used to calculate score.
            See <link linkend="zend.search.extending.scoring">Extensibility. Scoring Algorithms</link> section for details.
-->
        </para>

	</sect2>

</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
