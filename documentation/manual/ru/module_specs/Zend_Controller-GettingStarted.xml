<sect1 id="zend.controller.getting-started">
    <title>Начало работы</title>

    <sect2 id="zend.controller.getting-started.introduction">
        <title>Введение</title>
        <para>
            Система <code>Zend_Controller</code> построена с расчетом на
            расширение посредством создания подклассов от существующих классов
            или написания новых классов, реализующих различные
            интерфейсы и абстрактные классы, которые представляют собой основу
            семейства классов контроллера.
<!--
            The <code>Zend_Controller</code> system was built with extensibility
            in mind, either by subclassing the existing classes or writing new
            classes that implement the various interfaces and abstract classes
            that form the foundation of the controller family of classes.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.server-configuration">
        <title>Конфигурация сервера</title>
        <para>
            <code>Zend_Controller</code> создан для поддержки современных
            веб-сайтов с "чистыми" URI (с небольшим количеством или полным
            отсутствием параметров запроса). Предлагаемая конфигурация требует
            поддержки со стороны веб-сервера в виде перезаписи URI (URI rewriting)
            для перенаправления всех запросов одному файлу, называемому здесь
            "<code>index.php</code>", который будет просто загружать
            <code>Zend_Controller_Front</code>. На веб-сервере Apache это
            осуществляется дополнительным модулем, называемом mod_rewrite.
<!--
            Zend_Controller is built to support modern websites with clean URIs
            (few or no query parameters).  As such, the suggested configuration
            requires support from the webserver in the form of URI rewriting to
            redirect all requests to a single file, here called "index.php",
            which will simply bootstrap <code>Zend_Controller_Front</code>.  On
            Apache webservers, this is handled by an optional module called
            mod_rewrite.
-->
        </para>

        <para>
            Первым шагом в конфигурировании сервера должна быть успешная
            установка и активация модуля mod_rewrite. Следующим шагом является
            размещение в корневом каталоге сайта двух файлов: <code>.htaccess</code>
            и <code>index.php</code>. Файл <code>.htaccess</code> используется
            веб-сервером Apache и должен содержать правила mod_rewrite для
            перенаправления всех запросов к <code>index.php</code>. Для целей
            разработки часто самым простым решением будет написать такие правила
            mod_rewrite, которые будут перенаправлять все запросы к
            <code>index.php</code>, за исключением
            определенных расширений файлов. Ниже пример такого файла:
<!--
            The first step in configuring the server is to sucessfully install
            and enable mod_rewrite.  The next step is to put two files in the
            document root: .htaccess and index.php.  The .htaccess file is used
            by Apache and must contain a mod_rewrite rule to redirect all
            requests to index.php.  For development purposes, it is often
            simplest to write a mod_rewrite rule that will redirect all requests
            to index.php except for certain file extensions.  Here is an example
            of such a file:
-->
         </para>
        <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php
]]></programlisting>
         <para>
            В приведенном выше примере все запросы, не содержащие ни одного
            из указанных расширений, будут переданы <code>index.php</code>. Это
            полезно для разработки, но в производственной версии правила
            пререзаписи должны быть составлены таким образом, чтобы исключать
            директории.
<!--
            In the example above, all requests not containing one of the above
            file extensions will be passed to index.php.  This is useful for
            development, however in production the rewrite rules should be
            written to exclude directories instead.
-->
        </para>

        <note>
            <title>Местонахождение файла загрузки<!--Location of the bootstrap file-->
            </title>
            <para>
                Файл загрузки должен быть единственным PHP-файлом, хранящимся в
                корневом каталоге сайта.
<!--
                The bootstrap file should be the only PHP file stored in the document root.
-->
            </para>
        </note>

        <para>
            Основной набор функциональных возможностей Zend_Controller также
            поддерживает URL-ы вида
            <code>index.php?controller=foo&amp;action=bar</code>,
            использующие параметры запроса. Кроме того, другой shipped
            маршрутизатор, <code>Zend_Controller_RewriteRouter</code>,
            может работать в различных окружениях, включая те, в которых
            отсутствует возможность перезаписи запросов.
            Вы можете использовать Zend_Controller в своем сайте даже если 
            не можете использовать mod_rewrite или его аналог.
<!--
            That said, the basic functionality of Zend_Controller also supports
            URLs using query parameters - as an example,
            <code>index.php?controller=foo&amp;action=bar</code>. Additionally,
            another shipped router, <code>Zend_Controller_RewriteRouter</code>,
            works in a variety of environments, including many without
            mod_rewrite-like capabilities. If you cannot use mod_rewrite or an
            equivalent, you'll still be able to use Zend_Controller for your
            site.
-->
        </para>

    </sect2>

    <sect2 id="zend.controller.getting-started.bootstrap">
        <title>Файл загрузки</title>

        <para>
            После настройки файла <code>.htaccess</code>, создайте новый файл
            с именем <code>index.php</code>. Это файл загрузки.
            Назначением файла является только загрузка <code>Zend_Controller_Front</code>,
            который в идеале должен быть расположен вне корневого каталога сайта.
<!--
            After setting up the .htaccess file, create a new file called
            <code>index.php</code>.  This is a bootstrap file.  The purpose of
            the index.php file is only to bootstrap Zend_Controller_Front, which
            should ideally be located outside of the document root.
-->
        </para>

        <note>
            <title>Местонахождение файла загрузки<!--Location of the bootstrap file-->
            </title>
            <para>
                Файл загрузки должен быть единственным PHP-файлом, хранящимся в
                корневом каталоге сайта.
<!--
                The bootstrap file should be the only PHP file stored in the document root.
-->
            </para>
        </note>

        <para>
            Из соображений безопасности Zend крайне не рекомендует хранить
            какие-либо файлы PHP в каталогах, которые доступны через веб-сервер
            (те, что находятся в корневом каталоге сайта). Несмотря на то, что это
            возможно не во всех ситуациях (таких, как разделяемый хостинг),
            это должно считаться наилучшей практикой и по возможности соблюдаться.
<!--
            For security purposes, Zend very strongly recommends not storing any
            PHP files in directories that are accessible by the webserver (those
            that are beneath the document root).  While this is not possible in
            every scenario, such as shared hosting, this should be considered a
            best practice and observed whenever possible.
-->
        </para>

        <para>
            Создайте файл загрузки <code>index.php</code> в корневом каталоге
            сайта для загрузки <code>Zend_Controller_Front</code>:
<!--
            Create the bootstrap file, <code>index.php</code>, in the document
            root to bootstrap Zend_Controller_Front:
-->
        </para>
        
        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Controller/Front.php';

Zend_Controller_Front::run('/path/to/your/controllers');

?>]]></programlisting>

        <para>
            Подробнее про <code>/path/to/your/controllers</code> см. следующий
            за этим раздел.
<!--
            See the next section regarding the <code>/path/to/your/controllers</code>.
-->
            Как написано в <code>README.txt</code>, каталог с библиотекой Zend
            Framework должен быть прописан в <code>include_path</code>. Если
            <code>include_path</code> не установлен в <code>php.ini</code>,
            можно вызывать функцию <code>set_include_path()</code> перед
            <code>require_once()</code> в этом файле.
<!--
            As instructed in <code>README.txt</code>, the directory of the Zend
            Framework library must be in the <code>include_path</code>.  If this
            is not set in <code>php.ini</code>, <code>set_include_path()</code>
            can be called in this file before the <code>require_once()</code>.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.getting-started.directory-structure">
        <title>Структура каталогов</title>

        <para>
            Рекомендуется, чтобы сайты, построенные с Zend Framework,
            использовали общую структуру каталогов. Несмотря на то, что это
            возможно не во всех случаях, это реализуемо для многих (или скорее
            большинства) случаев. Следование данной структуре сделает ваш код
            более легким для понимания теми, кто знаком с соглашениями
            Zend Framework.
<!--
            It is recommended that websites built with the Zend Framework share
            a common directory structure.  While this is not possible in every
            case, it is for many or perhaps most.  Choosing to conform to this
            structure will make your code more easily understandable by someone
            familiar with the conventions of the Zend Framework.
-->
        </para>

        <para>
            Предлагаемая структура каталогов состоит из каталогов библиотек
            (от Zend и каких-либо других) и каталогов приложений.
<!--
            The suggested directory structure consists of both library
            directories (from Zend and elsewhere) and application directories.
-->
        </para>
        
        <programlisting role="php"><![CDATA[
/application
  /models
  /views
  /controllers
/document_root
  /images
  /styles
  .htaccess
  index.php
/library
  /Zend
]]>     </programlisting>

        <note>
            <title>В стадии разработки</title>
            <para>
                Этот раздел еще не завершен. Он на стадии интенсивной разработки и
                подвержен изменениям.
<!--
                This section is not yet complete.  It is under heavy construction
                and is subject to change.
-->
            </para>
        </note>
    </sect2>

    <sect2 id="zend.controller.overview.indexcontroller">
        <title>Контроллер по умолчанию<!--Default Controller--></title>

        <para>
            Каждый сайт должен определять контроллер по умолчанию. Это
            контроллер, который вступает в действие, когда в URI не
            определен контроллер, как в этом URI:
<!--
            Every site must define a default controller.  This is the controller
            that is reached when no controller is specified in the URI, such as
            in this URI:
-->
        </para>
        
        <programlisting role="php"><![CDATA[
http://framework.zend.com/
]]></programlisting>

        <para>
            В поставляемой конфигурации используемый по умолчанию контроллер
            должен называться <code>IndexController</code> и должен быть
            определен в файле <code>IndexController.php</code>. В коде на него
            ссылаются как на контроллер 'index'.
<!--
            In the shipped configuration, the default controller should be named
            <code>IndexController</code>, and defined in a file named
            <code>IndexController.php</code>. Internally, it will be referenced
            as the controller 'index'.
-->
        </para>

        <para>
            Вы можете изменить контроллер по умолчанию до начала диспетчеризации
            посредством вызова метода <code>setDefaultController()</code>
            объектов <code>Zend_Controller_Front</code> или
            <code>Zend_Controller_Dispatcher</code>. При этом соблюдайте
            внутренние соглашения по именованию. В соотвествии с этими
            соглашениями на класс <code>HomeController</code> (в файле
            <code>HomeController.php</code>) нужно ссылаться как на
            <code>home</code>.  
<!--
            You may change the default controller prior to dispatching the front
            controller by calling the <code>setDefaultController()</code> method
            on either the front controller or dispatcher object. When doing so,
            use the internal naming conventions. Thus, the class
            <code>HomeController</code> (in the <code>HomeController.php</code>
            file) would be referred to as <code>home</code>.
-->
        </para>

        <para>
            Все контроллеры должны наследовать от класса
            <code>Zend_Controller_Action</code> и размещаться в каталоге
            контроллеров.
<!--
            Controllers should extend the <code>Zend_Controller_Action</code>
            class and be placed in the controllers directory.
-->
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Controller/Action.php';

class IndexController extends Zend_Controller_Action
{
    public function indexAction()
    {
        echo 'Hello from IndexController';
    }

    public function noRouteAction()
    {
        $this->_redirect('/');
    }
}

?>]]></programlisting>

        <para>
            Подробнее о контроллере и действии по умолчанию и о написании
            классов контроллеров будет изложено в следующих разделах.  
<!--
            More detail on the default controller and action, as well as writing
            action controller classes, will be presented in later chapters.
-->
        </para>

        <note>
            <title>В стадии разработки</title>
            <para>
                Этот раздел еще не завершен. Он на стадии интенсивной разработки
                и подвержен изменениям. 
<!--
                This section is not yet complete.  It is under heavy
                construction and is subject to change.
--> 
          </para>
        </note>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
