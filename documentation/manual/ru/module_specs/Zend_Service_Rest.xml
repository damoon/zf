<sect1 id="zend.service.rest">
    <title>Zend_Service_Rest</title>
    <sect2 id="zend.service.rest.introduction">
        <title>Введение</title>
        <para>
            <code>Zend_Service_Rest</code> является базовым клиентом REST для
            выполнения запросов к любым веб-сервисам, основанным на REST. 
<!--
            <code>Zend_Service_Rest</code> is a basic REST client for performing
            queries against any REST based web service.
-->
        </para>
        <example>
            <title>Основной запрос REST<!--A basic REST Request--></title>
            <para>
                В нижеследующем коде метод <code>setUri()</code> устанавливает
                <emphasis>базовый</emphasis> URI к веб-сервису. Затем вызывается
                метод <code>restGet()</code> для выполнения запроса GET, ему
                передаются путь и строка запроса (необязательный параметр). 
<!--
                In the following code, the <code>setUri()</code> method sets the
                <emphasis>base</emphasis> URI for the
                REST web service. Then, the <code>restGet()</code> method is called
                to perform a GET request on a given
                path with an optional query string.
-->
            </para>
            <programlisting><![CDATA[<?php
require_once 'Zend/Service/Rest.php;

try {
    $rest = new Zend_Service_Rest();

    $rest->setURI('http://example.org');

    // Возвращает объект Zend_HttpClient_Response
    $response = $rest->restGet('/services/rest', 'foo=bar&baz=bat');

    if ($response->isSuccessful()) {
        echo $response->getBody();
    } else {
        echo '<p>An error occurred</p>';
    }
} catch (Zend_Exception $e) {
        echo '<p>An error occurred (' .$e->getMessage(). ')<p>';
}
?>]]>       </programlisting>
        </example>
        <note>
            <title>Передача<!--Passing--></title>
            <para>
                Вы можете передавать правильно сформированную строку запроса (без знака
                вопроса "<code>?</code>" в начале) методу <code>restGet()</code>,
                либо передавать ассоциативный массив из пар имя-значение.
                Независимо от того, какой способ был выбран,
                имена и значения должны быть закодированы для URL (например,
                с помощью <ulink url="http://php.net/urlencode"><code>urlencode()</code></ulink>). 
<!--
                You can pass a properly formatted query string (without the
                leading question mark "<code>?</code>") to <code>restGet()</code>,
                or you can pass an associative array of name-value pairs. Regardless of which
                method you choose, the names and values must be URL-encoded (e.g., with
                <ulink url="http://php.net/urlencode"><code>urlencode()</code></ulink>).
-->
            </para>
        </note>
        <para>
            Методы <code>restPost()</code> и <code>restPut()</code>
            используются так же, как и метод <code>restGet()</code>,
            за тем отличием, что данные в них отправляются через HTTP-методы
            POST и PUT соответственно.
<!--
            Using <code>restPost()</code> and <code>restPut()</code> is the same
            as using <code>restGet()</code>, but the data are sent via HTTP
            POST or PUT, respectively, instead of GET.
-->
        </para>
        <para>
            Метод <code>restDelete()</code> работает с путем в URL, но не имет
            второго параметра, в котором передаются данные. 
<!--
            The <code>restDelete()</code> method operates on a path, but
            does not have a second parameter into which data may be passed.
-->
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
