<sect1 id="zend.initregistry">

    <title>Zend::initRegistry($registry = 'Zend_Registry')</title>

    <para>
        Разработчики, желающие расширить существующие функциональные возможности
        реестра, могут использовать данную функцию. Этот метод позволяет
        создавать подклассы Zend_Registry, включая добавление
        методов-псевдонимов для offsetGet() и offsetExists(), таких, как has(),
        getval(), setval() и т.д. Для их использования следует создать
        экземпляр подкласса Zend_Registry в коде загрузки и затем передать его
        initRegistry() до того, как будут вызваны другие методы, связанные с
        использованием реестра. Следует иметь в виду, что initRegistry() может
        вызываться только один раз для предотвращения случайной перезаписи
        реестра после инициализации.  Также при использовании Zend::registry()
        или Zend::register() будет автоматически вызван метод initRegistry(),
        если он не был вызван ранее.
<!--
        Developers wishing to extend the existing registry's functionality may use this function.
        This method enables developers to subclass Zend_Registry, including
        adding alias methods for offsetGet() and offsetExists(), such as has(), getval(), setval(), etc.,
        by creating an instance of a Zend_Registry subclass in bootstrap code, and then supplying that instance
        to initRegistry(), before any other registry-related methods are used.  Note that initRegistry()
        may only be used once, to avoid accidentally overwriting the registry after initialization.
        Also, using Zend::registry() or Zend::register() automatically calls initRegistry(), if it has
        not already been called.
-->
    </para>

    <example>
        <title>register() / offsetSet() Example</title>
<programlisting role="php"><![CDATA[<?php
class Zend_RegistryMine extends Zend_Registry
{
    public function getval($index)
    {
        return $this->offsetGet($index);
    }
}

# в коде загрузки:

$ini_array = parse_ini_file('your_stuff.ini'); // необязательный код
$registry = new Zend_RegistryMine($ini_array);
Zend::initRegistry($registry);

# теперь методы Zend::registry(), Zend::register(), and Zend::isRegistered()
# работают так, как нужно нам
?>]]></programlisting>
    </example>

    <para>
        Используйте константу <code>ArrayObject::ARRAY_AS_PROPS</code> в
        конструкторе для того, чтобы получать доступ к значениям, используя
        конструкцию <code>$registry->$indexName</code> в дополнение к
        конструкции <code>$registry[$indexName]</code>. Однако
        остерегайтесь конфликтов имен, если создаете наследников класса
        Zend_Registry с добавлением закрытых переменных.
<!--
        Use the constant <code>ArrayObject::ARRAY_AS_PROPS</code> in the constructor to enable accessing values
        using <code>$registry->$indexName</code>, in addition to <code>$registry[$indexName]</code>.
        However, beware of name collisions, if you extend Zend_Registry and add private variables.
-->
    </para>

    <example>
        <title>Доступ к значениям с использованием объектно-ориентированной нотации вместо нотации доступа к массиву<!--Accessing Values Using OO Notation Instead of ArrayAccess Notation--></title>
<programlisting role="php"><![CDATA[<?php
$registry = new Zend_Registry(array(), ArrayObject::ARRAY_AS_PROPS); 
Zend::initRegistry($registry);
?>]]></programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
