<sect1 id="zend.introduction">
    <title>Введение</title>
    <para>
        Класс Zend -- основной класс Zend Framework. Он создан вследствие соблюдения
        фрэймвоком принципа DRY (Don't Repeat Yourself -- не повторяйся). Класс содержит
        только статические методы, и эти методы содержат необходимый для многих
        компонент функционал.
<!--        
        The Zend class is the foundation class of the Zend Framework.  This
        class evolved out of the framework's adherence to the DRY principle (Don't Repeat
        Yourself).  It contains only static methods, and these methods
        contain functionality that is required by many components in the Zend Framework.
-->
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>Zend::loadFile()</title>

    <para>
        <code>Zend::loadFile()</code> загружает файл PHP, который может содержать
        любой код PHP. Это обертка для функции PHP
        <ulink url="http://php.net/include"><code>include()</code></ulink>,
        генерирующая исключение <code>Zend_Exception</code> в случае ошибки.
<!--
        <code>Zend::loadFile()</code> loads a PHP file, which may contain any PHP code. It is a wrapper for the
        PHP function <ulink url="http://php.net/include"><code>include()</code></ulink> that throws
        <code>Zend_Exception</code> on failure.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>

    <para>
        Аргумент <code>$filename</code> задает имя файла для загрузки, он не
        должен содержать какую-либо информацию о пути к файлу. Для
        <code>$filename</code> выполняется проверка на безопасность.
        <code>$filename</code> должен содержать только алфавитно-цифровые
        символы, тире ("-"), знаки подчеркивания ("_") или точки ("."). На
        аргумент <code>$dirs</code> эти ограничения не  распространяются.
<!--
        The <code>$filename</code> argument specifies the filename to load, which must not contain
        any path information.  A security check is performed on <code>$filename</code>.  The
        <code>$filename</code> may only contain alphanumeric characters, dashes ("-"), underscores ("_"), or
        periods (".").  No such restriction is placed on the <code>$dirs</code> argument.
-->
    </para>

    <para>
        Аргумент <code>$dirs</code> задает каталоги для поиска файла. Если его
        значением является <code>NULL</code>, то поиск будет производиться только
        в <code>include_path</code>. Если является строкой или массивом, поиск
        будет производиться в каталоге (или каталогах, соответственно), затем
        в <code>include_path</code>.
<!--
        The <code>$dirs</code> argument specifies directories to search for the file.  If
        <code>NULL</code>, only the <code>include_path</code> will be searched.  If a string
        or an array, the directory or directories specified will be searched, and then the
        <code>include_path</code>.
-->
    </para>

    <para>
        Аргумент булевого типа <code>$once</code> определяет, какую функцию PHP
        использовать для загрузки файлов --
        <ulink url="http://php.net/include"><code>include()</code></ulink> или
        <ulink url="http://php.net/include_once"><code>include_once()</code></ulink>.
<!--
        The <code>$once</code> argument is a boolean that specifies whether to use the PHP
        functions <ulink url="http://php.net/include"><code>include()</code></ulink> or <ulink
        url="http://php.net/include_once"><code>include_once()</code></ulink> for loading the file.
-->
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
        <code>Zend::loadClass()</code> загружает файл PHP, имя которого сформировано
        как "<code>$className.php</code>", затем проверяет наличие класса
        <code>$className</code>.
<!--
        <code>Zend::loadClass()</code> loads a PHP file whose filename is formatted like
        "<code>$className.php</code>", and then checks for the existance of the class <code>$className</code>.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

loadClass($class, $dirs)

?>]]></programlisting>

    <para>
        Если файл не найден или класс не существует, генерируется исключение
        <code>Zend_Exception</code>. Для загрузки используется функция
        <code>Zend::loadFile()</code>, ей непосредственно передается аргумент
        <code>$dirs</code>.
<!--
        If the file is not found or the class does not exist after the load, a <code>Zend_Exception</code> is
        thrown. <code>Zend::loadFile()</code> is used for loading, and the <code>$dirs</code> argument is
        passed directly to it..
-->
    </para>

    <para>
        Если вы запросили класс со знаками подчеркивания в имени и
        <code>$dirs</code> равен <code>NULL</code> (значение по умолчанию),
        то <code>Zend::loadClass()</code> будет автоматически находить
        <code>$dirs</code> из имени класса посредством замены знаков
        подчеркивания на разделители директорий. Например, если имя класса --
        <code>Zend_Example_Class</code>, то оно будет преобразовано в путь
        <code>Zend/Example/Class.php</code>.
<!--
        If you ask for a class with underscores in the name, and <code>$dirs</code> is null (the default),
        <code>Zend::loadClass()</code> will auto-discover the <code>$dirs</code> from the class name
        by converting underscores to directory separators.  For example, if <code>$class</code> is
        <code>Zend_Example_Class</code>, that will map to a path of <code>Zend/Example/Class.php</code>.
-->
    </para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>
        <code>Zend::loadInterface()</code> работает точно так же, как и
        <code>Zend::loadClass()</code>, за исключением того, что он загружает интерфейсы
        вместо классов.
<!--
        <code>Zend::loadInterface()</code> works exactly the same as <code>Zend::loadClass()</code>, only it
        loads an interface instead.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
        Метод <code>Zend::loadClass()</code> не может использоваться для загрузки
        интерфейсов из-за того, что функция PHP
        <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink>
        не может проверять наличие интерфейсов (начиная с PHP 5.0.2). Вместо
        этого используйте <code>Zend::loadInterface()</code>.
<!--
        The <code>Zend::loadClass()</code> method cannot be used for loading interfaces because the PHP
        function <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink> does cannot check
        for interfaces (since PHP 5.0.2).  Use <code>Zend::loadInterface()</code> instead.
-->
    </para>

    <para>
        Если вы запросили интерфейс со знаками подчеркивания в имени и <code>$dirs</code>
        равен <code>NULL</code> (значение по умолчанию), то <code>Zend::loadInterface()</code> 
        будет автоматически находить <code>$dirs</code> из имени интерфейса посредством
        замены знаков подчеркивания на разделители директорий. Например, если имя
        интерфейса -- <code>Zend_Example_Interface</code>, то оно будет преобразовано
        в путь <code>Zend/Example/Interface.php</code>.
<!--
        If you ask for an interface with underscores in the name, and <code>$dirs</code> is null (the default),
        <code>Zend::loadInterface()</code> will auto-discover the <code>$dirs</code> from the interface name
        by converting underscores to directory separators.  For example, if <code>$interface</code> is
        <code>Zend_Example_Interface</code>, that will map to a path of <code>Zend/Example/Interface.php</code>.
-->
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>
        Возвращает <code>TRUE</code>, если файл доступен для чтения, иначе
        <code>FALSE</code>.
<!--
        Returns <code>TRUE</code> if a file is readable, FALSE otherwise.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

isReadable($filename)

?>]]></programlisting>

    <para>
        Аргумент <code>$filename</code> задает имя файла для проверки, он может
        содержать путь к файлу. Этот метод является оберткой для функции PHP
        <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>.
        Функция PHP не ищет в <code>include_path</code>, в то время как
        <code>Zend::isReadable()</code> делает это.
<!--
        The <code>$filename</code> argument specifies the filename to check, which may
        contain path information.  This method is a wrapper for the PHP function
        <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>.  The PHP function
        does not search the <code>include_path</code>, while <code>Zend::isReadable()</code> does.
-->
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>

    <para>
        <code>Zend::dump()</code> выводит и/или возвращает информацию о выражении.
        Это обертка для функции PHP
        <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>. Метод
        окружает выходные данные (X)HTML тегами <code>&lt;pre&gt;</code> и присоединяет
        метку, если был установлен соответствующий необязательный параметр.
<!--
        <code>Zend::dump()</code> prints and/or returns information about an expression.  It is a wrapper
        for the PHP function <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>.  It
        wraps the output with (X)HTML <code>&lt;pre&gt;</code> tags and optionally prepends a label.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
        Аргумент <code>$var</code> задает выражение или переменную, для которой должна
        быть получена информация.
<!--
        The <code>$var</code> argument specifies the expression or variable for which the information
        will be obtained.
-->
    </para>

    <para>
        <code>$label</code> -- произвольный текст, который будет присоединен в начале
        выходных данных <code>Zend::dump()</code>. Это полезно, когда делается дамп
        многих переменных на одном экране.
<!--
        The <code>$label</code> is any arbitrary text to be prepended to the output of
        <code>Zend::dump()</code>.  This is useful when dumping many variables on a single screen.
-->
    </para>

    <para>
        Аргумент булевого типа <code>$echo</code> указывает, отображать ли выходные данные
        <code>Zend::dump()</code> или нет.  Если <code>TRUE</code>, выходные данные будут
        отображены. Выходные данные всегда возвращаются методом, независимо от значения
        <code>$echo</code>.
<!--
        The boolean <code>$echo</code> controls whether the output of <code>Zend::dump()</code> is echoed
        or not.  If <code>TRUE</code>, the output will be echoed.  Regardless of the state of
        <code>$echo</code>, the output is always be returned.
-->
    </para>
</sect1>

<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
        Регистрирует объект в хранилище объектов.
<!--
        Registers an object in the object store.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

register($name, $object)

?>]]></programlisting>

    <para>
        Реестр является механизмом для обеспечения экземпляров-синглетонов
        в среде приложения. Посредством единичного сохранения объекта в реестре и
        дальнейшего извлечения его из реестра каждый раз, когда он понадобится, всегда
        возвращается один и тот же экземпляр объекта.
<!--
        The registry is a mechanism for providing singleton instances of objects to the application space.  By
        storing the object in the registry once, and then retrieving the object from the registry whenever it
        is needed, the same instance is always returned.
-->
    </para>

    <para>
        <code>$name</code> -- произвольная строка для наименования объекта в хранилище.
        Это имя передается <code>Zend::registry()</code> для получения того же объекта.
<!--
        The <code>$name</code> is an arbitrary string to name the object in the store.  This name will be
        supplied to <code>Zend::registry()</code> to retrieve the object again.
-->
    </para>

    <para>
        Аргумент <code>$name</code> дожен быть строкой, в реестре могут храниться
        только объекты, объект не может удаляться из реестра, экземпляр может быть
        сохранен в реестре только один раз. Нарушение этих правил вызовет
        исключение <code>Zend_Exception</code>.
<!--
        The <code>$name</code> argument must be a string, only objects may be stored in the registry, an object
        can never be removed from the registry, and an instance can only be stored once in the registry.
        Failure to obey these rules will result in <code>Zend_Exception</code> being thrown.-->
    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
        Возвращает объект в реестре или список всех объектов в реестре.
<!--
        Returns an object in the registry or lists all objects in the registry.
-->
    </para>

    <programlisting role="php"><![CDATA[<?php

registry($name=null)

?>]]></programlisting>

    <para>
        Если значение аргумента <code>$name</code> равно <code>NULL</code>, то будет
        возвращен массив, в котором ключами массива являются имена объектов в реестре, а
        значениями -- имена классов, к которым принадлежат эти объекты.
<!--
        If the <code>$name</code> argument is <code>NULL</code>, an array will be returned where the keys to the array
        are the names of the objects in the registry and the values are the class names of those objects.
-->
    </para>

    <para>
        Если <code>$name</code> является строкой, будет возвращен дескриптор
        объекта, которому присвоено данное имя. Если объект с именем <code>$name</code>
        не существует в реестре, будет сгенерировано исключение <code>Zend_Exception</code>.
<!--
        If <code>$name</code> is a string, the object handle assigned to that name will be returned.  If
        an object does not exist in the registry with that <code>$name</code>, a
        <code>Zend_Exception</code> will be thrown.
-->
    </para>

    <para>
        Для быстрого определения, представлен ли объект в реестре, используйте
        <code>Zend::isRegistered()</code>.
<!--
        To quickly determine if an object is present in the registry, use Zend::isRegistered().
-->
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
