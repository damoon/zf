<sect1 id="zend.session.advancedusage">

    <title>Продвинутое использование<!--Advanced Usage--></title>

    <para>
        Хотя базовое использование является совершенно допустимым вариантом
        использования сессий Zend Framework, стоит рассмотреть другие
        возможности их использования. См.
        <link linkend="zend.auth.introduction.using"> пример на
        <code>Zend_Auth</code></link>, который по умолчанию неявно
        использует Zend_Session_Namespace для сохранения меток аутентификации.
        Этот пример показывает один из способов быстрой и легкой интеграции
        Zend_Session_Namespace и Zend_Auth.
<!--
        While the basic usage examples are a perfectly acceptable way to utilize Zend Framework sessions, there are some
        best practices to consider. Consider the
        <link linkend="zend.auth.introduction.using"><code>Zend_Auth</code> example</link>
        that transparently uses Zend_Session_Namespace by default to persist authentication tokens. This example shows
        one approach to quickly and easily integrate Zend_Session_Namespace and Zend_Auth.
-->
    </para>

    <sect2 id="zend.session.startingasession">

        <title>Старт сессии<!--Starting a Session--></title>

        <para>
            Если вы хотите, чтобы все запросы имели сессии и использовали
            сессии Zend Framework, то стартуйте сессию в файле загрузки:
<!--
            If you want all requests to have a session and use Zend Framework sessions, then start the session in the
            bootstrap file:
-->
        </para>

        <example>
            <title>Старт общей сессии<!--Starting the Global Session--></title>
<programlisting role="php">
<![CDATA[<?php
...
require_once 'Zend/Session.php';
Zend_Session::start();
...
?>]]></programlisting>
        </example>

        <para>
            Стартуя сессию в файле загрузки, вы исключаете вероятность того, что
            старт сессии произойдет после того, как заголовки будут
            отправлены броузеру, что вызвовет исключение и, возможно,
            отображение испорченной страницы посетителю сайта. Некоторые
            расширенные возможности Zend_Session требуют вызова
            <code>Zend_Session_Core::start()</code> в начале (больше о
            расширенных возможностях будет написано позднее).    
<!--
            By starting the session in the bootstrap file, you avoid the possibility that your session might be started
            after headers have been sent to the browser, which results in an exception, and possibly a broken page for
            website viewers. Various advanced features require <code>Zend_Session_Core::start()</code> first. (More on
            advanced features later).
-->
        </para>

        <para>
            Есть четыре способа стартовать сессию, используя Zend_Session. Два
            из них - неправильные.
<!--            There are four ways to start a session, when using Zend_Session. Two are wrong.
-->
        </para>

        <itemizedlist mark='opencircle'>
            <listitem>
                <para>
                    1. Неправильно: Устанавливать опцию session.auto_start в
                    php.ini или .htaccess (http://www.php.net/manual/en/ref.session.php#ini.session.auto-start).
                    Если вы не имеете возможность отключить эту опцию в php.ini,
                    то, если используется mod_php (или его эквивалент) и в
                    php.ini уже установлена эта опция, добавьте строку
                    <code>php_value session.auto_start 0</code> в ваш файл
                    .htaccess (обычно находится в корневой директории для
                    HTML-документов).
<!--
                    1. Wrong: Do not set PHP's session.auto_start ini setting in either php.ini or .htaccess
                    (http://www.php.net/manual/en/ref.session.php#ini.session.auto-start). If you do not have the
                    ability to disable this setting in php.ini, you are using mod_php (or equivalent), and the setting
                    is already enabled in php.ini, then add <code>php_value session.auto_start 0</code> to your
                    .htaccess file (usually in your HTML document root directory).
-->
                </para>
            </listitem>
            <listitem>
                <para>
                    2. Неправильно: Непосредственно использовать функцию
                    <ulink url="http://www.php.net/session_start"><code>session_start()</code></ulink>.
                    Если вы вызываете <code>session_start()</code> напрямую и
                    начинаете использование Zend_Session_Namespace, то при
                    вызове метода <code>Zend_Session::start()</code> будет
                    сгенерировано исключение ("session has already been
                    started"). Если вы вызываете <code>session_start()</code>
                    после использования Zend_Session_Namespace или явного вызова
                    <code>Zend_Session::start()</code>, то будет сгенерирована
                    ошибка уровня E_NOTICE и проигнорирован вызов функции.
<!--
                    2. Wrong: Do not use PHP's <code>
                    <ulink url="http://www.php.net/session_start">session_start()</ulink>
                    </code> function directly If you use <code>session_start()</code> directly, and then start using
                    Zend_Session_Namespace, an exception will be thrown by <code>Zend_Session::start()</code> ("session
                    has already been started"). If you call <code>session_start()</code>, after using
                    Zend_Session_Namespace or starting <code>Zend_Session::start()</code> explicitly, an error of level
                    E_NOTICE will be generated, and the call will be ignored.
-->
                </para>
            </listitem>
            <listitem>
                <para>
                    3. Правильно:
                    Используйте <code>Zend_Session::start()</code>. Если
                    необходимо, чтобы все запросы имели и использовали сессии,
                    то поместите вызов этой функции в коде загрузки близко к
                    точке входа и без условной логики. При этом присутствуют
                    некоторые издержки за счет сессий. Если для одних запросов
                    нужны сессии, а для других - нет, то:
<!--
                    3. Correct: Use <code>Zend_Session::start()</code>. If you want all requests to have and use
                    sessions, then place this function call early and unconditionally in your ZF bootstrap code.
                    Sessions have some overhead. If some requests need sessions, but other requests will not need to use
                    sessions, then:
-->
                </para>
                <itemizedlist mark='opencircle'>
                    <listitem>
                        <para>
                            Установите опцию <code>strict</code> в true (см.
                            <link linkend="zend.session.startingasession"><code>Zend_Session::setOptions()</code></link>) в коде загрузки.
<!--
                            Unconditionally, set the <code>strict</code> option to true (see
                            <link
                        linkend="zend.session.startingasession"><code>Zend_Session::setOptions()</code>
                            </link>
                            ) in your userland bootstrap.
-->
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Вызывайте <code>Zend_Session::start()</code>
                            только при тех запросах, для которых нужны сессии,
                            и до того, как будет произведен первый вызов
                            <code>new Zend_Session_Namespace()</code>. 
<!--
                            Call <code>Zend_Session::start()</code>, only for requests that need to use sessions, before
                            the first call to <code>new Zend_Session_Namespace()</code>.
-->
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Используйте
                            <code>new Zend_Session_Namespace()</code> как
                            обычно и там, где это нужно, но при этом необходимо
                            убедиться, что
                            <code>Zend_Session::start()</code> был вызван ранее.
<!--
                            Use <code>new Zend_Session_Namespace()</code> normally, where needed, but make sure
                            <code>Zend_Session::start()</code> has been called previously.
-->
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Опция <code>strict</code> предотвращает автоматический
                    старт сессии с использованием
                    <code>Zend_Session::start()</code> при вызове
                    <code>new Zend_Session_Namespace()</code>. Эта опция 
                    помогает разработчикам пользовательских областей приложений
                    ZF следовать принятому при проектировании решению не
                    использовать сессии для определенных запросов, т.к. при
                    установке этой опции и последующем инстанцировании
                    Zend_Session_Namespace до явного вызова
                    <code>Zend_Session::start()</code> будет сгенерировано
                    исключение. Не используйте эту опцию в коде библиотек ZF,
                    поскольку проектные решения должны принимать только
                    разработчики пользовательской области. Аналогичным образом,
                    все разработчики "библиотек" должны осторожно подходить
                    к использованию <code>Zend_Session::setOptions()</code>
                    в коде их библиотек, поскольку эти опции имеют глобальную
                    область действия (как и лежащие в основе опции расширения
                    ext/session).
<!--
                    The <code>strict</code> option prevents <code>new Zend_Session_Namespace()</code> from automatically
                    starting the session using <code>Zend_Session::start()</code>. Thus, this option helps developers of
                    userland ZF applications enforce a design decision to avoid using sessions for certain requests,
                    since an error will be thrown when using this option and instantiating Zend_Session_Namespace,
                    before an explicit call to <code>Zend_Session::start()</code>. Do not use this option in ZF core
                    library code, because only userland developers should make this design choice. Similarly, all
                    "library" developers should carefully consider the impact of using
                    <code>Zend_Session::setOptions()</code> on users of their library code, since these options have
                    global side-effects (as do the underlying options for ext/session).
-->
                </para>
            </listitem>
            <listitem>
                <para>
                    4. Правильно: Просто используйте
                    <code>new Zend_Session_Namespace()</code> где необходимо, и
                    сессия будет автоматически запущена в Zend_Session. Это
                    наиболее простой вариант использования, подходящий для
                    большинства случаев. Но необходимо будет следить за тем,
                    чтобы первый вызов
                    <code>new Zend_Session_Namespace()()</code> всегда
                    происходил <emphasis role="strong">до того</emphasis>, как
                    выходные данные будут отправлены клиенту (т.е. до того, как
                    агенту пользователя будут отправлены HTTP-заголовки),
                    если используются основанные на куках сессии
                    (очень рекомендуется). Использование
                    <ulink url="http://php.net/outcontrol">буферизации
                    вывода</ulink> может быть удачным решением, при этом может
                    быть улучшена производительность. Например, в
                    <code>php.ini</code>
                    "<code>output_buffering = 65535</code>" включает буферизацию
                    вывода с размером буфера 64K. 
<!--
                    4. Correct: Just use <code>new Zend_Session_Namespace()</code> whenever needed, and the session will
                    be automatically started within Zend_Session. This offers extremely simple usage that works well in
                    most situations. However, you then become responsible for ensuring that the first <code>new
                    Zend_Session_Namespace()</code> happens <emphasis role="strong">before</emphasis> any output (i.e.
                    <ulink url="http://www.php.net/headers_sent">HTTP headers</ulink>
                    ) has been sent by PHP to the client, if you are using the default, cookie-based sessions (strongly
                    recommended). Using
                    <ulink url="http://php.net/outcontrol">output buffering</ulink>
                    often is sufficient to prevent this issue and may help improve performance. For example, in
                    <code>php.ini</code>, "<code>output_buffering = 65535</code>" enables output buffering with a 64K
                    buffer.
-->
                </para>
            </listitem>
        </itemizedlist>

    </sect2>

    <sect2 id="zend.session.locking">

        <title>Блокировка пространств имен<!--Locking Session Namespaces--></title>

        <para>
            Можно применять блокировку к пространствам имен для предотвращения
            изменения данных в этом пространстве имен. Используйте
            метод <code>Zend_Session_Namespace::lock()</code> для того, чтобы
            сделать определенное пространство имен доступным только для чтения,
            <code>unLock()</code> - чтобы сделать пространство имен доступным
            для чтения и изменений, а <code>isLocked()</code> для проверки того,
            не было ли пространство имен заблокировано ранее. Блокировка не
            сохраняется от одного запроса к другому. Блокировка пространства
            имен не действует на методы установки (setter methods) в объектах,
            сохраненных в пространстве имен, но предотвращает использование
            методов установки пространства имен сессии для удаления или замены
            объектов, сохраненных непосредственно в пространстве имен.
            Также блокирование пространств имен Zend_Session_Namespace не
            препятствует использованию ссылок на те же данные
            (см. <ulink url="http://www.php.net/references">PHP references</ulink>). 
<!--
            Session namespaces can be locked, to prevent further alterations to the data in that namespace. Use
            <code>Zend_Session_Namespace's lock()</code> to make a specific namespace read-only, <code>unLock()</code>
            to make a read-only namespace read-write, and <code>isLocked()</code> to test if a namespace has been
            previously locked. Locks are transient and do not persist from one request to the next. Locking the
            namespace has no effect on setter methods of objects stored in the namespace, but does prevent the use of
            the namespace's setter method to remove or replace objects stored directly in the namespace. Similarly,
            locking Zend_Session_Namespace namespaces does not prevent the use of symbol table aliases to the same data
            (see
            <ulink url="http://www.php.net/references">PHP references</ulink>
            ).
-->
        </para>

        <example>
            <title>Блокировка пространств имен<!--Locking Session Namespaces--></title>
<programlisting role="php">
<![CDATA[<?php
    // assuming:
    $userProfileNamespace = new Zend_Session_Namespace('userProfileNamespace');

    // marking session as read only locked
    $userProfileNamespace->lock();

    // unlocking read-only lock
    if ($userProfileNamespace->isLocked()) {
        $userProfileNamespace->unLock();
    }
?>]]></programlisting>
        </example>

        <para>
            Есть некоторые идеи по поводу того, как организовывать модели в
            парадигме MVC для Веб, включая создание моделей представления для
            использования видами (views). Иногда имеющиеся данные, являются ли
            они частью вашей доменной модели или нет, являются подходящими для
            этой задачи. Для того, чтобы предотвратить изменение таких данных,
            используйте блокировку пространств имен сессий до того, как
            предоставить видам доступ к этим подмножествам вашей модели
            представления.   
<!--
            There are numerous ideas for how to manage models in MVC paradigms for the Web, including creating
            presentation models for use by views. Sometimes existing data, whether part of your domain model or not, is
            adequate for the task. To discourage views from applying any processing logic to alter such data, consider
            locking session namespaces before permitting views to access this subset of your "presentation" model.
-->
        </para>

        <example>
            <title>Блокировка сессий в видах<!--Locking Sessions in Views--></title>
<programlisting role="php">
<![CDATA[<?php
class FooModule_View extends Zend_View
{
    public function show($name)
    {
        if (!isset($this->mySessionNamespace)) {
            $this->mySessionNamespace = Zend::registry('FooModule');
        }

        if ($this->mySessionNamespace->isLocked()) {
            return parent::render($name);
        }

        $this->mySessionNamespace->lock();
        $return = parent::render($name);
        $this->mySessionNamespace->unLock();

        return $return;
    }
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.controllers">

        <title>Инкапсуляция сессий и контроллеры<!--Session Encapsulation and Controllers--></title>

        <para>
            Пространства имен могут также использоваться для разделения доступа
            контроллеров к сессиям, чтобы защитить переменные от повреждения.
            Например, контроллер 'Zend_Auth' может хранить свои постоянные
            данные сессии отдельно от всех остальных контроллеров.     
<!--
            Namespaces can also be used to separate session access by controllers to protect variables from
            contamination. For example, the 'Zend_Auth' controller might keep its session state data separate from all
            other controllers.
-->
        </para>

        <example>
            <title>Сессии с пространствами имен для контроллеров с автоматическим истечением времени<!--Namespaced Sessions for Controllers with Automatic Expiration--></title>
<programlisting role="php">
<![CDATA[<?php
require_once 'Zend/Session.php';
// контроллер для вывода вопроса
$testSpace = new Zend_Session_Namespace('testSpace');
// установка времени жизни только для этой переменной
$testSpace->setExpirationSeconds(300, "accept_answer");
$testSpace->accept_answer = true;

-- 

// контроллер для обработки ответа на вопрос
$testSpace = new Zend_Session('testSpace');

if ($testSpace->accept_answer === true) {
    // время не истекло
}
else {
    // время истекло
}
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.limitinginstances">

        <title>Ограничение количества экземпляров Zend_Session_Namespace до одного на каждое пространство имен<!--Limiting Instances of Zend_Session to One Per Namespace--></title>

        <para>
            Мы рекомендуем использовать блокировку сессии (см. выше) вместо этой
            функциональной возможности, которая накладывает дополнительное бремя
            на разработчика, состоящее в передаче экземпляров
            Zend_Session_Namespace во все функции и объекты, нуждающихся в
            использовании этих пространств имен. 
<!--
            We recommend using session locking (see above) instead of the feature below, which places extra management
            burden on the developer to pass any Zend_Session_Namespace instances into whatever functions and objects
            need access to each namespace.
-->
        </para>

        <para>
            Когда создается первый экземпляр Zend_Session_Namespace, связанный с
            определенным пространством имен, вы можете дать команду
            Zend_Session_Namespace больше не создавать объекты для этого
            пространства имен. Таким образом, в дальнейшем попытка создать
            экземпляр Zend_Session_Namespace для
            того же пространства имен вызовет генерацию исключения. Это
            поведение является опциональным и не принято по умолчанию, но
            остается доступным для тех, кто предпочитает передавать по коду
            единственный объект для каждого пространства имен. Это повышает
            защиту пространства имен от изменений компонентами, которые не
            должны делать этого, поскольку тогда они не будут иметь свободного
            доступа к пространствам имен. Тем не менее, ограничение пространства
            имен до одного экземпляра модет привести к большему объему кода или
            к его усложнению, поскольку он отменяет возможность использования
            директив вида
            <code>$aNamespace = new Zend_Session_Namespace('aNamespace');</code>
            после того, как был создан первый экземпляр. Это продемонстрировано
            в примере ниже:
<!--
            When constructing the first instance of Zend_Session_Namespace attached to a specific namespace, you can
            also instruct Zend_Session_Namespace to not make any more instances for that namespace. Thus, any future
            attempts to construct a Zend_Session_Namespace instance having the same namespace will throw an error. Such
            behavior is optional, and not the default behavior, but remains available to those who prefer to pass around
            a single instance object for each namespace. This increases protection from changes by components that
            should not modify a particular session namespace, because they won't have easy access. However, limiting a
            namespace to a single instance may lead to more code or more complex code, as it removes access to the
            convient <code>$aNamespace = new Zend_Session_Namespace('aNamespace');</code>, after the first intance has
            been created, as follows in the example below:
-->
        </para>

        <example>
            <title>Ограничение до единичных экземпляров<!--Limiting to Single Instances--></title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $authSpaceAccessor1 = new Zend_Session_Namespace('Zend_Auth');
    $authSpaceAccessor2 = new Zend_Session_Namespace('Zend_Auth', Zend_Session_Namespace::SINGLE_INSTANCE);
    $authSpaceAccessor1->foo = 'bar';
    assert($authSpaceAccessor2->foo, 'bar');
    doSomething($options, $authSpaceAccessor2);
    .
    .
    .
    $aNamespaceObject = new Zend_Session_Namespace('Zend_Auth'); // это вызовет ошибку
?>]]></programlisting>
        </example>

        <para>
            Второй параметр в конструкторе выше говорит Zend_Session, что
            в будущем создание любых других экземпляров Zend_Session_Namespace с
            пространством имен 'Zend_Auth' не допустимо. Поскольку
            директиву <code>new Zend_Session_Namespace('Zend_Auth')</code>
            нельзя использовать после того, как будет выполнен приведенный выше
            код, то разработчику нужно будет где-либо сохранять объект
            (<code>$authSpaceAccessor2</code> в
            примере выше), если в дальнейшем при обработке того же запроса
            необходим доступ к этому пространству имен сессии.
            Например, вы можете сохранять экземпляр в статической переменной или
            передавать его другим методам, которым нужен доступ к данному
            пространству имен. 
<!--
            The second parameter in the constructor above will tell Zend_Session_Namespace that any future
            Zend_Session's that are instantiated with the 'Zend_Auth' namespace are not allowed, and will thus cause an
            exception. Since <code>new Zend_Session_Namespace('Zend_Auth')</code> will not be allowed after the code
            above has been executed, the developer becomes responsible for storing the instance object
            (<code>$authSpaceAccessor2</code> in the example above) somewhere, if access to this session namespace is
            needed at a later time during the same request. For example, a developer may store the instance in a static
            variable, or pass it to other methods that might need access to this session namespace. Session locking (see
            above) provides a more convenient, and less burdensome approach to limiting access to namespaces.
-->
        </para>

    </sect2>

    <sect2 id="zend.session.modifyingarray">

        <title>Работа с массивами в пространствах имен<!--Working with Arrays in Namespaces--></title>

        <para>
            Изменение массива внутри пространства имен невозможно. Простейшим
            решением является сохранение массивов после того, как все желаемые
            значения были установлены. <ulink url="http://framework.zend.com/issues/browse/ZF-800">ZF-800</ulink>
            подтверждает известный баг, затрагивающий многие PHP-приложения,
            использующие "магические" методы и массивы.
             
<!--
            Modifying an array inside a namespace does not work. The simplest solution is to store arrays after all
            desired values have been set.
            <ulink url="http://framework.zend.com/issues/browse/ZF-800">ZF-800</ulink>
            documents a known issue affecting many PHP applications using magic methods and arrays.
-->
        </para>

        <example>
            <title>Известные проблемы с массивами<!--Known problem with arrays--></title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array();
    $sessionNamespace->array['testKey'] = 1; // Не работает в версиях ниже PHP 5.2.1
?>]]></programlisting>
        </example>

        <para>
            Если вам нужно изменить массив после того, как добавили его в
            пространство имен, извлеките массив, произведите необходимые
            изменения и сохраните его под тем же ключом.
<!--
            If you need to modify the array after assigning it to a session namespace key, fetch the array, then
-->
        </para>

        <example>
            <title>Обходной путь: извлечение, изменение и сохранение<!--Workaround: fetch, modify, save--></title>
<programlisting role="php">
<![CDATA[<?php
    $sessionNamespace = new Zend_Session_Namespace('Foo');
    $sessionNamespace->array = array('tree' => 'apple');
    $tmp = $sessionNamespace->array;
    $tmp['fruit'] = 'peach';
    $sessionNamespace->array = $tmp;
?>]]></programlisting>
        </example>

        <para>
            Можно также сохранить массив, содержащий ссылку на желаемый массив
            и косвенно работать с ним. 
<!--
            Alternatively, store an array containing a reference to the desired array, and then access it indirectly.
-->
        </para>

        <example>
            <title>Обходной путь: сохранение массива, содержащего ссылку<!--Workaround: store array containing reference--></title>
<programlisting role="php">
<![CDATA[<?php
    $myNamespace = new Zend_Session_Namespace('mySpace');

    // работает даже с версиями PHP, содержащими баг
    $a = array(1,2,3);
    $myNamespace->someArray = array( & $a ) ;
    $a['foo'] = 'bar';
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.auth">

        <title>Использование сессий вместе с аутентификацией<!--Using Sessions with Authentication--></title>

        <para>
            Если вы позволяете <code>Zend_Auth</code> хранить метки
            аутентификации с использованием сессий Zend Framework. Для того,
            чтобы получить доступ к метке аутентификации в последующих запросах,
            нужно: 
<!--
            If you allow <code>Zend_Auth</code> to persist authentication tokens using Zend Framework sessions. In order
            to access the authentication token on subsequent requests, you would need to:
-->
        </para>

        <example>
            <title>Обходной путь: доступ к меткам аутентификации в сессиях<!--Workaround: accessing authentication tokens in sessions--></title>
<programlisting role="php">
<![CDATA[<?php
    // курица и яйцо... вы должны знать класс метки до ее просмотра :(
    require_once 'Zend/Auth/Digest/Token.php';
    require_once 'Zend/Session.php';
    Zend_Session::start();
    require_once 'Zend/Auth/Digest/Adapter.php';
    require_once 'Zend/Auth.php';
    $auth = new Zend_Auth(new Zend_Auth_Digest_Adapter('someDigestFilename'));
    $token = $auth->getToken();
    echo "Valid: ",
    (empty($token->isValid()) ? 'No' : 'Yes'), "\n"';
    echo "Identity: ",
        (empty($token->getIdentity()) ? 'unknown' : $token->getIdentity()), "\n"';
    echo "Messages: ",
        (empty($token->getMessages()) ? 'none' : $token->getMessages()), "\n"';
?>]]></programlisting>
        </example>

        <para>
            Если вы приказали <code>Zend_Auth</code> не сохранять метку сессии в
            сессиях и затем вручную сохранили ID авторизации в сессии, то просто
            используйте известное местонахождение в пространстве имен сессии.
            Это также позволяет избежать сохранения сообщения об ошибке
            аутентификации в сессии. Часто приложения имеют специфицеские
            требования к тому, где хранить "мандат" (учетная запись с
            праметрами доступа пользователя) и идентификатор авторизации.
            Приложения часто устанавливают соответствие идентификаторов
            аутентификации (например, имена пользователей) и идентификаторов
            авторизации (например, присвоенное уникальное целое число) во время
            аутентификации.
<!--
            If you tell <code>Zend_Auth</code> to not persist authentication tokens in sessions, and then manually store
            the authorization id to the session, then just use well-known locations in a session namespace. Also, this
            avoids persisting authentication error messages in the session. (Note: Some community members are working on
            a "flash message" system for Zend sessions.) Often, applications have specific needs about where to store
            credentials used (if any) and "authorization" identity. Applications often map authentication identities
            (e.g. usernames) to authorization identities (e.g. a uniquely assigned integer) during authentication.
-->
        </para>

        <example>
            <title>Обходной путь: простое сохранение ID авторизации<!--Workaround: simpler access for authorization ids--></title>
<programlisting role="php">
<![CDATA[<?php
    require 'Zend/Session.php';
    Zend_Session::start();
    $namespace = Zend_Session_Namespace('Zend_Auth');

    echo "Valid: ", (empty($namespace->authorizationId) ? 'No' : 'Yes'), "\n"';
    echo "Authorization / user Id: ",
        (empty($namespace->authorizationId) ? 'none' : $namespace->authorizationId), "\n"';
    echo "Authentication attempts: ",
        (empty($namespace->attempts) ? '0' : $namespace->attempts), "\n"';
    echo "Authenticated on: ",
        (empty($namespace->date) ? 'No' : date(DATE_ATOM, $namespace->date), "\n"';
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
