<sect1 id="zend.controller.subclassing">
    <title>Создание подклассов</title>

    <sect2 id="zend.controller.subclassing.introduction">
        <title>Введение</title>
        <para>
            Система <code>Zend_Controller</code> построена с расчетом на
            расширение посредством написания новых классов, которые реализуют 
            интерфейсы <code>Zend_Controller_Router_Interface</code> и
            <code>Zend_Controller_Dispatcher_Interface</code>, либо расширения
            классов <code>Zend_Controller_Request_Abstract</code>,
            <code>Zend_Controller_Response_Abstract</code> и
            <code>Zend_Controller_Action</code>.

<!--
            The <code>Zend_Controller</code> system was built with extensibility
            in mind, either by subclassing the existing classes or writing new
            classes that implement the interfaces
            <code>Zend_Controller_Router_Interface</code> and
            <code>Zend_Controller_Dispatcher_Interface</code> or extend the
            classes <code>Zend_Controller_Request_Abstract</code>,
            <code>Zend_Controller_Response_Abstract</code>, and
            <code>Zend_Controller_Action</code>.
-->
        </para>

        <para>
            Возможные причины для создания своих классов:
<!--
            Possible reasons for subclassing include:
-->
            <itemizedlist>
                <listitem>
                    <para>
                        Существующая система маршрутизации URI не подходит в
                        некоторых ситуациях, таких, как интеграция в
                        существующий веб-сайт, который использует свои
                        собственные соглашения по маршрутизации, которые не
                        совместимы с механизмом маршрутизации, предоставляемым
                        Zend Framework.

<!--
                        The existing URI routing system is not suitable in some
                        way, such as integrating into an existing website that
                        uses its own conventions for routing that do not mesh
                        with the routing mechanism provided with the Zend
                        Framework.
-->
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Вам нужно реализовать маршрутизацию для чего-либо 
                        совершенно иного. Класс
                        <code>Zend_Controller_Router</code>
                        работает только с URI. Возможно, вы захотите
                        использовать паттерн MVC для разработки других типов
                        программ — таких, как консольное или CGI приложение. В
                        случае консольного приложения специализированный
                        объект запроса может обрабатывать аргументы в командной
                        строке.
<!--
                        You need to implement routing for something completely
                        different.  The <code>Zend_Controller_Router</code>
                        class only deals with URIs.  It's possible and likely
                        that you might want to use the MVC pattern for
                        developing another type of program, such as a console or
                        GUI application.  In the case of a console application,
                        a custom request object could process command line
                        arguments.
-->
                    </para>

                </listitem>
                <listitem>
                    <para>
                        Механизм, предлагаемый
                        <code>Zend_Controller_Dispatcher</code>
                        является неподходящим. Конфигурация по умолчанию
                        предполагает, что контроллеры являются классами, а
                        действия — методами в этих классах. Однако есть много
                        других стратегий для реализации этого. Примером такой
                        стратегии может быть та, где контроллеры являются
                        каталогами, а действия — файлами внутри этих каталогов.
<!--
                        The mechanism provided by
                        <code>Zend_Controller_Dispatcher</code> is not suitable.
                        The default configuration assumes a convention that
                        controllers are classes and actions are methods of those
                        classes.  However, there are many other strategies for
                        doing this.  One example would be where controllers are
                        directories and actions are files within those
                        directories.
-->
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Вы хотите обеспечить дополнительные возможности, которые
                        будут унаследованы всеми вашими контроллерами. Например,
                        <code>Zend_Controller_Action</code> по умолчанию не
                        интегрирован с <code>Zend_View</code>. Однако вы можете
                        расширить свой собственный контроллер для реализации 
                        этого, и его использование не потребует изменения
                        находящегося в поставке <code>Zend_Controller_Router
                        </code> или <code>Zend_Controller_Dispatcher</code>
<!--
                        You wish to provide additional capabilities that will be
                        inherited by all of your controllers.  For example,
                        <code>Zend_Controller_Action</code> does not integrate
                        with <code>Zend_View</code> by default.  However, you
                        could extend your own controller to do this, and using
                        it would not require modifying the supplied
                        <code>Zend_Controller_Router</code> or
                        <code>Zend_Controller_Dispatcher</code>.
-->

                    </para>
                </listitem>
                <listitem>
                    <para>
                        Вы хотите журналировать исключения в приложении, которые
                        пойманы и перенаправлены к общей странице ошибок.
                        Расширяя <code>Zend_Controller_Response_Http</code>,
                        вы можете переопределить метод <code>__toString()</code>
                        для проверки зарегистрированных исключений, добавления
                        их в журнал и затем перенаправления на страницу ошибки.
<!--
                        You wish to log application exceptions when caught and
                        redirect to a generic error page. Extending
                        <code>Zend_Controller_Response_Http</code>, you could
                        modify <code>__toString()</code> to check for registered
                        exceptions, log them, and then redirect to an error
                        page.
-->

                    </para>
                </listitem>
            </itemizedlist>

            Пожалуйста, будьте осторожны при переписывании важных частей
            системы, особенно диспетчера. Одним из преимуществ
            <code>Zend_Controller</code> является то, что он устанавливает
            общие соглашения для разрабатываемых приложений. Если изменено
            слишком многое из поведения по умолчанию, некототорые из этих
            преимуществ будут потеряны. Тем не менее, есть много разных
            потребностей, и одно решение не может соответствовать им всем,
            поэтому некоторая свобода допустима, если нужно.
<!--
            Please be careful when overriding significant parts of the system,
            particularly the dispatcher.  One of the advantages of
            <code>Zend_Controller</code> is that it establishes common
            conventions for building applications.  If too much of this default
            behavior is changed, some of these advantages are lost.  However,
            there are many different needs and one solution can't fit them all,
            so the freedom is provided if needed.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.subclassing.conventions">
        <title>Соглашения</title>

        <para>
            Сильно рекомендуется следование этим соглашениям по именованию
            и хранению файлов при создании подклассов любых классов
            <code>Zend_Controller</code>. Следование этим соглашениям будет
            гарантировать легкое понимание вашего проекта другим программистом,
            знакомым с Zend Framework.
<!--

            When subclassing any of the Zend_Controller classes, you are
            strongly encouraged to follow these conventions for naming or
            storing files.  Doing so will ensure that another programmer who is
            familiar with the Zend Framework will be able to understand your
            project easily.
-->
        </para>

        <sect3 id="zend.controller.subclassing.prefix">
            <title>Префикс</title>

            <para>
                Классы, входящие в Zend Framework, следуют соглашению, по 
                которому имя каждого класса начинается с "Zend_". Это префикс.
                Мы рекомендуем называть все свои классы аналогичным образом,
                т.е. если ваша компания называется Widget Inc., префиксом должен
                быть"Widget_".
<!--
                Classes included with the Zend Framework follow a convention
                where every class is prefixed by "Zend_".  This is the prefix.
                We recommend that you name all of your classes in the same way,
                e.g. if your company name is Widget, Inc., the prefix might be
                "Widget_".
-->
            </para>
        </sect3>

        <sect3 id="zend.controller.directory.layout">

            <title>Структура категорий</title>

            <para>
                Классы <code>Zend_Controller</code> хранятся в каталоге
                библиотек, как показано ниже:
<!--
                The <code>Zend_Controller</code> classes are stored in the
                library directory as follows:
-->
            </para>
            
            <programlisting role="php"><![CDATA[
/library
  /Zend
    /Controller
      Action.php
      Dispatcher.php
      Router.php
]]></programlisting>

            <para>
                Когда создаете наследников от классов
                <code>Zend_Controller</code>, то рекомендуется сохранять их в
                такой же структуре, под вашим префиксом. Это облегчит их поиск
                для тех, кто просматривает код вашего приложения.
<!--
                When subclassing <code>Zend_Controller</code> classes, it is
                recommended that the new classes be stored in an identical
                structure under your prefix.  This will make them easy to find
                for someone during that learning process of reviewing the code
                for your project.
-->
            </para>

            <para>
                Например, проект компании Widget Inc., который реализует только
                свой маршрутизатор, может выглядеть следующим образом:
<!--
                For example, a project from Widget, Inc. which implements only a
                custom router might look like this:
-->
            </para>

            
            <programlisting role="php"><![CDATA[
/library
  /Zend
  /Widget
    /Controller
      Router.php
      README.txt
]]>         </programlisting>

            <para>
                Обратите внимание, что в этом примере каталог
                <code>Widget/Controller/</code> копирует каталог
                <code>Zend/Controller/</code> везде, где это возможно. В данном
                случае это класс <code>Widget_Controller_Router</code>, который
                может быть либо подклассом <code>Zend_Controller_Router</code>,
                либо замещать его, реализуя интерфейс
                <code>Zend_Controller_Router_Interface</code>.

<!--
                Notice in this example that the <code>Widget/Controller/</code>
                directory mirrors the <code>Zend/Controller/</code> directory
                wherever possible.  In this case, it provides the class
                <code>Widget_Controller_Router</code>, which would be either a
                subclass or replacement for <code>Zend_Controller_Router</code>
                implementing <code>Zend_Controller_Router_Interface</code>.
-->
            </para>

            <para>
                Еще обратите внимание на то, что в этом примере в
                каталоге <code>Widget/Controller/</code> размещен файл
                <code>README.txt</code>. Zend сильно приветствует
                документирование проектов посредством отдельных тестов и
                документации для клиентов. Несмотря на это, рекомендуется еще
                размещать простой файл <code>README.txt</code>, в котором кратко
                описываются изменения и то, как они работают.
<!--
                Also, notice in the example above that a <code>README.txt</code>
                file has been placed in <code>Widget/Controller/</code>.  Zend
                strongly encourages you to document your projects through
                supplying separate tests and documentation for customers.
                However, we encourage you to also place a simple
                <code>README.txt</code> file right in the directory to briefly
                explain your changes and how they work.
-->
            </para>

        </sect3>
    </sect2>

    <sect2 id="zend.controller.front">
        <title>Фронт-контроллер<!--Front Controller--></title>

        <para>
            Zend_Controller_Front - класс фронт-контроллера. Он является
            классом-синглетоном, это означает, что в любой точке выполнения кода
            может быть доступен только один его экземпляр.
<!--
            Zend_Controller_Front implements a Front Controller. Additionally,
            it is a singleton class, meaning only one instance of it may be
            available at any given point.
-->
        </para>

        <para>
            При создании его подкласса, нужно, как минимум, переопределить его 
            метод <code>getInstance()</code>.
<!--
            To subclass it, at the very minimum you will need to override the
            <code>getInstance()</code> method:
-->
        </para>

        <programlisting role="php"><![CDATA[
class My_Controller_Front extends Zend_Controller_Front
{
    public static function getInstance()
    {
        if (null === self::$_instance) {
            self::$_instance = new self();
        }

        return self::$_instance;
    }
}
]]></programlisting>

        <para>
            Переопределение метода getInstance() необходимо для того, чтобы
            последующие вызовы <code>Zend_Controller_Front::getInstance()</code>

            возвращали экземпляры вашего нового подкласса вместо экземпляра
            Zend_Controller_Front - это особенно полезно для некоторых
            альтернативных маршрутизаторов и помощников представления
            (view helpers).
<!--
            Overriding the getInstance() method ensures that subsequent calls to
            <code>Zend_Controller_Front::getInstance()</code> will return an
            instance of your new subclass instead of a Zend_Controller_Front
            instance - this is particularly useful for some of the alternate
            routers and view helpers.
-->
        </para>

        <para>
            Кроме getInstance(), есть много методов, которые можно 
            переопределить:
<!--
            In addition to getInstance(), there are many other methods you may
            override:
-->
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * Удаляет все свойства экземпляра синглетона
     *
     * Используется в основном для тестирования; может использоваться для
     * цепочки фронт-контроллеров
     * 
     * @return void
     */
    public function resetInstance();

    /**
     * Функция для удобства, вызывает setControllerDirectory()->setRouter()->dispatch()      
     *
     * В PHP 5.1.x, вызов статического метода никогда не заполняет $this,
     * поэтому run() может вызываться после настройки своего фронт-контроллера
     *      
     * @param string|array $controllerDirectory Путь ко классам контроллеров
     * или массив таких путей
     * @return void
     * @throws Zend_Controller_Exception если вызывается из объекта
     */
    static public function run($controllerDirectory);

    /**
     * Добавляет директорию контроллеров в стек директорий контроллеров
     *
     * Если передан агрумент $args и он является строкой, то он исползуется
     * как ключ массива для данной директории
     * 
     * @param string $directory 
     * @param mixed $args Необязательный аргумент; Если является строкой,
     * то используется как ключ массива
     * @return Zend_Controller_Front
     */
    public function addControllerDirectory($directory, $args = null);

    /**
     * Устанавливает директорию контроллеров
     *
     * Сохраняет директорию контроллеров для передачи диспетчеру. Параметром
     * могут быть массив или строка, содержащая единственную директорию
     *
     * @param string|array $directory Путь ко классам контроллеров или массив
     * таких путей
     * @return Zend_Controller_Front
     */
    public function setControllerDirectory($directory);

    /**
     * Возвращает директории контроллеров
     *
     * Возвращает сохраненные директории контроллеров
     *
     * @return string|array
     */
    public function getControllerDirectory();

    /**
     * Устанавливает контроллер, используемый по умолчанию (неформатированная строка)
     *
     * @param string $controller
     * @return Zend_Controller_Front
     */
    public function setDefaultController($controller);

    /**
     * Возвращает контроллер, используемый по умолчанию (неформатированная строка)
     *
     * @return string
     */
    public function getDefaultController();

    /**
     * Устанавливает действие, используемое по умолчанию (неформатированная строка)
     *
     * @param string $action
     * @return Zend_Controller_Front
     */
    public function setDefaultAction($action);

    /**
     * Возвращает действие, используемое по умолчанию (неформатированная строка)
     *
     * @return string
     */
    public function getDefaultAction();

    /**
     * Устанавливает класс/объект запроса
     *
     * Устанавливает объект запроса. Объект запроса содержит переменные запроса.
     *
     * If a class name is provided, it will instantiate it
     *
     * @param string|Zend_Controller_Request_Abstract $request
     * @throws Zend_Controller_Exception Генерируется в случае неверного класса запроса
     * @return Zend_Controller_Front
     */
    public function setRequest($request);

    /**
     * Возвращает объект запроса
     *
     * @return null|Zend_Controller_Request_Abstract
     */
    public function getRequest();

    /**
     * Устанавливает объект/класс маршрутизатора
     *
     * Устанавливает объект маршрутизатора. Маршрутизатор должен обрабатывать
     * запросы на нахождение соответствующих контроллера и действия
     *
     * Если передано имя класса, то инстанцируется маршрутизатор с любыми
     * параметрами, зарегистрированными через {@link setParam()} или
     * {@link setParams()}.
     *
     * @param string|Zend_Controller_Router_Interface $router
     * @throws Zend_Controller_Exception Генерируется в случае неверного класса маршрутизатора
     * @return Zend_Controller_Front
     */
    public function setRouter($router);

    /**
     * Возвращает объект маршрутизатора.
     *
     * Инстанцирует Zend_Controller_Router, если маршрутизатор не был установлен.
     *
     * @return null|Zend_Controller_Router_Interface
     */
    public function getRouter();

    /**
     * Устанавливает базовый URL, используемый для запросов
     *
     * Используется для установки базовой части URL в REQUEST_URI, которая
     * используется позднее при определении PATH_INFO и т.д., Примеры:
     * - /admin
     * - /myapp
     * - /subdir/index.php
     *
     * URL не должне включать полный URI. Не используйте:
     * - http://example.com/admin
     * - http://example.com/myapp
     * - http://example.com/subdir/index.php
     *
     * Если передано значение null, то используется автоопределение (по умолчанию).
     * 
     * @param string $base
     * @return Zend_Controller_Front
     * @throws Zend_Controller_Exception для $base, не являющегося строкой
     */
    public function setBaseUrl($base = null);

    /**
     * Возвращает установленный на данный момент базовый URL
     * 
     * @return string
     */
    public function getBaseUrl();

    /**
     * Устанавливает объект диспетчера. Диспетчер должен принимать объект
     * запроса, инстанцировать контроллер, и вызывать метод действия в этом
     * контроллере
     *
     * @param Zend_Controller_Dispatcher_Interface $dispatcher
     * @return Zend_Controller_Front
     */
    public function setDispatcher(Zend_Controller_Dispatcher_Interface $dispatcher);

    /**
     * Возвращает объект диспетчера.
     *
     * @return Zend_Controller_DispatcherInteface
     */
    public function getDispatcher();

    /**
     * Устанавливает объект/класс ответа
     *
     * Устанавливает объект ответа. Объект ответа является контейнером для
     * ответа действия и заголовков.
     *
     * Если передано имя класса, то инстанцируется объект ответа.
     *
     * @param string|Zend_Controller_Response_Abstract $response
     * @throws Zend_Controller_Exception если передан неверный класс ответа
     * @return Zend_Controller_Front
     */
    public function setResponse($response);

    /**
     * Возвращает объект ответа.
     *
     * @return null|Zend_Controller_Response_Abstract
     */
    public function getResponse();

    /**
     * Добавляет или изменяет параметр, используемый при инстанцировании
     * контроллера действий
     *
     * @param string $name
     * @param mixed $value
     * @return Zend_Controller_Front
     */
    public function setParam($name, $value);

    /**
     * Устанавливает параметры для передачи конструктору контроллера действий
     *
     * @param array $params
     * @return Zend_Controller_Front
     */
    public function setParams(array $params);

    /**
     * Возвращает один параметр из стека параметров контроллера
     * 
     * @param string $name 
     * @return mixed
     */
    public function getParam($name);

    /**
     * Возвращает параметры инстанцирования контроллера действий.
     *
     * @return array
     */
    public function getParams();

    /**
     * Очищает стек параметров контроллера действий.
     *
     * По умолчанию удаляет все параметры. Если передано имя параметра, то
     * удаляется только этот параметр; если передан массив имен параметров, то
     * удаляются все эти параметры.
     * 
     * @param null|string|array один ключ или массив ключей параметров
     * для удаления
     * @return Zend_Controller_Front
     */
    public function clearParams($name = null);

    /**
     * Регистрирует плагин.
     *
     * @param Zend_Controller_Plugin_Abstract $plugin
     * @return Zend_Controller_Front
     */
    public function registerPlugin(Zend_Controller_Plugin_Abstract $plugin);

    /**
     * Отменяет регистрацию плагина.
     *
     * @param Zend_Controller_Plugin_Abstract $plugin
     * @return Zend_Controller_Front
     */
    public function unregisterPlugin(Zend_Controller_Plugin_Abstract $plugin);

    /**
     * Устанавливает, должны ли исключения, происходящие в цикле
     * диспетчеризации, генерироваться как обычно или отлавливаться и включаться
     * в объект ответа.
     *
     * Поведение по умолчанию - отлов исключений и включение в объект ответа;
     * вызывайте этот метод, чтобы они генерировались как обычно.
     *
     * @param boolean $flag По умолчанию равно true
     * @return boolean Возвращает текущую установку
     */
    public function throwExceptions($flag = null);

    /**
     * Устанавливает, должен ли {@link dispatch()} возвращать объект ответа без
     * вывода. По умолчанию вывод производится автоматически и метод dispatch()
     * ничего не возвращает.
     * 
     * @param boolean $flag 
     * @return boolean Возвращает текущую установку
     */
    public function returnResponse($flag = null);

    /**
     * Производит обработку HTTP запроса 
     *
     * @param Zend_Controller_Request_Abstract|null $request
     * @param Zend_Controller_Response_Abstract|null $response
     * @return void|Zend_Controller_Response_Abstract Возвращает объект ответа,
     * если returnResponse() == true
     */
    public function dispatch(Zend_Controller_Request_Abstract $request = null, Zend_Controller_Response_Abstract $response = null);
]]></programlisting>

        <para>
            Назначение фронт-контроллера состоит в том, чтобы установить
            переменные запроса, произвести маршрутизацию поступившего запроса и
            запустить действия, соответствующие этому запросу. В конце
            фронт-контроллер собирает все ответы и возвращает их.
<!--
            The purpose of the front controller is to setup the request
            environment, route the incoming request, and then dispatch any
            discovered actions. Finally, it aggregates any responses and returns
            them.
-->
        </para>

        <para>
            Основной целью расширения класса фронт-контроллера может быть
            изменение логики одного из методов доступа (например, загрузка
            другого маршрутизатори и диспетчера по умолчанию или определение
            другой логики обработки директории контроллеров) или переопределение
            того, как должны происходить маршрутизация и диспетчеризация.  
<!--
            The main reasons to extend the front controller would be to change
            the logic for one of the accessor methods (for instance, to load a
            different default router or dispatcher, or to specify different
            logic for how controller directories are handled), or to change how
            routing and dispatching occur.
-->
        </para>
    </sect2>

    
    <sect2 id="zend.controller.request.abstract">
        <title>Абстрактный класс запроса</title>

        <para>
            Абстрактный класс <code>Zend_Controller_Request_Abstract</code>
            определяет некоторые методы:
            
<!--
            The abstract <code>Zend_Controller_Request_Abstract</code> defines a
            handful of methods:
-->
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * @return string
     */
    public function getControllerName();

    /**
     * @param string $value 
     * @return self
     */
    public function setControllerName($value);

    /**
     * @return string
     */
    public function getActionName();

    /**
     * @param string $value 
     * @return self
     */
    public function setActionName($value);

    /**
     * @return string
     */
    public function getControllerKey();

    /**
     * @param string $key 
     * @return self
     */
    public function setControllerKey($key);

    /**
     * @return string
     */
    public function getActionKey();

    /**
     * @param string $key 
     * @return self
     */
    public function setActionKey($key);

    /**
     * @param string $key 
     * @return mixed
     */
    public function getParam($key);

    /**
     * @param string $key 
     * @param mixed $value 
     * @return self
     */
    public function setParam($key, $value);

    /**
     * @return array
     */
     public function getParams();

    /**
     * @param array $array 
     * @return self
     */
    public function setParams(array $array);

    /**
     * @param boolean $flag 
     * @return self
     */
    public function setDispatched($flag = true);

    /**
     * @return boolean
     */
    public function isDispatched();
}
]]></programlisting>

        <para>
            Объект запроса является контейнером для переменных запроса. Цепочке
            контроллеров нужно знать только то, как устанавливать и извлекать
            контроллер, действие, необязательные параметры и флаг
            диспетчеризации. По умолчанию запрос будет искать в своих
            параметрах определение контроллера и действия, используя ключи
            контроллера или действия.
<!--
            The request object is a container for the request environment. The
            controller chain really only needs to know how to set and retrieve the
            controller, action, optional parameters, and dispatched status. By
            default, the request will search its own parameters using the
            controller or action keys in order to determine the controller and
            action.
-->
        </para>
    </sect2>
    
    <sect2 id="zend.controller.router.interface">
        <title>Интерфейс маршрутизатора</title>

        <para>
            Интерфейс <code>Zend_Controller_Router_Interface</code> определяет
            только один метод:
<!--
            The interface <code>Zend_Controller_Router_Interface</code> provides a definition for only one method:
-->
        </para>
        <programlisting role="php"><![CDATA[<?php

  /**
   * @param  Zend_Controller_Request_Abstract $request
   * @throws Zend_Controller_Router_Exception
   * @return Zend_Controller_Request_Abstract
   */
  public function route(Zend_Controller_Request_Abstract $request);

?>]]>   </programlisting>

        <para>

            Маршрутизация производится только один раз - в то время,
            когда запрос получен системой. Назначением маршрутизатора является
            определение контроллера, действия и необязательных параметров,
            основываясь на переменных запроса, и установка их в запросе. Объект
            запроса затем передается диспетчеру. Если не найден маршрут,
            соответствующий запросу, то маршрутизатор ничего не должен делать с
            объектом запроса.
<!--
            Routing only occurs once: when the request is first received into
            the system.  The purpose of the router is to determine the
            controller, action, and optional parameters based on the request
            environment, and then set them in the request.  The request object
            is then passed to the dispatcher.  If it is not possible to map a
            route to a dispatch token, the router should do nothing to the
            request object.
-->
        </para>

    </sect2>

    <sect2 id="zend.controller.dispatcher.interface">
        <title>Интерфейс диспетчера</title>

        <para>
            <code>Zend_Controller_Front</code> сначала вызывает
            маршрутизатор для получения первого доступного диспетчеризации
            действия в запросе. Затем он входит в цикл диспетчеризации
<!--
            <code>Zend_Controller_Front</code> will first call the router to
            determine the first dispatchable action in the request. It then
            enters a dispatch loop.
-->
        </para>

        <para>
            В этом цикле он сначала устанавливает флаг диспетчеризации в объекте
            запроса и затем обрабатывает запрос (инстанцирует контроллер,
            вызывает его метод действия) Если метод действия (или методы
            pre/postDispatch в установленном плагине) сбрасывают флаг
            диспетчеризации, то фронт-контроллер будет выполнять другую итерацию
            в цикле диспетчеризации с тем действием, которое установлено на
            данный момент в объекте запроса. Это позволяет последовательно
            обрабатывать действия до тех пор, пока вся работа не будет
            выполнена. 
<!--
            In the loop, it first sets the request object's dispatched flag and
            then dispatches the request (instantiate the controller, call its
            action). If the action method (or a pre/postDispatch plugin) resets
            the request object's dispatched flag, the front controller will do
            another iteration of the dispatch loop with whatever action is
            currently set in the request object. This allows for actions to be
            processed sequentially until all work has been done.
-->
        </para>

        <para>
            Интерфейс <code>Zend_Controller_Dispatcher_Interface</code>
            определяет два метода:
<!--
            The interface <code>Zend_Controller_Dispatcher_Interface</code>
            provides definitions for two methods:
-->
        </para>
        <programlisting role="php"><![CDATA[<?php

/**
 * @param  Zend_Controller_Request_Abstract $request
 * @return boolean
 */
public function isDispatchable(Zend_Controller_Request_Abstract $request);

?>]]>   </programlisting>

        <para>
            <code>isDispatchable()</code> проверяет, является ли запрос
            пригодным к обработке. Если является, то возвращается
            <code>TRUE</code>, иначе <code>FALSE</code>. Определение того, что
            пригодно для обработки диспетчером, зависит от класса, реализующего
            интерфейс. В случае реализации по умолчанию
            (<code>Zend_Controller_Dispatcher</code>)
            это означает, что файл контроллера существует, класс существует
            в этом файле и метод, реализующий действие, существует в этом
            классе.
<!--
            <code>isDispatchable()</code> checks if a request is
            dispatchable.  If it is, it returns <code>TRUE</code>.  Otherwise,
            it returns <code>FALSE</code>.  The definition of what is
            dispatchable is left to the class implementing the interface.  In
            the case of the default implementation,
            <code>Zend_Controller_Dispatcher</code>, it means that the
            controller file exists, the class exists within the file, and the
            action method exists within the class.
-->
        </para>
        <programlisting role="php"><![CDATA[<?php

/**
 * @param  Zend_Controller_Request_Abstract $route
 * @return Zend_Controller_Request_Abstract
 */
public function dispatch(Zend_Controller_Request_Abstract $request);

?>]]>   </programlisting>

        <para>
            <code>dispatch()</code> является основным рабочим методом. Этот
            метод должен выполнять действие контроллера. Он должен возвращать
            объект диспетчеризации.
<!--
            <code>dispatch()</code> is where the work gets done.  This method
            must execute the action of the controller.  It must return a
            request object.
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.action">
        <title>Контроллер действий<!--Action Controller--></title>

        <para>
            Zend_Controller_Action осуществляет контроль за различными
            действиями в приложении. Абстрактный класс предоставляет следующие
            методы:
<!--           
            The Action Controller handles the various actions of an application.
            This abstract class provides the following methods:
-->
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * @param Zend_Controller_Request_Abstract $request Объект запроса
     * @param Zend_Controller_Response_Abstract $response Объект ответа
     * @param array $args Необязательный ассоциативный массив
     * конфигурационных переменных и переменных среды
     */
    public function __construct(Zend_Controller_Request_Abstract $request, Zend_Controller_Response_Abstract $response, array $args = array());

    /**
     * @return void
     */
    public function init();

    /**
     * @return Zend_Controller_Request_Abstract
     */
    public function getRequest();

    /**
     * @param Zend_Controller_Request_Abstract $request 
     * @return self
     */
    public function setRequest(Zend_Controller_Request_Abstract $request);

    /**
     * @return Zend_Controller_Response_Abstract
     */
    public function getResponse();

    /**
     * @param Zend_Controller_Response_Abstract $response 
     * @return self
     */
    public function setResponse(Zend_Controller_Response_Abstract $response);

    /**
     * @return array
     */
    public function getInvokeArgs();

    /**
     * @return mixed
     */
    public function getInvokeArg($name);

    public function preDispatch();

    public function postDispatch();

    /**
     * @param string $methodName
     * @param array $args
     */
    public function __call($methodName, $args);

    /**
     * @param null|Zend_Controller_Request_Abstract $request Объект запроса для
     * использования (необязательный)
     * @param null|Zend_Controller_Response_Abstract $response Объект запроса 
     * для использования (необязательный)
     * @return Zend_Controller_Response_Abstract
     */
    public function run(Zend_Controller_Request_Abstract $request = null, Zend_Controller_Response_Abstract $response = null);
]]></programlisting>

        <para>
            Конструктор требует передачи объектов запроса и ответа, также он
            принимает массив любых дополнительных конфигурационных аргументов в
            качестве третьего аргумента. Этот массив содержит параметры,
            зарегистрированные через методы <code>setParam()</code> или
            <code>setParams()</code> фронт-контроллера. В конце своего
            выполнения конструктор передает управление методу
            <code>init()</code>.   
<!--
            The constructor registers the request and response objects with the
            object, as well as an array of any additional configuration
            arguments. This last array consists of parameters registered with
            the Front Controller's <code>setParam()</code> or 
            <code>setParams()</code> methods. Once done, the constructor passes
            handling to <code>init()</code>.
-->
        </para>

        <para>
            Несмотря на то, что вы можете переопределять конструктор, мы
            советуем выполнять любые действия по инициализации в методе
            <code>init()</code> для того, чтобы обеспечить должную регистрацию
            объектов запроса и ответа.   
<!--
            While you may override the constructor, we suggest putting any
            initialization handling into <code>init()</code> to ensure the
            request and response objects are properly registered.
-->
        </para>

        <para>
            Получить доступ к любым конфигурационным аргументам,
            переданным конструктору, можно через методы
            <code>getInvokeArg()</code> и <code>getInvokeArgs()</code>.
            Рекомендуется использовать эти аргументы для передачи в такие
            объекты, как объект вида, аутентификации/авторизации или реестра
            объектов. Например:  

<!--
            Any configuration arguments passed to the constructor are later
            accessible using <code>getInvokeArg()</code> and
            <code>getInvokeArgs()</code>. The recommendation is to use such
            invocation arguments to pass in objects such as view,
            authentication/authorization, or registry objects. For example:
-->
        </para>

        <programlisting role="php"><![CDATA[
$front = Zend_Controller_Front::getInstance();
$front->setParam('view', new Zend_View())
      ->setControllerDirectory($config->controller->directory);
$response = $front->dispatch();

// Пример контроллера действия:
class FooController extends Zend_Controller_Action
{
    protected $_view = null;

    public function init()
    {
        $this->_view = $this->getInvokeArg('view');
    }
}
]]></programlisting>

        <para>
            Когда действие запущено диспетчером, можно выполнять обработку до и
            после действия с помощью методов <code>preDispatch()</code> и
            <code>postDispatch()</code>. По умолчанию они не выполняют никакой
            работы.
<!--
            When an action is dispatched, processing may be performed before and
            after the action using the <code>preDispatch()</code> and
            <code>postDispatch()</code> methods, respectively. By default, they
            are empty and do nothing.
-->

        </para>

        <para>
            Метод <code>__call()</code> принимает вызовы незарегистрированных в
            классе действий. По умолчанию он вызывает исключение, если действие
            не определено. Это должно происходить только тогда, когда не
            определен метод действия по умолчанию.
<!--
            The <code>__call()</code> method will handle any unregistered
            actions in the class. By default, it throws an exception if the
            action is not defined. This should only ever occur if the default
            action method is not defined.
-->
        </para>

        <para>
            По умолчанию соглашение по именованию методов действий подразумевает
            имя метода следующего вида: lowercaseAction, где 'lowercase'
            обозначает имя действия, а 'Action' обозначает, что этот метод
            является методом действия. Таким образом, URL
            <code>http://framework.zend.com/foo/bar</code> будет вызывать
            действие <code>FooController::barAction()</code>.

<!--
            The default naming convention for action methods is lowercaseAction,
            where 'lowercase' specifies the name of the action, and 'Action'
            specifies that the method is an action method. Thus,
            <code>http://framework.zend.com/foo/bar</code> will call
            <code>FooController::barAction()</code>.
-->
        </para>

        <para>
            Контроллеры действия могут также использоваться как контроллеры
            страниц. Наиболее типичное использование может быть таким, как
            в коде ниже:
<!--
            Action controllers may also be used as Page Controllers. Most
            typical usage would be as follows:
-->
        </para>

        <programlisting role="php"><![CDATA[
$controller = new FooController(
    new Zend_Controller_Request_Abstract(),
    new Zend_Controller_Response_Abstract()
);
$controller->run();
]]></programlisting>
        
        <note>
            <title>Использование фронт-контроллера и контроллеров действии<!--Use Front-/Action Controller--></title>

            <para>
                Мы рекомендуем использовать комбинацию фронт-контроллера и
                контроллеров действии вместо контроллера страниц для содействия
                написанию приложений, которые будут взаимодействовать друг с
                другом.
<!--
                We recommend using the Front Controller/Action Controller
                combination instead of the Page Controller paradigm to encourage
                writing applications that will inter-operate.
-->
            </para>
        </note>
    </sect2>
    
    <sect2 id="zend.controller.response.abstract">
        <title>Объект ответа<!--Response Object--></title>

        <para>
            Объект ответа служит для сбора содержимого и заголовков из 
            вызываемых действий и возвращает их клиенту. Он имеет следующие
            методы:
<!--
            The Response Object collects content and headers from the various
            actions called and returns them to the client. It has the following
            methods:
-->
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * @param string $name Имя заголовка
     * @param string $value Значение заголовка
     * @param boolean $replace Должен ли или нет заменять собой уже
     * зарегистрированный в объекте заголовок с тем же именем
     * @return self
     */
    public function setHeader($name, $value, $replace = false);

    /**
     * @return array
     */
    public function getHeaders();

    /**
     * @return void
     */
    public function clearHeaders();

    /**
     * Отправляет все заголовки
     * @return void
     */
    public function sendHeaders();

    /**
     * @param string $content
     * @return self
     */
    public function setBody($content);

    /**
     * @param string $content
     * @return self
     */
    public function appendBody($content);

    /**
     * @return string
     */
    public function getBody();

    /**
     * Выводит контент
     * @return void
     */
    public function outputBody();

    /**
     * @param Exception $e 
     * @return self
     */
    public function setException(Exception $e);

    /**
     * @return null|Exception
     */
    public function getException();

    /**
     * @return boolean
     */
    public function isException();

    /**
     * @param boolean $flag
     * @return boolean
     */
    public function renderExceptions($flag = null);

    /**
     * @return string
     */
    public function __toString();
]]></programlisting>

        <para>
            Метод <code>setBody()</code> заменяет весь контент; мы советуем
            использовать вместо него метод <code>appendBody()</code>.
            <code>__toString()</code> должен выводить весь контент и отправлять
            все заголовки. 

<!--
            <code>setBody()</code> will replace all body content; we encourage using
            <code>appendBody()</code> instead. <code>__toString()</code> should
            render any content and send all headers.
-->
        </para>

        <para>
            В объекте ответа также отлавливаются и регистрируются исключения
            из контроллера действий (до тех пор, пока не будет включено
            <code>Zend_Controller_Front::throwExceptions()</code>). Метод
            <code>isException()</code> должен возвращать булево значение,
            показывающее, было ли сгенерировано исключение или нет.
            <code>renderExceptions()</code> используется для определения того,
            должен ли метод <code>__toString()</code> выводить исключение, если
            оно было поймано.

<!--
            The response object is also where action controller exceptions are
            finally caught and registered (unless
            <code>Zend_Controller_Front::throwExceptions()</code> has been
            enabled. <code>isException()</code> should return a boolean

            The response object is also where action controller exceptions are
            finally caught and registered. <code>isException()</code> should
            return a boolean indicating whether or not this has occurred.
            <code>renderExceptions()</code> should be used to indicate whether
            <code>__toString()</code> will render exception output if an
            exception was trapped.
-->
        </para>
    </sect2>

</sect1>
