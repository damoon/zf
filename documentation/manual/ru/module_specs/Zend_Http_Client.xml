<sect1 id="zend.http.client">
    <title>Zend_Http_Client</title>

    <sect2 id="zend.http.client.introduction">
        <title>Введение</title>
        <para>
            <code>Zend_Http_Client</code> предоставляет простой интерфейс для
            произведения запросов HTTP. <code>Zend_Http_Client</code> может
            производить запросы GET, POST, PUT и DELETE.
<!--
            <code>Zend_Http_Client</code> provides an easy interface with which to perform HTTP requests.
            <code>Zend_Http_Client</code> is able to perform GET, POST, PUT and DELETE requests.
-->
        </para>
        <note>
            По умолчанию <code>Zend_Http_Client</code> реализует до 5-ти
            переадресаций HTTP. Для того, чтобы изменить это поведение, передавайте
            максимальное допустимое количество переадресаций методу <code>get()</code>.
<!--
            <code>Zend_Http_Client</code> follows up to 5 HTTP redirections by default. To change this behavior, pass the
            maximum number of allowed redirections to the <code>get()</code> method.
-->
        </note>
        <para>
            <example>
                <title>
                    Выполнение базовых запросов GET
                    <!-- Performing a Basic GET Request -->
                </title>
                <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Http/Client.php';
    try {
        $http = new Zend_Http_Client('http://example.org');
        $response = $http->get();
        if ($response->isSuccessful()) {
            echo $response->getBody();
        } else {
            echo '<p>Произошла ошибка</p>';
        }
    } catch (Zend_Http_Client_Exception $e) {
        echo '<p>Произошла ошибка (' .$e->getMessage(). ')</p>';
    }
    ?>]]></programlisting>
            </example>
        </para>
    </sect2>
    <sect2 id="zend.http.client.basic-get-requests">
        <title>
            Базовые запросы GET с установленными заголовками HTTP 
            <!-- Basic GET Requests with Specified HTTP Headers -->
        </title>
        <para>
            Конструктор <code>Zend_Http_Client</code> создает экземпляр
            <code>Zend_Http_Client</code> для отправки запросов HTTP. 
<!--
            The <code>Zend_Http_Client</code> constructor creates a <code>Zend_Http_Client</code> instance for sending
            HTTP requests.
-->
        </para>
        <para>
            Если используете <code>Zend_Http_Client</code> для одного URL,
            то в большинстве случаев можете передавать URL и соответствующие
            заголовки <emphasis>конструктору</emphasis>, как в
            следующих примерах:
<!--
            When using <code>Zend_Http_Client</code> on a single URL, in most cases you can supply the URL and
            relevant headers to the <emphasis>constructor</emphasis>, as in the following examples:
-->
        </para>
        <example>
            <title>
                Создание основного Zend_Http_Client
                <!--Creating a Basic Zend_Http_Client-->
            </title>
            <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Http/Client.php';

    // Определение URL и одного заголовка
    $http = new Zend_Http_Client('http://example.org', 'Accept: text/html');
    ?>]]>       </programlisting>
        </example>
        <para />
        <example>
            <title>
                Передача нескольких заголовков
                <!-- Sending Multiple Headers -->
            </title>
            <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Http/Client.php';

    // Установка URL и нескольких заголовков
    $http = new Zend_Http_Client('http://example.org',
                            array('Accept: text/html', 'Accept-Language: en-us,en;q=0.5'));
    ?>]]>       </programlisting>
        </example>
        <para>
            Если вы хотите использовать <code>Zend_Http_Client</code> для
            отправки запросов <emphasis>больше, чем одному</emphasis> URL-у, то
            смотрите <xref linkend="zend.http.client.requesting-multiple-domains" />.
<!--
            If you wish to use <code>Zend_Http_Client</code> to send requests to <emphasis>multiple</emphasis> URLs,
            see <xref linkend="zend.http.client.requesting-multiple-domains" />
-->
        </para>
    </sect2>
    <sect2 id="zend.http.client.requesting-multiple-domains">
        <title>
            Отправка запросов нескольким доменам
            <!-- Requesting Multiple Domains -->
        </title>
        <para>
            <code>Zend_Http_Client</code> поддерживает отправку запросов
            нескольким доменам посредством установки URL для запроса
            методом <code>Zend_Http_Client::setUri()</code>.
<!--
            <code>Zend_Http_Client</code> supports sending requests to multiple domains by setting the URL to query
            using <code>Zend_Http_Client::setUri()</code>.
-->
        </para>
        <note>
            <para>
                Это очень полезно, когда делаются запросы к нескольким лентам RSS. 
<!--
                A great use for this is when querying multiple RSS feeds.
-->
            </para>
        </note>
        <example>
            <title>
                Отправка запросов нескольким доменам
                <!-- Requesting Multiple Domains -->
            </title>
            <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Http/Client.php';

    // Создание объекта клиента
    $http = new Zend_Http_Client();

    // Установка URI к основной ленте Slashdot
    $http->setUri('http://rss.slashdot.org/Slashdot/slashdot');

    // Извлечение ленты
    $slashdot = $http->get();

    // Теперь получаем ленту новостей BBC
    $http->setUri('http://newsrss.bbc.co.uk/rss/newsonline_world_edition/technology/rss.xml');

    // Извлечение ленты
    $bbc = $http->get();
    ?>]]>   </programlisting>
        </example>
    </sect2>
    <sect2 id="zend.http.client.settimeout">
        <title>
            Изменение таймаута HTTP
            <!-- Changing the HTTP Timeout -->
        </title>
        <para>
            <code>Zend_Http_Client::setTimeout()</code> позволяет установить таймаут
            соединения HTTP в секундах.             
<!--
            <code>Zend_Http_Client::setTimeout()</code> allows you to set the timeout for the HTTP connection in
            seconds.
-->
        </para>
        <note>
            <para>
                Таймаут по умолчанию составляет 10 секунд.
<!--
                The default timeout is 10 seconds.
-->
            </para>
        </note>
    </sect2>
    <sect2 id="zend.http.client.setheaders">
        <title>
            Динамическая установка заголовков HTTP 
            <!-- Setting HTTP Headers Dynamically -->
        </title>
        <para>
            Используя <code>Zend_Http_Client::setHeaders()</code>, вы можете добавлять
            <emphasis>массив</emphasis> заголовков.
<!--
            Using <code>Zend_Http_Client::setHeaders()</code> you supply an <emphasis>array</emphasis> of
            headers.
-->
        </para>
        <important>
            <para>
                Заголовки должны следовать следующему формату:
                <option><code>Заголовок: значение</code></option>
<!--
                Headers must follow the format:
                <option><code>Header: value</code></option>
-->
            </para>
        </important>
    </sect2>
    <sect2 id="zend.http.client.making-other-requests">
        <title>
            Выполнение HTTP-запросов POST, PUT и DELETE
            <!-- Making HTTP POST, PUT, and DELETE Requests -->
        </title>
        <para>
            В <code>Zend_Http_Client</code> выполнение HTTP-запросов POST,
            PUT и DELETE облегчено тремя методами: <code>post()</code>,
            <code>put()</code> и <code>delete()</code>, соответственно.
            Методы <code>post()</code> и <code>put()</code> принимают единственный
            параметр <code>$data</code>, в котором должна быть строка с должным
            образом закодированными данными, как в следующем примере:
            <emphasis><code>name=value&amp;foo=bar</code></emphasis>.
            Метод <code>delete()</code> не имеет параметров.
<!--
            Performing HTTP POST, PUT, and DELETE requests are facilitated in <code>Zend_Http_Client</code> by three
            methods: <code>post()</code>, <code>put()</code>, and <code>delete()</code>, respectively. The
            <code>post()</code> and <code>put()</code> methods each take a single string parameter, <code>$data</code>,
            into which should be placed a string with the data properly encoded, as in the following:
            <emphasis><code>name=value&amp;foo=bar</code></emphasis>. The <code>delete()</code> method has no
            parameters.
-->
        </para>
        <example>
            <title>
                Отправка данных POST с помощью Zend_Http_Client 
                <!-- Sending POST data with Zend_Http_Client -->
            </title>
            <programlisting role="php"><![CDATA[<?php
    require_once 'Zend/Http/Client.php';

    // Создание объекта клиента
    $http = new Zend_Http_Client();

    // Установка URI к обработчику данных POST
    $http->setUri('http://example.org/post/processor');

    // Сохранение специальных переменных GET как данные HTTP POST
    $postData = 'foo=' . urlencode($_GET['foo']) . '&bar=' . urlencode($_GET['bar']);

    // Выполнение запроса HTTP POST и сохранение ответа HTTP
    $httpResponse = $http->post($postData);
    ?>]]>   </programlisting>
            <para>
                Выполнение запроса PUT точно такое же, как в примере выше для
                выполнения запросов POST - просто замените метод <code>put()</code>
                на <code>post()</code>.
<!--
                Making a PUT request is the same as in the example above for making a POST request; just substitute the
                <code>put()</code> method for <code>post()</code>.
-->
            </para>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
