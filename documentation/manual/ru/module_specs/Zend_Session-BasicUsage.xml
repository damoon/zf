<sect1 id="zend.session.basicusage">

    <title>Основы использования<!--Basic Usage--></title>

    <para>
        Zend_Session использует расширение ext/session и его суперглобальный
        массив <code>$_SESSION</code> в качестве механизма хранения
        данных сессий. Несмотря на то, что <code>$_SESSION</code> остается
        доступным в глобальном пространстве имен, разработчики должны избегать
        прямого обращения к нему с тем, чтобы Zend_Session мог наиболее
        безопасно и эффективно предоставлять свой набор функциональных
        возможностей для работы с сессиями.
<!--
        Zend_Session utilizes ext/session and its special <code>$_SESSION</code> superglobal as the storage mechanism
        for session state data. While <code>$_SESSION</code> is still available in the global namespace, developers
        should refrain from directly accessing it, so that Zend_Session can most effectively and securely provide its
        suite of session related functionality.
-->
    </para>

    <sect2 id="zend.session.basicexamples">

        <title>Примеры<!--Tutorial Examples--></title>

        <para>
            Если при инстанцировании Zend_Session не было указано пространство
            имен, то все данные будут неявным образом сохранены в пространстве
            имен <code>'Default'</code>. Пример ниже демонстрирует использование
            пространства имен <code>'Default'</code> и показывает, как
            подчитывать количество просмотров страниц на вашем веб-сайте. 
            Добавьте следующий код в файл загрузки:    
<!--
            If no namespace is specified when instantiating Zend_Session, all data will be transparently stored in the
            <code>'Default'</code> namespace. The example below demonstrates use of the <code>'Default'</code> namespace
            and shows how to count the number of times a user views pages on your website, add the following code to
            your ZF bootstrap area (except for the <code>echo</code>):
-->
        </para>

        <example>
            <title>Подсчет количества просмотров страниц<!--Counting Page Views--></title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $session = new Zend_Session();
    // увеличение на единицу при каждой загрузке страницы 
    $session->numberOfPageRequests++;
    echo "Запросов к страницам в течение данной сессии: ", $session->numberOfPageRequests;
?>]]></programlisting>
        </example>

        <para>
            Одним из многих преимуществ Zend_Session является то, что многие
            модули приложения могут использовать Zend_Session, и он
            предоставляет им некоторый уровень инкапсуляции данных. Экземпляру
            Zend_Session можно передавать необязательный аргумент $namespace в
            конструкторе, который позволяет другим компонентам, модулям и
            разрабочикам определенного кода быть уверенным в том, что их данные
            защищены отделением от других областей данных, используемых другими
            компонентами, модулями и кодами разработчиков. Пространства имен
            предоставляют эффективный и общедоступный способ защиты данных
            сессий от случайных изменений.  Имена пространств имен должны быть
            непустыми строками, не начинающимися со знака подчеркивания. Только
            основные компоненты, включенные в Zend Framework, должны
            использовать имена пространств имен, начинающиеся с 'Zend_'.
<!--
            One of the many benefits of Zend_Session is that multiple modules can use Zend_Session and be provided some
            level of data encapsulation. Zend_Session can be passed an optional $namespace argument in the constructor,
            which allows other components, modules, and developer specific code to be assured that their data is
            protected by a partition between data areas used by other components, modules, and developer code.
            Namespacing provides an effective and popular way to "secure" one a subset of your session state data
            against accidental changes. Namespace names are restricted to character sequences represented as non-empty
            PHP strings that do not begin with an underscore ('_') character. Only core components included in the Zend
            Framework should use namespace names starting with 'Zend_'.
-->
        </para>

        <example>
            <title>Новый подход: избежание конфликтов с помощью пространств имен<!--New Way: Namespaces Avoid Collisions--></title>
<programlisting role="php">
<![CDATA[<?php
    // в компоненте Zend-Auth
    require_once 'Zend/Session.php';
    $auth_session = new Zend_Session('Zend_Auth');
    $auth_session->user = "myusername";

    // в компоненте веб-сервисов
    $web_service_session = new Zend_Session('Some_Web_Service');
    $web_service_session->user = "mywebusername";
?>]]></programlisting>
        </example>

        <para>
            Пример выше приводит к тому же результату, что и код ниже за тем
            исключением, что объекты сессий сохраняют инкапсуляцию сессионных
            данных внутри их пространств имен. Различные проверки, объединенные
            с паттерном синглетон (singleton) в Zend_Session_Core усиливают
            инкапсуляцию.
<!--
            The example above achieves the same effect as the code below, except that the session objects above preserve
            encapsulation of session data within their respective namespaces. Various checks combined with a singleton
            pattern in Zend_Session_Core are responsible for enforcing the encapsulation.
-->
        </para>

        <example>
            <title>Старый подход: обращение к сессиям PHP<!--Old Way: PHP Session Access--></title>
<programlisting role="php">
<![CDATA[<?php
    $_SESSION['Zend_Auth']['user'] = "myusername";
    $_SESSION['Some_Web_Service']['user'] = "mywebusername";
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.iteration">

        <title>Итерация по пространствам имен<!--Iterating Over Session Namespaces--></title>

        <para>
            Zend_Session предоставляет полный интерфейс
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html">IteratorAggregate</ulink>,
            включая поддержку выражения <code>foreach</code>:
<!--
            Zend_Session provides the full
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html">IteratorAggregate interface</ulink>
            , including support for the <code>foreach</code> statement:
-->
        </para>

        <example>
            <title>Итерация по сессии<!--Session Iteration--></title>
<programlisting role="php">
<![CDATA[<?php
    // Zend_Session поддерживает итерацию
    require_once 'Zend/Session.php';
    $my_session = new Zend_Session();
    foreach ($my_session as $name => $value) {
        ....
    }
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.accessors">

        <title>Методы доступа для пространств имен<!--Accessors for Session Namespaces--></title>

        <para>
            Обычные методы доступа доступны через "магические" методы (magic
            methods) __set(), __unset(), __isset() и __get(). "Магические"
            методы не должны импользоваться напрямую, кроме как внутри
            подклассов Zend_Session. Вместо этого используйте обычные операторы
            для вызова этих "магических" методов, например: 
<!--
            The usual accessors are available, via the __set(), __unset(), __isset(), and __get() magic methods. The
            magic methods should not be used directly, except from within a subclass of Zend_Session. Instead, use the
            normal operators to invoke these magic methods, such as:
-->
        </para>

        <example>
            <title>Доступ к сессионным данным<!--Accessing Session Data--></title>
<programlisting role="php">
<![CDATA[<?php
            $object->property = $value;
            echo (isset($object->property) ? 'set' : 'unset');
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
