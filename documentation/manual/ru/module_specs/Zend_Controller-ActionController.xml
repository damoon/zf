<sect1 id="zend.controller.action">
	<title>Контроллеры действий<!--Action Controllers--></title>

	<sect2 id="zend.controller.action.introduction">
		<title>Введение<!--Introduction--></title>
		<para>
            <code>Zend_Controller_Action</code> является абстрактным классом, который можно использовать в реализации контроллеров действий для последующего их использования с фронт-контроллером при разработке сайта, основанного на паттерне Model-View-Controller (MVC).
<!--
            <code>Zend_Controller_Action</code> is an abstract class you may use
            for implementing Action Controllers for use with the Front
            Controller when building a website based on the
            Model-View-Controller (MVC) pattern.
-->
		</para>

		<para>
            Для того, чтобы использовать Zend_Controller_Action, нужно создать его подкласс в действующей директории контроллеров (или расширить его для создания своего базового класса контроллеров действий). Базовыми действиями являются создание подкласса Zend_Controller_Action и написание методов действий, которые соответствуют различным действиям, которыми должен управлять контроллер. Маршрутизатор и диспетчер компоненты Zend_Controller будут рассматривать любые методы в вашем классе с именем, заканчивающимся на 'Action', как возможные действия контроллеров.
<!--
            To use Zend_Controller_Action, you will need to subclass it in your
            actual action controllers (or subclass it to create your own base
            class for action controllers). The most basic operation is to
            subclass it, and create action methods that correspond to the
            various actions you wish the controller to handle for your site.
            Zend_Controller's routing and dispatch handling will autodiscover
            any methods ending in 'Action' in your class as potential
            controller actions.
-->
        </para>

        <para>
            Для примера предположим, что ваш класс определен следующим образом: 
<!--
            For example, let's say your class is defined as follows:
-->
        </para>

        <programlisting role="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // do something
    }

    public function bazAction()
    {
        // do something
    }
}
]]></programlisting>
            
        <para>
            Приведенный выше класс FooController (контроллер 'foo') определяет два действия - 'bar' и 'baz'.
<!--
            The above FooController class (controller 'foo') defines two
            actions, 'bar' and 'baz'.
-->
        </para>

        <para>
            Класс может быть дополнен инициализирующим методом, методом, используемым по умолчанию (если не был вызван метод, либо вызван несуществующий метод), перехватчиками pre- и post-dispatch и различными вспомогательными методами.
<!--
            There's much more that can be accomplished than this, such as custom
            initialization actions, default actions to call should no action (or
            an invalid action) be specified, pre- and post-dispatch hooks, and a
            variety of helper methods. This chapter serves as an overview of the
            action controller functionality
-->
        </para>
    </sect2>

	<sect2 id="zend.controller.action.initialization">
        <title>Инициализация объекта<!--Object initialization--></title>

        <para>
            Несмотря на то, что вы всегда можете переопределить конструктор контроллера действий, мы не рекомендуем делать этого. Zend_Controller_Action::__construct() выполняет некоторые важные задачи, такие, как регистрация объектов запроса и ответа, аргументов вызова, переданных из фронт-контроллера. Если необходимо переопределить контроллер, то всегда вызывайте конструктор родительского класса parent::__construct($request, $response,
            $invokeArgs) в конструкторе подкласса.
<!--
            While you can always override the action controller's constructor,
            we do not recommend this. Zend_Controller_Action::__construct()
            performs some important tasks, such as registring the request and
            response objects, as well as any custom invocation arguments passed
            in from the front controller. If you must override the constructor,
            be sure to call parent::__construct($request, $response,
            $invokeArgs).
-->
        </para>

        <para>
            Более подходящим средством выполнения инстанцирования является метод
            init(), который вызывается в конце __construct(). Например, если вы
            хотите устанавливать соединение с БД при инстанцировании:
<!--
            The more appropriate way to customize instantiation is to use the
            init() method, which is called as the last task of __construct().
            For example, if you want to connect to a database at instantiation:
-->
        </para>

        <programlisting role="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function init()
    {
        $this->db = Zend_Db::factory('Pdo_Mysql', array(
            'host'     => 'myhost',
            'username' => 'user',
            'password' => 'XXXXXXX',
            'dbname'   => 'website'
        ));
    }
}
]]></programlisting>

    </sect2>

    <sect2 id="zend.controller.action.prepostdispatch">
        <title>Перехватчики Pre- и Post-Dispatch<!--Pre- and Post-Dispatch Hooks--></title>

        <para>
            Zend_Controller_Action определяет два метода, которые вызываются до и после требуемого действия, preDispatch() и postDispatch(). Они могут быть полезны во многих случаях: проверка аутентификации и прав пользователя до запуска действия (действие может быть пропущено через вызов _forward() в preDispatch()) или размещение сгенерированного содержимого в боковой части сайта (метод postDispatch()).
<!--
            Zend_Controller_Action specifies two methods that may be called to
            bookend a requested action, preDispatch() and postDispatch(). These
            can be useful in a variety of ways: verifying authentication and
            ACLs prior to running an action (by calling _forward() in
            preDispatch(), the action will be skipped), for instance, or placing
            generated content in a sitewide template (postDispatch()).
-->
        </para>
    </sect2>

    <sect2 id="zend.controller.action.accessors">
        <title>Методы доступа<!--Accessors--></title>

        <para>
            Вместе с объектом регистрируются некоторые объекты и переменные, для
            них есть свои методы доступа.
<!--
            A number of objects and variables are registered with the object,
            and each has accessor methods.
-->
        </para>

        <itemizedlist>
            <listitem><para>
                <emphasis>Объект запроса</emphasis>: getRequest() может
                использоваться для получения объекта запроса, используемого при
                вызове действия.
<!--
                <emphasis>Request Object</emphasis>: getRequest() may be
                used to retrieve the request object used to call the action.
-->
            </para></listitem>

            <listitem>
                <para>
                    <emphasis>Объект ответа</emphasis>: getResponse() может
                    использоваться для получения объекта ответа. Некоторые
                    типичные вызовы могут выглядеть следующим образом:
<!--
                    <emphasis>Response Object</emphasis>: getResponse() may be
                    used to retrieve the response object aggregating the final
                    response. Some typical calls might look like:
-->
                </para>

                <programlisting role="php"><![CDATA[
$this->getResponse()->setHeader('Content-Type', 'text/xml');
$this->getResponse()->appendBody($content);
]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    <emphasis>Аргументы вызова</emphasis>: фронт-контроллер
                    может добавлять параметры в маршрутизатор, диспетчер и
                    контроллер действий. Для их получения используйте
                    getInvokeArg($key), можно также извлечь весь список
                    аргументов, используя метод getInvokeArgs().
<!--
                    <emphasis>Invocation Arguments</emphasis>: the front
                    controller may push parameters into the router, dispatcher,
                    and action controller. To retrieve these, use
                    getInvokeArg($key); alternatively, fetch the entire list
                    using getInvokeArgs().
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>Параметры запроса</emphasis>: Объект запроса
                    включает в себя параметры запроса, такие, как значения _GET,
                    _POST, или параметры, определенные в пути URL. Для их
                    получения используйте <code>_getParam($key)</code> или
                    <code>_getAllParams()</code>. Вы можете также установить
                    параметры запроса, используя метод <code>_setParam()</code>,
                    это полезно при перенаправлении на другие действия через
                    метод <code>_forward()</code>.
<!--
                    <emphasis>Request parameters</emphasis>: The request object
                    aggregates request parameters, such as any _GET or _POST
                    parameters, or user parameters specified in the URL's path
                    information. To retrieve these, use _getParam($key) or
                    _getAllParams(). You may also set request parameters using
                    _setParam(); this is useful when forwarding to additional
                    actions.
-->
                </para>

                <para>
                    Для определения того, существует ли параметр или нет
                    (полезно для логического ветвления), используйте
                    _hasParam($key).
<!--
                    To test whether or not a parameter exists (useful for
                    logical branching), use _hasParam($key).
-->
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.action.utilmethods">
        <title>Вспомогательные методы<!--Utility Methods--></title>

        <para>
            Кроме методов доступа, Zend_Controller_Action имеет несколько вспомогательных методов для выполнения некотрорых общих задач в методах действий (или в pre-/post-dispatch).
<!--
            Besides the accessors, Zend_Controller_Action has several utility
            methods for performing common tasks from within your action methods
            (or from pre-/post-dispatch).
-->
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>_forward($action, $controller = null, $module =
                        null, array $params = null)</emphasis>: выполняет другое действие. Если этоот метод вызывается в preDispatch(), то текущее действие будет пропущено, вместо этого начинает выполняться другое действие. В остальных случаях выполнение этого действия начинается только после выполнения текущего действия.
<!--
                    <emphasis>_forward($action, $controller = null, $module =
                        null, array $params = null)</emphasis>: 
                    perform another action. If called in preDispatch(), the
                    currently requested action will be skipped in favor of the
                    new one. Otherwise, after the current action is processed,
                    the action requested in _forward() will be executed.
-->
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>_redirect($url, $code = 302)</emphasis>:  производит перенаправление по другому адресу. Этот метод принимает URL и код статуса HTTP (необязательный параметр). Перенаправление производится сразу и выполнение программы прерывается.
<!--
                    <emphasis>_redirect($url, $code = 302)</emphasis>: redirect
                    to another location. This method takes a URL and an optional
                    HTTP status code. The redirect is performed immediately and
                    program execution is halted.
-->
                </para>

                <para>
                    Если был задан код статуса, то он будет передан команде PHP header() при произведении перенаправления.
<!--
                    If a status code is provided, it will be passed to the PHP
                    header() command when the redirect is performed.
-->
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
