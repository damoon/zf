<sect1 id="zend.date.basic">

    <title>Basic Methods</title>

    <para>
        From this chapter on speaking of dates always implies a date with a time, even when not explicitly mentioned.
        Setting only a specific date implies a time set to 00:00:00. Setting only a specific date implies a date
        internally set to 01.01.1970. The following sections show basic usage of <code>Zend_Date</code> primarily by
        example.
    </para>

    <sect2 id="zend.date.basic.creation">

        <title>The current date</title>

        <para>
            Without any arguments, constructing an instance returns an object in the default locale with the current
            date.
        </para>

        <example>
            <title>Creating the current date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date();

// Output of the current timestamp
print $date;
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.date.basic.functions">

        <title>Zend_Date by Example</title>

        <para>
            Reviewing basic methods of <code>Zend_Date</code> is a good place to start for those unfamiliar with date
            objects. A small example will be provided for each method.
        </para>

        <sect3 id="zend.date.simple.functions.get">

            <title>Ouput a Date</title>

            <para>
                The date in a <code>Zend_Date</code> object may be obtained as a localized integer or string using the
                <code>get()</code> method. There are many available options, which will be explained in later sections.
            </para>

            <example>
                <title>get() - output a date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date();

// Output of the desired date
print $date->get();
?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.date.simple.functions.set">

            <title>Setting a Date</title>

            <para>
                The <code>set()</code> method alters the date stored in the object. Again, there are many options which
                will be explored in later sections.
            </para>

            <example>
                <title>set() - set a date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date();

// Setting of a new time
$date->set('13:00:00',Zend_Date::TIMES);
print $date->get(Zend_Date::W3C);
?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.date.simple.functions.add">

            <title>Adding and Subtracting Dates</title>

            <para>
                Adding two dates with <code>add()</code> usually involves adding a real date in time with an artificial
                date part, such as 12 hours, as shown in the example below. Both <code>add()</code> and
                <code>sub()</code> use the same set of options as <code>set()</code>, which will be explained later.
            </para>

            <example>
                <title>add() - adding dates</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date();

// changes $date by adding 12 hours
$date->add('12:00:00', Zend_Date::TIMES);
print $date->get(Zend_Date::W3C);
?>]]></programlisting>
            </example>

        </sect3>

        <sect3 id="zend.date.simple.functions.compare">

            <title>Comparation of dates</title>

            <para>
                All basic <code>Zend_Date</code> methods can operate on entire dates contained in the objects, or can
                operate on date parts, such as comparing the minutes value in a date to an absolute value. For example,
                the current minutes in the current time may be compared with a specific number of minutes using
                <code>compare()</code>, as in the example below.
            </para>

            <example>
                <title>compare() - compare dates</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date();

// Comparation of both times
if ($date->compare(10, Zend_Date::MINUTE) == -1) {
    print "This hour is less than 10 minutes old";
} else {
    print "This hour is at least 10 minutes old";
}
?>]]></programlisting>
            </example>

            <para>
                For simple equality comparisons, use <code>equals()</code>, which returns a boolean.
            </para>

            <example>
                <title>equals() - identify a date or date part</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Date.php';

$date = new Zend_Date();

// Comparation of the two dates
if ($date->equals(10, Zend_Date::HOUR)) {
    print "It's 10 o'clock. Time to get to work.";
} else {
    print "It is not 10 o'clock. You can keep sleeping.";
}
?>]]></programlisting>
            </example>

        </sect3>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
