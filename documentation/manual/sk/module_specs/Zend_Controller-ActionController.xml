<sect1 id="zend.controller.action">
	<title>Action Controllers</title>

	<sect2 id="zend.controller.action.introduction">
		<title>Uvod</title>
		<para>
            <code>Zend_Controller_Action</code> je abstraktná trieda ktorá sa
            používa na vytvorenie skupiny akcii, ktoré sa používajú
            pri WWW sídle vytvorenom na základe vzoru Model-View-Controller
            (MVC).
		</para>

		<para>
            Pre použitie Zend_Controller_Action je potrebne vytvoriť odvodenú
            triedu (alebo odvodenú triedu ktorá bude základom pre ostatné
            skupiny akcii). Najčastejšie sa vytvára odvodená trieda ktorej
            metódy zodpovedajú akciám ktoré je potrebné vytvoriť na svojom WWW sídle.
            Trieda Zend_Controller automaticky používa ako akcie všetky metódy,
            ktoré končia na 'Action'.
        </para>

        <para>
            Ako príklad, uvedieme nasledujúcu odvodenú triedu:
        </para>

        <programlisting role="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // do something
    }

    public function bazAction()
    {
        // do something
    }
}
]]></programlisting>
            
        <para>
            Uvedená odvodená trieda FooController (skupina akcii 'Foo') definuje
            dve akcie: 'bar' a 'baz'.
        </para>

        <para>
            Nasledujúca časť približuje možnosti, ktoré môžu byt realizované 
            zmenou metód v odvodenej triede, ako napríklad vlastnú inicializačnú
            postupnosť, ošetrenie neexistujúcich (zlých) akcii, definovanie 
            operácii ktoré sa majú vykonať pred a po vykonaní akcie a ďalšie iné
            činnosti.
        </para>
    </sect2>

	<sect2 id="zend.controller.action.initialization">
        <title>Inicializácia objektu</title>

        <para>
            Je možne zmeniť konštruktor objektu, ale tento postup nie je
            odporúčaný. Metóda Zend_Controller_Action::__construct() realizuje
            niekoľko dôležitých úloh ako napríklad registráciu request, response
            objektov a tiež ľubovoľné vlastné parametre ktoré boli predané 
            z front controller-a. Ak je potrebné zmeniť konštruktor objektu, je
            vhodné, zavolať rodičovský konštruktor 
            parent::__construct($request, $response, $invokeArgs)
        </para>

        <para>
            Vhodnejšie je predefinovať metódu init(), ktorá sa vola ako posledná
            z konštruktoru __construct(). V tejto metóde sa napríklad môžeme 
            pripojiť k databáze:
        </para>

        <programlisting role="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function init()
    {
        $this->db = Zend_Db::factory('Pdo_Mysql', array(
            'host'     => 'myhost',
            'username' => 'user',
            'password' => 'XXXXXXX',
            'dbname'   => 'website'
        ));
    }
}
]]></programlisting>

    </sect2>

    <sect2 id="zend.controller.action.prepostdispatch">
        <title>Pre- and Post-Dispatch Hooks</title>

        <para>
            Zend_Controller_Action ponúka dve metódy, preDispatch() a postDispatch(),
            ktoré môžu byť vyvolané pri vyžiadanej akcii. Je ich možné použiť
            na rôzne úkony ako napríklad na znovu overenie prístupových práv ešte pred
            samostatnou akciou (ak sa zavolá _forward() v metóde preDispatch()
            akcia bude preskočená), alebo uloženie vygenerovaného obsahu (postDispatch()).
        </para>
    </sect2>

    <sect2 id="zend.controller.action.accessors">
        <title>Accessors</title>

        <para>
            A number of objects and variables are registered with the object,
            and each has accessor methods.
        </para>

        <itemizedlist>
            <listitem><para>
                <emphasis>Request Object</emphasis>: getRequest() may be
                used to retrieve the request object used to call the action.
            </para></listitem>

            <listitem>
                <para>
                    <emphasis>Response Object</emphasis>: getResponse() may be
                    used to retrieve the response object aggregating the final
                    response. Some typical calls might look like:
                </para>

                <programlisting role="php"><![CDATA[
$this->getResponse()->setHeader('Content-Type', 'text/xml');
$this->getResponse()->appendBody($content);
]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    <emphasis>Invocation Arguments</emphasis>: the front
                    controller may push parameters into the router, dispatcher,
                    and action controller. To retrieve these, use
                    getInvokeArg($key); alternatively, fetch the entire list
                    using getInvokeArgs().
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>Request parameters</emphasis>: The request object
                    aggregates request parameters, such as any _GET or _POST
                    parameters, or user parameters specified in the URL's path
                    information. To retrieve these, use _getParam($key) or
                    _getAllParams(). You may also set request parameters using
                    _setParam(); this is useful when forwarding to additional
                    actions.
                </para>

                <para>
                    To test whether or not a parameter exists (useful for
                    logical branching), use _hasParam($key).
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.action.utilmethods">
        <title>Utility Methods</title>

        <para>
            Besides the accessors, Zend_Controller_Action has several utility
            methods for performing common tasks from within your action methods
            (or from pre-/post-dispatch).
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>_forward($controller, $action, $params = array())</emphasis>: 
                    perform another action. If called in preDispatch(), the
                    currently requested action will be skipped in favor of the
                    new one. Otherwise, after the current action is processed,
                    the action requested in _forward() will be executed.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>_redirect($url, $code = 302)</emphasis>: redirect
                    to another location. This method takes a URL and an optional
                    HTTP status code. The redirect is performed immediately and
                    program execution is halted.
                </para>

                <para>
                    If a status code is provided, it will be passed to the PHP
                    header() command when the redirect is performed.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
