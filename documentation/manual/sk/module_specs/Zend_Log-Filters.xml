<sect1 id="zend.log.filters">
    <title>Filtre</title>

    <para>
      Filter umožňuje blokovať správy pred zapísaním do záznamu (Log). 
    </para>
    
    <sect2 id="zend.log.filters.all-writers">
      <title>Filtrovanie pre všetky zapisovače (Writers)</title>
    
      <para>
        Pre filtrovanie pred zapísaním je možné docieliť pridaním filtrov pomocou
        metódy <code>addFilter()</code> objektu <code>Zend_Log</code>:  
        
        <programlisting role="php"><![CDATA[<?php

$logger = new Zend_Log();

$writer = new Zend_Log_Writer_Stream('php://output');
$logger->addWriter($writer);

$filter = new Zend_Log_Filter_Priority(Zend_Log::CRIT);
$logger->addFilter($filter);

// blocked
$logger->info('Informational message');

// logged
$logger->emerg('Emergency message');

?>]]></programlisting>
        Správa musí prejsť cez všetky filtre predtým ako bude zapísaná pomocou zapisovača 
      </para>
    </sect2>
    
    <sect2 id="zend.log.filters.single-writer">
      <title>Filtrovanie pre konkrétnu inštanciu zapisovača</title>
      
      <para>
        Filtrovanie pre jednotlivé inštancie zapisovača je potrebné zavolať
        metódu <code>addFilter</code> konkrétneho zapisovača:
      
        <programlisting role="php"><![CDATA[<?php

$logger = new Zend_Log();

$writer1 = new Zend_Log_Writer_Stream('/path/to/first/logfile');
$logger->addWriter($writer1);

$writer2 = new Zend_Log_Writer_Stream('/path/to/second/logfile');
$logger->addWriter($writer2);

// add a filter only to writer2
$filter = new Zend_Log_Filter_Priority(Zend_Log::CRIT);
$writer2->addFilter($filter);

// logged to writer1, blocked from writer2
$logger->info('Informational message');

// logged by both writers
$logger->emerg('Emergency message');

?>]]></programlisting>      
    </para>
  </sect2>
</sect1>
