<sect1 id="zend.introduction">
    <title>简介</title>
    <para>
     Zend类是整个Zend Framework的基类，之所以有这个类是为了使Zend Framework遵循DRY原则（Don't Repeat Yourself）。这个类只包含静态方法，这些类方法具有Zend Framework中的很多组件都需要的功能。
	</para>

	<para>	(Zend类是个功能性的类，它只包含静态方法，也就是说，不需要实例化就可以直接调用Zend的各种功能方法/函数。通俗地说，Zend类相当于我们熟悉的functions.inc.php，而且是corefunctions.inc.php，提供了最核心的函数。 --Haohappy注)
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>Zend::loadFile()</title>

    <para>
    <code>Zend::loadFile()</code> 用来包含PHP文件。它其实是将PHP的include()函数封装而成的一个静态方法。当包含文件失败时，会抛出异常<code>Zend_Exception</code> 。
    </para>

    <programlisting role="php">
	<![CDATA[<?php	
	loadFile($filename, $dirs=null, $once=false)
	?>]]>
	</programlisting>

    <para>$filename参数指定需要加载的文件，注意$filename不需要指定任何路径，只需要文件名即可。ZF会对文件作安全性检查。$filename只能由字母，数字，连接符-,下划线_及英文句号.组成(半角)。$dir则不限，可以使用中文等。
    </para>


    <para>$dirs参数用来指定文件所在目录，如果为空，则程序将会到系统的include_path下寻找文件是否存在（include_path可在php.ini中设置--Haohappy注）
    </para>

    <para>
    $once参数为布尔类型，只能是true或false，两者区别就和include()和include_once()的区别一样。
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>   Zend::loadClass()用来加载一个PHP类文件，这个文件的文件名必须和文件中的类同名。loadClass()会检查文件中的类是否存在。如果文件中的类不存在，那么就会抛出一个Zend_Exception异常。
    </para>

	<para>
	(例：TestClass.php中有个类TestClass，使用Zend::loadClass("TestClass")就可加载这个类，这种作法类似于Java-- Haohappy注)
	</para>

    <programlisting role="php"><![CDATA[<?php
	
loadClass($class, $dirs)

?>]]></programlisting>

      <para>    如果没有指定$dirs参数，而文件名中存在下划线，那么loadClass()会自动把下划线当成目录分隔符，去相应的目录中去查找文件。
    </para>

	<para>
	例如：loadClass("Zend_Example_Class") 没指定$dirs参数 ，则loadClass()会自动到Zend/Example/目录下去查找Class.php文件
	</para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>    Zend::loadInterface()和Zend::loadClass()的用法是一样的，区别在于loadInterface()是用来加载接口。Zend::loadClass() 不能用来加载接口，因为PHP函数class_exists()不能检查Interface是否存在（PHP 5.0.2之前版本），所以需要用Zend::loadInterface()来代替。
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
    <code>Zend::loadClass()</code> 这个方法不能用于加载接口(interface)因为PHP函数  <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink> 不能用于检测接口是否存在 (since PHP 5.0.2).  请使用 <code>Zend::loadInterface()</code> 代替.
    </para>

    <para>    同样，如果你没有指定目录，但是文件中含有下划线_，Zend::loadInterface()也会自动到相应目录去寻找文件，这和Zend::loadClass()是一样的。
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>判定某个文件是否可读，可读则返回true，否则返回false。</para>

    <programlisting role="php"><![CDATA[<?php
	
isReadable($filename)

?>]]></programlisting>

    <para>这个方法是将PHP函数is_readable()封装而成的，is_readable()不会自动查找include_path下的文件，而Zend::isReadable()可以。
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>
    <para>Zend::dump()打印和返回某个表达式或变量的信息。它是将var_dump()封装而成的。它默认带上了(X)HTML的pre标签，使输出更美观。
    </para>

    <programlisting role="php"><![CDATA[<?php
	
dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
    <code>$var</code> 参数指定要输出信息的变量或表达式。
    </para>

    <para>
    $label标签参数是用来加在输出信息之前的一段文本。
    </para>

    <para>dump()总会返回信息，但不一定会输出，这取决于$echo参数，指定是否要将信息输出到屏幕。
    </para>

	<para>	(这非常有用，例如你一次要查看多个变量的信息，你可以为不同变量设置不同label，如“user”，“password”等等，这样不会弄乱--Haohappy注)
	</para>
</sect1>


<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
    注册一个对象到对象仓库。
    </para>

    <programlisting role="php"><![CDATA[<?php
	
register($name, $object)

?>]]></programlisting>

    <para>
    ZendFramework的"注册表"是一个提供单件对象(singleton instances)给应用程序的机制.
	通过注册一个对象,你可以在你需要时再取得这个对象.
    </para>

    <para>
    <code>$name</code> 是对象名称,指定后你可以通过$name来访问这个对象.
    </para>

    <para>    <code>$name</code>参数必须是一个字符串。在注册库中只能存储对象，对象将不会被删除，而一个对象只能有一个实例。　如果不符合这几个条件，就会抛出一个Zend_Exception异常。
    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
    在“对象注册表”中返回一个对象，或者列出所有已经注册的对象。
    </para>

    <programlisting role="php"><![CDATA[<?php
	
registry($name=null)

?>]]></programlisting>

    <para>
   如果$name参数为空，会返回一个数组，key为对象名称，value为对象的类名称。
    </para>

    <para>
    如果$name参数为字符串，将返回相应的对象。如果对象不存在，抛出Zend_Exception异常。
    </para>

    <para>    
	想快速确定一个对象是否已经注册，可以使用Zend::isRegistered()。
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->