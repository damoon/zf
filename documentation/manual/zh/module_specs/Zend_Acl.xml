<sect1 id="zend.acl.introduction">
    <title>简介</title>

    <para>
        Zend_Acl 提供轻量并灵活的访问控制列表 (ACL) 功能和特权管理。一般地，应用软件可以利用这样的功能控制其它的请求对象来访问特定保护的对象。
    </para>

    <para>
        在本文档中，
 
         <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="strong">Resource</emphasis> 是一个访问被控制的对象。
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="strong">Role</emphasis> 是一个可以发出请求去访问Resource的对象。
                </para>
            </listitem>
        </itemizedlist>

        简单来说，<emphasis role="strong">Roles 请求访问 Resources</emphasis>.
        例如，如果一个人要用汽车，这样，这个人就是发出请求的 Role，而这辆汽车就是 Resource, 所以使用这辆车就在控制之中了。
    </para>

    <para>
         通过规范和访问控制列表（ACL）的使用，应用软件可以控制如何授权给发出请求的对象（Roles）来访问被保护的对象（Resources）。
    </para>

    <sect2 id="zend.acl.introduction.resources">
        <title>关于 Resources</title>
        <para>
            In Zend_Acl, creating a Resource is very simple. Zend_Acl provides
            <code>Zend_Acl_Resource_Interface</code> to facilitate developers' creating Resources. A class need only
            implement this interface, which consists of a single method, <code>getResourceId()</code>, in order
            for Zend_Acl to consider the object to be a Resource. Additionally, <code>Zend_Acl_Resource</code> is
            included with Zend_Acl as a basic Resource implementation for developers to extend where desirable.
        </para>
        <para>
            Zend_Acl provides a tree structure to which multiple Resources (or "areas under access control")
            can be added. Since Resources are stored in such a tree structure, they can be organized from the
            general (toward the tree root) to the specific (toward the tree leaves). Queries upon
            a specific Resource will automatically search the Resource's hierarchy for rules assigned to ancestor
            Resources, allowing for simple inheritance of rules. For example, if a default rule is to be
            applied to each building in a city, one would simply assign the rule to the city, instead of
            assigning the same rule to each building. Some buildings may require exceptions to such a
            rule, however, and this is achieved easily in Zend_Acl by assigning such exception rules to
            each such building that requires an exception to the rule. a Resource may inherit from only one
            parent Resource, though this parent Resource can have its own parent Resource, and so on.
        </para>
        <para>
            Zend_Acl also supports privileges upon Resources (e.g., "create", "read", "update", "delete"), and
            the developer can assign rules that affect all privileges or specific privileges upon a Resource.
        </para>
    </sect2>

    <sect2 id="zend.acl.introduction.roles">
        <title>关于 Roles</title>
        <para>
            Like with Resources, creating a Role is also very simple. Zend_Acl provides
            <code>Zend_Acl_Role_Interface</code> to facilitate developers' creating Roles. A class need only
            implement this interface, which consists of a single method, <code>getRoleId()</code>, in order
            for Zend_Acl to consider the object to be a Role. Additionally, <code>Zend_Acl_Role</code> is
            included with Zend_Acl as a basic Role implementation for developers to extend where desirable.
        </para>
        <para>
            In Zend_Acl, a Role may inherit from one or more Roles. This is to support inheritance of rules
            among Roles. For example, a user Role, such as "sally", may belong to one or more role Roles,
            such as "editor" and "administrator". The developer can assign rules to "editor" and
            "administrator" separately, and "sally" would inherit such rules from both, without having to
            assign rules directly to "sally".
        </para>
        <note>
            <para>
                Since Zend_Acl supports inheriting rules from multiple Roles, which may possibly
                conflict with each other, a way to unambiguously resolve such conflicts is necessary. Zend_Acl
                resolves such potential conflicts by considering the most recently inherited Role as highest
                priority. That is, once a rule is found for a "parent" Role, starting at the most recently
                inherited Role, no other rules are considered, since the highest priority rule has already been
                reached.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.creating">
        <title>建立访问控制列表(ACL)</title>

        <para>
            An ACL can represent any set of physical or virtual objects that you wish.
            For the purposes of demonstration, however, we will create a basic Content Management System ACL
            that maintains several tiers of groups over a wide variety of areas. To create a new ACL object,
            we instantiate the ACL with no parameters:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();]]></programlisting>

        <note>
            <para>
                Zend_Acl is a "whitelist" implementation by default, which means that unless otherwise
                specified by the developer, Zend_Acl denies access to every privilege upon every Resource by
                every Role.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.role_registry">
        <title>注册 Roles</title>

        <para>
            Content Management Systems will nearly always require a hierarchy of permissions
            to determine the authoring capabilities of its users. There may be a 'Guest' group to
            allow limited access for demonstrations, a 'Staff' group for the majority of CMS users
            who perform most of the day-to-day operations, an 'Editor' group for those responsible for publishing,
            reviewing, archiving and deleting content, and finally an 'Administrator' group whose tasks may
            include all of those of the other groups as well as maintenance of sensitive information,
            user management, back-end configuration data and backup/export. This set of permissions can be
            represented in a Role registry, allowing each group to inherit privileges from 'parent' groups,
            as well as providing distinct privileges for their unique group only.
            The permissions may be expressed as follows:
        </para>

        <table>
          <title>Access Controls for an Example CMS</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Unique permissions</entry>
                <entry>Inherit permissions from</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Guest</entry>
                <entry>View</entry>
                <entry>N/A</entry>
              </row>
              <row>
                <entry>Staff</entry>
                <entry>Edit, Submit, Revise</entry>
                <entry>Guest</entry>
              </row>
              <row>
                <entry>Editor</entry>
                <entry>Publish, Archive, Delete</entry>
                <entry>Staff</entry>
              </row>
              <row>
                <entry>Administrator</entry>
                <entry>(Granted all access)</entry>
                <entry>N/A</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
            For this example, <code>Zend_Acl_Role</code> is used, but any object that implements
            <code>Zend_Acl_Role_Interface</code> is acceptable. These groups can be added to the
            Role registry as follows:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

// Add groups to the Role registry using Zend_Acl_Role
require_once 'Zend/Acl/Role.php';

// Guest does not inherit access controls
$roleGuest = new Zend_Acl_Role('guest');
$acl->addRole($roleGuest);

// Staff inherits from guest
$acl->addRole(new Zend_Acl_Role('staff'), $roleGuest);

/* alternatively, the above could be written:
$roleGuest = $acl->addRole(new Zend_Acl_Role('staff'), 'guest');
//*/

// Editor inherits from staff
$acl->addRole(new Zend_Acl_Role('editor'), 'staff');

// Administrator does not inherit access controls
$acl->addRole(new Zend_Acl_Role('administrator'));]]></programlisting>

    </sect2>

    <sect2 id="zend.acl.introduction.defining">
        <title>定义访问控制</title>

        <para>
            Now that the ACL contains the relevant Roles, rules can be established that define how
            Resources may be accessed by Roles. You may have noticed that we have not defined any particular
            Resources for this example, which is simplified to illustrate that the rules apply to all Resources.
            Zend_Acl provides an implementation whereby rules need only be assigned from general to specific,
            minimizing the number of rules needed, because Resources and Roles inherit rules that are defined upon
            their ancestors.
        </para>

        <para>
            Consequently, we can define a reasonably complex set of rules with a minimum amount of code.
            To apply the base permissions as defined above:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';

$roleGuest = new Zend_Acl_Role('guest');
$acl->addRole($roleGuest);
$acl->addRole(new Zend_Acl_Role('staff'), $roleGuest);
$acl->addRole(new Zend_Acl_Role('editor'), 'staff');
$acl->addRole(new Zend_Acl_Role('administrator'));

// Guest may only view content
$acl->allow($roleGuest, null, 'view');

/* alternatively, the above could be written:
$acl->allow('guest', null, 'view');
//*/

// Staff inherits view privilege from guest, but also needs additional privileges
$acl->allow('staff', null, array('edit', 'submit', 'revise'));

// Editor inherits view, edit, submit, and revise privileges from staff,
// but also needs additional privileges
$acl->allow('editor', null, array('publish', 'archive', 'delete'));

// Administrator inherits nothing, but is allowed all privileges
$acl->allow('administrator');]]></programlisting>

        <para>
            The <code>null</code> values in the above <code>allow()</code> calls are used to indicate
            that the allow rules apply to all Resources.
        </para>

    </sect2>

    <sect2 id="zend.acl.introduction.querying">
        <title>Querying the ACL</title>

        <para>
            We now have a flexible ACL that can be used to determine whether requesters have permission
            to perform functions throughout the web application. Performing queries is quite simple using
            the <code>isAllowed()</code> method:
        </para>

        <programlisting role="php"><![CDATA[<?php
echo $acl->isAllowed('guest', null, 'view') ?
     "allowed" : "denied"; // allowed

echo $acl->isAllowed('staff', null, 'publish') ?
     "allowed" : "denied"; // denied

echo $acl->isAllowed('staff', null, 'revise') ?
     "allowed" : "denied"; // allowed

echo $acl->isAllowed('editor', null, 'view') ?
     "allowed" : "denied"; // allowed because of inheritance from guest

echo $acl->isAllowed('editor', null, 'update') ?
     "allowed" : "denied"; // denied because no allow rule for 'update'

echo $acl->isAllowed('administrator', null, 'view') ?
     "allowed" : "denied"; // allowed because administrator is allowed all privileges

echo $acl->isAllowed('administrator') ?
     "allowed" : "denied"; // allowed because administrator is allowed all privileges

echo $acl->isAllowed('administrator', null, 'update') ?
     "allowed" : "denied"; // allowed because administrator is allowed all privileges]]></programlisting>

    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
