<sect1 id="zend.view.introduction">

    <title>简介</title>
    
    <para>        Zend_View是用来在MVC模式中处理“View”部份的一个类。也就是说它用来使View部份的代码与Model及controller部分分离。它提供了helper,output filter,variable escaping等几个功能组件。
    </para>
    
    <para>
        Zend_View使用PHP本身作为你的模板，或者你也可以建立其它模板引擎的实例，并用你的view代码来对其进行操作。
    </para>

    <para>
        使用Zend_View主要有两步：
        
        1. 你的Controller建立一个Zend_View实例，并将需要的变量传递给它；
        
        2. Controller告诉Zend_View显示一个特定的视图，生成View输出的内容。
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>控制器脚本</title>
        
        <para>
           下面是一个简单的例子。你有一个书籍清单，想把它输出来。控制器代码可能看起来是这样的：
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// use a model to get the data for book authors and titles.
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

//传递数据给Zend_View类的实例　
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

//调用一段View代码"booklist.php"来显示数据
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>视图脚本</title>
        
        <para>            现在我们看看相关的视图代码"booklist.php"。这是一段普通的代码，但是有一点特别：它是在Zend_View实例的内部运行的。(controller传递给Zend_View实例的变量是public的)。一段非常基本的视图代码看起来是这样的：
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- A table of some books. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>There are no books to display.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>            
			注意我们使用escape()来过滤输出。
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>控制器脚本</title>
    
    <para>
        控制器是你初始化和配置 Zend_View的地方。你可以分配变量给view，并让view显示输出。
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>变量赋值</title>
        
        <para>
            控制器需要向视图传递必要的变量，在它处理view的代码之前。通常你可以一次一个地完成变量赋值的工作。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>            然而这样比较麻烦，那么可以将它们放进一个数组或对象中去。assign()方法允许你通过数组或对象进行赋值。下面这个例子和上例（一次一个赋值）的结果是一样的：
        </para>        
        
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// assign an array of key-value pairs, where the
// key is the variable name, and the value is
// the assigned value.
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// do the same with an object's public properties;
// note how we cast it to an array when assigning.
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
             另外，你也可使用这样的方法：

		第一个参数是变量名，第二个是变量的值。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>调用视图脚本并打印输出</title>
        
        <para>            完成变量赋值后，Controller通知Zend_View通过render()调用一段特定的视图代码。注意，这个方法将会返回处理后的视图，而不是直接输出，所以你要用print或echo来打印输出。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>视图脚本的路径</title>
        
        <para>
            默认地， Zend_View希望你的View脚本和Controller脚本在同一目录下。例如你的Controller文件在 “/path/to/app/controllers”目录下，并调用$view->render('someView.php')，则 Zend_View会查找"/path/to/app/controllers/someVire.php"文件。
        </para>
        
        <para>
            显然，你的View代码很可能放在其它地方，那么需要告诉 Zend_View去哪里找，使用 setScriptPath()方法。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            现在当你调用$view->render('someView.php')，它会去找"/path/to/app/views/someView.php"。
        </para>
        
        <para>            事实上，你可以通过addScriptPath()增加路径。Zend_View会到最近增加的路径目录下找View脚本。这个方法允许你覆写默认的View，这样你可以定制和使用自己的皮肤或主题。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// now when you call $view->render('booklist.php'), Zend_View will 
// look first for "/path/to/custom/booklist.php", then for
// "/path/to/app/views/booklist.php", and finally in the current
// directory for "booklist.php".
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>视图脚本</title>
        
    <para>        一旦你的Controller已经完成了变量赋值和调用render()，Zend_View就会调用视图脚本并在Zend_View的实例内部执行。因此，在你的视图脚本内，$this是指向Zend_View的实例的。
    </para>
    
    <para>
        如果控制器有一个变量"something" ，那么视图代码中就要用$this->something来调用。这样的作法可以让你分清哪些是来自Zend_View实例的变量，哪些是视图自身的变量。
    </para>
    
    <para>
        为了说明，这里有一个例子：
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- A table of some books. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>There are no books to display.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>过滤输出</title>
        
        <para>            View脚本的最重要的工作之一是保证输出的内容是合适的，比如需要避免跨站攻击漏洞。除非你使用一个函数，类方法或协助器（helper）来过滤内容，你需要在输出时对变量进行过滤。
        </para>
        
        <para>
            Zend_View带有一个escape()方法来提供这个功能：
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// bad view-script practice:
echo $this->variable;

// good view-script practice:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>            默认地，escape()方法使用PHP函数htmlspecialchars()来过滤。你可以通过setEscape()方法来在Controller内告诉Zend_View需要怎么过滤。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// create a Zend_View instance
$view = new Zend_View();

// tell it to use htmlentities as the escaping callback
$view->setEscape('htmlentities');

// or tell it to use a static class method as the callback
$view->setEscape(array('SomeClass', 'methodName'));

// or even an instance method
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// and then render your view
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            设定的过滤函数会将需要过滤的变量作为其第一个参数，其它参数是可选的。
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>模板系统</title>
        
        <para>            许多开发者觉得尽管PHP本身就是一个强大的模板系统，但对模板设计师来说，使用PHP标签过于复杂。所以，View脚本可能要被用来初始化和操作一个其它模板对象的实例，例如PHPLIB风格的模板。这时View脚本可能是这样的：
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            下面是相关的模板文件：
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Author</th>
        <th>Title</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>There are no books to display.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>视图协助器（View Helper）</title>
    
    <para>        在你的视图脚本中，经常需要执行某些特定的复杂的函数，例如，格式化日期，生成表单对象，或者显示action的链接等等。你可以使用协助器类来完成这些工作。
    </para>
    
    <para>        你可以用$this->helperName()来调用helper。这时Zend_View会加载Zend_View_Helper_HelperName类，建立一个对象实例，并调用它的helperName()方法。对象的实例会在 Zend_View的实例内一直存在，并可以被$this->helperName()重复调用。
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>基本的协助器</title>
        
        <para>
            Zend_View自带了几个helper类，都是用来生成组件的。每个都有自动过滤变量的功能。
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): 生成&lt;input
                type="button" /&gt; 
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): 生成&lt;input type="checkbox" /&gt;，$options参数是一个数组，第一个值是“checked”,第二个值是&quot;unchecked&quot;(默认为“1”和&quot;0&quot;)。如果$value匹配&quot;checked&quot;值，则这个checkbox显示为已选中。
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): 生成&lt;input
                type="file" /&gt; 
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): 生成&lt;input
                type="hidden" /&gt; 
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): 生成&lt;input
                type="password" /&gt; 
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): 生成一系列&lt;input type="button" /&gt;，每个$options数组元素一个，key为radio的值，并且元素的值是radio的标签。
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): 生成&lt;input
                type="reset" /&gt;
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): 建立一个&lt;select&gt;...&lt;/select&gt;标签，其中的每个&lt;option&gt;对应于一个$option数组元素。元素的key是option的值，元素的值是option的标签。$value这个值的option默认为选中。
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): 生成&lt;input
                type="submit" /&gt; 
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): 生成&lt;input
                type="text" /&gt; 
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): 生成&lt;textarea&gt;...&lt;/textarea&gt; 
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            使用非常简单，下面是个例子。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// inside your view script, $this refers to the Zend_View instance.
// 
// say that you have already assigned a series of select options under
// the name $countries as array('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany').
?>
<form action="action.php" method="post">
    <p><label>Your Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Your Country:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Would you like to opt in?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no') ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            以上视图脚本会输出这样的结果：
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Your Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Your Country:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Would you like to opt in?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Helper 的路径</title>
        
        <para>
            就像视图脚本那样，你的控制器也可以设定helper的路径给Zend_View。默认地，Zend_View会到 “Zend/View/Helper/”下查找helper类。你可以用setHelperPath() 和 addHelperPath()来定义自己的路径。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            你可以用addHelperPath()来增加helper的路径， Zend_View将使用最近增加的路径。这样你可以使用自己的helper。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// now when you call $this->helperName(), Zend_View will look first for
// "/other/path/to/helpers/HelperName.php", then for
// "/path/to/some/helpers/HelperName", and finally for
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>编写自定义的Helper类</title>
        
        <para>
            编写自定义的Helper类很容易，只要遵循以下几个原则即可：
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                类名必须是 Zend_View_Helper_*，*是helper的名称。例如，你在写一个名为“specialPurpose”的类，类名将是Zend_View_Helper_SpecialPurpose（注意大小写）
            </para></listitem>
            
            <listitem><para>
                类必须有一个public的方法，方法名与helper名称相同。这个方法将在你的模板调用"$this->specialPurpose()"时执行。在我们的“specialPurpose”例子中，相应的方法声明可以是“public function specialPurpose()”。
            </para></listitem>
            
            <listitem><para>
                一般来说，Helper类不应该echo或print或有其它形式的输出。它只需要返回值就可以了。返回的值应当被过滤。
            </para></listitem>
            
            <listitem><para>
                类文件的命名应该是helper方法的名称，比如在"specialPurpose"例子中，文件要存为“SpecialPurpose.php”。
            </para></listitem>
        </itemizedlist>
        
        <para>
           把helper类的文件放在你的helper路径下， Zend_View就会自动加载，实例化，持久化，并执行。
        </para>
        
        <para>
            下面是一个例子：
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>            在视图代码中，你可以调用SpecialPurpose协助器任意次。它只需要实例化一次，就会在Zend_View实例的生命周期内持久存在。
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// remember, in a view script, $this refers to the Zend_View instance.
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            输出是这样的：
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->