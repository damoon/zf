<sect1 id="zend.view.introduction">

    <title>¼ò½é</title>
    
    <para>
        Zend_View is a class for working with the "view" portion of
        the model-view-controller pattern.  That is, it exists to
        help keep the view script separate from the model and
        controller scripts.  It provides a system of helpers, output
        filters, and variable escaping.
    </para>
    
    <para>
        Zend_View is template system agnostic; you may use PHP as
        your template language, or create instances of other
        template systems and manipulate them within your view
        script.
    </para>

    <para>
        Essentially, using Zend_View happens in two major steps:
        
        1.  Your controller script creates an instance of
        Zend_View and assigns variables to that instance.
        
        2. The controller tells the Zend_View to render a particular
        view, thereby handing control over the view script, which 
        generates the view output.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Controller Script</title>
        
        <para>
            As a simple example, let us say your controller has a list
            of book data that it wants to have rendered by a view.  The
            controller script might look something like this:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// use a model to get the data for book authors and titles.
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// now assign the book data to a Zend_View instance
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// and render a view script called "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>View Script</title>
        
        <para>
            Now we need the associated view script, "booklist.php". 
            This is a PHP script like any other, with one exception:  it
            executes inside the scope of the Zend_View instance, which
            means that references to $this point to the Zend_View
            instance properties and methods.  (Variables assigned to the
            instance by the controller are public properties of the
            Zend_View instance.)  Thus, a very basic view script could
            look like this:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- A table of some books. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>There are no books to display.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Note how we use the "escape()" method to apply output
            escaping to variables.
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>Controller Scripts</title>
    
    <para>
        The controller is where you instantiate and configure Zend_View.
        You then assign variables to the view, and tell the view to 
        render output using a particular script.
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>Assigning Variables</title>
        
        <para>
            Your controller script should assign necessary variables to the view
            before it hands over control to the view script.  Normally, you
            can do assignments one at a time by assigning to property names
            of the view instance:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>
            However, this can be tedious when you have already collected the
            values to be assigned into an array or object.
        </para>
        
        <para>
            The assign() method lets you assign from an array or object "in
            bulk."  The following examples have the same effect as the above
            one-by-one property assignments.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// assign an array of key-value pairs, where the
// key is the variable name, and the value is
// the assigned value.
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// do the same with an object's public properties;
// note how we cast it to an array when assigning.
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
            Alternatively, you can use the assign method to assign
            one-by-one by passing a string variable name, and then the
            variable value.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>Rendering a View Script</title>
        
        <para>
            Once you have assigned all needed variables, the controller
            should tell Zend_View to render a particular view script.
            Do so by calling the render() method.  Note that the method will
            return the rendered view, not print it, so you need to print or
            echo it yourself at the appropriate time.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>View Script Paths</title>
        
        <para>
            By default, Zend_View expects your view scripts to be in the
            same directory as the controller script.  For example, if
            your controller script is at "/path/to/app/controllers" and
            it calls $view->render('someView.php'), Zend_View will look
            for "/path/to/app/controllers/someVire.php".
        </para>
        
        <para>
            Obviously, your view scripts are probably located elsewhere.  To
            tell Zend_View where it should look for view scripts, use the
            setScriptPath() method.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            Now when you call $view->render('someView.php'), it will look
            for "/path/to/app/views/someView.php".
        </para>
        
        <para>
            In fact, you can "stack" paths using the addScriptPath()
            method. As you add paths to the stack, Zend_View will look
            at the most-recently-added path for the requested view
            script.  This allows you override default views with custom
            views so that you may create custom "themes" or "skins" for
            some views, while leaving others alone.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// now when you call $view->render('booklist.php'), Zend_View will 
// look first for "/path/to/custom/booklist.php", then for
// "/path/to/app/views/booklist.php", and finally in the current
// directory for "booklist.php".
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>View Scripts</title>
        
    <para>
        Once your controller has assigned variables and called render(),
        Zend_View then includes the requested view script and executes
        it "inside" the scope of the Zend_View instance.  Therefore,
        in your view scripts, references to $this actually point to the
        Zend_View instance itself.
    </para>
    
    <para>
        Variables assigned to the view from the controller are referred
        to as instance properties.  For example, if the controller were
        to assign a variable 'something', you would refer to it as
        $this->something in the view script.  (This allows you to keep
        track of which values were assigned to the script, and which are
        internal to the script itself.)
    </para>
    
    <para>
        By way of reminder, here is the example view script from the
        Zend_View introduction.
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- A table of some books. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>There are no books to display.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Escaping Output</title>
        
        <para>
            One of the most important tasks to perform in a view script
            is to make sure that output is escaped properly; among other
            things, this helps to avoid cross-site scripting attacks. 
            Unless you are using a function, method, or helper that does
            escaping on its own, you should always escape variables when
            you output them.
        </para>
        
        <para>
            Zend_View comes with a method called escape() that does such
            escaping for you.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// bad view-script practice:
echo $this->variable;

// good view-script practice:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            By default, the escape() method uses the PHP htmlspecialchars()
            function for escaping.  However, depending on your environment,
            you may wish for escaping to occur in a different way.  Use the
            setEscape() method at the controller level to tell Zend_View
            what escaping callback to use.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// create a Zend_View instance
$view = new Zend_View();

// tell it to use htmlentities as the escaping callback
$view->setEscape('htmlentities');

// or tell it to use a static class method as the callback
$view->setEscape(array('SomeClass', 'methodName'));

// or even an instance method
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// and then render your view
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            The callback function or method should take the value to be
            escaped as its first parameter, and all other parameters should
            be optional.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Template Systems</title>
        
        <para>
            Although PHP is itself a powerful template system, many
            developers feel it is too powerful or complex for their
            template designers.  As such, the view script may be used to
            instantiate and manipulate a separate template object, such
            as a PHPLIB-style template.  The view script for that kind
            of activity might look something like this:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            These would be the related template files:
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Author</th>
        <th>Title</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>There are no books to display.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>View Helpers</title>
    
    <para>
        In your view scripts, often it is necessary to perform certain
        complex functions over and over; e.g., formatting a date,
        generating form elements, or displaying action links.  You can
        use helper classes to perform these behaviors for you.
    </para>
    
    <para>
        To use a helper in your view script, call it using
        $this->helperName(). Behind the scenes, Zend_View will load the
        Zend_View_Helper_HelperName class, create an object instance of
        it, and call its helperName() method.  The object instance is
        persistent within the Zend_View instance, and is reused for all
        future calls to $this->helperName().
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Initial Helpers</title>
        
        <para>
            Zend_View comes with an initial set of helper classes, all of
            which relate to form element generation.  They each perform the
            appopriate output escaping automatically.  They are:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): Creates an &lt;input
                type="button" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): Creates
                an &lt;input type="checkbox" /&gt; element.  The
                $options param is an array where the first value is the
                "checked" value, and the second is the "unchecked" value
                (the defaults are '1' and '0').  If $value matches the
                "checked" value, the box will be checked for you.
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): Creates an &lt;input
                type="file" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): Creates an &lt;input
                type="hidden" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): Creates an &lt;input
                type="password" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): Creates a
                series of &lt;input type="radio" /&gt; elements, one for
                each of the $options elements.  In the $options array, the
                element key is the radio value, and the element value is the
                radio label.  The $value radio will be preselected for you.
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): Creates an &lt;input
                type="reset" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): Creates a
                &lt;select&gt;...&lt;/select&gt; block, with one
                &lt;option&gt;one for each of the $options elements.  In
                the $options array, the element key is the option value,
                and the element value is the option label.  The $value
                option(s) will be preselected for you.
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): Creates an &lt;input
                type="submit" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): Creates an &lt;input
                type="text" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): Creates a
                &lt;textarea&gt;...&lt;/textarea&gt; block.
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Using these in your view scripts is very easy, here is an example.
            Note that you all you need to to is call them; they will load
            and instantiate themselves as they are needed.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// inside your view script, $this refers to the Zend_View instance.
// 
// say that you have already assigned a series of select options under
// the name $countries as array('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany').
?>
<form action="action.php" method="post">
    <p><label>Your Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Your Country:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Would you like to opt in?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no') ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            The resulting output from the view script will look something like this:
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Your Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Your Country:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Would you like to opt in?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Helper Paths</title>
        
        <para>
            As with view scripts, your controller can specify a stack of
            paths for Zend_View to search for helper classes. By
            default, Zend_View looks in "Zend/View/Helper/*" for helper
            classes. You can tell Zend_View to look in other locations
            using the setHelperPath() and addHelperPath() methods.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            In fact, you can "stack" paths using the addHelperPath()
            method. As you add paths to the stack, Zend_View will look
            at the most-recently-added path for the requested helper
            class.  This allows you to add to (or even override) the
            initial distribution of helpers with your own custom
            helpers.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// now when you call $this->helperName(), Zend_View will look first for
// "/other/path/to/helpers/HelperName.php", then for
// "/path/to/some/helpers/HelperName", and finally for
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Writing Custom Helpers</title>
        
        <para>
            Writing custom helpers is easy; just follow these rules:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                The class name must be Zend_View_Helper_*, where * is
                the helper name itself.  E.g., if you were writing a
                helper called "specialPurpose", the class name would be
                "Zend_View_Helper_SpecialPurpose" (note the
                capitalization).
            </para></listitem>
            
            <listitem><para>
                The class must have a public method that matches the
                helper name; this is the method that will be called when
                your template calls "$this->specialPurpose()".  In our
                "specialPurpose" helper example, the required method
                declaration would be "public function specialPurpose()". 
            </para></listitem>
            
            <listitem><para>
                In general, the class should not echo or print or otherwise
                generate output.  Instead, it should return values to be
                printed or echoed.  The returned values should be escaped
                appropriately.
            </para></listitem>
            
            <listitem><para>
                The class must be in file named after the helper method.
                Again using our "specialPurpose" helper example, the file
                has to be named "SpecialPurpose.php".
            </para></listitem>
        </itemizedlist>
        
        <para>
            Place the helper class file somewhere in your helper path stack,
            and Zend_View will automatically load, instantiate, persist,
            and execute it for you.
        </para>
        
        <para>
            Here is an example of our SpecialPurpose helper code:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            Then in a view script, you can call the SpecialPurpose helper
            as many times as you like; it will be instantiated once, and
            then it persists for the life of that Zend_View instance.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// remember, in a view script, $this refers to the Zend_View instance.
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            The output would look something like this:
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->