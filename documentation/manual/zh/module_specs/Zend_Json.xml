<sect1 id="zend.json.introduction">
    <title>简介</title>
    <para>
        <code>Zend_Json</code> 提供一个方便的方式来串联(native的)PHP(的变量)和JSON，并将JSON(对象)解码到PHP中
		. 关于JSON的更多信息, <ulink url="http://www.json.org/">请参考 JSON 
        项目网站</ulink>.
    </para>
    <para>
        JSON, JavaScript Object Notation,  可以被应用于JS和其他语言的轻量级数据交换
		. 因为JSON(对象)可以直接被Javascript执行, 
		对于web2.0接口来说,它是一种理想的格式
		; 它是使用XML作为AJAX接口的一个更简单的替换方案
		.
    </para>
</sect1>

<sect1 id="zend.json.basics">
    <title>基本用法</title>
    <para>
        <code>Zend_Json</code>的使用包括使用现有的两个公共的static方法
        : <code>Zend_Json::encode()</code> 和
        <code>Zend_Json::decode()</code>. 
        <programlisting role="php"><![CDATA[<?php
// 获得一个value:
$phpNative = Zend_Json::decode($encodedValue);

// 编码并返回给客户端:
$json = Zend_Json::encode($phpNative);
?>]]></programlisting>
    </para>
</sect1>

<sect1 id="zend.json.objects">
    <title>JSON 对象</title>
    <para>
        当编码PHP对象为JSON时, 它的所有的公有属性将被编码为JSON格式（到JSON对象中）.
    </para>
    <para>
        解码JSON对象貌似有一点轻微的难度, 因为Javascript对象
		与PHP的联合数组的结构更相近. 尽管如此, 一些人建议应该传入一个类的定义， 
		然后类的实例应该由JSON的key/value对来被建造和组装; 另外有人这样做会引发一些安全问题。
    </para>
    <para>
        默认情况下, <code>Zend_Json</code> 将解码JSON对象作为关联数组
		. 但是如果你希望它返回一个对象, 以可以这样来指定
        :
        <programlisting role="php"><![CDATA[<?php
// 解码JSON对象作为PHP对象
$phpNative = Zend_Json::decode($encodedValue, Zend_Json::TYPE_OBJECT);
?>]]></programlisting>
		这样任何解码后的对象将被作为一个<code>StdClass</code>的对象来返回，
		对象带有根据JSON对象的key/value对生成的一系列属性。
    </para>
    <para>
		Zend Framework推荐每个开发者应该决定怎样来解码JSON对象. 如果一个特定类型的对象需要被构建，
		它可以由开发者的代码创建，然后用<code>Zend_Json</code>
		解码后的值来组装。
    </para>
</sect1>
        
<!--
vim:se ts=4 sw=4 et:
-->
