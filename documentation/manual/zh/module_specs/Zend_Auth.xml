<sect1 id="zend.auth.introduction">

    <title>简介</title>

    <para>
        Zend_Auth 为认证（authentication）提供了一个API并包括了一些通用用例情景的具体认证适配器。
    </para>

    <note>
        <para>
            Zend_Auth 当前为设计包含了<link linkend="zend.auth.adapter.digest">数字认证适配器</link>作为一个简单的 proof-of-concept。其他的适配器正计划开发。对使用特定的适配器感兴趣？非常欢迎你的<ulink url="http://framework.zend.com/wiki/x/qx4">为适配器投票</ulink> 和<ulink url="http://framework.zend.com/wiki/x/GgE">贡献</ulink>！
            
        </para>
    </note>

    <para>
        Zend_Auth 只涉及 <emphasis role="strong">认证</emphasis>而不是<emphasis role="strong">授权</emphasis>。认证被宽松地定义为基于一些证书（credential）来确定一个实体（例如，身份）是否确实是它所声称的。授权是一个过程，它决定是否允许一个实体对其他实体进行访问、执行操作，它超出了Zend_Auth的范围。更多关于Zend Framework 授权和访问控制的信息，参见<link linkend="zend.acl">Zend_Acl</link>.
    </para>

    <sect2 id="zend.auth.introduction.adapters">

        <title>适配器</title>

        <para>
            Zend_Auth适配器被用来依靠特定的认证服务（例如LDAP、RDBMS或基于文件的存储）来认证。不同的适配器可能有不同的选项和行为，但有些基本的事情是通用的。例如，接受认证证书（包括声称实体）、认证、返回一些结果在Zend_Auth适配器中是通用的。
        </para>

        <para>
            每个Zend_Auth 认证适配器类都实现<code>Zend_Auth_Adapter_Interface</code>.这个接口定义了一个方法，<code>authenticate()</code>, 适配器实现它来做认证。在调用<code>authenticate()</code>之前，每个适配器必需准备就绪。这就意味着每个适配器要提供设置证书（例如，用户名和密码）的能力并为适配器规范选项定义一些值，例如数据库表适配器的连接设置。
        </para>

        <para>
            下面是一个认证适配器的例子，它要求为认证设置用户名和密码。为简明扼要，其它的细节（如查询认证服务）被省略了。
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter/Interface.php';

class MyAuthAdapter implements Zend_Auth_Adapter_Interface
{
    /**
     * Sets username and password for authentication
     *
     * @return void
     */
    public function __construct($username, $password)
    {
        // ...
    }

    /**
     * Performs an authentication attempt
     *
     * @throws Zend_Auth_Adapter_Exception If authentication cannot be performed
     * @return Zend_Auth_Result
     */
    public function authenticate()
    {
        // ...
    }
}]]></programlisting>

           如上面所示，<code>authenticate()</code>必需返回一个<code>Zend_Auth_Result</code>的实例（或从<code>Zend_Auth_Result</code>派生的一个类）。如果因为某些原因认证查询不能执行，<code>authenticate()</code>应该抛出一个由<code>Zend_Auth_Adapter_Exception</code>产生的异常。
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.results">

        <title>结果</title>

        <para>
            为了表示一个认证尝试的结果，Zend_Auth适配器返回一个带有<code>authenticate()</code>的<code>Zend_Auth_Result</code>的实例。适配器基于结构组成<code>Zend_Auth_Result</code>对象，下面三个方法提供了一组基本的通用Zend_Auth适配器结果的操作：
            <itemizedlist>
                <listitem>
                    <para>
                        <code>isValid()</code> - 返回 true 当且仅当结果表示一个成功的认证尝试
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getIdentity()</code> - 返回认证尝试的身份
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getMessages()</code> - 返回关于认证尝试失败的数组
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.persistence">

        <title>身份的持久（Persistence）</title>

        <para>
            实质上，认证一个包含认证证书的请求很有用，但是维护已认证的身份并在每次请求时不需要出示认证证书也同样很重要。
        </para>

        <para>
            HTTP是一个无连接的协议，然而，象cookie和session这样的技术已经被开发出来使在服务器端的web应用维护多请求状态变得容易。<link linkend="zend.session">Zend_Session</link>被Zend_Auth缺省地使用，它用PHP session为一个成功认证尝试的身份提供持久存储空间。
        </para>

        <para>
            基于成功的认证尝试，<code>Zend_Auth::authenticate()</code> 把身份从认证结果存储到持久存储空间。缺省地，<code>Zend_Auth</code> 使用基于 <link linkend="zend.session">Zend_Session</link> 的存储类。存储类可以通过 <code>Zend_Auth::setStorage()</code> 提供不同的存储对象来被改变。
        </para>

        <para>
            如果自动的身份持久存储对特定的用例来说不合适，那么开发者可以完全地放弃使用<code>Zend_Auth</code>，取而代之，直接使用适配器类。
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.using">

        <title>使用Zend_Auth</title>

        <para>
            这里提供了两种方法使用Zend_Auth适配器：
            <orderedlist>
            <listitem>
                <para>
                    非直接地，通过<code>Zend_Auth::authenticate()</code>
                </para>
            </listitem>
            <listitem>
                <para>
                    直接地，通过适配器的 <code>authenticate()</code> 方法
                </para>
            </listitem>
            </orderedlist>
        </para>

        <para>
            下面的例子通过<code>Zend_Auth</code>类来示例如何非直接地使用Zend_Auth适配器：
            <programlisting role="php"><![CDATA[<?php
// Get a reference to the Singleton instance of Zend_Auth
require_once 'Zend/Auth.php';
$auth = Zend_Auth::getInstance();

// Set up the authentication adapter
$authAdapter = new MyAuthAdapter($username, $password);

// Attempt authentication, saving the result
$result = $auth->authenticate($authAdapter);

if (!$result->isValid()) {
    // Authentication failed; print the reasons why
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Authentication succeeded; the identity ($username) is stored in the session
    // $result->getIdentity() === $auth->getIdentity()
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

        <para>
            一旦在一个请求里的认证被尝试，如上面的例子，检查一个成功的被认证的身份是否存在就是一个简单的匹配：
            <programlisting role="php"><![CDATA[<?php
$auth = Zend_Auth::getInstance();
if ($auth->hasIdentity()) {
    // Identity exists; get it
    $identity = $auth->getIdentity();
}]]></programlisting>
        </para>

        <para>
            从持久存储空间出去一个身份，可简单地使用<code>clearIdentity()</code>方法。这将被典型地用作“logout”操作。
            <programlisting role="php"><![CDATA[<?php
Zend_Auth::getInstance()->clearIdentity();]]></programlisting>
        </para>

        <para>
            当自动使用持久存储空间对特定的用例不合适，开发者可简单地忽略<code>Zend_Auth</code>类，直接使用适配器类。直接使用适配器类需要配置和准备适配器对象和调用它的<code>authenticate()</code>方法。适配器规范细节将在每个适配器的文档中讨论。下面的例子直接使用 <code>MyAuthAdapter</code>：  
            <programlisting role="php"><![CDATA[<?php
// Set up the authentication adapter
$authAdapter = new MyAuthAdapter($username, $password);

// Attempt authentication, saving the result
$result = $authAdapter->authenticate();

if (!$result->isValid()) {
    // Authentication failed; print the reasons why
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Authentication succeeded
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->