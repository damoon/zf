<sect1 id="zend.filter.filter">
    <title>Zend_Filter</title>
    
    <sect2 id="zend.filter.filter.introduction">
        <title>简介</title>
	<para>
		<literal>Zend_Filter</literal> 为数据过滤提供了一个静态函数库。
		对输入数据的过滤，请见 <xref linkend="zend.filter.input"/>，它提供了一个过滤输入数据的框架。
		不过，<literal>Zend_Filter_Input</literal>主要是针对数组的，标量要用<literal>Zend_Filter</literal>来过滤，
		它看起来有点像PHP的字符串函数：
	</para>
        <programlisting>
    <![CDATA[<?php
    
    $alphaUsername = Zend_Filter::getAlpha('John123Doe');
    
    /* $alphaUsername = 'JohnDoe'; */
    
    ?>]]>
        </programlisting>
    </sect2>
    <sect2 id="zend.filter.filter.usecases">
        <title>用例</title>
	<para>下面每个用例中使用的<literal>$value</literal>是个随意的标量值。</para>
	<para>白名单过滤（判定$value是否符合规则，返回TRUE或FALSE）：</para>
        <programlisting>
    <![CDATA[<?php
    
    if (Zend_Filter::isEmail($value) === TRUE) {
        /* $value符合email的格式 */
    } else {
        /* $value不符合email的格式 */
    }
    
    ?>]]>
        </programlisting>
	<para>不明数据过滤（滤去不符合规则的那部分数据后返回）：</para>
        <programlisting>
    <![CDATA[<?php
    
    $alphaName = Zend_Filter::getAlpha($value);
    
    ?>]]>
        </programlisting>
	<para>黑名单过滤（滤去位于黑名单之列的那些数据后返回，比如HTML标签、PHP代码）：</para>
        <programlisting>
    <![CDATA[<?php
    
    $taglessComment = Zend_Filter::noTags($value);
    
    ?>]]>
        </programlisting>
    </sect2>
</sect1>
    
<!--
vim:se ts=4 sw=4 et:
-->
