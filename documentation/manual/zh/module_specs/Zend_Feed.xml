<sect1 id="zend.feed.introduction">
    <title>介绍</title>
    <para>
        <code>Zend_Feed</code>提供了处理的 RSS 和 Atom Feed的功能。它提供了一套自然的方法用于
        访问Feed元素、属性、和记录(entry)属性。 除此之外<code>Zend_Feed</code>还扩展提供了同样简单的方法
        用于修改Feed和记录(entry)的结构，并将结果转化成XML格式。不久的将来这些扩展可能会被 Atom Publishig Protocol(AtomPP)所支持。
    </para>

    <para>
    	<code>Zend_Feed</code>由一个<code>Zend_Feed</code>基类、一个<code>Zend_Feed_Abstract</code>抽象类以及一个用于表示Feed和记录(entry)的<code>Zend_Feed_EntryAbstract</code>基类组成。这些类封装了 RSS 和 Atom 的Feed和记录(entry)特性的，提供了一套自然的方法使他们用起来变得异常简单。
    </para>

    <para>
    	在下面的例子中，我们演示了一个获得RSS Feed并将其中的一般部分相关数据保存到一个PHP数组中的简单实例，这样这些数据就能方便的用于输出或保存到数据库等。
    </para>

    <note>
        许多RSS中的channel和item属性是不同的。RSS的规范中提供了许多可选的属性，因此在编写RSS相关应用代码时要充分考虑这点。
    </note>

    <example>
        <title>用Zend_Feed来处理RSS Feed数据</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Feed.php';

// 取得最新的 Slashdot 头条新闻
try {
    $slashdotRss = Zend_Feed::import('http://rss.slashdot.org/Slashdot/slashdot');
} catch (Zend_Feed_Exception $e) {
    // Feed 导入失败
    echo "Exception caught importing feed: {$e->getMessage()}\n";
    exit;
}

// 初始化保存 channel 数据的数组
$channel = array(
    'title'       => $slashdotRss->title(),
    'link'        => $slashdotRss->link(),
    'description' => $slashdotRss->description(),
    'items'       => array()
    );

// 循环获得channel的item并存储到相关数组中
foreach ($slashdotRss as $item) {
    $channel['items'][] = array(
        'title'       => $item->title(),
        'link'        => $item->link(),
        'description' => $item->description()
        );
}

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.importing">
    <title>用Zend_Feed来导入Feed</title>
    <para>
        <code>Zend_Feed</code> 能让开发者轻松获得Feed。如果你知道Feed的URI，用<code>Zend_Feed::import()</code>方法就可以非常容易的获得它:
        <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]>   </programlisting>
    </para>
    <para>
    	你也能用<code>Zend_Feed</code>从一个文件或者一个PHP字符串变量来获得一个Feed的内容:
        <programlisting role="php"><![CDATA[
<?php

// 从文本文件导入一个feed
$feedFromFile = Zend_Feed::importFile('feed.xml');

// 从PHP字符串变量导入一个feed
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
    </para>
    <para>
    	在上面的例子中，根据Feed类型的不同，一个从<code>Zend_Feed_Abstract</code>继承而来的类对象被返回。
    	如果导入方法获得的是一个RSS Feed，那么一个<code>Zend_Feed_Rss</code>对象将被返回(Seateng译注:以Factory模式实现)。另一方面，如果一个Atom Feed被导入，那么将返回一个<code>Zend_Feed_Atom</code>对象。如果Feed不可读或者不符合规范，导致导入失败那么Zend_Feed将抛出一个<code>Zend_Feed_Exception</code>异常。
    </para>
</sect1>

<sect1 id="zend.feed.findFeeds">
    <title>从网页上获得Feed</title>
    <para>
    	在网页上与该页内容其相关的详细信息常被包含在一个用<code>&lt;link&gt;</code>标记关联的Feed中。<code>Zend_Feed</code>能让你用一个简单的方法提取一个页面上所有关联的Feed:
        <programlisting role="php"><![CDATA[
<?php

$feedArray = Zend_Feed::findFeeds('http://www.example.com/news.html');

?>]]></programlisting>
		<code>findFeeds()</code>方法返回一个<code>Zend_Feed_Abstract</code>对象数组，数组中的内容对应news.html页中所有用<code>&lt;link&gt;</code>关联到的Feed。根据每个Feed类型的不同，<code>$feedArray</code>数组的下标变量可能是一个<code>Zend_Feed_Rss</code>对象的实例也可能是一个<code>Zend_Feed_Atom</code>对象的实例。但是如果服务器端响应HTTP 404或者Feed不符合规范，那么<code>Zend_Feed</code>将抛出一个<code>Zend_Feed_Exception</code>异常。
    </para>
</sect1>

<sect1 id="zend.feed.consuming-rss">
    <title>RSS Feed的使用</title>
    <para>
    	用一个<code>Zend_Feed_Rss</code>对象实例和一个Feed的URL来读取一个RSS Feed再简单不过了:
        <programlisting role="php"><![CDATA[
<?php

$channel = new Zend_Feed_Rss('http://rss.example.com/channelName');

?>]]></programlisting>
        如果在获得Feed时发生任何错误，那么一个<code>Zend_Feed_Exception</code>异常将被抛出。
    </para>

    <para>
    	一旦你获得一个Feed对象，那么你就能在这个对象上直接访问任何RSS 标准定义的channel属性:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->title();

?>]]></programlisting>
        注意函数语法。如果用 "getter" 的语法 (<code>$obj->property</code>) 取一个对象变量或是调用一个对象方法(<code>$obj->property()</code>)时，<code>Zend_Feed</code>将把这个变量名或方法名作为一个XML对象的属性处理(就像访问XML中的某个节点)。这样在取得指定的节点内容后还能访问其子节点。
    </para>

    <para>
        如果RSS的channel有属性，那么可以用访问 PHP 数组的语法获得他们:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->category['domain'];

?>]]></programlisting>
        因为XML的属性不能拥有子节点，所以不需要用方法的语法访问其属性。
    </para>

    <para>
        最常用的是您可以通过循环遍历Feed的记录(entry)来做些事情。<code>Zend_Feed_Abstract</code> 实现的是PHP 的Iterator接口，因此要打印channel中的文章标题可以像下面这样:
        <programlisting role="php"><![CDATA[
<?php

foreach ($channel as $item) {
    echo $item->title() . "\n";
}

?>]]></programlisting>
		如果你对RSS不是很熟，这有一分关于RSS channel和各个RSS items(记录)标准元素的列表可能对你有所帮助。
    </para>

    <para>
        必须的 channel 元素:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - channel 名</para>
            </listitem>
            <listitem>
                <para><code>link</code> - channel相关的站点URL</para>
            </listitem>
            <listitem>
                <para><code>description</code> - 一句或者若干关于channel的描述</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        可选的channel元素:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>pubDate</code> - 这份内容发布的时间，用 RFC 822 的日期格式</para>
            </listitem>
            <listitem>
                <para><code>language</code> - channel的书写语言</para>
            </listitem>
            <listitem>
                <para><code>category</code> - channel属于的一个或多个分类(用多个标记指名)</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        RSS 的<code>&lt;item&gt;</code> 组成没有严格的要求。但是<code>title</code> 或 <code>description</code>必须至少有一个。
    </para>

    <para>
        常用的item元素
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - item的标题</para>
            </listitem>
            <listitem>
                <para><code>link</code> - item的链接</para>
            </listitem>
            <listitem>
                <para><code>description</code> - item的概述</para>
            </listitem>
            <listitem>
                <para><code>author</code> - 作者Email</para>
            </listitem>
            <listitem>
                <para><code>category</code> - item所属的一个或者多个分类</para>
            </listitem>
            <listitem>
                <para><code>comments</code> - item相关评论的URL链接</para>
            </listitem>
            <listitem>
                <para><code>pubDate</code> - item的发布日期( RFC 822 日期格式)</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        在你的代码中，一个非空元素总是被能测到:
        <programlisting role="php"><![CDATA[
<?php

if ($item->propname()) {
    // ... proceed.
}

?>]]></programlisting>
    </para>

    <para>
    	如果你用<code>$item->propname</code>代替<code>$item->propname()</code>，那么你将总是得到一个空对象使条件判断为<code>TRUE</code>，因此条件判断将失效。
    </para>

    <para>
    	更多信息，请参看RSS 2.0的官方说明:<ulink url="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</ulink>。
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom">
<title>Atom Feed的使用</title>

    <para>
        <code>Zend_Feed_Atom</code>在使用上有许多方法与<code>Zend_Feed_Rss</code>是大相径庭的。它提供了相同的方法访问Feed中的属性和遍历所有Feed中的所有记录(entry)。不同之处在于Atom协议结构自身。Atom作为RSS的继承者；它是一个更广泛的协议，在处理Feed中提供的所有内容方面它被设计的更加容易，RSS中的<code>description</code>标记在Atom中被分割成两个元素<code>summary</code> 和
         <code>content</code>就是为了这个目的。
    </para>

    <example>
        <title>Atom Feed的基本用法</title>
        <para>
            读取一个Atom Feed并打印出每个记录(entry)的<code>title</code> 和 <code>summary</code>：
        </para>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/');
echo 'The feed contains ' . $feed->count() . ' entries.' . "\n\n";
foreach ($feed as $entry) {
    echo '标题: ' . $entry->title() . "\n";
    echo '摘要: ' . $entry->summary() . "\n\n";
}

?>]]>   </programlisting>
    </example>

    <para>
        在Atom Feed中你能找到以下Feed属性：
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Feed的标题, 和RSS中的channel标题一样</para>
            </listitem>
            <listitem>
                <para><code>id</code> - 在Atom中的每个Feed和记录(entry)都有一个唯一的标识符(id)</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Feed可以有多个链接，它们之间用<code>type</code>属性区别</para>
                <para>
                    当<code>type="text/html"</code>时与RSS的channel中的link是一样的。如果这个链接是一个在Feed中相同内容的候选版本，那么它将有一个<code>rel="alternate"</code>属性。
                </para>
            </listitem>
            <listitem>
                <para><code>subtitle</code> - Feed的描述，等同于RSS中的channel描述
                </para>
                <para><code>author->name()</code> - Feed作者名</para>
                <para><code>author->email()</code> - Feed作者的email地址</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Atom 记录(entry)通常具有以下属性：
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>id</code> - 记录(entry)唯一标识符</para>
            </listitem>
            <listitem>
                <para><code>title</code> - 记录(entry)标题，和RSS的item标题相同</para>
            </listitem>
            <listitem>
                <para><code>link</code> - 一个到另外一种格式的链接或者当前记录(entry)的一个候选观点</para>
            </listitem>
            <listitem>
                <para><code>summary</code> - 记录(entry)内容摘要</para>
            </listitem>
            <listitem>
                <para><code>content</code> - 记录(entry)的全部内容；如果Feed只包含摘要可以被挑过</para>
            </listitem>
            <listitem>
                <para><code>author</code> - 有 <code>name</code> 和 <code>email</code> 子标记就像Feed的author一样</para>
            </listitem>
            <listitem>
                <para><code>published</code> - 记录(entry)的发布日期(RFC 3339格式)</para>
            </listitem>
            <listitem>
                <para><code>updated</code> - 记录(entry)的最后更新日期(RFC 3339格式)</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        更多关于Atom的信息和丰富的资源，请参看<ulink url="http://www.atomenabled.org/">http://www.atomenabled.org/</ulink>.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom-single-entry">
    <title>单个Atom记录(entry)的处理</title>

    <para>
        单个Atom <code>&lt;entry&gt;</code> 元素自身也是有效的。通常在Feed的URL后带上<code>/&lt;entryId&gt;</code>就是一个记录(entry)的URL。就像<code>http://atom.example.com/feed/1</code>， 
		我们就以上述的URL作为例子。
    </para>

    <para>
        如果你想读取单个记录(entry)，你仍然可以使用<code>Zend_Feed_Atom</code>对象，它将自动创建一个匿名的Feed用来包含记录(entry)。
    </para>

    <example>
        <title>读取Atom Feed的单个记录(entry)</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
echo 'The feed has: ' . $feed->count() . ' entry.';

$entry = $feed->current();

?>]]>   </programlisting>
    </example>

    <para>
        或者如果你确定只想访问文档的一个<code>&lt;entry&gt;</code>，那么你可以用记录(entry)对象直接访问：
    </para>

    <example>
        <title>用记录(entry)对象直接访问Atom Feed的单个记录(entry)</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom('http://atom.example.com/feed/1');
echo $entry->title();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.modifying-feed">
    <title>修改Feed和记录(entry)结构</title>

    <para>
        <code>Zend_Feed</code>自然的语法既能扩展用于构建和修改Feed以及记录(entry)又能非常容易的读取它们。你能容易的把新建的或者修改过的对象转化成一个结构完整的XML格式保存到文件或者发送到服务器。
    </para>

    <example>
        <title>修改一个已存在的记录(entry)</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = 'This is a new title';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
            这段代码将输出一个新记录(entry)完整的包含所有必要命名空间的XML格式(包括<code>&lt;?xml ... &gt;</code> 声明)。
        </para>
        <para>
            注意上面的代码即使记录(entry)中不存在一个author标记也能工作。在开始赋值之前你就能用多层的<code>-&gt;</code>访问你想要访问的内容了，如果必要程序将自动为你创建所有中间节点。
        </para>
    </example>

    <para>
        如果你想在你的记录(entry)中用一个与<code>atom:</code>， <code>rss:</code> 或 <code>osrss:</code>不同的命名空间，你必须用<code>Zend_Feed</code>类的<code>Zend_Feed::registerNamespace()</code>方法注册你的命名空间。当你修改一个已存在的元素时，它将维持最初的命名空间。当添加一个新元素时，如果你不特别地指定别的命名空间则程序将使用默认的命名空间。
    </para>

    <example>
        <title>用自定义的命名空间创建一个Atom记录(entry)元素</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom();
// Atom的id总是由服务器分配
$entry->title = 'my custom entry';
$entry->author->name = 'Example Author';
$entry->author->email = 'me@example.com';

// 完成自定义部分
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'my first custom value';
$entry->{'myns:container_elt'}->part1 = 'first nested custom part';
$entry->{'myns:container_elt'}->part2 = 'second nested custom part';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.custom-feed">
    <title>自定义Feed和记录(entry)类</title>

    <para>
        最后，如果你想提供一个你自己的格式或者想更自动化的定义一个命名空间那么你可以扩展继承<code>Zend_Feed</code>类。
    </para>

    <para>
        下面是一个用自定义Atom记录(entry)类处理<code>myns:</code>命名空间的例子。注意构造函数中已经为你调用了<code>registerNamespace()</code>，所以最终用户就可以完全不必当心命名空间了。
    </para>

    <example>
        <title>用自定义的命名空间继承Atom记录(entry)类</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * 自定义的记录(entry)类自动地识别Feed URI(可选)
 * 并能自动添加额外的命名空间
 */
class MyEntry extends Zend_Feed_EntryAtom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // Translate myUpdated to myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // Translate myUpdated to myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
            接下来你就可以直接实例化和设置<code>myUpdated</code>属性来使用这个类：
            <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>       </programlisting>
        </para>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->