<sect1 id="zend.mail.introduction">
    <title>简介</title>
    <para>
        <code>Zend_Mail</code> 提供了通用化的功能来编辑和发送文本以及兼容MIME标准的含有多个部分的邮件信息. 邮件可以使用 <code>Zend_Mail</code> 通过 php 内建的
        <ulink url="http://php.net/mail"><code>mail()</code></ulink> 函数或者直接通过 SMTP 连接发送.
    </para>
    <example>
        <title>使用 Zend_Mail 发送简单邮件</title>
        <para>
            一个简单邮件由一个或者几个收件人,一个主题, 一个邮件主体和一个发件人组成. 通过下面的步骤可以通过 PHP 的
             <ulink url="http://php.net/mail"><code>mail()</code></ulink> 函数发送此类邮件:
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('This is the text of the mail.');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>       </programlisting>
       </para>
    </example>
    <note>
    	你必须至少制定一个收件人, 一个发件人 (例如通过 <code>setFrom()</code> 方法)和一个邮件消息主体 (文本 和/或者 HTML) 来通过 <code>Zend_Mail</code> 发送邮件. 
    </note>
    <para>
    	通过 "get" 方法可以读取绝大多数储存在 "mail" 对象中的邮件属性. 更进一步的细节请参阅API文档.
    	一个特例是 <code>getRecipients()</code>.它返回一个含有所有先前被加入的收件地址的数组.
    </para>
    <para>
        出于安全原因, <code>Zend_Mail</code> 会过滤邮件头中所有含有 (<code>\n</code>) 字符的字段以防止基于header injection( 译者: 邮件头插入 )的漏洞攻击.
    </para>
</sect1>
<sect1 id="zend.mail.sending">
    <title>通过 SMTP 发送邮件</title>
    <para>
    	为了通过 SMTP 发送邮件,一个 <code>Zend_Mail_Transport_Smtp</code> 对象需要在 <code>send()</code> 方法被调用之前通过 <code>Zend_Mail</code> 
    	实例化和注册. 这个 SMTP transport 对象会被所有当前脚本中的<code>Zend_Mail::send()</code> 使用:
    </para>
    <example>
        <title>通过 SMTP 发送邮件</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
?>]]>   </programlisting>
    </example>
    <para>
        使用 <code>setDefaultTransport()</code> 方法和 
        <code>Zend_Mail_Transport_Smtp</code> 对象并不费事. 
        这两行可以在设置时 ( 例如 config.inc 或者类似文件 ) 就被处理从而为整个脚本配置 <code>Zend_Mail</code> 类的行为.
        如此可以把配置信息保持在应用逻辑之外 - 邮件是通过 SMTP 还是 <ulink url="http://php.net/mail"><code>mail()</code></ulink> 发送, 
        使用什么邮件服务器等等.
    </para>
</sect1>
<sect1 id="zend.mail.multiple-emails">
    <title>通过 SMTP 连接发送多个邮件</title>
    <para>
        在缺省状态下, 系统会为每一个被发送的邮件建立一个 SMTP 连接 . 如果你想通过一个 SMTP 连接发送多个邮件, 
        你可以自己控制 <code>connect()</code> 函数. 如果transport对象在<code>send()</code>被调用之前就已经建立了一个连接, 
        那么这个连接会被使用并且不会被关闭.
    </para>
    <example>
        <title>通过 SMTP 连接发送多个邮件</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
$tr->connect();
for ($i = 0; $i < 5; $i++) {
    $mail->send();
}
$tr->disconnect();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.different-transports">
    <title>使用不同的Transport对象</title>
    <para>
        如果想使用不同的连接发送不同的邮件, 你也可以不预先调用<code>setDefaultTransport()</code>而
        直接将Transport对象传递给<code>send()</code>. 被传递的transport对象会在实际的<code>send()</code>调用中
        覆盖缺省的transport:
    </para>
    <example>
        <title>使用不同的Transport对象</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
require_once 'Zend/Mail/Transport/Smtp.php';
$tr1 = new Zend_Mail_Transport_Smtp('server@example.com');
$tr2 = new Zend_Mail_Transport_Smtp('other_server@example.com');
$mail->send($tr1);
$mail->send($tr2);
$mail->send();  // use default again
?>]]>   </programlisting>
    </example>
    <note>
    	额外的 transport 可以通过应用 <code>Zend_Mail_Transport_Interface</code> 接口来实现.
    </note>
</sect1>
<sect1 id="zend.mail.html-mails">
    <title>HTML 邮件</title>
    <para>
    	使用<code>setBodyHTML()</code>来设置邮件正文以发送HTML形式的邮件. 
    	MIME 类型会自动被设置为 <code>text/html</code>.
    	如果你既使用 HTML 又使用纯文本, 那么系统会自动生成一个类型为 multipart/alternative 的邮件信息:
    </para>
    <example>
        <title>发送 HTML 邮件</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('My Nice Test Text');
$mail->setBodyHtml('My Nice <b>Test</b> Text');
$mail->setFrom('somebody@example.com', 'Some Sender');
$mail->addTo('somebody_else@example.com', 'Some Recipient');
$mail->setSubject('TestSubject');
$mail->send();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.attachments">
    <title>附件</title>
    <para>
    	使用<code>addAttachment()</code>方法可以将文件作为附件配属给邮件.
        <code>Zend_Mail</code>会缺省地认为附件是二进制对象(application/octet-stream),以
        base64编码传输, 并且作为附件处理. 通过传递额外的参数给<code>addAttachment()</code>方法可以
        覆盖上述缺省设定:
    </para>
    <example>
        <title>带附件的邮件</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
$mail->addAttachment($someBinaryString);
$mail->addAttachment($myImage, 'image/gif', Zend_Mime::DISPOSITION_INLINE, Zend_Mime::ENCODING_8BIT);
?>]]>   </programlisting>
    </example>
    <para>
        如果你想得到对此附件的MIME部分的更多控制，你可以使用 <code>addAttachment()</code> 方法的返回值来修改他（附件的MIME部分）的属性. 
        方法 <code>addAttachment()</code> 返回一个 <code>Zend_Mime_Part</code> 对象:
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// build message...
$at = $mail->addAttachment($myImage);
$at->type = 'image/gif';
$at->id = 12;
$at->filename ='test.gif';
//...
$mail->send();
?>]]>   </programlisting>
    </para>
</sect1>
<sect1 id="zend.mail.adding-recipients">
    <title>增加收件人</title>
    <para>
        有三种方法可以增加收件人:
        <itemizedlist>
        <listitem>
        <para><code>addTo()</code>: 增加一个收件人到头信息 "To" （收件人）</para>
        </listitem>
        <listitem>
        <para><code>addCc()</code>: 增加一个收件人到头信息 "Cc" （抄送） </para>
        </listitem>
        <listitem>
        <para><code>addBcc()</code>: 增加一个收件人到头信息 "Bcc" （隐藏抄送）</para>
        </listitem>
        </itemizedlist>
    </para>
    <note>
        <code>addTo()</code> 和 <code>addCc()</code> 接受可选的第二个参数用于生成用户可读的头信息 (译者: 类似于并行于邮件地址的别名,让使用者知道邮件发送给谁) . 
    </note>
</sect1>
<sect1 id="zend.mail.boundary">
    <title>改变 MIME 分界线</title>
    <para>
    	在一个包含多个部分的邮件里，用于分隔邮件的不同部分的MIME分界线通常是随机生成的.
        但是在某些情况下, 你也许会希望使用特定的MIME分界线.如下面的例子所示你可以使用
        <code>setMimeBoundary()</code> 方法来做到这一点:
    </para>
    <example>
        <title>改变 MIME 分界线</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setMimeBoundary('=_' . md5(microtime(1) . $someId++);
// build message...
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.additional-headers">
    <title>增加邮件头信息</title>
    <para>
        使用<code>addHeader()</code> 方法可以设置任意的头信息. 它需要两个参数，头信息的名字和值. 第三个参数是可选参数，它决定了这个头信息是否
        可以有多个值:
    </para>
    <example>
        <title>增加邮件头信息</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->addHeader('X-MailGenerator', 'MyCoolApplication');
$mail->addHeader('X-greetingsTo', 'Mom', true); // multiple values
$mail->addHeader('X-greetingsTo', 'Dad', true);
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.character-sets">
    <title>字符集</title>
    <para>
        <code>Zend_Mail</code> 不会对邮件字符集的正确性进行检查. 当<code>Zend_Mail</code>初始化的时候, 
        会给一个给邮件本身的字符集, 缺省为iso8859-1.程序必须确保每个添加至邮件对象的部分都被便被编码为正确的字符集. 
        在添加一个新的邮件部分时，可以为每个部分制定不同的字符集.
    </para>
    <note>
    	字符集只能对文本形式的部分使用.
    </note>
</sect1>
<sect1 id="zend.mail.encoding">
    <title>编码</title>
    <para>
    	文本和HTML信息在缺省下以quotedprintable机制编码. 在 <code>addAttachment()</code>调用的时候
    	如果没有制定编码方式或分配给MIME对象，所有其他的附件将以base64编码.
        7Bit 和 8Bit 编码目前仅仅在二进制数据上通过.
    </para>
    <para>
        <code>Zend_Mail_Transport_Smtp</code> 将以一个点(.)或者两个点(..)起始的行以确保邮件不违反SMTP协议.
    </para>
</sect1>
<sect1 id="zend.mail.smtp-authentication">
    <title>SMTP 认证</title>
    <para>
        Zend Framkwork目前暂时不支持SMTP认证.        
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->