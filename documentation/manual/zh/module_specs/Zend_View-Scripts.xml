<sect1 id="zend.view.scripts">
    
    <title>View Scripts</title>
        
    <para>
        Once your controller has assigned variables and called render(),
        Zend_View then includes the requested view script and executes
        it "inside" the scope of the Zend_View instance.  Therefore,
        in your view scripts, references to $this actually point to the
        Zend_View instance itself.
    </para>
    
    <para>
        Variables assigned to the view from the controller are referred
        to as instance properties.  For example, if the controller were
        to assign a variable 'something', you would refer to it as
        $this->something in the view script.  (This allows you to keep
        track of which values were assigned to the script, and which are
        internal to the script itself.)
    </para>
    
    <para>
        By way of reminder, here is the example view script from the
        Zend_View introduction.
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- A table of some books. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>There are no books to display.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Escaping Output</title>
        
        <para>
            One of the most important tasks to perform in a view script
            is to make sure that output is escaped properly; among other
            things, this helps to avoid cross-site scripting attacks. 
            Unless you are using a function, method, or helper that does
            escaping on its own, you should always escape variables when
            you output them.
        </para>
        
        <para>
            Zend_View comes with a method called escape() that does such
            escaping for you.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// bad view-script practice:
echo $this->variable;

// good view-script practice:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            By default, the escape() method uses the PHP htmlspecialchars()
            function for escaping.  However, depending on your environment,
            you may wish for escaping to occur in a different way.  Use the
            setEscape() method at the controller level to tell Zend_View
            what escaping callback to use.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// create a Zend_View instance
$view = new Zend_View();

// tell it to use htmlentities as the escaping callback
$view->setEscape('htmlentities');

// or tell it to use a static class method as the callback
$view->setEscape(array('SomeClass', 'methodName'));

// or even an instance method
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// and then render your view
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            The callback function or method should take the value to be
            escaped as its first parameter, and all other parameters should
            be optional.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Template Systems</title>
        
        <para>
            Although PHP is itself a powerful template system, many
            developers feel it is too powerful or complex for their
            template designers.  As such, the view script may be used to
            instantiate and manipulate a separate template object, such
            as a PHPLIB-style template.  The view script for that kind
            of activity might look something like this:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            These would be the related template files:
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Author</th>
        <th>Title</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>There are no books to display.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->