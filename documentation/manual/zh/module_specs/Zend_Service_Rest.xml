<sect1 id="zend.service.rest">
    <title>Zend_Service_Rest</title>
    <sect2 id="zend.service.rest.introduction">
        <title>Introduction</title>
        <para>
            <code>Zend_Service_Rest</code> 是一个的REST客户端，他用来对基于REST的web service进行查询
			.
        </para>
        <example>
            <title>一个基本的 REST 请求</title>
            <para>
                在下面的代码中，首先使用  <code>setUri()</code> 方法设置REST web service的 <emphasis>base</emphasis> URI 
				. 然后，调用<code>restGet()</code> 方法来对指定的路径（可以附加查询参数）执行一个GET请求.
            </para>
            <programlisting><![CDATA[<?php
require_once 'Zend/Service/Rest.php;

try {
    $rest = new Zend_Service_Rest();

    $rest->setURI('http://example.org');

    // 返回一个 Zend_HttpClient_Response 对象
    $response = $rest->restGet('/services/rest', 'foo=bar&baz=bat');

    if ($response->isSuccessful()) {
        echo $response->getBody();
    } else {
        echo '<p>An error occurred</p>';
    }
} catch (Zend_Exception $e) {
        echo '<p>An error occurred (' .$e->getMessage(). ')<p>';
}
?>]]>       </programlisting>
            <note>
                你可以传递一个格式标准的url查询参数(没有 "<code>?</code>")  到 
                <code>restGet()</code>, 或者你可以传递一个包含名称->数值的关联数组给它. 
				无论你执行的是那个方法, 你都要对名称和数值进行URL编码(比如用 
                <ulink url="http://php.net/urlencode"><code>urlencode()</code></ulink>).
            </note>
            <para>
                <code>restPost()</code> 和 <code>restPut()</code> 的用法和 <code>restGet()</code>相同, 只不过数据传输的方式不同
				，通过 HTTP POST 或 PUT来代替GET.
            </para>
            <para>
                <code>restDelete()</code> 方法用来操作一个路径, 但它不包含第二个参数来传递查询参数和数据.
            </para>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->