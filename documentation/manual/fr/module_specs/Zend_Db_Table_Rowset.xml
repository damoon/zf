<sect1 id="zend.db.tablerowset">

    <title>Zend_Db_Table_Rowset</title>

    <sect2 id="zend.db.table.rowset.introduction">

        <title>Introduction</title>

        <para>
            <code>Zend_Db_Table_Rowset</code> constitue un itérateur sur une série d'objets <code>Zend_Db_Table_Row</code>. 
            En général, vous n'instanciez pas directement <code>Zend_Db_Table_Rowset</code>; vous obtenez plutôt un objet 
            <code>Zend_Db_Table_Rowset</code> comme valeur de renvoi des méthodes <code>Zend_Db_Table::find()</code> ou 
            <code>fetchAll()</code>. Vous pouvez ensuite itérer sur les objets <code>Zend_Db_Table_Row</code> ainsi rassemblés et les modifier comme vous voulez.
        </para>

    </sect2>

    <sect2 id="zend.db.table.rowset.fetch">

        <title>Aller chercher un ensemble de lignes</title>

        <para>
             La première chose à faire consiste à instancier la classe <code>Zend_Db_Table</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php
// définition d'un adaptateur
require_once 'Zend/Db.php';
$parametres = array (
    'adapter'  => 'PDO_MYSQL',
    'host'     => '127.0.0.1',
    'username' => 'arthur',
    'password' => '******',
    'dbname'   => 'camelot'
);

$db = Zend_Db::factory($parametres);

// définition de l'adaptateur par défaut de tous les objets Zend_Db_Table
require_once 'Zend/Db/Table.php';
Zend_Db_Table::setDefaultAdapter($db);

// connexion à une table de la base de données
class TableRonde extends Zend_Db_Table {}
$table = new TableRonde();
?>]]>
        </programlisting>

        <para>
             Puis, on obtient plusieurs enregistrements de la base de données en passant plusieurs clés à la méthode <code>Zend_Db_Table::find()</code> 
             ou en utilisant la méthode <code>Zend_Db_Table::fetchAll()</code>; le résultat renvoyé sera un objet <code>Zend_Db_Table_Rowset</code> qui vous permettra 
             d'itérer sur les objets <code>Zend_Db_Table_Row</code> associés aux enregistrements de l'ensemble.
        </para>

        <programlisting role="php"><![CDATA[<?php
// on va chercher plusieurs enregistrements de la table
$lignes = $table->fetchAll();

//
// $lignes constitue maintenant un objet Zend_Db_Table_Rowset composé d'un
// objet Zend_Db_Table_Row par enregistrement du résultat
//
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.rowset.iterate">

        <title>Itérer sur l'ensemble de lignes</title>

        <para>
            <code>Zend_Db_Table_Rowset</code> implémente l'interface SPL, ce qui signifie que vous pouvez itérer sur les objets <code>Zend_Db_Table_Rowset</code> à l'aide de foreach(), 
            tout comme pour les tableaux. La valeur obtenue à chaque itération sera un objet <code>Zend_Db_Table_Row</code> qui correspond à un enregistrement de la table; 
            vous pouvez ensuite voir, modifier et enregistrer les propriétés de cet enregistrement.
        </para>

        <programlisting role="php"><![CDATA[<?php
// connexion à une table de la base de données
class TableRonde extends Zend_Db_Table {}
$table = new TableRonde();

// récupération de plusieurs enregistrements de la table
$lignes = $table->fetchAll();

// affichage
foreach($lignes as $ligne) {
    // $ligne est un objet Zend_Db_Table_Row
    echo "<p>La couleur préférée de " . htmlspecialchars($ligne->titre) . " "
       . htmlspecialchars($ligne->prenom) . " est " . 
htmlspecialchars($ligne->couleurPreferee)
       . ".</p>\n";

    // mise à jour du nombre de fois où cette ligne a été affichée
    // (propriété associée à la colonne "nombre_de_fois_affichee" de la table)
    $ligne->nombreDeFoisAffichee ++;

    // enregistrement avec ses nouvelles informations
    $ligne->save();
}
?>
?>]]>
        </programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->