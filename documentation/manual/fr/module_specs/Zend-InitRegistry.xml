<sect1 id="zend.initregistry">

    <title>Zend::initRegistry($registry = 'Zend_Registry')</title>

    <para>
        Les dévelopeurs désireux d'étendre les fonctionnalités existantes du registre peuvent
        utiliser cette fonction.
        Cette méthode permet aux développeurs de créer des sous-classes à Zend_Registry,
        incluant l'ajout de méthodes aliasées à offsetGet() et offsetExists(), tels que
        has(), getval(), setval(), etc. en créant une instance  de la sous-classe de
        Zend_Registry dans le code de bootstrap et en fournissant cette instance à initRegistry(),
        avant que toute autre méthode liée au registre ne sont invoquée.
        Notez que initRegistry() peut seulement être utilisé une seule fois, afin d'éviter tout
        écrasement accidentel après l'initialisation.
        Ainsi, l'utilisation de Zend::registry() ou de Zend::register() invoque automatiquement
        initRegistry() si cela n'a pas déjà été fait.
    </para>

    <example>
        <title>Exemple register() / offsetSet()</title>
<programlisting role="php"><![CDATA[<?php
class Zend_Registry_Perso extends Zend_Registry
{
    public function getval($index)
    {
        return $this->offsetGet($index);
    }
}

# dans votre code de bootstrap :

$ini_array = parse_ini_file('votreconfig.ini'); // entièrement optionnel
$registry = new Zend_Registry_Perso($ini_array);
Zend::initRegistry($registry);

# maintenant, les méthodes originales Zend::registry(), Zend::register() et Zend::isRegistered() fonctionnent normalement
?>]]></programlisting>
    </example>

    <para>
        Utilisez la constante <code>ArrayObject::ARRAY_AS_PROPS</code> dans le constructeur pour permettre d'accéder aux valeurs
        en utilisant <code>$registry->$indexName</code>, en plus de <code>$registry[$indexName]</code>.
        Cependant, attention aux conflits de noms si vous étendez Zend_Registry et ajoutez des variables privées.
    </para>

    <example>
        <title>Accéder aux valeurs en utilisant la notation objet OO au lieu de la notation ArrayAccess</title>
<programlisting role="php"><![CDATA[<?php
$registry = new Zend_Registry(array(), ArrayObject::ARRAY_AS_PROPS); 
Zend::initRegistry($registry);
?>]]></programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
