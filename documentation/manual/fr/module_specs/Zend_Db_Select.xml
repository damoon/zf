<sect1 id="zend.db.select">

    <title>Zend_Db_Select</title>

    <sect2 id="zend.db.select.introduction">

        <title>Introduction</title>

        <para>
            <code>Zend_Db_Select</code> est un outil destiné vous aider à construire des instructions SQL SELECT de
            indépendemment du SGBD utilisé. Bien sûr cet outil ne peut pas être parfait, mais c'est quand même une grande
            avancée en matière de portabilité de vos requêtes. De plus, cet outil vous aide à rendre
            vos requêtes résistantes aux attaques du type "injection SQL".
        </para>

        <para>
            Le moyen le plus facile de créer une instance de <code>Zend_Db_Select</code> est d'utiliser la méthode <code>Zend_Db_Adapter::select()</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once 'Zend/Db.php';

$params = array (
    'host'     => '127.0.0.1',
    'username' => 'malory',
    'password' => '******',
    'dbname'   => 'camelot'
);

$db = Zend_Db::factory('pdoMysql', $params);

$select = $db->select();
// $select is now a Zend_Db_Select object configured for use only with the Pdo_Myql adapter.
?>]]></programlisting>

        <para>
            Vous construisez ensuite une requête SELECT en utilisant cet objet et ses méthodes, puis vous générez une chaîne à  passer comme
            requête ou comme argument d'une méthode fetch*() de <code>Zend_Db_Adapter</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php

//
// SELECT *
//     FROM round_table
//     WHERE noble_title = "Sir"
//     ORDER BY first_name
//     LIMIT 10 OFFSET 20
//

// vous pouvez utiliser le style itératif
$select->from('round_table', '*');
$select->where('noble_title = ?', 'Sir');
$select->order('first_name');
$select->limit(10,20);

// ou le style fluide
$select->from('round_table', '*')
       ->where('noble_title = ?', 'Sir')
       ->order('first_name')
       ->limit(10,20);

// quoiqu'il en soit, le résultat est récupéré
$sql = $select->__toString();
$result = $db->fetchAll($sql);

// vous pouvez aussi passer directement l'objet $select;
// Zend_Db_Adapter est assez 'intelligent' pour appeler __toString() lorsqu'on
// lui passe des objets Zend_Db_Select : il obtient ainsi la requête
$resultat = $db->fetchAll($select);

?>]]></programlisting>

        <para>
            Vous pouvez aussi utiliser des marqueurs nommés dans vos requêtes, au lieu de l'échappement direct.
        </para>

        <programlisting role="php"><![CDATA[<?php

//
// SELECT *
//     FROM round_table
//     WHERE noble_title = "Sir"
//     ORDER BY first_name
//     LIMIT 10 OFFSET 20
//

$select->from('round_table', '*')
       ->where('noble_title = :title')
       ->order('first_name')
       ->limit(10,20);

// quoiqu'il en soit, le résultat est récupéré, cette
// fois-ci en spécifiant les données à  associer à  la requête
$params = array('title' => 'Sir');
$result = $db->fetchAll($select, $params);

?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.fromcols">

        <title>Sélectionner les colonnes d'une table : FROM</title>

        <para>
            Pour sélectionner les colonnes d'une table particulière, utilisez la méthode <code>from()</code>, en
            spécifiant la table et les colonnes que vous désirez. Vous pouvez spécifier des alias
            pour les tables comme pour les colonnes et vous pouvez utiliser <code>from()</code> autant de fois que nécessaire.
        </para>

        <programlisting role="php"><![CDATA[<?php

// crée un objet $db, on suppose l'utilisation de MySQL
$select = $db->select();

// SELECT a, b, c FROM une_table
$select->from('une_table', 'a, b, c');
// pareil :
$select->from('une_table', array('a', 'b', 'c');

// SELECT barre.col FROM toto AS barre
$select->from('toto AS barre', 'barre.col');

// SELECT toto.col AS col1, barre.col AS col2 FROM toto, barre
$select->from('toto', 'toto.col AS col1');
$select->from('barre', 'barre.col AS col2');

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.select.joincols">

        <title>Sélectionner les colonnes de tables jointes : JOIN</title>

        <para>
            Pour sélectionner des colonnes de tables jointes, utilisez la méthode <code>join()</code>.
            Spécifiez d'abord le nom de la table à joindre, puis la condition pour la jointure, et enfin les
            colonnes que vous voulez obtenir. Vous pouvez utiliser <code>join()</code> autant de fois que nécessaire.
        </para>

        <programlisting role="php"><![CDATA[<?php

// crée un objet $db, on suppose l'utilisation de MySQL
$select = $db->select();

//
// SELECT foo.*, bar.*
//     FROM foo
//     JOIN bar ON foo.id = bar.id
//
$select->from('foo', '*');
$select->join('bar', 'foo.id = bar.id', '*');

?>]]></programlisting>

        <para>
            Pour le moment, seule la syntaxe JOIN est prise en charge; les syntaxes LEFT JOIN, RIGHT JOIN etc, ne sont pas prises en charge.
            Les versions futures prendront en charge ces syntaxes de manière indépendante de la base de données.
        </para>

    </sect2>

    <sect2 id="zend.db.select.where">

        <title>Conditions WHERE</title>

        <para>
            Pour ajouter des conditions WHERE, utilisez la méthode where(). Vous pouvez lui passer une chaîne classique
            ou une chaîne contenant un emplacement réservé indiqué par un point d'interrogation et la valeur à  échapper à
            la place de l'emplacement (celle-ci sera échappée à  l'aide de la méthode <code>Zend_Db_Adapter::quoteInto()</code>).
        </para>

        <para>
            Appeler plusieurs fois <code>where()</code> aura pour effet d'enchaîner les conditions avec le mot-clé AND;
            si vous désirez utiliser le mot-clé OR, utilisez la méthode <code>orWhere()</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php

// crée un objet $db, on suppose l'utilisation de MySQL
$select = $db->select();

//
// SELECT *
//     FROM round_table
//     WHERE noble_title = "Sir"
//     AND favorite_color = "yellow"
//
$select->from('round_table', '*');
$select->where('noble_title = "Sir"'); valeur embarquée
$select->where('favorite_color = ?', 'yellow'); // valeur échappée

//
// SELECT *
//     FROM foo
//     WHERE bar = "baz"
//     OR id IN("1", "2", "3")
//
$select->from('foo', '*');
$select->where('bar = ?', 'baz');
$select->orWhere('id IN(?)', array(1, 2, 3));

?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.group">

        <title>Clause GROUP BY</title>

        <para>
            Pour regrouper les lignes, utilisez la méthode <code>group()</code> autant de fois que vous le souhaitez.
        </para>

        <programlisting role="php"><![CDATA[<?php

// crée a objet $db, puis obtention de l'outil SELECT
$select = $db->select();

//
// SELECT COUNT(id)
//     FROM foo
//     GROUP BY bar, baz
//
$select->from('foo', 'COUNT(id)');
$select->group('bar');
$select->group('baz');

// un appel équivalent :
$select->group('barre, baz');

// un autre appel équivalent :
$select->group(array('barre', 'baz'));

?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.having">

        <title>Conditions HAVING</title>

        <para>
            Pour ajouter des conditions HAVING à la requête SELECT, utilisez la méthode <code>having()</code>. Cette méthode est identique
            au niveau du fonctionnement à la méthode <code>where()</code>.
        </para>

        <para>
            Si vous appelez plusieurs fois <code>having()</code>, les conditions sont enchaînées avec le mot-clé AND; si vous
            désirez utiliser le mot-clé OR, utilisez la méthode <code>orHaving()</code>.
        </para>
        <programlisting role="php"><![CDATA[<?php

// crée a objet $db, puis obtention de l'outil SELECT
$select = $db->select();

//
// SELECT COUNT(id) AS count_id
//     FROM foo
//     GROUP BY bar, baz
//     HAVING count_id > "1"
//
$select->from('foo', 'COUNT(id) AS count_id');
$select->group('bar, baz');
$select->having('count_id > ?', 1);

?>]]></programlisting>
    </sect2>

    <sect2 id="zend.db.select.order">

        <title>Clause ORDER BY</title>

        <para>
            Pour organiser les colonnes, utilisez la méthode <code>order()</code> autant de fois que vous le souhaitez.
        </para>

        <programlisting role="php"><![CDATA[<?php

// crée a objet $db, puis obtention de l'outil SELECT
$select = $db->select();

//
// SELECT * FROM round_table
//     ORDER BY noble_title DESC, first_name ASC
//
$select->from('round_table', '*');
$select->order('noble_title DESC');
$select->order('first_name');

// un appel équivalent :
$select->order('titre DESC, prenom');

// un autre appel équivalent :
$select->order(array('titre DESC', 'prenom'));

?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.limit">

        <title>Limiter le résultat par un décompte et un offset</title>

        <para>
            <code>Zend_Db_Select</code> offre une abstraction de la clause LIMIT. Pour de nombreuses bases de données, telles que MySQL et PostgreSQL,
            ceci est relativement aisé dans la mesure où ces bases de données prennent en charge la syntaxe "LIMIT :decompte [OFFSET :offset]".
        </para>

        <para>
            Pour d'autres bases de données, telles que Microsoft SQL Server et Oracle, ce n'est pas si facile car elles ne prennent pas du tout
            en charge les clauses LIMIT. MS-SQL ne possède qu'une clause TOP et, pour Oracle, la requête doit être écrite d'une manière
            spéciale afin d'émuler une clause LIMIT. Grâce à la manière dont fonctionne en interne <code>Zend_Db_Select</code>, nous pouvons réécrire
            directement la requête SELECT afin d'émuler la fonctionnalité LIMIT des SGBD Open Source cités ci-dessus.
        </para>

        <para>
            Pour limiter le résultat d'une requête par un décompte et un offset, utilisez la méthode <code>limit()</code> en lui passant un décompte et,
            facultativement, un offset.
        </para>

        <programlisting role="php"><![CDATA[<?php

// d'abord, une clause simple "LIMIT :decompte"
$select = $db->select();
$select->from('toto', '*');
$select->order('id');
$select->limit(10);

//
// En MySQL/PostgreSQL/SQLite, cette instruction se traduit par :
//
// SELECT * FROM toto
//     ORDER BY id ASC
//     LIMIT 10
//
// Mais en Microsoft SQL, cela se traduit par :
//
// SELECT TOP 10 * FROM TOTO
//     ORDER BY id ASC
//
//

// maintenant, une clause plus complexe "LIMIT :decompte OFFSET :offset"
$select = $db->select();
$select->from('toto', '*');
$select->order('id');
$select->limit(10, 20);

//
// En MySQL/PostgreSQL/SQLite, cette instruction se traduit par :
//
// SELECT * FROM toto
//     ORDER BY id ASC
//     LIMIT 10 OFFSET 20
//
// Mais en Microsoft SQL, qui ne prend pas en charge les offset, cela se traduit par
// quelque chose du style :
//
// SELECT * FROM (
//     SELECT TOP 10 * FROM (
//         SELECT TOP 30 * FROM toto ORDER BY id DESC
//     ) ORDER BY id ASC
// )
//
// Zend_Db_Adapter se charge automatiquement pour vous de la traduction de la requête.
//


?>]]></programlisting>

    </sect2>

    <sect2 id="zend.db.select.paging">

        <title>Limiter le résultat par pages</title>

        <para>
             <code>Zend_Db_Select</code> peut aussi limiter les résultats par pages. Si vous souhaitez obtenir une "page" particulière du résultat,
             utilisez la méthode <code>limitPage();</code> passez-lui d'abord le numéro de la page que vous voulez et ensuite le nombre de lignes
             qui apparaissent sur chaque page.
        </para>

        <programlisting role="php"><![CDATA[<?php

// construction de la requête SELECT de base...
$select = $db->select();
$select->from('toto', '*');
$select->order('id');

// ... et on limite le résultat à la page 3 où chaque page contient 10 lignes
$select->limitPage(3, 10);

//
// En MySQL/PostgreSQL/SQLite, cette instruction se traduit par :
//
// SELECT * FROM toto
//     ORDER BY id ASC
//     LIMIT 10 OFFSET 20
//

?>]]></programlisting>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->