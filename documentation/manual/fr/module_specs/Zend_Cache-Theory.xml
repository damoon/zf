<sect1 id="zend.cache.theory">
    <title>La th�orie du cache</title>
    <para>
        Il y a trois concepts cl�s dans Zend_Cache.
        Le premier est l'identifiant unique (une cha�ne) qui est utilis� pour identifier les enregistrements
        de cache.
        Le seconde est la directive <code>'lifeTime'</code> vue dans les exemples; elle d�finie combien de temps
        la ressource de cache est consid�r� comme � jour.
        Le troisi�me est l'ex�cution conditionnelle, ainsi chaque partie de votre code peut �tre pass�e enti�rement,
        pour am�liorer les performances.
        Le fonction principale du frontend (<code>Zend_Cache_Core::get()</code>) est toujours faite pour retourner
        false en cas de cache manquant, si cela donne du sens pour la nature d'un frontend.
        Cela permet aux utiliseurs d'entourer des parties de code qu'ils veulent mettre en cache (and passer) dans une
        instruction <code>if(){ ... }</code> ou la condition est une m�thode Zend_Cache.
        A la fin de ces blocs, vous devez sauvegarder ce que vous avez g�n�r� (eg. <code>Zend_Cache_Core::save()</code>).
    </para>
    <note><para>
        Le design de l'ex�cution conditionelle de votre code g�n�r� n'est pas forc�ment dans des frontends.
        (<code>Function</code>, par exemple) quand toute la logique est impl�ment�e � l'int�rieur du frontend.
    </para></note>
    <note><para>
        Le 'Cache hit' est un terme pour une condition quand l'enregistremetn de cache est trouv�, valide, et
        � jour (en d'autres mots, qu'il n'a pas encore expir�).
        Le 'Cache miss' est tout le reste.
        Lorsque un 'Cache miss' survient, vous devez g�n�rer vos donn�es (comme vous le feriez normallement)
        et le mettre en cache.
        Lorsque vous avez un 'Cache hit', le backend r�cup�re pour vous et de fa�on transparente, les enregistrements.
    </para></note>
    <sect2 id="zend.cache.factory">
        <title>La m�thode de fabrique de <code>Zend_Cache</code></title>
        <para>
            Une bonne mani�re de construire une instance utilisable d'un frontend  <code>Zend_Cache</code>
            est donn�e dans l'exemple suivant:
            <programlisting role="php"><![CDATA[<?php

# Nous chargeons la fabrique Zend_Cache
require 'Zend/Cache.php';

# Nous choisissons un backend (par exemple 'File' ou 'Sqlite')
$backendName = '[...]';

# Nous choisissons un frontend (par exemple: 'Core', 'Output', 'Page'...)
$frontendName = '[...]';

# Nous d�finissons un tableau d'options pour le frontend choisit
$frontendOptions = array([...]);

# Nous d�finisson un tableau d'options pour le banckend choisit
$backendOptions = array([...]);

# Nous cr�ons la bonne instance
# Bien sur, les deux derniers arguments sont optionnels
$cache = Zend_Cache::factory($frontendName, $backendName, $frontendOptions, $backendOptions);

?>]]></programlisting>
        </para>
        <para>
            Dans les exemples suivants, nous nous assurerons que la variable <code>$cache</code>
            utilise un frontend valide, et que vous comprenez comment passer des param�tres � vos
            backends.
        </para>
        <note><para>
            Utilisez toujours <code>Zend_Cache::factory()</code> pour obtenir des instances de frontend.
            Instancier des frontend et des backends ne fonctionnera pas comme pr�vu.
        </para></note>
    </sect2>

    <sect2 id="zend.cache.tags">
        <title>Marquer les enregistrements</title>
        <para>
            Les balises sont un moyen de categoriser les enregistrements de cache.
            Quand vous sauvegardez un cache avec la m�thode <code>save()</code>
            vous pouvez d�finir un tableau de balises qui s'appliqueront pour cette enregistrement.
            Ensuite vous serez en mesure de nettoyer tous les enregistrement de cache identifi�s par
            une balise (ou des balises) donn�es:
        <programlisting role="php"><![CDATA[<?php

$cache->save($large_donnees, 'monIDUnique', array('tagA', 'tagB', 'tagC'));

?>]]></programlisting></para>
    </sect2>
    <sect2 id="zend.cache.clean">
        <title>Nettoyer le cache</title>
        <para>
            Pour supprimer/invalider un identifiant de cache particulier, vous pouvez utiliser
            la m�thode <code>remove()</code> :
             <programlisting role="php"><![CDATA[<?php

$cache->remove('idAEffacer');

?>]]></programlisting>
        </para>
        <para>
            Pour efface/invalider plusieurs identifiants de caches en une seule op�ration, vous pouvez
            utiliser la m�thode <code>clean()</code>
            Par exemple, pour supprimer tous les caches :
              <programlisting role="php"><![CDATA[<?php
// nettoie tous les enregistrements
$cache->clean(Zend_Cache::CLEANING_MODE_ALL);

// nettoie uniquement les caches obsol�tes
$cache->clean(Zend_Cache::CLEANING_MODE_OLD);

?>]]>       </programlisting>
            Si vous voulez effacer les caches correspondant aux balises 'tagA' et 'tagC':
              <programlisting role="php"><![CDATA[<?php

$cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_TAG, array('tagA', 'tagC'));

?>]]>       </programlisting>
        </para>
        <para>
            Les modes disponibles de nettoyage sont
            <code>CLEANING_MODE_ALL</code>, <code>CLEANING_MODE_OLD</code>,
            <code>CLEANING_MODE_MATCHING_TAG</code> et <code>CLEANING_MODE_NOT_MATCHING_TAG</code>.
            Ils sont � combiner avec un tableau de balises utilis�es pour les op�rations de nettoyage
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->