<sect1 id="zend.session.savehandler.dbtable">
    <title>Zend_Session_SaveHandler_DbTable</title>
    <para>
        Le paramétrage basique de Zend_Session_SaveHandler_DbTable doit contenir au moins quatre colonnes, décrit dans un tableau de configuration ("array") ou un objet Zend_Config : "primary" qui est la clé primaire et représente l'id de session (par défaut une chaîne de 32 caractères) ; "modified" qui est le timestamp unix de la date de la dernière modification ; "lifetime" qui est la durée de vie de la session (modified + lifetime > time()) ; et "data" qui sont les données serialisées stockées dans la session.
    </para>
    <example id="zend.session.savehandler.dbtable.basic">
            <title>Paramétrage basique</title>
            <programlisting role="SQL"><![CDATA[
CREATE TABLE `session` (
  `id` char(32),
  `modified` int,
  `lifetime` int,
  `data` text,
  PRIMARY KEY (`id`)
);
?>]]></programlisting>
        <programlisting role="php"><![CDATA[<?php
// Connexion à la base
$db = Zend_Db::factory('Pdo_Mysql', array(
    'host'        =>'example.com',
    'username'    => 'dbuser',
    'password'    => '******',
    'dbname'    => 'dbname'
));

// Vous pouvez soit régler l'adaptateur par défaut de Zend_Db_Table
// ou
// vous pouvez passer l'objet de connexion à la $config du gestionnaire de sauvegarde
Zend_Db_Table_Abstract::setDefaultAdapter($db);
$config = array(
    'name'           => 'session', 
    'primary'        => 'id', 
    'modifiedColumn' => 'modified',
    'dataColumn'     => 'data',
    'lifetimeColumn' => 'lifetime' 
); 

// Créez votre Zend_Session_SaveHandler_DbTable et
// réglez le gestionnaire de sauvegarde de Zend_Session
Zend_Session::setSaveHandler(new Zend_Session_SaveHandler_DbTable($config));

// Démarrez la session !
Zend_Session::start();

// Maintenant vous pouvez utiliser Zend_Session comme avant
?>]]></programlisting>
    </example>
    <para>
        Vous pouvez aussi utiliser des colonnes multiples pour votre clé primaire de Zend_Session_SaveHandler_DbTable.
    </para>
    <example id="zend.session.savehandler.dbtable.multi-column-key">
        <title>Utiliser une clé primaire multi-colonnes</title>
        <programlisting role="SQL"><![CDATA[
CREATE TABLE `session` ( 
    `session_id` char(32) NOT NULL,
    `save_path` varchar(32) NOT NULL,
    `name` varchar(32) NOT NULL DEFAULT '',
    `modified` int,
    `lifetime` int,
    `session_data` text,
    PRIMARY KEY (`Session_ID`, `save_path`, `name`)
);
?>]]></programlisting>
        <programlisting role="php"><![CDATA[<?php
// Réglez votre connexion à la base comme ci-dessus
// NOTE : cette configuration est aussi fournie à Zend_Db_Table
// donc toute information spécifique peut y être ajoutée
$config = array(
    'name'              => 'session', // nom de la table comme pour Zend_Db_Table
    'primary'           => array(
        'session_id',   // l'id de session donné par PHP
        'save_path',    // session.save_path
        'name',         // nom de la session
    ),
    'primaryAssignment' => array( // vous devez spécifier au gestionnaire de sauvegarde quelles colonnes
                                  // vous utilisez en tant que clé primaire. L'ORDRE EST IMPORTANT
        'sessionId',          // la première colonne de la clé primaire est l'id de session
        'sessionSavePath',    // la seconde colonne de la clé primaire est le save_path
        'sessionName',        // la première colonne de la clé primaire est le nom de la session
    ), 
    'modifiedColumn'    => 'modified',     // heure de la dernière modification
    'dataColumn'        => 'session_data', // données serialisées
    'lifetimeColumn'    => 'lifetime',     // durée de vie de l'enregistrement
);

// Réglez le gestionnaire de sauvegarde de Zend_Session
Zend_Session::setSaveHandler(new Zend_Session_SaveHandler_DbTable($config));

// Démarrez la session
Zend_Session::start();

// Utilisez Zend_Session normalement
?>]]></programlisting>
    </example>
</sect1>