<sect1 id="zend.service.delicious">
    <title>Zend_Service_Delicious</title>
    <sect2 id="zend.service.delicious.introduction">
        <title>Introduction</title>
        <para>
            <code>Zend_Service_Delicious</code> est une API pour accèder aux web services
            XML et JSON de <ulink url="http://del.icio.us">del.icio.us</ulink>.
            Ce composant vous donne, si vous avez les droits, un accès en lecture-écriture
            à vos entrées sur del.icio.us. Il permet également un accès en lecture seul
            aux données de tous les utilisateurs.
        </para>
        <example id="zend.service.delicious.introduction.getAllPosts">
            <title>Récupérer toutes vos entrées</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');
$posts = $delicious->getAllPosts();

foreach ($posts as $post) {
    echo "--\n";
    echo "Titre: {$post->getTitle()}\n";
    echo "Url: {$post->getUrl()}\n";
}
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.retrieving_posts">
        <title>Récupérer vos entrées</title>
        <para>
            <code>Zend_Service_Delicious</code> fournis 3 méthodes pour récupérer vos
            entrées: <code>getPosts()</code>,
            <code>getRecentPosts()</code> and <code>getAllPosts()</code>. Elles retournent
            toutes une instance de la classe <code>Zend_Service_Delicious_PostList</code>,
            qui contient toutes les entrées récupérées.
        </para>
        <programlisting role="php"><![CDATA[<?php
/**
 * Récupère les entrées correspondants aux arguments. Si la date ou l'url n'est pas précisée, la date la plus écente
 * sera prise en compte.
 *
 * @param string $tag Optionnel pour filtrer par tag
 * @param Zend_Date $dt Optionnel pour filtrer par date
 * @param string $url Optionnel pour filtrer par url
 * @return Zend_Service_Delicious_PostList
 */
public function getPosts($tag = null, $dt = null, $url = null);

/**
 * Récupère les dernières entrées
 *
 * @param string $tag Optionnel pour filtrer par tag
 * @param string $count Nombre maximum d'entrées à récupérer ( 15 par défault)
 * @return Zend_Service_Delicious_PostList
 */
public function getRecentPosts($tag = null, $count = 15);

/**
 * Récupère toutes les entrées
 *
 * @param string $tag Optionnel pour filtrer par tag
 * @return Zend_Service_Delicious_PostList
 */
public function getAllPosts($tag = null);
?>]]></programlisting>
    </sect2>
    <sect2 id="zend.service.delicious.postlist">
        <title>Zend_Service_Delicious_PostList</title>
        <para>
            Cette facilite l'accès au données en implémentant les interfaces <code>Countable</code>,
            <code>Iterator</code>, et<code>ArrayAccess</code> interfaces.
        </para>
        <example id="zend.service.delicious.postlist.accessing_post_lists">
            <title>Accèder à la liste des entrées</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');
$posts = $delicious->getAllPosts();

// Affiche le nombre d'entrées
echo count($posts);

// Itération sur les entrées
foreach ($posts as $post) {
    echo "--\n";
    echo "Titre: {$post->getTitle()}\n";
    echo "Url: {$post->getUrl()}\n";
}

// Affiche une entrée en utilisant un tableau
echo $posts[0]->getTitle();
?>]]></programlisting>
        </example>
        <note>
            <para>
                Dans cette implémentation les méthodes <code>ArrayAccess::offsetSet()</code> et
                <code>ArrayAccess::offsetUnset()</code> lèvent des exceptions. Ainsi, du code tel que
                <code>unset($posts[0]);</code> ou <code>$posts[0] = 'A';</code> lévera une exception
                car ces propriétés sont en lecture seule.
            </para>
        </note>
    </sect2>
    <sect2 id="zend.service.delicious.editing_posts">
        <title>Edition des entrées</title>
        <example id="zend.service.delicious.editing_posts.post_editing">
            <title>Edition d'une entrée</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');
$posts = $delicious->getPosts();

// change le titre
$posts[0]->setTitle('Nouveau Titre');
// saubegarde le changement
$posts[0]->save();
?>]]></programlisting>
        </example>
        <example id="zend.service.delicious.editing_posts.method_call_chaining">
            <title>Method call chaining</title>
            <para>
               Toutes les méthodes "setter" renvois l'objet Zend_Service_Delicious_PostList vous pouvez donc chainer les appels aux méthodes en utilisant l'interface "fluent"
            </para>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');
$posts = $delicious->getPosts();

$posts[0]->setTitle('Nouveau Titre')
         ->setNotes('Nouvelle note')
         ->save();
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.deleting_posts">
        <title>Supprimer des entrées</title>
        <para>
            Il y'as de moyens de supprimer une entrée, en sépcifiant son URL ou en appelant la méthode <code>delete()</code> sur un objet Zend_Service_Delicious_PostList
        </para>
        <example id="zend.service.delicious.deleting_posts.deleting_posts">
            <title>Suppression d'une entrée</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');

// en spécifiant l' URL
$delicious->deletePost('http://framework.zend.com');

// en appelant la méthode de l'objet Zend_Service_Delicious_PostList
$posts = $delicious->getPosts();
$posts[0]->delete();

// une autre façon d'utiliser deletePost()
$delicious->deletePost($posts[0]->getUrl());
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.adding_posts">
        <title>Ajout d'entrées</title>
        <para>
            Pour ajouter une entrée vous devez appeler la méthode <code>createNewPost()</code>, qui renvois un objet
            <code>Zend_Service_Delicious_Post</code>. Quand vous éditez l'entrée, vous devez la sauvegarder
            dans la base de donnée de del.icio.us en appelant la méthode <code>save()</code>.
        </para>
        <example id="zend.service.delicious.adding_posts.adding_a_post">
            <title>Ajouter une entrée</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');

// créé et sauvegarde une nouvelle entrée (en chainant les méthodes)
$delicious->createNewPost('Zend Framework', 'http://framework.zend.com')
          ->setNotes('Page d\'accueil du Zend Framewore')
          ->save();

// créé et sauvegarde une nouvelle entrée (sans chainer les méthodes)
$newPost = $delicious->createNewPost('Zend Framework', 'http://framework.zend.com');
$newPost->setNotes('Page d\'accueil du Zend Framewore');
$newPost->save();
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.tags">
        <title>Les Tags</title>
        <example id="zend.service.delicious.tags.tags">
            <title>Récupérer les Tags</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');

// récupère tous les Tags
print_r($delicious->getTags());

// renomme le tag "ZF" en "zendFramework"
$delicious->renameTag('ZF', 'zendFramework');
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.bundles">
        <title>Les groupes de Tags</title>
        <example id="zend.service.delicious.bundles.example">
            <title>Gestion des groupes de Tags</title>
            <programlisting role="php"><![CDATA[<?php
$delicious = new Zend_Service_Delicious('nom d utilisateur', 'mot de passe');

// get all bundles
print_r($delicious->getBundles());

// delete bundle someBundle
$delicious->deleteBundle('someBundle');

// add bundle
$delicious->addBundle('newBundle', array('tag1', 'tag2'));
?>]]></programlisting>
        </example>
    </sect2>
    <sect2 id="zend.service.delicious.public_data">
        <title>Données publiques</title>
        <para>
            L'API web del.icio.us autorise l'accès aux données publiques de tous les utilisateurs.
        </para>
        <table id="zend.service.delicious.public_data.functions_for_retrieving_public_data">
            <title>Méthodes pour récuprer les données publiques</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Nom</entry>
                        <entry>Description</entry>
                        <entry>Type de retour</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>getUserFans()</code></entry>
                        <entry>Récupère les fans d'un utilisateur</entry>
                        <entry>Array</entry>
                    </row>
                    <row>
                        <entry><code>getUserNetwork()</code></entry>
                        <entry>Récupère le réseau d'un utilisateur</entry>
                        <entry>Array</entry>
                    </row>
                    <row>
                        <entry><code>getUserPosts()</code></entry>
                        <entry>Récupère les entrées d'un utilisateur</entry>
                        <entry>Zend_Service_Delicious_PostList</entry>
                    </row>
                    <row>
                        <entry><code>getUserTags()</code></entry>
                        <entry>Récupère les Tags d'un utilisateur</entry>
                        <entry>Array</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <note>
            <para>
                Si vous utilisez uniquement ces méthodes, le nom d'utilisateur et le mot de passe ne sont pas obligatoires pour créer un nouvel objet <code>Zend_Service_Delicious</code>.
            </para>
        </note>
        <example id="zend.service.delicious.public_data.retrieving_public_data">
            <title>Récupérer les données publiques</title>
            <programlisting role="php"><![CDATA[<?php
// nom d'utilisateur et mot de passe optionnels
$delicious = new Zend_Service_Delicious();

// récupère les fans de l'utilisateur someUser
print_r($delicious->getUserFans('someUser'));

// récupère le réseau de l'utilisateur someUser
print_r($delicious->getUserNetwork('someUser'));

// récupère les Tags de l'utilisateur someUser
print_r($delicious->getUserTags('someUser'));
?>]]></programlisting>
        </example>
        <sect3 id="zend.service.delicious.public_data.posts">
            <title>Entrées publiques</title>
            <para>
                Quand vous récupérez des entrées publiques, la méthode <code>getUserPosts()</code> retourne un objet
                <code>Zend_Service_Delicious_PostList</code> qui contient des objets
                <code>Zend_Service_Delicious_SimplePost</code>. Ces derniers contiennents des informations basiques
                sur l'entrées : URL, title, notes, and tags.
            </para>
            <table id="zend.service.delicious.public_data.posts.SimplePost_methods">
                <title>Méthodes de la classe <code>Zend_Service_Delicious_SimplePost</code></title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>Nom</entry>
                            <entry>Description</entry>
                            <entry>Type de retour</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><code>getNotes()</code></entry>
                            <entry>Récupère les notes de l'entrée</entry>
                            <entry>String</entry>
                        </row>
                        <row>
                            <entry><code>getTags()</code></entry>
                            <entry>Récupère les Tags de l'entrés</entry>
                            <entry>Array</entry>
                        </row>
                        <row>
                            <entry><code>getTitle()</code></entry>
                            <entry>Récupère le titre de l'entrée</entry>
                            <entry>String</entry>
                        </row>
                        <row>
                            <entry><code>getUrl()</code></entry>
                            <entry>Récupère l'URL de l'entrée</entry>
                            <entry>String</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect3>
    </sect2>
    <sect2 id="zend.service.delicious.httpclient">
        <title>Client HTTP</title>
        <para>
            <code>Zend_Service_Delicious</code> utilise <code>Zend_Rest_Client</code> pour effectuer les requêtes HTTP
            sur le web service de del.icio.us. Pour modifier le client HTTP utiliser par
            <code>Zend_Service_Delicious</code>, vous devez modifier le client HTTP de <code>Zend_Rest_Client</code>.
        </para>
        <example id="zend.service.delicious.httpclient.changing">
            <title>Modifier le client HTTP de <code>Zend_Rest_Client</code></title>
            <programlisting role="php"><![CDATA[<?php
$myHttpClient = new My_Http_Client();
Zend_Rest_Client::setHttpClient($myHttpClient);
?>]]></programlisting>
        </example>
        <para>
            Quand vous effectuez plus d'une requête avec <code>Zend_Service_Delicious</code> vous pouvez accèlérez vos
            requêtes en configurant votre client HTTP pour qu'il ne termine pas les connections.
        </para>
        <example id="zend.service.delicious.httpclient.keepalive">
            <title>Configurer votre client HTTP pour qu'il ne termine pas les connections</title>
            <programlisting role="php"><![CDATA[<?php
Zend_Rest_Client::getHttpClient()->setConfig(array(
        'keepalive' => true
));
?>]]></programlisting>
        </example>
        <note>
            <para>
                En raison de quelques problémes de del.icio.us avec <code>'ssl2'</code> (environs 2 secondes pour une
                requête), quand un objet <code>Zend_Service_Delicious</code> est construit, le transport SSL
                de <code>Zend_Rest_Client</code> est configuré sur <code>'ssl'</code> au lieu de la valeur par défaut
                <code>'ssl2'</code>.
            </para>
        </note>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
