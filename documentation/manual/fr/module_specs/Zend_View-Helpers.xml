<sect1 id="zend.view.helpers">

    <title>Aides pour la vue</title>

    <para>
        Dans vos scripts de vue, il est souvent nécessaire d'effectuer certaines actions complexe encore et encore ; par exemple : formatter une date, générer des éléments de formulaire, afficher des liens d'action. Vous pouvez utiliser des classes d'aide pour effectuer ce genre de tâches.
    </para>

    <para>
        Pour utiliser une aide dans votre script de vue, appelez la en utilisant <code>$this->helperName()</code>. Dans les coulisses, <code>Zend_View</code> va charger la classe <code>Zend_View_Helper_HelperName</code>, créer une instance de cet objet, et appeler sa méthode <code>helperName()</code>. L'instance de l'objet est persistante dans l'instance de <code>Zend_View</code>, et est réutilisée pour tous les appels futurs à <code>$this->helperName()</code>.
    </para>

    <sect2 id="zend.view.helpers.initial">

        <title>Aides initiales</title>

        <para>
            <code>Zend_View</code> fournit avec un jeu initial de classes d'aides, toutes sont liées à la génération d'éléments de formulaire. Chacune affiche et échappe l'élement voulu :
        </para>

        <itemizedlist>

            <listitem><para>
                formButton($name, $value, $attribs): crée un élément &lt;input type="button" /&gt;.
            </para></listitem>

            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): crée une élément &lt;input type="checkbox" /&gt;. Le paramètre $options est un tableau dans lequel la première valeur est la valeur &quot;checked&quot;, et la seconde &quot;unchecked&quot; (les défauts sont '1' et '0'). Si $value correspond à la valeur &quot;checked&quot;, la boite sera cochée.
            </para></listitem>

            <listitem><para>
                formFile($name, $value, $attribs): crée un élément &lt;input type="file" /&gt;.
            </para></listitem>

            <listitem><para>
                formHidden($name, $value, $attribs): crée un élément &lt;input type="hidden" /&gt;.
            </para></listitem>

            <listitem><para>
                formPassword($name, $value, $attribs): crée un élément &lt;input type="password" /&gt;.
            </para></listitem>

            <listitem><para>
                formRadio($name, $value, $attribs, $options): crée une série d'éléments &lt;input type="button" /&gt;, une pour chaque élément $options. Dans le tableau $options, la clé de l'élément est la valeur du radio, et la valeur de l'élément est l'étiquette du radio. La radio $value sera précoché pour vous.
            </para></listitem>

            <listitem><para>
                formReset($name, $value, $attribs): crée un élément &lt;input type="reset" /&gt;.
            </para></listitem>

            <listitem><para>
                formSelect($name, $value, $attribs, $options): crée un bloc &lt;select&gt;...&lt;/select&gt;, avec une &lt;option&gt; pour chaque élément $options. Dans le tableau $options, la clé de l'élément est la valeur de l'option, et la valeur de l'élément est son étiquette optionnelle. L'option (ou les options) $value sera (ou seront) présélectionnées pour vous.
            </para></listitem>

            <listitem><para>
                formSubmit($name, $value, $attribs): crée un élément &lt;input type="submit" /&gt;.
            </para></listitem>

            <listitem><para>
                formText($name, $value, $attribs): crée un élément &lt;input type="text" /&gt;.
            </para></listitem>

            <listitem><para>
                formTextarea($name, $value, $attribs): crée un bloc &lt;textarea&gt;...&lt;/textarea&gt;.
            </para></listitem>

        </itemizedlist>

        <para>
            Les utiliser dans vos script de vue est très simple, voici un exemple. Notez que tout ce dont vous avez besoin, c'est de les appeler; elles vont se charger et s'instantier elle-même si besoin est.
        </para>

        <programlisting role="php"><![CDATA[<?php
// dans votre script de vue, $this se réfère à l'instance de Zend_View.
//
// Partons du principe que vous avez déjà assigné une série d'options de sélection dans un
// tableau $countries =  array('us' => 'United States', 'il' => 'Israel', 'de' => 'Germany').
?>
<form action="action.php" method="post">
    <p><label>Votre email :
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Votre pays :
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>??? Would you like to opt in ???
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no')) ?>
    </label></p>
</form>]]>
        </programlisting>

        <para>
            La sortie résultante du script de vue ressemblera à ceci:
        </para>

        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Votre email :
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Votre pays :
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>??? Would you like to opt in ???
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.helpers.paths">

        <title>Chemin des aides</title>

        <para>
            Comme pour les scripts de vue, votre contrôleur peut spécifier une pile de chemins dans lesquels <code>Zend_View</code> cherchera les classes d'aides. Par défaut, <code>Zend_View</code> cherche dans &quot;Zend/View/Helper/*&quot;. Vous pouvez dire à <code>Zend_View</code> de regarder dans d'autres chemins en utilisant les méthodes <code>setHelperPath()</code> et <code>addHelperPath()</code>. De plus, vous pouvez indiquer un préfixe de classe pour utiliser les aides dans le répertoire fourni, et permettre de donner des espaces de nommage à vos classes d'aide. Par défaut, si aucun préfixe n'est fourni, 'Zend_View_Helper_' est utilisé.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/chemin/vers/plus/de/classes/d-aides', 'Ma_View_Helper');
?>]]>
        </programlisting>

        <para>
            En fait, vous pouvez &quot;empiler&quot; les chemins en utilisant la méthode <code>addHelperPath()</code>
            Comme vous ajouter des chemins dans la pile, <code>Zend_View</code> va regarder dans le chemin le plus
            récemment ajouté, pour inclure la classe d'aide. Cela vous permet d'ajouter (ou bien de re-définir) la
            distribution initiale des aides, avec vos propes aides personnalisées.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// Ajoute /chemin/vers/des/aides avec le préfixe de classe 'Ma_View_Helper'
$view->addHelperPath('/chemin/vers/des/aides', 'Ma_View_Helper');
// Ajoute /autre/chemin/vers/des/aides avec le préfixe de classe 'Votre_View_Helper'
$view->addHelperPath('/autre/chemin/vers/des/aides', 'Votre_View_Helper');

// maintenant, lorsque vous appelerez $this->helperName(), Zend_View
// va rechercher en premier /chemin/vers/des/aides/HelperName.php en utilisant la classe "Ma_View_Helper_HelperName",
// et ensuite dans /autre/chemin/vers/des/aides/HelperName.php en utilisant la classe "Votre_View_Helper_HelperName",
// et finalement dans Zend/View/Helpers/HelperName.php en utilisant la classe "Zend_View_Helper_HelperName"
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.helpers.custom">

        <title>Ecrire des aides personnalisées</title>

        <para>
            Ecrire des aides personnalisées est facile, vous devez juste suivre ces règle :
        </para>

        <itemizedlist>

            <listitem><para>
                Le nom de la classe doit, au minimum, se terminer avec le nom de l'aide en utilisant la notation Camel. Par exemple, si vous écrivez une aide appelée "actionSpeciale", le nom de la classe doit être au minimum "ActionSpeciale". Vous devriez donner au nom de la classe un préfixe, et il est recommandé d'utiliser "View_Helper" comme partie de ce préfixe : "Ma_View_Helper_ActionSpeciale". (Vous devez alors fournir le préfixe, avec ou sans l'underscore, à <code>addHelperPath()</code> ou à <code>setHelperPath()</code>).
            </para></listitem>

            <listitem><para>
                La classe doit avoir une méthode publique dont le nom correspond au nom de l'aide ; c'est la méthode qui sera appelé quand votre template appelera &quot;$this->actionSpeciale()&quot;. Dans notre exemple &quot;$this->actionSpeciale()&quot;, la déclaration de méthode requise serait &quot;public function actionSpeciale()&quot;.
            </para></listitem>

            <listitem><para>
                En général, la classe ne devrait pas afficher directement les données (via echo ou print). Elle devrait retourner les valeurs pour être ensuite affichées. Les valeurs retournées devrait être échappées de façon appropriées.
            </para></listitem>

            <listitem><para>
                La classe doit être dans un fichier ayant le même nom que la méthode d'aide. Si on utilise la méthode &quot;actionSpeciale()&quot;, le fichier devra être nommé &quot;ActionSpeciale.php&quot;
            </para></listitem>
        </itemizedlist>

        <para>
            Placez les fichier de classe d'aide quelque part dans la pile des chemins d'aide, et <code>Zend_View</code> le chargera, l'instantiera, le rendra persistant, et l'exécutera automatiquement pour vous.
        </para>

        <para>
            Voici un exemple du fichier &quot;ActionSpeciale.php&quot; :
        </para>

        <programlisting role="php"><![CDATA[<?php
class Ma_View_Helper_ActionSpeciale {
    protected $_count = 0;
    public function actionSpeciale()
    {
        $this->_count++;
        $output = "J'ai vu 'The Big Lebowsky' {$this->_count} fois.";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>

        <para>
            Ensuite, dans un script de vue, vous pouvez appeler l'aide <code>ActionSpeciale</code> autant de fois que vous le souhaitez ; elle sera instantiée une fois, et rendue persistante pendant toute la vie de l'instance de <code>Zend_View</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php
// rappelez vous, $this se réfère à l'instance de Zend_View
echo $this->actionSpeciale();
echo $this->actionSpeciale();
echo $this->actionSpeciale();
?>]]>
        </programlisting>

        <para>
            La sortie pourrait alors ressembler à ceci :
        </para>
        <programlisting role="php"><![CDATA[
J'ai vu 'The Big Lebowsky' 1 fois.
J'ai vu 'The Big Lebowsky' 2 fois.
J'ai vu 'The Big Lebowsky' 3 fois.]]>
        </programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->