<sect1 id="zend.introduction">
    <title>Introduction</title>
    <para>
    La classe Zend est la classe qui sert de fondation au Framework Zend. Cette 
    classe est née de l'adhésion du framework au principe DRY (Don't Repeat 
    Yourself, [NDT : Ne vous répétez pas]). Elle ne contient que des méthodes 
    statiques et ces méthodes implémentent des fonctionnalités qui sont requises 
    par plusieurs composants du Framework Zend.
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>Zend::loadFile()</title>

    <para>    
    <code>Zend::loadFile()</code> charge un fichier PHP, qui peut contenir du 
    code PHP arbitraire. Cette méthode enveloppe la fonction PHP <ulink 
    url="http://php.net/include"><code>include()</code></ulink>, et lance une 
    exception <code>Zend_Exception</code> en cas d'échec.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>

    <para>
    L'argument <code>$filename</code> définit le nom du fichier à charger, et il 
    ne doit contenir aucune information concernant son chemin d'accès. Une 
    vérification de sécurité est effectuée sur <code>$filename</code>. Le 
    fichier <code>$filename</code> ne peut contenir que des caractères 
    alphanumérique, des tirets ("-"), des tirets-bas ("_") ou des points ("."). 
    Aucune de ces restrictions ne s'applique à l'argument <code>$dirs</code>.
    </para>

    <para>
    L'argument <code>$dirs</code> définit les dossiers où rechercher le fichier. 
    Si <code>NULL</code>, la recherche s'effectuera uniquement dans les dossiers 
    définis par la variable <code>include_path</code>. Si c'est une chaîne ou un 
    tableau, le ou les répertoires spécifiés seront scannés, ainsi que les 
    dossiers définis par la variable <code>include_path</code>.
    </para>

    <para>
    L'argument <code>$once</code> est un booléen qui spécifie s'il faut utiliser 
    la fonction PHP <ulink 
    url="http://php.net/include"><code>include()</code></ulink> ou <ulink 
    url="http://php.net/include_once"><code>include_once()</code></ulink> pour 
    charger le fichier.
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
    <code>Zend::loadClass()</code> charge un fichier PHP dont le nom est de la 
    forme "<code>$nomClasse.php</code>", et vérifie ensuite si 
    <code>$nomClasse</code> existe.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadClass($class, $dirs)

?>]]></programlisting>

    <para>
    Si le fichier est introuvable ou si la classe n'existe pas après chargement, 
    une exception <code>Zend_Exception</code> est lancée. La méthode 
    <code>Zend::loadFile()</code> est utilisée pour le chargement du fichier, et 
    l'argument <code>$dirs</code> lui est passé directement.
    </para>

    <para>
    Si vous demandez une classe dont le nom contient des tirets-bas ("_") et si 
    <code>$dirs</code> vaut null (le cas par défaut), 
    <code>Zend::loadClass()</code> déterminera automatiquement 
    <code>$dirs</code> à partir du nom de la classe, en convertissant les 
    tirets-bas en séparateurs de répertoires. Par exemple, si 
    <code>$class</code> est <code>Zend_Exemple_Classe</code>, ce nom 
    correspondra au chemin d'accès <code>Zend/Exemple/Classe.php</code>.
    </para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>
    La méthode <code>Zend::loadInterface()</code> fonctionne exactement de la 
    même manière que <code>Zend::loadClass()</code>, seulement elle chargera une 
    interface et non une classe.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
     La méthode <code>Zend::loadClass()</code> ne peut pas être utilisée pour 
     charger des interfaces car la fonction PHP <ulink 
     url="http://php.net/class_exists"><code>class_exists()</code></ulink> ne 
     marche pas avec les interfaces (depuis PHP 5.0.2). Utilisez donc 
     <code>Zend::loadInterface()</code> à la place.
    </para>

    <para>
    Si vous demandez une interface dont le nom contient des tirets-bas ("_") et 
    si <code>$dirs</code> vaut null (le cas par défaut), 
    <code>Zend::loadInterface()</code> déterminera automatiquement 
    <code>$dirs</code> à partir du nom de l'interface, en convertissant les 
    tirets-bas en séparateurs de répertoires. Par exemple, si 	
    <code>$interface</code> est <code>Zend_Exemple_Interface</code>, ce nom 
    correspondra au chemin d'accès <code>Zend/Exemple/Interface.php</code>.
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>
    Retourne <code>TRUE</code> si un fichier est accessible en lecture, 
    <code>FALSE</code> dans les autres cas.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
isReadable($filename)

?>]]></programlisting>

    <para>
    L'argument <code>$filename</code> spécifie le nom du fichier à vérifier. Il 
    peut contenir des informations concernant le chemin d'accès. Cette méthode 
    enveloppe la fonction PHP <ulink 
    url="http://php.net/is_readable"><code>is_readable()</code></ulink>. La 
    fonction PHP ne recherche pas le fichier spécifié dans les répertoires de 
    l'<code>include_path</code>, contrairement à 
    <code>Zend::isReadable()</code>.
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>

    <para>
    <code>Zend::dump()</code> affiche et/ou retourne des informations concernant 
    une expression. Cette méthode enveloppe la fonction PHP <ulink 
    url="http://php.net/var_dump"><code>var_dump()</code></ulink>. Elle inclut 
    la sortie entre des balises (X)HTML <code>&lt;pre&gt;</code> et 
    <code>&lt;/pre&gt;</code> et ajoute facultativement une étiquette.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
    L'argument <code>$var</code> définit l'expression ou la variable que l'on 
    veut examiner.
    </para>

    <para>
    L'argument <code>$label</code> est un texte arbitraire à placer avant la 
    sortie de <code>Zend::dump()</code>. Ceci est utile lorsque vous souhaitez 
    afficher à l'écran des informations concernant plusieurs variables.
    </para>

    <para>
    Le booléen <code>$echo</code> indique s'il faut (ou non) afficher la sortie 
    de <code>Zend::dump()</code>. Si <code>TRUE</code>, la sortie sera affichée. 
    Quel que soit l'état de <code>$echo</code>, la sortie est toujours 
    retournée.
    </para>
</sect1>


<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
    Enregistre un objet dans le magasin d'objets.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
register($name, $object)

?>]]></programlisting>

    <para>
    Le registre est un mécanisme qui fournit à l'application des instances 
    singleton d'objets. En enregistrant une seule fois l'objet dans le registre, 
    puis en l'obtenant auprès du registre à chaque fois que cela s'avère 
    nécessaire, la même instance est toujours retournée.
    </para>

    <para>
    L'argument <code>$name</code> est une chaîne arbitraire permettant de nommer 
    l'objet au sein du magasin. Ce nom devra être fourni 
    à <code>Zend::registry()</code> pour obtenir de nouveau l'objet.
    </para>

    <para>
     L'argument <code>$name</code> doit être une chaîne de caractères, seuls des 
     objets peuvent être stockés dans le registre, un objet ne peut jamais être 
     enlevé du registre et une instance donnée ne peut être stockée qu'une et 
     une seule fois dans le registre. Le non respect de ces règles entraînera le 
     lancement d'une exception <code>Zend_Exception</code>.
    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
    Retourne un objet du registre ou dresse la liste de tous les objets du 
    registre.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
registry($name=null)

?>]]></programlisting>

    <para>
     Si l'argument <code>$name</code> vaut <code>NULL</code>, un tableau sera 
     retourné : les clés de ce tableau seront les noms des objets du registre, 
     ses valeurs les noms des classes de ces objets.
    </para>

    <para>
    Si l'argument <code>$name</code> est une chaîne, l'objet stocké sous ce nom 
    sera retourné. Si aucun objet de nom <code>$name</code> n'existe dans le 
    registre, une exception <code>Zend_Exception</code> sera lancée.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->