<sect1 id="zend.register">
    <title>Zend::register($index, $valeur)</title>
    
    <para>
    Enregistre la valeur $valeur à l'offset $index du registre.
    </para>

	<example>
	   <title>Exemple register() / offsetSet()</title>
<programlisting role="php"><![CDATA[<?php
Zend::register($index, $valeur);
// ou

$registre = Zend::registry();
$registre->offsetSet($index, $valeur);

?>]]></programlisting>
    </example>
    
    <para>
    Le registre est un mécanisme qui fournit à l'application des instances 
    singleton de valeurs. En enregistrant une seule fois la valeur dans le registre, 
    puis en l'obtenant auprès du registre à chaque fois que cela s'avère 
    nécessaire, la même instance est toujours retournée.
    </para>

    <para>
    L'argument <code>$index</code> est un index arbitraire permettant de nommer 
    la valeur au sein du registre. Ce même index devra être fourni 
    à <code>Zend::registry()</code> pour obtenir la valeur stockée.
    </para>

    <para>
    Les spécifications du registre adhèrent à celles de 
    <ulink url="http://www.php.net/~helly/php/ext/spl/classArrayObject.html">ArrayObject</ulink>
    . Cette méthode enveloppe simplement la méthode 
    <ulink url="http://www.php.net/manual/fr/function.arrayobject-offsetset.php">
    offsetSet()</ulink>.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
