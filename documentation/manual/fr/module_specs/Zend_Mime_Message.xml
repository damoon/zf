<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="zend.mime.message">
    <title>Zend_Mime_Message</title>
    
	<sect2 id="zend.mime.message.introduction">
	  <title>Introduction</title>
	
	  <para>
	    <code>Zend_Mime_Message</code> représente un message compatible MIME
	    qui peut contenir une ou plusieurs parties séparées (représentées par 
	    des objets <link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link>)
	    Avec MimeMessage, les messages multiparts compatibles MIME peuvent être générés
	    à partir de MimeParts. L'encodage et la gestion des frontières sont gérées de manière
	    transparente par la classe.
	    Les objets MimeMessage peuvent aussi être reconstruits à partir de chaîne de 
	    caractères données (expérimental). 
	    Utilisés par <link linkend="zend.mail"><code>Zend_Mail</code></link>.
	  </para>
	</sect2>
	
	<sect2 id="zend.mime.message.instantiation">
		<title>Instancier Zend_Mime_Message</title>
		<para>
			Il n'y a pas de constructeur explicite pour <code>Zend_Mime_Message</code>. 
		</para>
	</sect2>
	
	  <sect2 id="zend.mime.message.addparts">
	    <title>Ajouter des parties MIME</title>
	
	    <para>
	        Les objets <link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link> 
	        peuvent êtres ajoutés à un objet MiMeMessage donné en appelant
	        <code>-&gt;addPart($part)</code>.
	    </para>
	
	    <para>
	        Un tableau avec toutes les parties du MimeMessage est retourné dans un tableau
	        grâce à <code>-&gt;getParts()</code>. Les objets Zend_Mime_Part peuvent ainsi être changés
	        dès qu'ils sont stockés dans le tableau comme références. Si des parties sont ajoutées
	        au tableau, ou que la séquence est changée, le tableau à besoin d'être redonné à l'objet
	        Zend_Mime_Message en appelant <code>-&gt;setParts($partsArray)</code>.
	    </para>
	
	    <para>
	        La fonction <code>-&gt;isMultiPart()</code> retournera true si plus d'une partie
	        est enregistrée avec l'objet Zend_Mime_Message, l'objet pourra ainsi regénérer un
	        objet Multipart-Mime-Message lors de la génération de la sortie.
	    </para>
	  </sect2>
	
	  <sect2 id="zend.mime.message.bondary">
	    <title>Gérer les frontières</title>
	
	    <para>
	        <code>Zend_Mime_Message</code> crée et utilise généralement son propre objet
	        <code>Zend_Mime</code> pour générer une frontière. Si vous avez besoin de définir
	        une frontière ou si vous voulez changer le comportement de l'objet ZMime utilisé par
	        <code>Zend_Mime_Message</code>, vous pouvez instantier l'objet ZMime vous-même et l'enregistrer
	        ensuite dans <code>Zend_Mime_Message</code>.
	        Généralement, vous n'aurez pas besoin de faire cela. 
	        <code>-&gt;setMime(Zend_Mime $mime)</code> définit  une instance spéciale de <code>Zend_Mime</code>
	        pour qu'elle soit utilisée par ce Message.
	        
	        <code>Zend_Mime_Message</code> usually creates and uses its own
	        <code>Zend_Mime</code> Object to generate a boundary. If you need to
	        define the boundary or want to change the behaviour of the ZMime Object
	        used by <code>Zend_Mime_Message</code>, you can instantiate the ZMime
	        object yourself and then register it to <code>Zend_Mime_Message</code>.
	        Usually you will not need to do this. <code>-&gt;setMime(Zend_Mime
	        $mime)</code> sets a special instance of <code>Zend_Mime</code> to be used
	        by this Message
	    </para>
	
	    <para>
	        <code>-&gt;getMime()</code> retourne l'instance de <code>Zend_Mime</code>
	        qui sera utilisée pour générer le message lorsque <code>generateMessage()</code>
	        est appelée.
	    </para>
	
	    <para>
	        <code>-&gt;generateMessage()</code> génère le contenu ZMimeMessage en une chaîne de caractères.
	    </para>
	  </sect2>
	
	  <sect2 id="zend.mime.message.parse">
	    <title>Parser une chaîne de caractère pour créer un objet Zend_Mime_Message (experimental)</title>
	
	    <para>
	        Un message compatible MIME donné sous forme de chaîne de caractère peut
	        être utilisé pour reconstruire un objet <code>Zend_Mime_Message</code>.
	        <code>Zend_Mime_Message</code> a une factory Method statique pour parser
	        cette chaîne et retourner un objet <code>Zend_Mime_Message</code>.
	    </para>
	
	    <para>
	        <code>Zend_Mime_Message::createFromMessage($str, $boundary)</code> décode la chaîne
	        de caractères donnée et retourne un objet <code>Zend_Mime_Message</code> qui peut
	        ensuite être examiné en utilisant <code>-&gt;getParts()</code>.
	    </para>
	  </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->