<sect1 id="zend.validate.introduction">

    <title>Introduction</title>

    <para>
        Le composant Zend_Validate fournit un ensemble de validateurs fréquemment utiles. Il fournit
        également un mécanisme simple de chaînage permettant d'appliquer de multiples validateurs à une
        donnée dans un ordre défini par l'utilisateur. 
    </para>

    <para>
        <emphasis role="strong">Qu'est-ce qu'un validateur ?</emphasis>
    </para>

    <para>
        Un validateur examine ce qui lui est soumis suivant certaines règles et retourne un résultat 
        booléen, si la donnée est conforme aux exigences. Si ce n'est pas le cas, un validateur peut
        de manière optionnelle fournir des informations concernant la ou les règle(s) non remplie(s).
    </para>

    <para>
        Par exemple, une application web peut réclamer qu'un identifiant comprennent entre six et douze
        caractères et ne contiennent que des caractères alphanumériques. Un validateur peut être utilisé
        pour s'assurer que les identifiants remplissent ces règles. Si un identifiant donné ne respecte
        pas l'une ou plusieurs de ces règles, il sera utile de savoir laquelle ou lesquelles en particulier.
    </para>

    <para>
        Le fait de définir une validation de cette manière fournit les fondations pour
        <code>Zend_Validate_Interface</code> qui définit deux méthodes, <code>isValid()</code> et 
        <code>getMessages()</code>. La méthode <code>isValid()</code> réalise la validation à partir de
        la donnée fournie et retourne <code>true</code> si et seulement si celle-ci passe avec succès les
        critères de validation. Si <code>isValid()</code> retourne <code>false</code>, <code>getMessages()</code>
        peut retourner un tableau de messages explicitant la ou les raison(s) de l'échec de la validation. 
    </para>

    <note>
        <para>
            <code>getMessages()</code> fournit seulement les messages d'échec de validation concernant le dernier appel
            à <code>isValid()</code>, puisque <code>isValid()</code> efface tous les messages précédents pouvant provenir
            d'un appel antérieur de cette même méthode.
        </para>
    </note>

    <para>
        L'exemple suivant illustre la validation d'une adresse email :

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Validate/EmailAddress.php';
$validateur = new Zend_Validate_EmailAddress();
if ($validateur->isValid($email)) {
    // l'email est valide
} else {
    // l'email est invalide ; affichons pourquoi
    foreach ($validateur->getMessages() as $message) {
        echo "$message\n";
    }
}]]></programlisting>

    </para>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->