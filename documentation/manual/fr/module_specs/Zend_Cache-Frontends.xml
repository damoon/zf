<sect1 id="zend.cache.frontends">
    <title>frontends Zend_Cache</title>

    <sect2 id="zend.cache.core">
        <title>Zend_Cache_Core</title>
        <sect3 id="zend.cache.core.introduction">
            <title>Introduction</title>
            <para>
                <code>Zend_Cache_Core</code> est un frontend sp�cial parce qu'il est le coeur du module.
                C'est un frontend de cache g�n�rique et est �tendu par les autres classes.
            </para>
            <note><para>
                Tous les frontends h�ritent de <code>Zend_Cache_Core</code> ainsi les m�thodes et les options
                (d�crites ci-dessous) seront aussi disponibles dans les autres frontends, cependant ils
                ne sont pas document�s ici.
            </para></note>
        </sect3>
        <sect3 id="zend.cache.core.options">
            <title>Options disponibles</title>
            <para>
                Ces options sont pass�es � la m�thode de fabrique comme montr�es dans les exemples
                pr�c�dents.
            </para>
            <table>
                <title>Otions disponibles</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Option</entry>
                            <entry>Type de donn�es</entry>
                            <entry>Valeur par d�faut</entry>
                            <entry>Description</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>caching</code></entry>
                              <entry><code>bool�en</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  active / d�sactive le caching (peut-�tre tr�s utile
                                  pour les d�bogage de scripts en cache)
                              </entry>
                          </row>
                          <row>
                              <entry><code>lifeTime</code></entry>
                              <entry><code>int</code></entry>
                              <entry><code>3600</code></entry>
                              <entry>
                                temps de vie (en secondes) du cache, si d�fini � <code>null</code>, le
                                cache est valide infiniment
                              </entry>
                          </row>
                          <row>
                              <entry><code>logging</code></entry>
                              <entry><code>bool�en</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                si d�finit � true, le logging par <code>Zend_Log</code> est activ�
                                (mais le syst�me sera plus lent)
                              </entry>
                          </row>
                          <row>
                              <entry><code>writeControl</code></entry>
                              <entry><code>bool�en</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                Active / d�sactive le contr�le d'�criture (le cache est lu juste apr�s
                                l'�criture pour d�tecter des entr�es corrompues), activer writeControl
                                va un tout petit peu ralentire l'�criture du cache, mais pas la lecture
                                (il peut d�tecter des fichiers de cache corrompus, mais �a n'est pas un
                                contr�le parfait).
                              </entry>
                          </row>
                          <row>
                              <entry><code>automaticSerialization</code></entry>
                              <entry><code>bool�en</code></entry>
                              <entry><code>false</code></entry>
                              <entry>
                                Active / d�sactive la s�rialization automatique, il peut �tre
                                utilis� pour enregistrer directement des donn�es qui ne sont pas des
                                cha�nes de caract�res (mais c'est plus lent).
                              </entry>
                          </row>
                          <row>
                              <entry><code>automaticCleaningFactor</code></entry>
                              <entry><code>int</code></entry>
                              <entry><code>0</code></entry>
                              <entry>
                                Active / d�sactive le nettoyage automatique( garbage collector):
                                0 signifie aucun nettoyage automatique de cache,
                                1 signifie un nettoyage syst�matique du cache
                                et x &gt; 1 signifie le nettoyage al�atoire 1 fois toute les
                                x �critures.
                              </entry>
                          </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>

        <sect3 id="zend.cache.core.examples">
            <title>Exemples</title>
            <para>
                Un exemple est donn� dans le manuel, tout au d�but.
            </para>
            <para>
                Si vous stocker uniquement des cha�nes de caract�res dans le cache (parce qu'avec l'option "automaticSerialization",
                il est possible de stocker des bool�ns), vous pouvez utiliser une construction plus compact comme:
                 <programlisting role="php"><![CDATA[<?php

// nous avons d�j� $cache

$id = 'myBigLoop'; // id de cache de "ce que l'on veut cacher"

if (!($data = $cache->get($id))) {
    // cache miss

    $data = '';
    for ($i = 0; $i < 10000; $i++) {
        $data = $data . $i;
    }

    $cache->save($data);

}

// fait quelque chose avec $data (affichage, passage ailleurs, etc, etc)

?>]]>       </programlisting>
            </para>
            <para>
                Si vous voulez cacher des blocs multiples ou des instances de donn�es, l'id�e
                reste la m�me:
                 <programlisting role="php"><![CDATA[<?php

// on s'assure que l'on utilise des identifiant uniques
$id1 = 'foo';
$id2 = 'bar';

// block 1
if (!($data = $cache->get($id1))) {
    // cache missed

    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . $i;
    }

    $cache->save($data);

}
echo($data);

// �a n'est pas affect� par la mise en cache
echo('NEVER CACHED! ');

// block 2
if (!($data = $cache->get($id2))) {
    // cache missed

    $data = '';
    for ($i=0;$i<10000;$i++) {
        $data = $data . '!';
    }

    $cache->save($data);

}
echo($data);

?>]]>       </programlisting>
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontend.output">
        <title>Zend_Cache_Frontend_Output</title>
        <sect3 id="zend.cache.frontend.output.introduction">
            <title>Introduction</title>
            <para>
                <code>Zend_Cache_Frontend_Output</code> est un frontend capturant la sortie.
                Il utilise la bufferisation de sortie de PHP pour capturer tout ce qui passe entre les m�thodes
                <code>start()</code> et <code>end()</code> .
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.output.options">
            <title>Options disponibles</title>
            <para>
                Ce frontend n'a pas d'options sp�cifiques autres que celles de <code>Zend_Cache_Core</code>.
            </para>
        </sect3>

        <sect3 id="zend.cache.frontend.output.examples">
            <title>Exemples</title>
            <para>
                Un exemple est donn�e dans le manuel, tout au d�but.
                Le voici avec des changements mineurs:
                 <programlisting role="php"><![CDATA[<?php

// s'il y a un cache miss, la bufferisation de sortie est lanc�e
if(!$cache->start('mypage')):

// affiche tout comme d'habitude
echo 'Hello world! ';
echo 'This is cached ('.time().') ';

$cache->end(); // output buffering ends
endif;

echo 'This is never cached ('.time().').';

?>]]>       </programlisting>
            </para>
            <para>
                Utiliser cette forme est assez simple pour d�finir une mise de cache de sortie dans vos projets
                en production, avec peu de refactorisation de code.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontend.function">
        <title>Zend_Cache_Frontend_Function</title>
        <sect3 id="zend.cache.frontend.function.introduction">
            <title>Introduction</title>
            <para>
                <code>Zend_Cache_Frontend_Function</code> met en cache les r�sultats des appels de fonction.
                Elle a une seule m�thode principale appel�e <code>call()</code> qui prend un nom de fonction
                et des param�tres pour l'appel dans un tableau.
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.function.options">
            <title>Options disponibles</title>
            <table>
                <title>Options disponibles</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Option</entry>
                            <entry>Type de donn�es</entry>
                            <entry>Valeur par d�faut</entry>
                            <entry>Description</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>cacheByDefault</code></entry>
                              <entry><code>bool�en</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  si true, les appels de fonction seront mis en cache par d�faut
                              </entry>
                         </row>
                         <row>
                              <entry><code>cachedFunctions</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  les noms de fonctions seront toujours mis en cache
                              </entry>
                         </row>
                         <row>
                              <entry><code>nonCachedFunctions</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  les noms de fonctions ne doivent jamais �tre mis en cache
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>

        <sect3 id="zend.cache.frontend.function.examples">
            <title>Exemples</title>
            <para>
                Utiliser la fonction <code>call()</code> est le m�me qu'utiliser le
                code <code>call_user_func_array()</code> en PHP:
                 <programlisting role="php"><![CDATA[<?php

$cache->call('veryExpensiveFunc', $params);

# $params est dans un tableau
# par exemple, pour appeler (avec mise en cache) veryExpensiveFunc(1, 'foo', 'bar'), vous devriez utiliser
# $cache->call('veryExpensiveFunc', array(1, 'foo', 'bar'))

?>]]>       </programlisting>
            </para>
            <para>
                <code>Zend_Cache_Frontend_Function</code> est assez intelligente pour mettre en cache
                la valeur de retour de la fonction, aisi que sa sortie interne.
            </para>
            <note><para>
                Vous pouvez passer n'importe quelle fonction utilisateur � l'exception de
                <code>array()</code>, <code>echo()</code>, <code>empty()</code>, <code>eval()</code>,
                <code>exit()</code>, <code>isset()</code>, <code>list()</code>, <code>print()</code>
                et <code>unset()</code>.
            </para></note>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontend.class">
        <title>Zend_Cache_Frontend_Class</title>
        <sect3 id="zend.cache.frontend.class.introduction">
            <title>Introduction</title>
            <para>
                <code>Zend_Cache_Frontend_Class</code> est diff�rent de <code>Zend_Cache_Frontend_Function</code>
                parce qu'elle permet de mettre en cache les objets et les m�thodes statiques.
            </para>
        </sect3>
        <sect3 id="zend.cache.frontend.class.options">
            <title>Options disponibles</title>
            <table>
                <title>Options disponibles</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Option</entry>
                            <entry>Type de donn�es</entry>
                            <entry>Valeur par d�faut</entry>
                            <entry>Description</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>cachedEntity</code> (required)</entry>
                              <entry><code>mixed</code></entry>
                              <entry></entry>
                              <entry>
                                  si d�finit � un nom de classe, nous allons mettre en cache une claisse
                                  abstraite et utiliser uniquement les appels statiques; si d�finis � un objet,
                                  nous allons mettre en cache les m�thodes de ces objets.
                              </entry>
                         </row>
                         <row>
                              <entry><code>cacheByDefault</code></entry>
                              <entry><code>bool�en</code></entry>
                              <entry><code>true</code></entry>
                              <entry>
                                  si true, les appels vont �tre cach� par d�fault
                              </entry>
                         </row>
                         <row>
                              <entry><code>cachedMethods</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  les noms des m�thodes qui seront toujours mis
                                  en cache
                              </entry>
                         </row>
                         <row>
                              <entry><code>nonCachedMethods</code></entry>
                              <entry><code>array</code></entry>
                              <entry></entry>
                              <entry>
                                  les nomes des m�thodes qui ne doivent jamais �tre misent en cache
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>

        <sect3 id="zend.cache.frontend.class.examples">
            <title>Exemples</title>
            <para>
                Par exemple, pour mettre en cache des appels statiques:
                <programlisting role="php"><![CDATA[<?php

class test {

    # M�thode statique
    public static function foobar($param1, $param2) {
        echo "foobar_output($param1, $param2)";
        return "foobar_return($param1, $param2)";
    }

}

// [...]
$frontendOptions = array(
    'cachedEntity' => 'test' // Le nom de la classe
);
// [...]

# l'appel cach�
$res = $cache->foobar('1', '2');

?>]]>           </programlisting>
                Pour mettre en cache des appels classiques aux m�thodes:
                <programlisting role="php"><![CDATA[<?php

class test {

    private $_string = 'hello !';

    public function foobar2($param1, $param2) {
        echo($this->_string);
        echo "foobar2_output($param1, $param2)";
        return "foobar2_return($param1, $param2)";
    }

}

// [...]
$frontendOptions = array(
    'cachedEntity' => new test() // Une instance de la classe
);
// [...]

# L'appel mis en cache
$res = $cache->foobar2('1', '2');

?>]]>           </programlisting>
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontends.file">
        <title>Zend_Cache_Frontend_File</title>
        <sect3 id="zend.cache.frontends.file.introduction">
            <title>Introduction</title>
            <para>
                <code>Zend_Cache_Frontend_File</code> est un frontend conduit par la modification
                d'un "fichier ma�tre". C'est vraiment int�ressant, par exemple, dans les probl�matiques
                de configuration ou de templates.
            </para>
            <para>
                Pour l'instant, vous avez un fichier de configuration XML qui est pars� par une
                fonction qui retourne un "objet config" (comme avec <code>Zend_Config</code>).
                Avec <code>Zend_Cache_Frontend_File</code>, vous pouvez stocker l'objet config dans le cache
                (pour �viter de parser le XML du fichier de config chaque fois) mais avec une sorte de
                forte d�pendance au fichier ma�tre. Ainsi si le fichier XML de config est modifi�, le cache
                est imm�diatement invalid�.
            </para>
        </sect3>
        <sect3 id="zend.cache.frontends.file.options">
            <title>Options disponibles</title>
            <table>
                <title>Options disponibles</title>
                <tgroup cols="4">
                     <thead>
                          <row>
                            <entry>Option</entry>
                            <entry>Type de donn�es</entry>
                            <entry>Valeur par d�faut</entry>
                            <entry>Description</entry>
                        </row>
                     </thead>
                     <tbody>
                          <row>
                              <entry><code>masterFile (mandatory)</code></entry>
                              <entry><code>string</code></entry>
                              <entry><code></code></entry>
                              <entry>
                                  le chemin complet et le nom du fichier ma�tre
                              </entry>
                         </row>
                      </tbody>
                  </tgroup>
              </table>
        </sect3>
        <sect3 id="zend.cache.frontends.file.examples">
            <title>Exemples</title>
            <para>
                L'utilisation de ce frontend est la m�me que celle de<code>Zend_Cache_Core</code>.
                Il n'y a pas besoin d'exemple sp�cifique - la seule chose � faire est de d�finir
                le <code>masterFile</code> lors de l'utilisation de la fabrique.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.cache.frontends.page">
    	<title>Zend_Cache_Frontend_Page</title>
    	<sect3 id="zend.cache.frontends.page.introduction">
        	<title>Introduction</title>
        	<para>
	            <code>Zend_Cache_Frontend_Page</code> est comme <code>Zend_Cache_Frontend_Output</code>
	            mais cr�� pour une page complete. Il est impossible d'utiliser <code>Zend_Cache_Frontend_Page</code>
	            pour mettre en cacher un bloc unique.
	        </para>
	        <para>
	            D'un autre c�t�, la "cache id", est calcul� automatiquement avec <code>$_SERVER['REQUEST_URI']</code> et
	            (en fonction des options) <code>$_GET</code>, <code>$_POST</code>, <code>$_SESSION</code>,
	            <code>$_COOKIE</code>, <code>$_FILES</code>.
	            De plus, vous avez seulement une m�thode pour appeler (<code>start()</code>)
	            parce que l'appel � <code>end()</code> est totalement automatique lorsque la page est termin�.
	        </para>
	        <para>
	            Pour le moment, �a n'est pas impl�ment� mais nous pr�voyons d'ajouter un syst�me de condition
	            HTTP pour �conomiser de la bande passant. (le syst�me enverra une ent�te HTTP 304 Not Modified
	            si le cache est trouv�, et si le navigateur a d�j� la bonne version).
	        </para>
	        <note><para>
                Zend_Cache_Frontend_Page est vraiment en version alpha, et est pr�vue d'�tre
                am�lior� plus tard.
	        </para></note>
    	</sect3>
    	<sect3 id="zend.cache.frontends.page.options">
	        <title>Options disponibles (pour ce frontend dans la fabrique Zend_Cache)</title>
	        <table>
	            <title>Options disponibles</title>
	            <tgroup cols="4">
	                 <thead>
	                      <row>
	                        <entry>Option</entry>
	                        <entry>Type de donn�es</entry>
	                        <entry>Valeur par d�faut</entry>
	                        <entry>Description</entry>
	                    </row>
	                 </thead>
	                 <tbody>
	                 	 <row>
	                          <entry><code>httpConditional</code></entry>
	                          <entry><code>bool�en</code></entry>
	                          <entry><code>false</code></entry>
	                          <entry>
	                              utilisez le syst�me httpConditionnal ou pas (pas encore impl�ment�)
	                          </entry>
	                     </row>
	                     <row>
	                          <entry><code>debugHeader</code></entry>
	                          <entry><code>bool�en</code></entry>
	                          <entry><code>false</code></entry>
	                          <entry>
	                              si true, un text de d�bogage est ajout� avant chaque page de cache
	                          </entry>
	                     </row>
	                     <row>
	                     	  <entry><code>defaultOptions</code></entry>
	                          <entry><code>array</code></entry>
	                          <entry><code>array(...see below...)</code></entry>
	                          <entry>
	                              un tableau associatif d'options par d�faut:
	                              <itemizedlist>
	                                  <listitem><code>(bool�en, true par d�faut) cache</code> : le cache est activ� si true</listitem>
	                                  <listitem><code>(bool�en, false par d�faut) cacheWithGetVariables</code> : si true, le cache est toujours activ� m�me s'il y a des variables dans le tableau <code>$_GET</code></listitem>
	                                  <listitem><code>(bool�en, false par d�faut) cacheWithPostVariables</code> : si true, le cache est toujours activ� m�me s'il y a des variables dans le tableau <code>$_POST</code></listitem>
	                                  <listitem><code>(bool�en, false par d�faut) cacheWithSessionVariables</code> : si true, le cache est toujours activ� s'il y a des variables dans le tableau <code>$_SESSION</code></listitem>
	                                  <listitem><code>(bool�en, false par d�faut) cacheWithFilesVariables</code> : si true, le cache est toujours activ� s'il y a des variables dans le tableau <code>$_FILES</code></listitem>
	                                  <listitem><code>(bool�en, false par d�faut) cacheWithCookieVariables</code> : si true, le cache est toujours activ� s'il y a des variables dans le tableau <code>$_COOKIE</code></listitem>
									  <listitem><code>(bool�en, true par d�faut) makeIdWithGetVariables</code> : si true, l'identifiant du cache sera ind�pendant du contenu du tableau<code>$_GET</code></listitem>
	                                  <listitem><code>(bool�en, true par d�faut) makeIdWithPostVariables</code> : si true, l'identifiant du cache sera ind�pendant du contenu du tableau<code>$_POST</code></listitem>
	                                  <listitem><code>(bool�en, true par d�faut) makeIdWithSessionVariables</code> : si true, l'identifiant du cache sera ind�pendant du contenu du tableau<code>$_SESSION</code></listitem>
	                                  <listitem><code>(bool�en, true par d�faut) makeIdWithFilesVariables</code> : si true, l'identifiant du cache sera ind�pendant du contenu du tableau<code>$_FILES</code></listitem>
	                                  <listitem><code>(bool�en, true par d�faut) makeIdWithCookieVariables</code> : si true, l'identifiant du cache sera ind�pendant du contenu du tableau<code>$_COOKIE</code></listitem>
	                              </itemizedlist>
	                          </entry>
	                     </row>
	                     <row>
	                          <entry><code>regexps</code></entry>
	                          <entry><code>array</code></entry>
	                          <entry><code>array()</code></entry>
	                          <entry>
	                              un tableau associatif pour d�finir les options, uniquement pour des REQUEST_URI, les cl�s sont des regex PCRE,
	                              les valeurs sont des tableaus associatifs avec des options sp�cifiques pour d�finir si les correspondances des
	                              regexs dans $_SERVER['REQUEST_URI'] (voir les options par d�faut pour la liste des options disponibles) ; si
	                              plusieurs regexs correspondent � un $_SERVER['REQUEST_URI'], seul la derni�re sera utilis�e.
	                          </entry>
	                     </row>
	                  </tbody>
	              </tgroup>
	          </table>
	    </sect3>
    	<sect3 id="zend.cache.frontends.page.examples">
        	<title>Exemples</title>
	        <para>
	            Utilisation de Zend_Cache_Frontend_Page est vraiment trivial :
	            <programlisting role="php"><![CDATA[<?php

// [...] // require, configuration et factory

$cache->start();
// si le cache est trouv�, le r�sultat est envoy� au navigateur et le script s'arr�te l�

// reste de la page ...

?>]]>           </programlisting>
	        </para>
	        <para>
	            un exemple plus complexe qui montre un moyen pour obtenir une gestion centralis�e du cache dans un fichier
	            d'amor�age (pour utiliser avec Zend_Controller par exemple)
	        	<programlisting role="php"><![CDATA[<?php

// vous devriez �viter de mettre trop de lignes avant la section de cache
// [...] par exemple, pour des performances optimales, "require_once" ou "Zend::loadClass" devrait �tre
// [...] apr�s la section de cache

require_once 'Zend/Cache.php';

$frontendOptions = array(
   'lifeTime' => 7200,
   'debugHeader' => true, // for debuging
   'regexps' => array(
       '^/$' => array('cache' => true),         // met en cache la totalit� d'IndexController
       '^/index/' => array('cache' => true),    // met en cache la totalit� d'IndexController
       '^/article/' => array('cache' => false), // nous ne mettons pas en cache l'ArticleController...
       '^/article/view/' => array(              // ...mais nous mettons en cache l'action "view"
           'cache' => true,                     // de cet ArticleController
           'cacheWithPostVariables' => true,    // et nous mettons en cache m�me lorsqu'il y a des variables dans $_POST
           'makeIdWithPostVariables' => true,   // (mais le cache sera d�pendent du tableau $_POST)
       )
   )
);
$backendOptions = array(
    'cacheDir' => '/tmp/'
);

// obtenir un objet Zend_Cache_Frontend_Page
$cache = Zend_Cache::factory('Page', 'File', $frontendOptions, $backendOptions);

$cache->start();
// si nous trouvons un cache, le r�sultat est envoy� au navigateur, et le script s'arr�te l�

// [...] la fin du fichier de d�marrage ( ces lignes ne seront pas ex�cut�e si on trouve un cache)

?>]]>           </programlisting>
	        </para>
    	</sect3>
	</sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->