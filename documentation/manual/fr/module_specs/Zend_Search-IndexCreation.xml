<sect1 id="zend.search.index-creation">
	<title>Building Indexes</title>

	<sect2 id="zend.search.index-creation.creating">
        <title>Créer un nouvel index</title>

        <para>
            La création et la mise à jour d'index est disponible dans le module ZSearch et dans Java Lucene. 
            Vous pouvez utilisez les capacités des deux.
        </para>

        <para>
            Le listing de code PHP ci-dessous propose un exemple montrant 
            comment indexer un fichier en utilisant l'API d'indexation de Zend_Search_Lucene :
        </para>

        <programlisting role="php"><![CDATA[
        <?php
        // Définir le second paramètre à true pour créer un nouvel index
        $index = new Zend_Search_Lucene('/donnees/mon-index', true);
        
        $doc = new Zend_Search_Lucene_Document();
        
        // Stocke l'URL du document pour l'identifier dans un résultat de recherche.
        $doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
        
        // Contenu du document d'index 
        $doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));
        
        // Ajout du document à l'index
        $index->addDocument($doc);
        
        // Ecriture des changements dans l'index
        $index->commit();
        ?>
        ]]></programlisting>

        <para>
            Les nouveaux documents ajoutés peuvent être récupérés depuis l'index après un commit.
        </para>
        <para>
            <code>Zend_Search_Lucene::commit()</code> est automatiquement appelé à la fin de l'éxecution du 
            script et avant toute recherche.
        </para>
        <para>
            Chaque appel à <code>commit()</code> génère un nouveau segment d'index. Elle doit donc être appelée
            aussi rarement que possible. De plus, commiter une grande quantité de documents en une seule
            fois consomme plus de mémoire.
        </para>
        <para>
            L'optimisation automatique de la gestion des segment est un sujet d'amélioration future pour Zend_Search_Lucene.
        </para>
    </sect2>

    <sect2 id="zend.search.index-creation.updating">
        <title>Mettre à jour l'index</title>

        <para>
            Le même procédure est utilisée pour mettre à jour un index existant.
            La seule différence est que l'index doit être ouvert sans second paramètre :
        </para>

        <programlisting role="php"><![CDATA[
        <?php
        // Ouverture d'un index existant
        $index = new Zend_Search_Lucene('/donnees/mon-index');
        
        $doc = new Zend_Search_Lucene_Document();
        
        // Stocke l'URL du document pour l'identifier dans un résultat de recherche.
        $doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
        
        // Contenu du document d'index 
        $doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));
        
        // Ajout du document à l'index
        $index->addDocument($doc);
        
        // Ecriture des changements dans l'index
        $index->commit();
        ?>
        ]]></programlisting>

        <para>
            Chaque appel à <code>commit()</code> (explicite ou implicite) génère un nouveau segment d'index.
        </para>
        <para>
            Zend_Search_Lucene ne gère pas les segments automatiquement. 
            C'est pourquoi vous devriez être attentif à la taille du segment.
            
            
            Zend_Search_Lucene doesn't manage segments automatically. Thus you should care about segment size.
            D'un côté, un seul gros segment est plus efficace, mais d'un autre côté, cela nécessite plus de mémoire
            lors de la création.
        </para>
        <para>
            Lucene Java et Luke (Lucene Index Toolbox - <ulink url="http://www.getopt.org/luke/">http://www.getopt.org/luke/</ulink>)
            peuvent être utilisés pour optimiser l'index avec cette version de Zend_Search_Lucene.
        </para>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
