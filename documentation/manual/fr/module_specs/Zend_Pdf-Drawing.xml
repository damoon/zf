<sect1 id="zend.pdf.drawing">
    <title>Dessiner</title>

    <sect2 id="zend.pdf.drawing.geometry">
        <title>Geométrie</title>
        <para>
        Le format PDF utilise la même geométrie que le format PostScript.
        Elle démarre d'en bas à gauche et est mesuré en points (1/72 inch soit 0,352778 mm).
        </para>
        <para>
         La taille d'une page peut-être récupéré depuis un objet page :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
$width  = $pdfPage->getWidth();
$height = $pdfPage->getHeight();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.color">
        <title>Couleurs</title>
        <para>
         Le format PDF a d'excellentes capacités dans la représantation des couleurs.
         Le module <code>Zend_Pdf</code> supporte les espaces de couleur : niveaux de gris, RGB et CMJN.
         Chacun d'entre eux peut-être utilisé à chauque fois qu'un objet <code>Zend_Pdf_Color</code> est requis.
         Les classes <code>Zend_Pdf_Color_GrayScale</code>, <code>Zend_Pdf_Color_RGB</code> et <code>Zend_Pdf_Color_CMYK</code> fournissent cette fonctionnalité :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
// $grayLevel (float). 0.0 (noir) - 1.0 (blanc)
$color1 = new Zend_Pdf_Color_GrayScale($grayLevel);

// $r, $g, $b (float). 0.0 (intensité mimimum) - 1.0 (intensité maximum)
$color2 = new Zend_Pdf_Color_RGB($r, $g, $b);

// $c, $m, $y, $k (float). 0.0 (intensité mimimum) - 1.0 (intensité maximum)
$color3 = new Zend_Pdf_Color_CMYK($c, $m, $y, $k);]]>
            </programlisting>
        </para>
    </sect2>


    <sect2 id="zend.pdf.drawing.shape-drawing">
        <title>Dessiner des formes</title>
        <para>
         Toutes les opérations de dessins peuvent-étre réalisé dans le contexte d'une page PDF.
        </para>
        <para>
         La classe <code>Zend_Pdf_Page</code> fournis les outils de dessins :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine une ligne de x1,y1 à x2,y2.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawLine($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine un rectangle.
 *
 * Type de remplissage:
 * Zend_Pdf_Page::SHAPE_DRAW_FILL_AND_STROKE - remplit le rectangle et dessine le contour (par défaut)
 * Zend_Pdf_Page::SHAPE_DRAW_STROKE      - trace uniquement le contour du rectangle
 * Zend_Pdf_Page::SHAPE_DRAW_FILL        - remplit le rectangle
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param integer $fillType
 */
public function drawRectangle($x1, $y1, $x2, $y2, $fillType = Zend_Pdf_Page::SHAPE_DRAW_FILL_AND_STROKE);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine un polygone.
 *
 * Si $fillType est Zend_Pdf_Page::SHAPE_DRAW_FILL_AND_STROKE ou Zend_Pdf_Page::SHAPE_DRAW_FILL,
 * le polygone est automatiquement fermé.
 * Regardez la description détaillé de ces méthodes dans la
 * documentation du format PDF
 * (section 4.4.2 Path painting Operators, Filling)
 *
 * @param array $x  - tableau de float (les coordonnés X des sommets)
 * @param array $y  - tableau de float (les coordonnés Y des sommets)
 * @param integer $fillType
 * @param integer $fillMethod
 */
public function drawPolygon($x, $y,
                            $fillType = Zend_Pdf_Page::SHAPE_DRAW_FILL_AND_STROKE,
                            $fillMethod = $fillMethod = Zend_Pdf_Page::FILL_METHOD_NON_ZERO_WINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine un cercle avec comme centre  x, y et comme rayon radius.
 *
 * Les angle sont en radian
 *
 * Signatures des méthodes:
 * drawCircle($x, $y, $radius);
 * drawCircle($x, $y, $radius, $fillType);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle, $fillType);
 *
 *
 * Ce n'est pas rellement un cercle, car le format supporte uniquement des courbe de Bezier cubique.
 * Mais c'est une très bonne approximation.
 * La difféfference avec un vrais cercle est de au maximum 0.00026 radians
 * (avec les angle PI/8, 3*PI/8, 5*PI/8, 7*PI/8, 9*PI/8, 11*PI/8, 13*PI/8 et 15*PI/8).
 * Avec les angles 0, PI/4, PI/2, 3*PI/4, PI, 5*PI/4, 3*PI/2 et 7*PI/4 c'est exactement la tangente d'un cercle.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param mixed $param4
 * @param mixed $param5
 * @param mixed $param6
 */
public function  drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine une ellipse dans le rectangle spécifié.
 *
 * Signatures des méthodes:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $fillType);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle, $fillType);
 *
 * Les angles sont en radians
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param mixed $param5
 * @param mixed $param6
 * @param mixed $param7
 */
public function drawEllipse($x1, $y1, $x2, $y2, $param5 = null, $param6 = null, $param7 = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.text-drawing">
        <title>Dessiner du texte</title>
        <para>
         Les opérations de dessins existe bien sûr dans le contexte d'une page PDF.
         Vous pouvez dessiner une seule ligne de texte à n'importe quelle endroit dans la page
         en fournissant les coordonnées x et y de la ligne de base.
         La police courant ainsi que sa taille seront utilisées pour le dessin (voir la description
         ci-dessous).
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine une ligne de texte à a la position x,y.
 *
 * @param string $text
 * @param float $x
 * @param float $y
 * @param string $charEncoding (optionnel) encodage des caractères du text.
 * Par défaut la locale courante est utilisée.
 * @throws Zend_Pdf_Exception
 */
public function drawText($text, $x, $y, $charEncoding = '');]]>
            </programlisting>
        </para>
        <example>
            <title>Dessiner une ligne dans la page</title>
            <programlisting role="php"><![CDATA[<?php
...
$pdfPage->drawText('Bonjour le monde!', 72, 720);
...
?>]]>
            </programlisting>
        </example>
        <para>
        Par défaut, les chaînes de texte sont interprétées en utilisant l'encodage de la locale courante.
        Si vous avez une chaîne qui utilise un encodage différent (comme les chaînes UTF-8 lues depuis une fichier
        sur le disque, ou une chaîne MacRoman obtenue depuis une base de données), vous pouvez indiquez
        l'encodage au moment du dessin et Zend_Pdf gérera la conversion pour vous. Vous pouvez fournir des chaînes
        dans n'importe quel encodage supporté par la fonction
        <code><ulink url="http://www.php.net/manual/function.iconv.php">iconv()</ulink></code> de PHP:
        </para>
        <example>
            <title>Dessiner une chaîne UTF-8 sur une page.</title>
            <programlisting role="php"><![CDATA[<?php
...
// Lit une chaîne UTF-8 à partir du disque
$unicodeString = fread($fp, 1024);

// Dessine une chaîne dans la page
$pdfPage->drawText($unicodeString, 72, 720, 'UTF-8');
...
?>]]>
            </programlisting>
        </example>
    </sect2>

    <sect2 id="zend.pdf.drawing.using-fonts">
        <title>Utiliser des polices de caractères</title>
        <para>
            <code>Zend_Pdf_Page::drawText()</code> utilise la police courante ainsi que sa taille, qui sont définies avec la méthode
            <code>Zend_Pdf_Page::setFont()</code> :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la police courante.
 *
 * @param Zend_Pdf_Resource_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Resource_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
            Les documents PDF supportent PostScript Type 1 et les polices TrueType, mais également deux types
            spécifiques PDF, Type3 et les polices composites. Il y a aussi 14 polices Type 1 standard intégré
            dans tout lecteur de PDF : Courier (4 styles), Helvetica (4 styles), Times (4 styles), Symbol, et Zapf Dingbats.
        </para>
        <para>
            Zend_Pdf supporte actuellement les 14 polices standard mais également vos propres police TrueType.
            Les objets de police obtenu via une des deux factory methods : <code>Zend_Pdf_Font::fontWithName($fontName)</code>
            pour les 14 polices PDF standard ou <code>Zend_Pdf_Font::fontWithPath($filePath)</code> pour les polices
            personnalisées.
        </para>
        <example>
            <title>Créer une police standard</title>
            <programlisting role="php"><![CDATA[<?php
...
// Crée une nouvelle police
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Font::FONT_HELVETICA);

// Applique la police
$pdfPage->setFont($font, 36);
...
?>]]>
            </programlisting>
        </example>
        <para>
         Les constantes pour les 14 polices standard sont définis dans la classe <code>Zend_Pdf_Font</code> :
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Font::FONT_COURIER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_COURIER_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_COURIER_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_COURIER_BOLD_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_TIMES</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_TIMES_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_TIMES_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_TIMES_BOLD_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_HELVETICA</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_HELVETICA_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_HELVETICA_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_HELVETICA_BOLD_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_SYMBOL</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Font::FONT_ZAPFDINGBATS</para>
            </listitem>
        </itemizedlist>
        </para>
        <para>
        You can also use any individual TrueType font (which usually has a '.ttf' extension) or an
        OpenType font ('.otf' extension) if it contains TrueType outlines. Currently unsupported,
        but planned for a future release are Mac OS X .dfont files and Microsoft TrueType Collection
        ('.ttc' extension) files.
        </para>
        <para>
        To use a TrueType font, you must provide the full file path to the font program. If the font
        cannot be read for some reason, or if it is not a TrueType font, the factory method will throw
        an exception:
        </para>
        <example>
            <title>Create a TrueType font.</title>
            <programlisting role="php"><![CDATA[<?php
...
// Create new font
$goodDogCoolFont = Zend_Pdf_Font::fontWithPath('/path/to/GOODDC__.TTF');

// Apply font
$pdfPage->setFont($goodDogCoolFont, 36);
...
?>]]>
            </programlisting>
        </example>
        <para>
        By default, custom fonts will be embedded in the resulting PDF document. This allows recipients
        to view the page as intended, even if they don't have the proper fonts installed on their system.
        If you are concerned about file size, you can request that the font program not be embedded by
        passing a 'do not embed' option to the factory method:
        </para>
        <example>
            <title>Create a TrueType font, but do not embed it in the PDF document.</title>
            <programlisting role="php"><![CDATA[<?php
...
// Create new font
$goodDogCoolFont = Zend_Pdf_Font::fontWithPath('/path/to/GOODDC__.TTF',
                                               Zend_Pdf_Font::EMBED_DONT_EMBED);

// Apply font
$pdfPage->setFont($goodDogCoolFont, 36);
...
?>]]>
            </programlisting>
        </example>
        <para>
        If the font program is not embedded but the recipient of the PDF file has the font installed on
        their system, they will see the document as intended. If they do not have the correct font
        installed, the PDF viewer application will do its best to synthesize a replacement.
        </para>
        <para>
        Some fonts have very specific licensing rules which prevent them from being embedded in PDF
        documents. So you are not caught off-guard by this, if you try to use a font that cannot be
        embedded, the factory method will throw an exception.
        </para>
        <para>
        You can still use these fonts, but you must either pass the do not embed flag as described above,
        or you can simply suppress the exception:
        </para>
        <example>
            <title>Do not throw an exception for fonts that cannot be embeded.</title>
            <programlisting role="php"><![CDATA[<?php
...
$font = Zend_Pdf_Font::fontWithPath('/path/to/unEmbeddableFont.ttf',
                                    Zend_Pdf_Font::EMBED_SUPPRESS_EMBED_EXCEPTION);
...
?>]]>
            </programlisting>
        </example>
        <para>
        This suppression technique is preferred if you allow an end-user to choose their own fonts. Fonts
        which can be embedded in the PDF document will be; those that cannot, won't.
        </para>
        <para>
        Font programs can be rather large, some reaching into the tens of megabytes. By default, all embedded
        fonts are compressed using the Flate compression scheme, resulting in a space savings of 50% on average.
        If, for some reason, you do not want to compress the font program, you can disable it with an option:
        </para>
        <example>
            <title>Do not compress an embedded font.</title>
            <programlisting role="php"><![CDATA[<?php
...
$font = Zend_Pdf_Font::fontWithPath('/path/to/someReallyBigFont.ttf',
                                    Zend_Pdf_Font::EMBED_DONT_COMPRESS);
...
?>]]>
            </programlisting>
        </example>
        <para>
        Finally, when necessary, you can combine the embedding options by using the bitwise OR operator:
        </para>
        <example>
            <title>Combining font embedding options.</title>
            <programlisting role="php"><![CDATA[<?php
...
$font = Zend_Pdf_Font::fontWithPath($someUserSelectedFontPath,
                                    (Zend_Pdf_Font::EMBED_SUPPRESS_EMBED_EXCEPTION |
                                     Zend_Pdf_Font::EMBED_DONT_COMPRESS));
...
?>]]>
            </programlisting>
        </example>
    </sect2>

    <sect2 id="zend.pdf.drawing.image-drawing">
        <title>Insertion d'images</title>
        <para>
        La classe <code>Zend_Pdf_Page</code> fournis la méthode d<code>rawImage()</code> pour dessiner une image :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Insère une image à la position spécifié dans la page
 *
 * @param Zend_Pdf_Image $image
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawImage(Zend_Pdf_Image $image, $x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
         Les objets Image hérite de la classe <code>Zend_Pdf_Image</code>.
        </para>
        <para>
         Seul les images au format JPG sont supportés pour le moment:
        </para>
        <example>
            <title>Insertion d'images</title>
            <programlisting role="php"><![CDATA[<?php
...
$image = new Zend_Pdf_Image_JPEG('my_image.jpg');
$pdfPage->drawImage($image, 100, 100, 400, 300);;
...
?>]]>
            </programlisting>
        </example>

        <para>
            <emphasis>Important! La classe Zend_Pdf_Image_JPEG nécessite que l'extension PHP GD soit installé.</emphasis>
        </para>
        <para>
             Lisez la documentation de PHP pour plus d'informations
            (<ulink url="http://www.php.net/manual/fr/ref.image.php">http://www.php.net/manual/fr/ref.image.php</ulink>).
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.line-drawing-style">
        <title>Style de lignes</title>
        <para>
         Le style de ligne est définit par l'épaisseur, la couleur et le style de tiret.
         Tout ces paramètres peuvent être assigné par les méthodes de la classe <code>Zend_Pdf_Page</code> :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/** Choisis la couleur de ligne. */
public function setLineColor(Zend_Pdf_Color $color);

/** Choisis l'épaisseur de ligne. */
public function setLineWidth(float $width);

/**
 * Choisis le modèle de tiret.
 *
 * Le modèle est un tableau de floats: array(longueur_visible, longueur_invisible, longueur_visible, longueur_invisible, ...)
 * phase est le décallage à partir du début de la ligne.
 *
 * @param array $pattern
 * @param array $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.fill-style">
        <title>Style de remplissage</title>
        <para>
         Les méthodes <code>Zend_Pdf_Page::drawRectangle()</code>, <code>Zend_Pdf_Page::drawPoligon()</code>,
         <code>Zend_Pdf_Page::drawCircle()</code> et <code>Zend_Pdf_Page::drawEllipse()</code> prennent en argument optionel le type de
         remplissage: <code>$fillType</code>. Il peut-être :
        </para>

        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Page::SHAPE_DRAW_STROKE - trace le contour de la forme</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Page::SHAPE_DRAW_FILL - remplit la forme</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Page::SHAPE_DRAW_FILL_AND_STROKE - remplissage et contour (par défaut)</para>
            </listitem>
        </itemizedlist>

        <para>
         La méthode <code>Zend_Pdf_Page::drawPoligon()</code> prend aussi paramètre supplémentaire <code>$fillMethod</code> :
        </para>
        <itemizedlist>
            <listitem>
                <para>$fillMethod = Zend_Pdf_Page::FILL_METHOD_NON_ZERO_WINDING (par défaut)</para>
                <para>
                 La <citetitle>référence du format PDF</citetitle> descrit la règle comme ceci :
                <blockquote>
The nonzero winding number rule determines whether a given point is inside a
path by conceptually drawing a ray from that point to infinity in any direction
and then examining the places where a segment of the path crosses the ray. Starting
with a count of 0, the rule adds 1 each time a path segment crosses the ray
from left to right and subtracts 1 each time a segment crosses from right to left.
After counting all the crossings, if the result is 0 then the point is outside the path;
otherwise it is inside.

Note: The method just described does not specify what to do if a path segment coincides
with or is tangent to the chosen ray. Since the direction of the ray is arbitrary,
the rule simply chooses a ray that does not encounter such problem intersections.
For simple convex paths, the nonzero winding number rule defines the inside
and outside as one would intuitively expect. The more interesting cases are those
involving complex or self-intersecting paths like the ones shown in Figure 4.10
(in a PDF Reference).

For a path consisting of a five-pointed star, drawn with five connected straight
line segments intersecting each other, the rule considers the inside to be the entire
area enclosed by the star, including the pentagon in the center. For a path composed
of two concentric circles, the areas enclosed by both circles are considered
to be inside, provided that both are drawn in the same direction. If the circles are
drawn in opposite directions, only the "doughnut" shape between them is inside,
according to the rule; the "doughnut hole" is outside.
            </blockquote>
            </para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Page::FILL_METHOD_EVEN_ODD</para>
                <para>
                La <citetitle>référence du format PDF</citetitle> descrit la règle comme ceci :
                <blockquote>
An alternative to the nonzero winding number rule is the even-odd rule. This rule
determines the "insideness" of a point by drawing a ray from that point in any
direction and simply counting the number of path segments that cross the ray,
regardless of direction. If this number is odd, the point is inside; if even, the point
is outside. This yields the same results as the nonzero winding number rule for
paths with simple shapes, but produces different results for more complex
shapes.

Figure 4.11 (in a PDF Reference) shows the effects of applying the even-odd rule
to complex paths. For the five-pointed star, the rule considers the triangular
points to be inside the path, but not the pentagon in the center. For the two
concentric circles, only the "doughnut" shape between the two circles is considered inside,
regardless of the directions in which the circles are drawn.
                </blockquote>
            </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.pdf.drawing.rotations">
        <title>Rotations.</title>
        <para>
         Les pages PDF peuvent être roter avant appliquer les opérations de dessin. Cela peut-être fait en utilisant la méthode <code>Zend_Pdf_Page::rotate()</code> :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Effectue une rotation de la page autour du point ($x, $y), l'angle est en radians.
 *
 * @param float $angle
 */
public function rotate($x, $y, $angle);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.save-restore">
        <title>Sauvegarder et restaurer l'état graphique.</title>
        <para>
         L'état graphique (police courante, taille de caractère, couleur de ligne, couleur de remplissage, style de ligne, sens de la page, zone de dessin)
         peut-être sauvegarder à tout moment. L'opération de sauvegarde empile le contexte dans une pile de contexte graphique, l'opération de restauration
         récupère le contexte depuis la pile.
        </para>
        <para>
         Il y a deux méthodes dans la classe <code>Zend_Pdf_Page</code>  pour réaliser ces opérations :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Sauvegarde l'état graphique de la page.
 * Cela prend un instantané des styles courant, des zones de dessins
 * et de toutes les rotations/translations/changements de taille appliqués.
 */
public function saveGS();

/**
 * Restaure le dernier état graphique sauvegarder avec saveGS().
 */
public function restoreGS();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.clipping">
        <title>Zone de dessins</title>
        <para>
         Le format PDF et le module Zend_Pdf supporte le découpage de la zone de dessin.
         La zone de dessins courante limite la zone de la page affecté par l'utilisation des opérateurs de dessins.
         Initialement c'est toute la page.
        </para>
        <para>
         La classe <code>Zend_Pdf_Page</code> fournis des méthodes pour les opérations de découpage.
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec un rectangle.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function clipRectangle($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec un polygone.
 *
 * @param array $x  - tableau de float (les coordonnées X des sommets)
 * @param array $y  - tableau de float (les coordonnées Y des sommets)
 * @param integer $fillMethod
 */
public function clipPolygon($x, $y, $fillMethod = Zend_Pdf_Page::FILL_METHOD_NON_ZERO_WINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec un cercle.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipCircle($x, $y, $radius, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec une ellipse.
 *
 * Signatures des méthodes:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 *
 * @todo s'occuper des cas speciaux avec $x2-$x1 == 0 ou $y2-$y1 == 0
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipEllipse($x1, $y1, $x2, $y2, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.styles">
        <title>Styles</title>
        <para>
         La classe <code>Zend_Pdf_Style</code> fournis les fonctionnalités de style.
        </para>
        <para>
        Les styles peuvent être utilisé pour stocker des paramètre d'état graphique et de les appliquer à une page PDF en une opération :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis le style à utiliser pour les futur opération de dessin sur cette page
 *
 * @param Zend_Pdf_Style $style
 */
public function setStyle(Zend_Pdf_Style $style);

/**
 * Renvoi le style appliqué à la page.
 *
 * @return Zend_Pdf_Style|null
 */
public function getStyle();]]>
            </programlisting>
        </para>

        <para>
         La classe <code>Zend_Pdf_Style</code> fournie des méthodes pour choisir ou récupérer différents paramètre de l'état graphique :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la couleur de ligne.
 *
 * @param Zend_Pdf_Color $color
 */
public function setLineColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la couleur de ligne.
 *
 * @return Zend_Pdf_Color|null
 */
public function getLineColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis l'épaisseur de ligne.
 *
 * @param float $width
 */
public function setLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère l'épaisseur de ligne.
 *
 * @return float
 */
public function getLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis le style de tirets
 *
 * @param array $pattern
 * @param float $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère le style de tirets
 *
 * @return array
 */
public function getLineDashingPattern();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère le modèle de tiret
 *
 * @return float
 */
public function getLineDashingPhase();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la couleur de remplissage.
 *
 * @param Zend_Pdf_Color $color
 */
public function setFillColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la couleur de remplissage.
 *
 * @return Zend_Pdf_Color|null
 */
public function getFillColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la police.
 *
 * @param Zend_Pdf_Font $font
 * @param Zend_Pdf_Resource_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Resource_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Modifie la taille de police.
 *
 * @param float $fontSize
 */
public function setFontSize($fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la police courante
 *
 * @return Zend_Pdf_Resource_Font $font
 */
public function getFont();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la taille de la police
 *
 * @return float $fontSize
 */
public function getFontSize();]]>
            </programlisting>
        </para>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->