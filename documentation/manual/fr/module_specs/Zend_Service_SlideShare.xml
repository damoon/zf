<sect1 id="zend.service.slideshare">

    <title>Introduction</title>

    <para>
        Le composant <code>Zend_Service_SlideShare</code> est utilisé dans l'interraction avec les services webs
        de <ulink url="http://www.slideshare.net/">slideshare.net</ulink>, plateforme servant d'hébergement de slides.
        Grâce à ce composant, vous pouvez intégrer des slideshows de slideshare, dans votre propre site web, ou même
        uploader des nouveaux slides sur votre compte slideshare, depuis votre site web.
    </para>

    <sect2 id="zend.service.slideshare.basicusage">

        <title>Démarrage avec <code>Zend_Service_SlideShare</code></title>

        <para>
            Pour utiliser Zend_Service_SlideShare, vous devez créer au préalable un compte sur slideshare.net
            (plus d'informations à ce sujet <ulink url="http://www.slideshare.net/developers/">ici</ulink>), afin de
            recevoir votre clé d'API et votre login / mot de passe, indispensables pour utiliser le service web.
        </para>

        <para>
            Une fois votre compte crée, vous pouvez utiliser <code>Zend_Service_SlideShare</code> en créant une instance de
            <code>Zend_Service_SlideShare</code> en lui passant vos identifiants :
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Service/SlideShare.php';

// Crée une instance du composant
$ss = new Zend_Service_SlideShare('APIKEY', 'SHAREDSECRET', 'USERNAME', 'PASSWORD');
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.service.slideshare.slideshowobj">

        <title>L'objet SlideShow</title>

        <para>
            Chaque slide issu de <code>Zend_Service_SlideShare</code> est matérialisé par un objet
            <code>Zend_Service_SlideShare_SlideShow</code> (que ce soit pour uploader ou récupérer des slideshows).
            Pour information, voici un pseudo code de cette classe :
        </para>

        <programlisting role="php"><![CDATA[<?php
class Zend_Service_SlideShare_SlideShow {

    /**
     * Retrieves the location of the slide show
     */
    public function getLocation() {
        return $this->_location;
    }

    /**
     * Gets the transcript for this slide show
     */
    public function getTranscript() {
        return $this->_transcript;
    }

    /**
     * Adds a tag to the slide show
     */
    public function addTag($tag) {
        $this->_tags[] = (string)$tag;
        return $this;
    }

    /**
     * Sets the tags for the slide show
     */
    public function setTags(Array $tags) {
        $this->_tags = $tags;
        return $this;
    }

    /**
     * Gets all of the tags associated with the slide show
     */
    public function getTags() {
        return $this->_tags;
    }

    /**
     * Sets the filename on the local filesystem of the slide show
     * (for uploading a new slide show)
     */
    public function setFilename($file) {
        $this->_slideShowFilename = (string)$file;
        return $this;
    }

    /**
     * Retrieves the filename on the local filesystem of the slide show
     * which will be uploaded
     */
    public function getFilename() {
        return $this->_slideShowFilename;
    }

    /**
     * Gets the ID for the slide show
     */
    public function getId() {
        return $this->_slideShowId;
    }

    /**
     * Retrieves the HTML embed code for the slide show
     */
    public function getEmbedCode() {
        return $this->_embedCode;
    }

    /**
     * Retrieves the Thumbnail URi for the slide show
     */
    public function getThumbnailUrl() {
        return $this->_thumbnailUrl;
    }

    /**
     * Sets the title for the Slide show
     */
    public function setTitle($title) {
        $this->_title = (string)$title;
        return $this;
    }

    /**
     * Retrieves the Slide show title
     */
    public function getTitle() {
        return $this->_title;
    }

    /**
     * Sets the description for the Slide show
     */
    public function setDescription($desc) {
        $this->_description = (string)$desc;
        return $this;
    }

    /**
     * Gets the description of the slide show
     */
    public function getDescription() {
        return $this->_description;
    }

    /**
     * Gets the numeric status of the slide show on the server
     */
    public function getStatus() {
        return $this->_status;
    }

    /**
     * Gets the textual description of the status of the slide show on the server
     */
    public function getStatusDescription() {
        return $this->_statusDescription;
    }

    /**
     * Gets the permanent link of the slide show
     */
    public function getPermaLink() {
        return $this->_permalink;
    }

    /**
     * Gets the number of views the slide show has received
     */
    public function getNumViews() {
        return $this->_numViews;
    }
}]]>
        </programlisting>

        <note>

            <para>
                La classe présentée ci dessus ne montre que les méthodes qui sont sensées être utilisées par les développeurs.
                D'autres méthodes internes au composant existent.
            </para>

        </note>

        <para>
            Lors de l'utilisation de <code>Zend_Service_SlideShare</code>, la classe de données Slideshow sera souvent utilisée
            pour parcourir, ajouter, ou modifier des slideshows.
        </para>

    </sect2>

    <sect2 id="zend.service.slideshare.getslideshow">

        <title>Récupérer un slideshow simplement</title>

        <para>
            La manière la plus simple d'utiliser <code>Zend_Service_SlideShare</code> est la récupératio d'un slideshow depuis son
            ID, fournit par le service slideshare.net, ceci est effectué via la méthode <code>getSlideShow()</code> de l'objet
            <code>Zend_Service_SlideShare</code>. Le résultat de cette méthode est un objet de type
            <code>Zend_Service_SlideShare_SlideShow</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Service/SlideShare.php';

// Création d'une instance du composant
$ss = new Zend_Service_SlideShare('APIKEY', 'SHAREDSECRET', 'USERNAME', 'PASSWORD');

$slideshow = $ss->getSlideShow(123456);

print "Slide Show titre: {$slideshow->getTitle()}<br/>\n";
print "Nombre de slides: {$slideshow->getNumViews()}<br/>\n";
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.service.slideshare.getslideshowlist">

        <title>Récupérer des groupes de Slideshows</title>

        <para>
            Si vous ne connaissez pas l'ID spécifique d'un slideshow vous intéréssant, il est possible de récupérer des groupes de
            slideshows, en utilisant une de ces trois méthodes :
        </para>

        <itemizedlist mark="opencircle">
            <listitem>
                <para>
                    <emphasis role="strong">Slideshows depuis un compte spécifique</emphasis>
                </para>

                <para>
                    La méthode <code>getSlideShowsByUsername()</code> va retourner tous les slideshows depuis un compte utilisateur.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">Slideshows contenant des tags spécifiques</emphasis>
                </para>

                <para>
                    La méthode <code>getSlideShowsByTag</code> va retourner un ensemble de slideshows comportant certains tags (mots-clés).
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">Slideshows depuis un groupe</emphasis>
                </para>

                <para>
                    La méthode <code>getSlideShowsByGroup</code> récupère tous les slideshows d'un groupe donné.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Voici un exemple utilisant les méthodes décrites ci-dessus :
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Service/SlideShare.php';

// Create a new instance of the component
$ss = new Zend_Service_SlideShare('APIKEY', 'SHAREDSECRET', 'USERNAME', 'PASSWORD');

$starting_offset = 0;
$limit = 10;

// Retrieve the first 10 of each type
$ss_user = $ss->getSlideShowsByUser('username', $starting_offset, $limit);
$ss_tags = $ss->getSlideShowsByTag('zend', $starting_offset, $limit);
$ss_group = $ss->getSlideShowsByGroup('mygroup', $starting_offset, $limit);

// Iterate over the slide shows
foreach($ss_user as $slideshow) {
   print "Slide Show Title: {$slideshow->getTitle}<br/>\n";
}
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.service.slideshare.caching">

        <title>Politique de cache de <code>Zend_Service_SlideShare</code></title>

        <para>
            Par défaut, <code>Zend_Service_SlideShare</code> va mettre en cache toute requête concernant le service web, dans le 
            système de fichier (par défaut : <code>/tmp</code>), ceci pour une durée de 12 heures. Si vous voulez changer ce comportement,
            vous devez passer votre propre objet <xref linkend="zend.cache" /> en utilisant la méthode <code>setCacheObject</code> :
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Cache.php';
require_once 'Zend/Service/SlideShare.php';

$frontendOptions = array(
                        'lifetime' => 7200,
                        'automatic_serialization' => true);
$backendOptions  = array(
                        'cache_dir' => '/webtmp/');

$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);

$ss = new Zend_Service_SlideShare('APIKEY', 'SHAREDSECRET', 'USERNAME', 'PASSWORD');
$ss->setCacheObject($cache);

$ss_user = $ss->getSlideShowsByUser('username', $starting_offset, $limit);
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.service.slideshare.httpclient">

        <title>Changer le comportement du client HTTP</title>

        <para>
            Si pour une raison quelconque vous souhaitez changer le comportement de l'objet client HTTP utilisé pour interroger
            le service web, vous pouvez créer votre propre instance de <code>Zend_Http_Client</code> (voyez 
            <xref linkend="zend.http" />). Ceci peut être utile par exemple pour spécifier un timeout ou toute autre chose :
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Http/Client.php';

$client = new Zend_Http_Client();
$client->setConfig(array('timeout' => 5));

$ss = new Zend_Service_SlideShare('APIKEY', 'SHAREDSECRET', 'USERNAME', 'PASSWORD');
$ss->setHttpClient($client);
$ss_user = $ss->getSlideShowsByUser('username', $starting_offset, $limit);
?>]]>
        </programlisting>

    </sect2>

</sect1>
