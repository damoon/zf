<sect1 id="zend.pdf.introduction">
    <!-- @todo review and revise upon completion of refactoring -->
    <title>Introduction.</title>
    <para>
    <code>Zend_Pdf</code> est un module entièrement écrit en PHP5 permettant la manipulation de 
    documents PDF (Portable Document Format). Il peut charger des documents existants, en créer de nouveaux, 
    les modifier et les sauvegarders. Cela peut aider toute les applications PHP à générer dynamiquement des 
    documents PDF en modifiant un modèle existant ou en générant un document de zéro. 
    Le module Zend_Pdf supporte les fonctionnalités suivantes :
    <itemizedlist>
        <listitem>
            <para>
             Créer un nouveau document ou en charger un qui existe déjà. 
            <footnote>
                <para>
                 Les documents aux format PDF V1.4 (Acrobat 5) sont désormais supporté au chargement.
                </para>
            </footnote>
            </para>
        </listitem>
        <listitem>
            <para>
             Récupérer une version spécifique d'un document.
            </para>
        </listitem>
        <listitem>
            <para>
             Manipuler les pages d'un document. Changer l'ordre des pages, ajouter des nouvelles pages, retirer des pages.
            </para>
        </listitem>
        <listitem>
            <para>
             Différents outils de dessins (lignes, rectangles, polygones, cercles, ellipses et secteurs).
            </para>
        </listitem>
        <listitem>
            <para>
             Dessiner du texte en utilisant une des 16 polices standard.
            </para>
        </listitem>
        <listitem>
            <para>
             Rotations.
            </para>
        </listitem>
        <listitem>
            <para>
             Inclure des images.
            <footnote>
                <para>
                 Seul les images au format JPG sont supportés pour le moment.
                </para>
            </footnote>
            </para>
        </listitem>
        <listitem>
            <para>
             Mise à jour incrementale des fichiers PDF.
            </para>
        </listitem>
    </itemizedlist>
    </para>
</sect1>

<sect1 id="zend.pdf.create">
    <title>Créer et charger des documents PDF</title>
    <para>
     La classe <code>Zend_Pdf</code> represente le document PDF en lui-même et fournis des méthode pour manipuler l'ensemble du document.
    </para>

    <para>
     Pour créer un nouveau document un nouvel objet <code>Zend_Pdf</code> doit être créé.
    </para>

    <para>
     La class <code>Zend_Pdf</code> fournis deux méthodes statiques pour charger un PDF existant. 
     Ce sont les méthodes <code>Zend_Pdf::load()</code> et <code>Zend_Pdf::parse()</code>. 
     Les deux retournent un objet <code>Zend_Pdf</code> ou lance une exception en cas d'erreur.
    </para>

    <example>
        <title>Créer un nouveau document PDF ou en charger un existant</title>
        <programlisting role="php"><![CDATA[<?php
...
/// Crée un nouveau document PDF.
$pdf1 = new Zend_Pdf();

// Charge un document PDF depuis un fichier.
$pdf2 = Zend_Pdf::load($fileName);

// Charge un document PDF depuis une string
$pdf3 = Zend_Pdf::parse($pdfString);
...
?>]]></programlisting>
    </example>

    <para>
    Le format de fichier PDF supporte la mise à jour incrementale d'un document. 
    Ainsi chaque fois que le document est mis à jour, une nouvelle version du document est crée. 
    Le module <code>Zend_Pdf</code> supporte la récupération d'une version spécifique.
    </para>
    <para>
     La version peut-être donné en second paramètre des méthodes <code>Zend_Pdf::load()</code> 
     et <code>Zend_Pdf::parse()</code> ou obligatoire dans le cas d'un appel à <code>Zend_Pdf::rollback()</code>
        <footnote>
            <para>
             La méthode <code>Zend_Pdf::rollback()</code> doit être appellé avant tout changement. Sinon le comportement est indéfinis.
            </para>
        </footnote>
    </para>

    <example>
        <title>Demander une version particulière d'un document PDF</title>
        <programlisting role="php"><![CDATA[<?php
...
// Charge la version précedente d'un document PDF.
$pdf1 = Zend_Pdf::load($fileName, 1);

// Charge la version précedente d'un document PDF.
$pdf2 = Zend_Pdf::parse($pdfString, 1);

// Charge la première version d'un document
$pdf3 = Zend_Pdf::load($fileName);
$revisions = $pdf3->revisions();
$pdf3->rollback($revisions - 1);
...
?>]]></programlisting>
    </example>


</sect1>


<sect1 id="zend.pdf.save">
    <title>Sauvegarder les changement dans un document PDF</title>
    <para>
    Il y a deux méthodes qui permettent la sauvegarde dans un document PDF. Ce sont <code>Zend_Pdf::save()</code> et <code>Zend_Pdf::render()</code>.
    </para>

    <para>
     La méthode <code>Zend_Pdf::save($filename, $updateOnly = false)</code> sauvegarde un document dans un fichier. 
     Si <code>$updateOnly</code> est à true, alors seul les nouvelles sections PDF sont ajoutées au fichier. 
	 Sinon le fichier est écrasé.
    </para>

    <para>
     La méthode <code>Zend_Pdf::render($filename, $newSegmentOnly = false)</code> retourne le document PDF dans une chaîne. 
     Si <code>$newSegmentOnly</code> est à true, alors seul les nouvelles sections du PDF sont retournées.
    </para>

    <example>
        <title>Sauvegarder un document PDF</title>
        <programlisting role="php"><![CDATA[<?php
...
// Charge un document PDF.
$pdf = Zend_Pdf::load($fileName);
...
// Met à jour le document
$pdf->save($fileName, true);
// Sauvegarde le document dans un nouveau fichier.
$pdf->save($newFileName);

// Retourne le document PDF dans une string.
$pdfString = $pdf->render();

...
?>]]></programlisting>
    </example>

</sect1>

<sect1 id="zend.pdf.pages">
    <title>Les pages d'un document</title>
    <para>
     Les pages d'un document PDF sont representés par la classe <code>Zend_Pdf_Page</code>
    </para>

    <para>
     Les pages d'un PDF proviennent d'un PDF existant, ou sont créées à partir de rien.
    </para>

    <para>
     Une nouvelle page peut-être obtenu en créant un nouvel objet <code>Zend_Pdf_Page</code> ou en appellant la méthode <code>Zend_Pdf::newPage()</code> 
     qui renvoit un objet <code>Zend_Pdf_Page</code>. La différence est que la méthode <code>Zend_Pdf::newPage()</code> créer une page directement attaché au document. 
     A la différence des pages non attachées à un document, elle ne peut-être utilisé dans plusieurs documents PDF, mais est un peu plus performante.
     
    <footnote>
        <para>
        C'est une limitation de la version 1.0 du module Zend_Pdf. Ce sera corrigé dans une future version. 
        Mais les pages non attaché à un document donneront toujours de meilleurs résultats pour partager une page entre plusieurs documents.
        </para>
    </footnote>. C'est à vous de choisir quel approche doit-être utilisée.
    </para>

    <para>
     Les méthodes <code>Zend_Pdf::newPage()</code> et <code>Zend_Pdf_Page</code> prennent le même paramètre. 
     C'est la taille de la page ($x, $y) en point (1/72 inch soit 0,352778 mm), ou une constante prédéfinis, qui correspond au format du papier :
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_A4</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_A4_LANDSCAPE</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_LETTER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::PAGESIZE_LETTER_LANDSCAPE</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
     Les pages du document pages sont stockés dans l'attribut <code>$pages</code>  de la classe <code>Zend_Pdf</code>. 
     C'est un tableau d'objet <code>Zend_Pdf_Page</code>. Il définit l'ensemble des pages, ainsi que l'ordre de 
     celle-ci et peut-être manipulé comme tableau classique :
    </para>

    <example>
        <title>Gestion des pages d'un document PDF</title>
        <programlisting role="php"><![CDATA[<?php
...
// Change l'ordre des pages
$pdf->pages = array_reverse($pdf->pages);
...
// Ajoute une nouvelle page
$pdf->pages[] = new Zend_Pad_Page(Zend_Pdf_Const::PAGESIZE_A4);
// Ajoute une nouvelle page
  $pdf->pages[] = $pdf->newPage(Zend_Pdf_Const::PAGESIZE_A4);

// Retire la page spécifié
unset($pdf->pages[$id]);

...
?>]]></programlisting>
    </example>

</sect1>

<sect1 id="zend.pdf.drawing">
    <title>Dessiner</title>

    <sect2 id="zend.pdf.drawing.geometry">
        <title>Geométrie</title>
        <para>
        Le format PDF utilise la même geométrie que le format PostScript. 
        Elle démarre d'en bas à gauche et est mesuré en points (1/72 inch soit 0,352778 mm).
        </para>
        <para>
         La taille d'une page peut-être récupéré depuis un objet page :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
$width  = $pdfPage->getWidth();
$height = $pdfPage->getHeight();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.color">
        <title>Couleurs</title>
        <para>
         Le format PDF a d'excellentes capacités dans la représantation des couleurs. 
         Le module <code>Zend_Pdf</code> supporte les espaces de couleur : niveaux de gris, RGB et CMJN.
         Chacun d'entre eux peut-être utilisé à chauque fois qu'un objet <code>Zend_Pdf_Color</code> est requis. 
         Les classes <code>Zend_Pdf_Color_GrayScale</code>, <code>Zend_Pdf_Color_RGB</code> et <code>Zend_Pdf_Color_CMYK</code> fournissent cette fonctionnalité :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
// $grayLevel (float). 0.0 (noir) - 1.0 (blanc)
$color1 = new Zend_Pdf_Color_GrayScale($grayLevel);

// $r, $g, $b (float). 0.0 (intensité mimimum) - 1.0 (intensité maximum)
$color2 = new Zend_Pdf_Color_RGB($r, $g, $b);

// $c, $m, $y, $k (float). 0.0 (intensité mimimum) - 1.0 (intensité maximum)
$color3 = new Zend_Pdf_Color_CMYK($c, $m, $y, $k);]]>
            </programlisting>
        </para>
    </sect2>


    <sect2 id="zend.pdf.drawing.shape-drawing">
        <title>Dessiner des formes</title>
        <para>
         Toutes les opérations de dessins peuvent-étre réalisé dans le contexte d'une page PDF.
        </para>
        <para>
         La classe <code>Zend_Pdf_Page</code> fournis les outils de dessins :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine une ligne de x1,y1 à x2,y2.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawLine($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine un rectangle.
 *
 * Type de remplissage:
 * Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE - remplit le rectangle et dessine le contour (par défaut)
 * Zend_Pdf_Const::SHAPEDRAW_STROKE      - trace uniquement le contour du rectangle
 * Zend_Pdf_Const::SHAPEDRAW_FILL        - remplit le rectangle
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param integer $fillType
 */
public function drawRectangle($x1, $y1, $x2, $y2, $fillType = Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine un polygone.
 *
 * Si $fillType est Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE ou Zend_Pdf_Const::SHAPEDRAW_FILL,
 * le polygone est automatiquement fermé.
 * Regardez la description détaillé de ces méthodes dans la
 * documentation du format PDF
 * (section 4.4.2 Path painting Operators, Filling)
 *
 * @param array $x  - tableau de float (les coordonnés X des sommets)
 * @param array $y  - tableau de float (les coordonnés Y des sommets)
 * @param integer $fillType
 * @param integer $fillMethod
 */
public function drawPolygon($x, $y,
                            $fillType = Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE,
                            $fillMethod = Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine un cercle avec comme centre  x, y et comme rayon radius.
 *
 * Les angle sont en radian
 *
 * Signatures des méthodes:
 * drawCircle($x, $y, $radius);
 * drawCircle($x, $y, $radius, $fillType);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle);
 * drawCircle($x, $y, $radius, $startAngle, $endAngle, $fillType);
 *
 *
 * Ce n'est pas rellement un cercle, car le format supporte uniquement des courbe de Bezier cubique.
 * Mais c'est une très bonne approximation.
 * La difféfference avec un vrais cercle est de au maximum 0.00026 radians
 * (avec les angle PI/8, 3*PI/8, 5*PI/8, 7*PI/8, 9*PI/8, 11*PI/8, 13*PI/8 et 15*PI/8).
 * Avec les angles 0, PI/4, PI/2, 3*PI/4, PI, 5*PI/4, 3*PI/2 et 7*PI/4 c'est exactement la tangente d'un cercle.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param mixed $param4
 * @param mixed $param5
 * @param mixed $param6
 */
public function  drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine une ellipse dans le rectangle spécifié.
 *
 * Signatures des méthodes:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $fillType);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle, $fillType);
 *
 * Les angles sont en radians
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param mixed $param5
 * @param mixed $param6
 * @param mixed $param7
 */
public function drawEllipse($x1, $y1, $x2, $y2, $param5 = null, $param6 = null, $param7 = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.text-drawing">
        <title>Dessiner du texte</title>
        <para>
         Les opérations de dessins existe bien sûr dans le contexte d'une page PDF :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Dessine une ligne de texte à a la position x,y.
 *
 * @param string $text
 * @param float $x
 * @param float $y
 * @throws Zend_Pdf_Exception
 */
public function drawText($text, $x, $y );]]>
            </programlisting>
        </para>
        <para>
        La police et la taille de police actuel sont utilisés pour les opérations de dessins de texte. Regardez la description détaillé plus bas.
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.using-fonts">
        <title>Utiliser des polices de caractères</title>
        <para>
         La méthode <code>Zend_Pdf_Page::drawText()</code> utilise la police courante, qui peut-être assigné en utilisant la méthode <code>Zend_Pdf_Page::setFont()</code> :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la police courante.
 *
 * @param Zend_Pdf_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
         Le format PDF supportes les polices Type1, TrueType, Type3 et composite. 
         Il y a 14 polices Type1 fournis par le format PDF. Le module Zend_Pdf permet uniquement d'utiliser ces polices pour le moment. 
         Elle peuvent être obtenu en utilisant la classe <code>Zend_Pdf_Font_Standard</code>. 
         La police est obtenu en la passant en argument au constructeur :
        </para>
        <example>
            <title>Créer une police standard</title>
            <programlisting role="php"><![CDATA[<?php
...
// Crée une nouvelle police
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA);

// Applique la police
$pdfPage->setFont($font, 36);
...
?>]]>
            </programlisting>
        </example>
        <para>
         Des constantes pour les 14 polices standard sont définis dans la classe <code>Zend_Pdf_Const</code> :
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_ROMAN</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_TIMES_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_HELVETICA_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_BOLD</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_ITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_COURIER_BOLDITALIC</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_SYMBOL</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FONT_ZAPFDINGBATS</para>
            </listitem>
        </itemizedlist>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.image-drawing">
        <title>Insertion d'images</title>
        <para>
        La classe <code>Zend_Pdf_Page</code> fournis la méthode d<code>rawImage()</code> pour dessiner une image :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Insère une image à la position spécifié dans la page
 *
 * @param Zend_Pdf_Image $image
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function drawImage(Zend_Pdf_Image $image, $x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
         Les objets Image hérite de la classe <code>Zend_Pdf_Image</code>.
        </para>
        <para>
         Seul les images au format JPG sont supportés pour le moment:
        </para>
        <example>
            <title>Insertion d'images</title>
            <programlisting role="php"><![CDATA[<?php
...
$image = new Zend_Pdf_Image_JPEG('my_image.jpg');
$pdfPage->drawImage($image, 100, 100, 400, 300);;
...
?>]]>
            </programlisting>
        </example>

        <para>
            <emphasis>Important! La classe Zend_Pdf_Image_JPEG nécessite que l'extension PHP GD soit installé.</emphasis>
        </para>
        <para>
             Lisez la documentation de PHP pour plus d'informations
            (<ulink url="http://www.php.net/manual/fr/ref.image.php">http://www.php.net/manual/fr/ref.image.php</ulink>).
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.line-drawing-style">
        <title>Style de lignes</title>
        <para>
         Le style de ligne est définit par l'épaisseur, la couleur et le style de tiret. 
         Tout ces paramètres peuvent être assigné par les méthodes de la classe <code>Zend_Pdf_Page</code> :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/** Choisis la couleur de ligne. */
public function setLineColor(Zend_Pdf_Color $color);

/** Choisis l'épaisseur de ligne. */
public function setLineWidth(float $width);

/**
 * Choisis le modèle de tiret.
 *
 * Le modèle est un tableau de floats: array(longueur_visible, longueur_invisible, longueur_visible, longueur_invisible, ...)
 * phase est le décallage à partir du début de la ligne.
 *
 * @param array $pattern
 * @param array $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.fill-style">
        <title>Style de remplissage</title>
        <para>
         Les méthodes <code>Zend_Pdf_Page::drawRectangle()</code>, <code>Zend_Pdf_Page::drawPoligon()</code>, 
         <code>Zend_Pdf_Page::drawCircle()</code> et <code>Zend_Pdf_Page::drawEllipse()</code> prennent en argument optionel le type de 
         remplissage: <code>$fillType</code>. Il peut-être :
        </para>

        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_STROKE - trace le contour de la forme</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_FILL - remplit la forme</para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE - remplissage et contour (par défaut)</para>
            </listitem>
        </itemizedlist>

        <para>
         La méthode <code>Zend_Pdf_Page::drawPoligon()</code> prend aussi paramètre supplémentaire <code>$fillMethod</code> :
        </para>
        <itemizedlist>
            <listitem>
                <para>Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING (par défaut)</para>
                <para>
                 La <citetitle>référence du format PDF</citetitle> descrit la règle comme ceci :
                <blockquote>
The nonzero winding number rule determines whether a given point is inside a
path by conceptually drawing a ray from that point to infinity in any direction
and then examining the places where a segment of the path crosses the ray. Starting
with a count of 0, the rule adds 1 each time a path segment crosses the ray
from left to right and subtracts 1 each time a segment crosses from right to left.
After counting all the crossings, if the result is 0 then the point is outside the path;
otherwise it is inside.

Note: The method just described does not specify what to do if a path segment coincides
with or is tangent to the chosen ray. Since the direction of the ray is arbitrary,
the rule simply chooses a ray that does not encounter such problem intersections.
For simple convex paths, the nonzero winding number rule defines the inside
and outside as one would intuitively expect. The more interesting cases are those
involving complex or self-intersecting paths like the ones shown in Figure 4.10
(in a PDF Reference).

For a path consisting of a five-pointed star, drawn with five connected straight
line segments intersecting each other, the rule considers the inside to be the entire
area enclosed by the star, including the pentagon in the center. For a path composed
of two concentric circles, the areas enclosed by both circles are considered
to be inside, provided that both are drawn in the same direction. If the circles are
drawn in opposite directions, only the "doughnut" shape between them is inside,
according to the rule; the "doughnut hole" is outside.
            </blockquote>
            </para>
            </listitem>
            <listitem>
                <para>Zend_Pdf_Const::FILLMETHOD_EVENODD</para>
                <para>
                La <citetitle>référence du format PDF</citetitle> descrit la règle comme ceci :
                <blockquote>
An alternative to the nonzero winding number rule is the even-odd rule. This rule
determines the "insideness" of a point by drawing a ray from that point in any
direction and simply counting the number of path segments that cross the ray,
regardless of direction. If this number is odd, the point is inside; if even, the point
is outside. This yields the same results as the nonzero winding number rule for
paths with simple shapes, but produces different results for more complex
shapes.

Figure 4.11 (in a PDF Reference) shows the effects of applying the even-odd rule
to complex paths. For the five-pointed star, the rule considers the triangular
points to be inside the path, but not the pentagon in the center. For the two
concentric circles, only the "doughnut" shape between the two circles is considered inside,
regardless of the directions in which the circles are drawn.
                </blockquote>
            </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.pdf.drawing.rotations">
        <title>Rotations.</title>
        <para>
         Les pages PDF peuvent être roter avant appliquer les opérations de dessin. Cela peut-être fait en utilisant la méthode <code>Zend_Pdf_Page::rotate()</code> :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Effectue une rotation de la page autour du point ($x, $y), l'angle est en radians.
 *
 * @param float $angle
 */
public function rotate($x, $y, $angle);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.save-restore">
        <title>Sauvegarder et restaurer l'état graphique.</title>
        <para>
         L'état graphique (police courante, taille de caractère, couleur de ligne, couleur de remplissage, style de ligne, sens de la page, zone de dessin) 
         peut-être sauvegarder à tout moment. L'opération de sauvegarde empile le contexte dans une pile de contexte graphique, l'opération de restauration 
         récupère le contexte depuis la pile.
        </para>
        <para>
         Il y a deux méthodes dans la classe <code>Zend_Pdf_Page</code>  pour réaliser ces opérations :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Sauvegarde l'état graphique de la page.
 * Cela prend un instantané des styles courant, des zones de dessins
 * et de toutes les rotations/translations/changements de taille appliqués.
 */
public function saveGS();

/**
 * Restaure le dernier état graphique sauvegarder avec saveGS().
 */
public function restoreGS();]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.clipping">
        <title>Zone de dessins</title>
        <para>
         Le format PDF et le module Zend_Pdf supporte le découpage de la zone de dessin. 
         La zone de dessins courante limite la zone de la page affecté par l'utilisation des opérateurs de dessins.
         Initialement c'est toute la page.
        </para>
        <para>
         La classe <code>Zend_Pdf_Page</code> fournis des méthodes pour les opérations de découpage.
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec un rectangle.
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 */
public function clipRectangle($x1, $y1, $x2, $y2);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec un polygone.
 *
 * @param array $x  - tableau de float (les coordonnées X des sommets)
 * @param array $y  - tableau de float (les coordonnées Y des sommets)
 * @param integer $fillMethod
 */
public function clipPolygon($x, $y, $fillMethod = Zend_Pdf_Const::FILLMETHOD_NONZEROWINDING);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec un cercle.
 *
 * @param float $x
 * @param float $y
 * @param float $radius
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipCircle($x, $y, $radius, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Découpe la zone courante avec une ellipse.
 *
 * Signatures des méthodes:
 * drawEllipse($x1, $y1, $x2, $y2);
 * drawEllipse($x1, $y1, $x2, $y2, $startAngle, $endAngle);
 *
 * @todo s'occuper des cas speciaux avec $x2-$x1 == 0 ou $y2-$y1 == 0
 *
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param float $startAngle
 * @param float $endAngle
 */
public function clipEllipse($x1, $y1, $x2, $y2, $startAngle = null, $endAngle = null);]]>
            </programlisting>
        </para>
    </sect2>

    <sect2 id="zend.pdf.drawing.styles">
        <title>Styles</title>
        <para>
         La classe <code>Zend_Pdf_Style</code> fournis les fonctionnalités de style.
        </para>
        <para>
        Les styles peuvent être utilisé pour stocker des paramètre d'état graphique et de les appliquer à une page PDF en une opération :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis le style à utiliser pour les futur opération de dessin sur cette page
 *
 * @param Zend_Pdf_Style $style
 */
public function setStyle(Zend_Pdf_Style $style);

/**
 * Renvoi le style appliqué à la page.
 *
 * @return Zend_Pdf_Style|null
 */
public function getStyle();]]>
            </programlisting>
        </para>

        <para>
         La classe <code>Zend_Pdf_Style</code> fournie des méthodes pour choisir ou récupérer différents paramètre de l'état graphique :
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la couleur de ligne.
 *
 * @param Zend_Pdf_Color $color
 */
public function setLineColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la couleur de ligne.
 *
 * @return Zend_Pdf_Color|null
 */
public function getLineColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis l'épaisseur de ligne.
 *
 * @param float $width
 */
public function setLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère l'épaisseur de ligne.
 *
 * @return float
 */
public function getLineWidth($width);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis le style de tirets
 *
 * @param array $pattern
 * @param float $phase
 */
public function setLineDashingPattern($pattern, $phase = 0);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère le style de tirets
 *
 * @return array
 */
public function getLineDashingPattern();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère le modèle de tiret
 *
 * @return float
 */
public function getLineDashingPhase();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la couleur de remplissage.
 *
 * @param Zend_Pdf_Color $color
 */
public function setFillColor(Zend_Pdf_Color $color);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la couleur de remplissage.
 *
 * @return Zend_Pdf_Color|null
 */
public function getFillColor();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Choisis la police.
 *
 * @param Zend_Pdf_Font $font
 * @param float $fontSize
 */
public function setFont(Zend_Pdf_Font $font, $fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Modifie la taille de police.
 *
 * @param float $fontSize
 */
public function setFontSize($fontSize);]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la police.
 *
 * @return Zend_Pdf_Font $font
 */
public function getFont();]]>
            </programlisting>
        </para>
        <para>
            <programlisting role="php"><![CDATA[
/**
 * Récupère la taille de la police
 *
 * @return float $fontSize
 */
public function getFontSize();]]>
            </programlisting>
        </para>
    </sect2>

</sect1>

<sect1 id="zend.pdf.usage">
    <title>Exemple d'utilisation du module Zend_Pdf</title>
    <para>
     Cette section propose un exemple d'utilisation du module <code>Zend_Pdf</code>.
    </para>

    <para>
     Le code source de l'exemple est disponible dans le fichier <filename>demos/Zend/Pdf/demo.php</filename>.
    </para>
    <para>
     Il y a aussi un fichier <filename>test.pdf</filename>, qui peut être utilisé pour réaliser des tests.
    </para>

    <example>
        <title>Exemple d'utilisation du module Zend_Pdf</title>
        <programlisting role="php"><![CDATA[<?php
/**
 * @package Zend_Pdf
 * @subpackage demo
 */

/** Zend_Pdf */
require_once 'Zend/Pdf.php';

if (!isset($argv[1])) {
    echo "USAGE: php demo.php <pdf_file> [<output_pdf_file>]\n";
    exit;
}

if (file_exists($argv[1])) {
    $pdf = Zend_Pdf::load($argv[1]);
} else {
    $pdf = new Zend_Pdf();
}

//------------------------------------------------------------------------------------
// Renverse l'ordre des pages
$pdf->pages = array_reverse($pdf->pages);

// Crée un nouveau style
$style = new Zend_Pdf_Style();
$style->setFillColor(new Zend_Pdf_Color_RGB(0, 0, 0.9));
$style->setLineColor(new Zend_Pdf_Color_GrayScale(0.2));
$style->setLineWidth(3);
$style->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
$style->setFont(new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA_BOLD), 32);

// Crée un nouveau objet image
$stampImage = new Zend_Pdf_Image_JPEG(dirname(__FILE__) . '/stamp.jpg');

// Marque la page comme modifié
foreach ($pdf->pages as $page){
    $page->saveGS();
    $page->setStyle($style);
    $page->rotate(0, 0, M_PI_2/3);

    $page->saveGS();
    $page->clipCircle(550, -10, 50);
    $page->drawImage($stampImage, 500, -60, 600, 40);
    $page->restoreGS();

    $page->drawText('Modified by Zend Framework!', 150, 0);
    $page->restoreGS();
}

// Ajoute une nouvelle page généré par l'objet Zend_Pdf (la page est attaché au document)
$pdf->pages[] = ($page1 = $pdf->newPage('A4'));

// Ajoute une nouvelle page généré par l'objet Zend_Pdf (la page n'est pas attaché au document)
$pdf->pages[] = ($page2 = new Zend_Pdf_Page(Zend_Pdf_Const::PAGESIZE_LETTER_LANDSCAPE));

// Crée une nouvelle police
$font = new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_HELVETICA);

// Applique la police et dessine du texte
$page1->setFont($font, 36);
$page1->drawText('Helvetica 36 text string', 60, 500);

// Utilise la police dans une autre page
$page2->setFont($font, 24);
$page2->drawText('Helvetica 24 text string', 60, 500);

// Utilise une autre police
$page2->setFont(new Zend_Pdf_Font_Standard(Zend_Pdf_Const::FONT_TIMES_ROMAN), 32);
$page2->drawText('Times-Roman 32 text string', 60, 450);

// Dessine un rectangle
$page2->setFillColor(new Zend_Pdf_Color_GrayScale(0.8));
$page2->setLineColor(new Zend_Pdf_Color_GrayScale(0.2));
$page2->setLineDashingPattern(array(3, 2, 3, 4), 1.6);
$page2->drawRectangle(60, 400, 400, 350);

// Dessine un cercle
$page2->setLineDashingPattern(Zend_Pdf_Const::LINEDASHING_SOLID);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 0));
$page2->drawCircle(85, 375, 25);

// Dessine des secteurs
$page2->drawCircle(200, 375, 25, 2*M_PI/3, -M_PI/6);
$page2->setFillColor(new Zend_Pdf_Color_CMYK(1, 0, 0, 0));
$page2->drawCircle(200, 375, 25, M_PI/6, 2*M_PI/3);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 1, 0));
$page2->drawCircle(200, 375, 25, -M_PI/6, M_PI/6);

// Dessine des ellipses
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 0));
$page2->drawEllipse(250, 400, 400, 350);
$page2->setFillColor(new Zend_Pdf_Color_CMYK(1, 0, 0, 0));
$page2->drawEllipse(250, 400, 400, 350, M_PI/6, 2*M_PI/3);
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 1, 0));
$page2->drawEllipse(250, 400, 400, 350, -M_PI/6, M_PI/6);

// Dessine et remplit un polygone
$page2->setFillColor(new Zend_Pdf_Color_RGB(1, 0, 1));
$x = array();
$y = array();
for ($count = 0; $count < 8; $count++) {
    $x[] = 140 + 25*cos(3*M_PI_4*$count);
    $y[] = 375 + 25*sin(3*M_PI_4*$count);
}
$page2->drawPolygon($x, $y,
                    Zend_Pdf_Const::SHAPEDRAW_FILLNSTROKE,
                    Zend_Pdf_Const::FILLMETHOD_EVENODD);

// Dessine une ligne
$page2->setLineWidth(0.5);
$page2->drawLine(60, 375, 400, 375);
//------------------------------------------------------------------------------------

if (isset($argv[2])) {
    $pdf->save($argv[2]);
} else {
    $pdf->save($argv[1], true /* met à jour */);
}
?>]]></programlisting>
    </example>

</sect1>


<!--
vim:se ts=4 sw=4 et:
-->