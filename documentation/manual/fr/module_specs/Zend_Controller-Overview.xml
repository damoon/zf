<sect1 id="zend.controller.overview">
	<title>Vue d'ensemble</title>

	<sect2 id="zend.controller.overview.introduction">
		<title>Introduction</title>
		<para>
			<code>Zend_Controller</code> fournit la fondation pour construire un site Web basé sur le design pattern Modèle-Vue-Contrôleur (MVC).
		</para>

		<para>
            Le <code>Zend_Controller</code> est créé pour être léger, modulaire et extensible. 
            Cette architecture minimaliste permet de donner flexibilité et liberté aux utilisateurs, mais fournit en même temps 
            assez de structuration pour que les systèmes conçus autour de <code>Zend_Controller</code> partagent des conventions communes, 
            et un code de base similaire.
		</para>

		<para>
             Le workflow du <code>Zend_Controller</code> est implémenté par plusieurs composants. 
             Cependant, il n'est pas nécessaire de comprendre totalement les rouages de tout ces composants pour utiliser le système, 
             il est préférable d'avoir une connaissance du fonctionnement du processus.
			<itemizedlist>
				<listitem>
					<para>
					    <code>Zend_Controller_Front</code> dirige totalement la chaine de processus du <code>Zend_Controller</code>. 
					    C'est une interprétation du pattern FrontController. <code>Zend_Controller_Front</code>  traite toutes les requêtes 
					    reçues par le serveur et est responsable de la délégation des requêtes aux ActionControllers (<code>Zend_Controller_Action</code>).
					</para>
				</listitem>

				<listitem>
					<para>
					    <code>Zend_Controller_Router</code> est le routeur. 
					    Le routage est le processus qui consiste à prendre une URI et àla décomposer pour déterminer quel 
					    contrôleur et action de ce contrôleur doit recevoir la requête. 
					    Cette définition du contrôleur, de l'action et des paramètres optionnels est empaquetée dans un objet de valeur 
					    appelé <code>Zend_Controller_Dispatcher_Token</code>. 
					    Elle est ensuite traitée par le <code>Zend_Controller_Dispatcher</code>. 
					    Le routage a lieu une seule fois: lorsque la requête est initialement reçue et avant que le premier contrôleur soit aiguillé.
					</para>
				</listitem>

				<listitem>
					<para>
					    <code>Zend_Controller_Dispatcher</code> est l'aiguilleur. 
					    L'aiguillage est le processus qui consiste à prendre le <code>Zend_Controller_Dispatcher_Token</code>, trouver le fichier de contrôleur approprié, 
					    instancier un contrôleur (qui doit implémenter <code>Zend_Controller_Action</code>), et au final, lancer la méthode d'action de cet objet contrôleur. 
					    Contrairment au routage, qui n'à lieu qu'une seule fois, l'aiguillage à lieu dans une boucle. 
					    <code>Zend_Controller_Dispatcher</code> est appelé de façon répétée par <code>Zend_Controller_Front</code> jusqu'à ce que toutes les actions aient 
					    été aiguillées les unes après les autres.
					</para>
				</listitem>

				<listitem>
					<para>
					    <code>Zend_Controller_Action</code> est le composant contrôleur de base. 
					    Chaque contrôleur est une seule classe qui étend la classe <code>Zend_Controller_Action </code>, 
					    et cette classe à des méthodes d'action.
					</para>
				</listitem>
			</itemizedlist>

			Le workflow du <code>Zend_Controller</code> est assez simple. 
			Une requête est reçue par <code>Zend_Controller_Front</code>, qui à son tour apelle <code>Zend_Controller_Router</code> 
			pour déterminer quel contrôleur (et quelle action dans ce contrôleur) aiguiller. 
			<code>Zend_Controller_Router</code> decompose l'URI dans un objet <code>Zend_Controller_Dispatcher_Token</code> qui décrits où aiguiller. 
			<code>Zend_Controller_Front</code> entre ensuite dans une boucle d'aiguillage. 
			Il apelle <code>Zend_Controller_Dispatcher</code>, le passe dans le token pour aiguiller dans l'actuel contrôleur et l'actuelle action. 
			Après que le contrôleur aie finit, le contrôle retourne au <code>Zend_Controller_Front</code>. 
			Si le contrôleur a indiqué qu'un autre contrôleur doit être aiguillé en retournant un nouveau jeton, la boucle continue 
			et une autre action a lieu, sinon le processus s'arrête.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Processus de routage</title>

		<para>
		    Avant que votre premier contrôleur soit construit, vous avec besoin de comprendre le fonctionnement du processus de 
		    routage tel qu'il est implémenté dans <code>Zend_Controller_Router</code>. 
		    Rappelez vous que le workflow est composé du routage, qui à lieu une seule fois, et de l'aiguillage qui à lieu dans une boucle.
		</para>

		<para>
		    <code>Zend_Controller_Front</code> apelle <code>Zend_Controller_Router</code> pour envoyer une URI dans un 
		    contrôleur -- et une action à l'intérieur de ce contrôleur. 
		    <code>Zend_Controller_Router</code> prend cette URI et la décompose en un objet de valeur <code>Zend_Controller_Dispatcher_Token</code>, 
		    qui sera passé dans l'aiguilleur (<code>Zend_Controller_Dispatcher</code>).
		</para>

		<para>
		    Le routeur utilise un très simple analyseur pour déterminer le nom du contrôleur et le nom de l'action qu'il contient :

			<programlisting role="php"><![CDATA[
http://framework.zend.com/controleur/action/]]>
			</programlisting>

            Notez que le premier segment est toujours le nom du contrôleur, et le second, toujours celui de l'action.
		</para>

		<para>
			 Optionellement, les paramètres peuvent être définis dans cette URI qui sera ensuite passée au contrôleur. 
			 Ceux-ci prennent la forme de paires clés/valeurs :

			<programlisting role="php"><![CDATA[
http://framework.zend.com/controler/action/cle1/valeur1/]]>
			</programlisting>
		</para>

		<para>
		     Si rien n'est présent dans la partie <code>/controller/</code> de l'URI, alors cela deviendra "<code>index</code>". 
		     Si rien n'est présent dans la partie <code>/action/</code> de l'URI, alors cela deviendra aussi "<code>index</code>". 
		     Prenez ces exemples :

				<programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Controller: roadmap
Action    : future

http://framework.zend.com/roadmap/
Controller: roadmap
Action    : index

http://framework.zend.com/
Controller: index
Action    : index]]>
				</programlisting>
			</para>

			<note>
				Nous sommes actuellement en train de développer un nouveau routeur avec un moteur de ré-écriture d'URI, 
				qui donnera plus de flexibilité que le routeur présenté actuellement. 
				Celui-ci sera inclus dans une 'preview release' très bientôt.
			</note>

			<para>
			    Le nom du contrôleur, l'action à l'intérieur de ce contrôleur, ainsi que tous les paramètres optionnels 
			    sont regroupés dans un jeton <code>Zend_Controller_Dispatcher_Token</code>. Ce jeton est retourné au <code>Zend_Controller_Front</code>, qui 
			    entrera dans la boucle d'aiguillage. Une fois dans la boucle d'aiguillage, le jeton sera passé au <code>Zend_Controller_Dispatcher</code>.
			</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatch-token">
		<title>Jeton d'Aiguillage</title>

		<para>
		     Le jeton d'aiguillage est un simple objet de valeur qui est passé entre le <code>Zend_Controller_Front</code> et les classes qui 
		     implémentent le routeur et les interfaces d'aiguillages. Il regroupe une définition du contrôleur, une action, et les paramètres 
		     à passer dans l'action.
		</para>

		<itemizedlist>
			<listitem><para>
			    Il est possible d'accéder au nom du contrôleur avec <code>getControllerName()</code> et <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
			    Le nom de l'action à appeler à l'intérieur de ce contrôleur est accessible avec <code>getActionName()</code> et <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
			    Les paramères à passer à cette action sont un tableau associatif de paires clés/valeurs qui sont accessibles avec <code>getParams()</code> et <code>setParams()</code>.
			</para></listitem>
		</itemizedlist>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Processus d'Aiguillage</title>

		<para>
		    L'aiguillage est l'action de prendre un jeton <code>Zend_Controller_Dispatcher_Token</code>, d'en extraire les 
		    informations contenues : un nom de contrôleur, un nom d'action, et des paramètres, d'instancier un 
		    contrôleur et appeler une action de ce contrôleur.
		</para>
	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
