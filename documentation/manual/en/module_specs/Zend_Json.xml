<sect1 id="zend.json.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Json</code> provides convenience methods for serializing
        native PHP to JSON and decoding JSON to native PHP. For more information
        on JSON, <ulink url="http://www.json.org/">visit the JSON project
        site</ulink>.
    </para>
    <para>
        JSON, JavaScript Object Notation,  can be used as a lightweight data
        interchange between javascript and other languages. Since JSON can be
        directly evaluated in Javascript, it is an ideal format for using with
        Web 2.0 interfaces; it is a simpler alternative than using XML for AJAX
        interfaces.
    </para>
</sect1>

<sect1 id="zend.json.basics">
    <title>Basic Usage</title>
    <para>
        Usage of <code>Zend_Json</code> involves using the two public static
        methods available: <code>Zend_Json::encode()</code> and
        <code>Zend_Json::decode()</code>. 
        <programlisting role="php"><![CDATA[<?php
// Retrieve a value:
$phpNative = Zend_Json::decode($encodedValue);

// Encode it to return to the client:
$json = Zend_Json::encode($phpNative);
?>]]></programlisting>
    </para>
</sect1>

<sect1 id="zend.json.objects">
    <title>JSON Objects</title>
    <para>
        When encoding PHP objects as JSON, all public properties of that object
        will be encoded in a JSON object.
    </para>
    <para>
        Decoding JSON objects poses a slight difficulty, however, since
        Javascript objects correspond most closesly to PHP's associative array.
        Some suggest that a class identifier should be passed, and an object
        instance of that class should be created and populated with the
        key/value pairs of the JSON object; others feel this could pose a
        substantial security risk.
    </para>
    <para>
        By default, <code>Zend_Json</code> will decode JSON objects as
        associative arrays. However, if you desire an object returned, you can
        specify this:
        <programlisting role="php"><![CDATA[<?php
// Decode objects as objects
$phpNative = Zend_Json::decode($encodedValue, Zend_Json::TYPE_OBJECT);
?>]]></programlisting>
        Any objects thus decoded are returned as <code>StdClass</code> objects
        with properties corresponding to the key/value pairs in the JSON
        notation.
    </para>
    <para>
        The recommendation of the Zend Framework is that the individual
        developer should decide how to decode JSON objects. If an object of a
        specified type should be created, it can be created in the developer
        code and populated with the values decoded using <code>Zend_Json</code>.
    </para>
</sect1>
        
<!--
vim:se ts=4 sw=4 et:
-->
