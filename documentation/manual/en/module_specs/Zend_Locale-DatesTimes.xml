<sect1 id="zend.locale.date.datesandtimes">

    <title>Working with Dates and Times</title>

    <para>
        <code>Zend_Locale_Format</code> provides several methods for working with dates and times to help convert and
        normalize between different formats for different locales. Use <code>Zend_Date</code> for manipulating dates.
    </para>

    <sect2 id="zend.locale.date.normalize">

        <title>Normalizing Dates and Times</title>

        <para>
            The <code>getDate()</code> method parses strings containing dates in localized formats. The results are
            returned in a structured array, with well-defined keys for each part of the date. In addition, the array
            will contain a key 'format' showing the format string used to parse the input date string. Since a localized
            date string may not contain all parts of a date/time, the key-value pairs are optional. For example, if only
            the year, month, and day is given, then all time values are supressed from the returned array, and
            vice-versa if only hour, minute, and second were given as input. If no date or time can be found within the
            given input, an exception will be thrown.
        </para>

        <para>
            Also, the sister method <code>getFixedDate()</code> adds a key 'fixed' with a whole number value indicating
            if the input date string required "fixing" by rearranging the day, month, or year in the input to fit the
            format used.
        </para>

        <table>
            <title>'fixed' key values</title>
            <tgroup cols='4'>
                <thead>
                    <row>
                        <entry>value</entry>
                        <entry>meaning</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>0</entry>
                        <entry>nothing to fix</entry>
                    </row>
                    <row>
                        <entry>1</entry>
                        <entry>fixed false month</entry>
                    </row>
                    <row>
                        <entry>2</entry>
                        <entry>swapped day and year</entry>
                    </row>
                    <row>
                        <entry>3</entry>
                        <entry>swapped month and year</entry>
                    </row>
                    <row>
                        <entry>4</entry>
                        <entry>swapped month and day</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            The following return values are possible, when the BCMath extension is available:
            <table>
                <title>Return values</title>
                <tgroup cols='4'>
                    <thead>
                        <row>
                            <entry>Array key</entry>
                            <entry>Returned value</entry>
                            <entry>Minimum</entry>
                            <entry>Maximum</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>day</entry>
                            <entry>integer</entry>
                            <entry>1</entry>
                            <entry>31</entry>
                        </row>
                        <row>
                            <entry>month</entry>
                            <entry>integer</entry>
                            <entry>1</entry>
                            <entry>12</entry>
                        </row>
                        <row>
                            <entry>year</entry>
                            <entry>integer</entry>
                            <entry>no limit</entry>
                            <entry>no limit</entry>
                        </row>
                        <row>
                            <entry>hour</entry>
                            <entry>integer</entry>
                            <entry>0</entry>
                            <entry>no limit</entry>
                        </row>
                        <row>
                            <entry>minute</entry>
                            <entry>integer</entry>
                            <entry>0</entry>
                            <entry>59</entry>
                        </row>
                        <row>
                            <entry>second</entry>
                            <entry>integer</entry>
                            <entry>0</entry>
                            <entry>59</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <example>
            <title>Normalizing a date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$date = Zend_Locale_Format::getDate('13.04.2006', 'dd.MM.yyyy');

print_r($date); // outputs:

Array
(
    [format] => dd.MM.yyyy
    [day] => 13
    [month] => 4
    [year] => 2006
)

// alternatively, some types of problems with input data can be automatically corrected
$date2 = Zend_Locale_Format::getFixedDate('04.13.2006', 'dd.MM.yyyy');

print_r($date); // outputs:

Array
(
    [format] => dd.MM.yyyy
    [day] => 13
    [month] => 4
    [year] => 2006
    [fixed] => 4
)
?>]]></programlisting>
        </example>

        <para>
            Since <code>getDate()</code> is "locale-aware", specifying the <code>$locale</code> is sufficient for date
            strings adhering to that locale's format. The method <code>getFixedDate()</code> uses simple tests to
            determine if the day or month is not valid, and then applies heuristics to try and correct any detected
            problems.
        </para>

        <example>
            <title>Normalizing a date by locale</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('de_AT');
$date = Zend_Locale_Format::getDate('13.04.2006', null, $locale);

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            A complete date and time is returned when the input contains both a date and time in the expected format.
        </para>

        <example>
            <title>Normalizing a date with time</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('de_AT');
$date = Zend_Locale_Format::getDate('13.04.2005 22:14:55', false, $locale);

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            If a specific format is desired, specify the <code>$format</code> argument, without giving a
            <code>$locale</code>. Only single-letter codes (H, m, s, y, M, d), and MMMM and EEEE are supported in the
            <code>$format</code>.
        </para>

        <example>
            <title>Normalizing a userdefined date</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$date = Zend_Locale_Format::getDate('13200504T551422', 'ddyyyyMM ssmmHH');

print_r ($date);
?>]]></programlisting>
        </example>

        <para>
            The format can include the following signs :
            <table>
                <title>Format definition</title>
                <tgroup cols='2'>
                    <thead>
                        <row>
                            <entry>Format Letter</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>d or dd</entry>
                            <entry>1 or 2 digit day</entry>
                        </row>
                        <row>
                            <entry>M or MM</entry>
                            <entry>1 or 2 digit month</entry>
                        </row>
                        <row>
                            <entry>y or yy</entry>
                            <entry>1 or 2 digit year</entry>
                        </row>
                        <row>
                            <entry>yyyy</entry>
                            <entry>4 digit year</entry>
                        </row>
                        <row>
                            <entry>h</entry>
                            <entry>1 or 2 digit hour</entry>
                        </row>
                        <row>
                            <entry>m</entry>
                            <entry>1 or 2 digit minute</entry>
                        </row>
                        <row>
                            <entry>s</entry>
                            <entry>1 or 2 digit second</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <para>
            Examples for proper formats are
            <table>
                <title>Example formats</title>
                <tgroup cols='3'>
                    <thead>
                        <row>
                            <entry>Formats</entry>
                            <entry>Input</entry>
                            <entry>Output</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>dd.MM.yy</entry>
                            <entry>1.4.6</entry>
                            <entry>['day'] => 1,
                                   ['month'] => 4, 
                                   ['year'] => 6</entry>
                        </row>
                        <row>
                            <entry>dd.MM.yy</entry>
                            <entry>01.04.2006</entry>
                            <entry>['day'] => 1, ['month'] => 4, ['year'] => 2006</entry>
                        </row>
                        <row>
                            <entry>yyyyMMdd</entry>
                            <entry>1.4.6</entry>
                            <entry>['day'] => 6, ['month'] => 4, ['year'] => 1</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <note>
            <title>Database date format</title>
            <para>
                To parse a database date value (f.e. MySql or MsSql), use Zend_Date's ISO_8601 format instead of
                getDate().
            </para>
        </note>

        <para>
            <code>getDate()</code> automatically detects and corrects some kinds of problems with input, such as
            misplacing the year:
        </para>

        <example>
            <title>Correction for date normalizing</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$date = Zend_Locale_Format::getDate('41.10.20', 'ddMMyy');

// instead of 41 for the day, the 41 will be returned as year value
print_r ($date);
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.date.test">

        <title>Testing Dates</title>

        <para>
            Use <code>isDate()</code> to check if a given string contains a valid date.
        </para>

        <example>
            <title>Date testing</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::isDate('13.Apr.2006', $locale) {
    print "date";
} else {
    print "not a date";
} 
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.time.normalizing">

        <title>Normalizing a Time</title>

        <para>
            Normally, a time will be returned with a date, if the input contains both. If the proper format is not
            known, but the locale relevant to the user input is known, then <code>getTime()</code> should be used,
            because it uses the default time format for the selected locale.
        </para>

        <example>
            <title>Normalize an unknown time</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::getTime('13:44:42', $locale) {
    print "time";
} else {
    print "not a time";
} 
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.locale.time.test">

        <title>Testing Times</title>

        <para>
            Use <code>isTime()</code> to check if a given string contains a proper time.
        </para>

        <example>
            <title>Testing a time</title>
<programlisting role="php"><![CDATA[<?php
require_once 'Zend/Locale.php';

$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::isTime('13:44:42', $locale) {
    print "time";
} else {
    print "not a time";
} 
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
