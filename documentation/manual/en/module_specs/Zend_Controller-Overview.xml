<sect1 id="zend.controller.overview">
	<title>Overview</title>

	<sect2 id="zend.controller.overview.introduction">
		<title>Introduction</title>
		<para>
            <code>Zend_Controller</code> provides the foundation for building a
            website based on the Model-View-Controller (MVC) pattern.
		</para>

		<para>
            The <code>Zend_Controller</code> system is designed to be
            lightweight, modular, and extensible.  It is a minimalist design to
            permit flexibility and some freedom to users while providing enough
            structure so that systems built around <code>Zend_Controller</code>
            share some common conventions and similar code layout.
		</para>

		<para>
            The <code>Zend_Controller</code> workflow is implemented by several
            components.  While it is not necessary to completely understand the
            underpinnings of all of these components to use the system, having a
            working knowledge of the process is helpful.

			<itemizedlist>
				<listitem>
					<para>
						<code>Zend_Controller_Front</code>
                        orchestrates the entire workflow of the
                        <code>Zend_Controller</code> system.  It is an
                        interpretation of the FrontController pattern.
                        <code>Zend_Controller_Front</code> processes all
                        requests received by the server and is ultimately
                        responsible for delegating requests to ActionControllers
                        (<code>Zend_Controller_Action</code>).
					</para>
				</listitem>

				<listitem>
					<para>
                        <code>Zend_Controller_Request_Abstract</code> represents
                        the request environment and provides methods for setting
                        and retrieving the controller and action names and any
                        request parameters. Additionally it keeps track of
                        whether or not the action it contains has been
                        dispatched by <code>Zend_Controller_Dispatcher</code>.
                        Extensions to the abstract request object can be used to
                        encapsulate the entire request environment, allowing
                        routers to pull information from the request environment
                        in order to set the controller and action names.
					</para>

                    <para>
                        By default, <code>Zend_Controller_Request_Http</code> is
                        used, which provides access to the entire HTTP request
                        environment.
                    </para>
				</listitem>

				<listitem>
					<para>
                        <code>Zend_Controller_Router_Interface</code> is used to
                        define routers.  Routing is the process of examining the
                        request environment to determine which  to determine
                        which controller, and action of that controller, should
                        receive the request.  This controller, action, and
                        optional parameters are then set in the request object
                        to be processed by <code>Zend_Controller_Dispatcher</code>.  
                        Routing occurs only once: when the request is initially
                        received and before the first controller is dispatched.
                    </para>

                    <para>
                        The default router, <code>Zend_Controller_Router</code>,
                        takes a URI endpoint as specified in
                        <code>Zend_Controller_Request_Http</code> and decomposes
                        it into a controller, action, and parameters based on
                        the path information in the url. As an example, the URL
                        <code>http://localhost/foo/bar/key/value</code> would be
                        decoded to use the <code>foo</code> controller,
                        <code>bar</code> action, and specify a parameter
                        <code>key</code> with a value of <code>value</code>.
					</para>
				</listitem>

				<listitem>
					<para>
                        <code>Zend_Controller_Dispatcher_Interface</code> is
                        used to define dispatchers.
                        Dispatching is the process of pulling the controller and
                        action from the request object and mapping them to a
                        controller file/class and action method in the controller
                        class. If the controller or action do not exist, it
                        handles determining default controllers and actions to
                        dispatch.
                    </para>

                    <para>
                        The actual dispatching process consists of instantiating
                        the controller class and calling the action method in
                        that class. Unlike rouing, which occurs only once,
                        dispatching occurs in a loop. If the request object's
                        dispatched status is reset at any point, the loop will
                        be repeated, calling whatever action is currently set
                        in the request object. The first time the loop finishes
                        with the request object's dispatched status set (boolean
                        true), it will finish processing.
                    </para>

                    <para>
                        The default dispatcher is
                        <code>Zend_Controller_Dispatcher</code>. It defines
                        controllers as CamelCasedClasses ending in the word
                        Controller, and action methods as camelCasedMethods
                        ending in the word Action:
                        <code>SomeFooController::barAction</code>. In this case,
                        the controller would be referred to as
                        <code>somefoo</code> and the action as <code>bar</code>.
					</para>
				</listitem>

				<listitem>
					<para>
                        <code>Zend_Controller_Action</code> is the base
                        controller component.  Each controller is a single class
                        that extends the <code>Zend_Controller_Action
                        class</code>, and this class has action methods.
					</para>
				</listitem>

                <listitem>
                    <para>
                        <code>Zend_Controller_Response_Abstract</code> defines a
                        base response class used to collect and return responses
                        from the action controllers. It collects both headers
                        and body content, and, because it implements
                        <code>__toString()</code>, can be directly echoed in
                        order to send all headers and content at once.
                    </para>

                    <para>
                        The default response class is
                        <code>Zend_Controller_Response_Http</code>, which is
                        suitable for use in an HTTP environment.
                    </para>
                </listitem>
			</itemizedlist>

            The workflow of <code>Zend_Controller</code> is relatively simple.
            A request is received by <code>Zend_Controller_Front</code>, which
            in turn calls <code>Zend_Controller_Router</code> to determine which
            controller (and action in that controller) to dispatch.
            <code>Zend_Controller_Router</code> decomposes the URI in order to
            set the controller and action names in the request.
            <code>Zend_Controller_Front</code> then enters a dispatch loop.  It
            calls <code>Zend_Controller_Dispatcher</code>, passing it the
            request, to dispatch to the controller and action specified in the
            request (or use defaults).  After the controller has finished,
            control returns to <code>Zend_Controller_Front</code>.  If the
            controller has indicated that another controller should be
            dispatched by resetting the dispatched status of the request, the
            loop continues and another dispatch is performed.  Otherwise, the
            process ends.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.request">
		<title>Request Object</title>

		<para>
            The request object is a simple value object that is passed between
            <code>Zend_Controller_Front</code> and the router, dispatcher, and
            controller classes.  It packages a definition of a controller, an
            action, and parameters to be passed to the action, as well as the
            rest of the request environment, be it HTTP, the CLI, or PHP-GTK.
		</para>

		<itemizedlist>
			<listitem><para>
                The controller name is accessed by
                <code>getControllerName()</code> and
                <code>setControllerName()</code>.
			</para></listitem>
			<listitem><para>
                The name of the action to call within that controller is
                accessed by <code>getActionName()</code> and
                <code>setActionName()</code>.
			</para></listitem>
			<listitem><para>
                Parameters to be passed to that action are an associative array
                of key/value pairs that are accessed by <code>getParams()</code>
                and <code>setParams()</code>, or individually by
                <code>getParam()</code> and <code>setParam()</code>.
			</para></listitem>
		</itemizedlist>

        <para>
            Based on the type of request, there may be more methods available.
            The default request used, <code>Zend_Controller_Request_Http</code>,
            for instance, has methods for retrieving the request URI, path
            information, $_GET and $_POST parameters, etc.
        </para>

        <para>
            The request object is passed to the front controller, or if none is
            provided, instantiated at the beginning of the dispatch process,
            before routing occurs. It is passed through to every object in the
            dispatch chain.
        </para>

        <para>
            Additionally, the request object is particularly useful in testing.
            The developer may craft the request environment, including
            controller, action, parameters, URI, etc, and pass the request
            object to the front controller to test application flow. When paired
            with the response object, elaborate and precise unit testing of
            MVC applications becomes possible.
        </para>
	</sect2>

	<sect2 id="zend.controller.overview.routing-process">
		<title>Route Process</title>

		<para>
            Before your first controller can be built, you need to understand
            how the routing process works as it is implemented in
            <code>Zend_Controller_Router</code>.  Remember that the workflow is
            divided into routing, which occurs only once, and dispatching, which
            occurs thereafter in a loop.
		</para>

		<para>
            <code>Zend_Controller_Front</code> calls
            <code>Zend_Controller_Router</code> (or another registered router)
            to map a URI to a controller -- and an action within that
            controller.  <code>Zend_Controller_Router</code> retrieves the URI
            from the request object and decomposes it to determine the
            controller, action, and any other URL parameters passed in the path
            and sets these in the request object. 
		</para>

		<para>
            <code>Zend_Controller_Router</code> uses a very simple mapping to
            determine the name of the controller and the name of the action
            within that controller:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/]]>
        </programlisting>
        <para>
            Notice above that the first segment is always the name of the
            controller and the second segment is always the name of the action.
		</para>

		<para>
            Optionally, parameters may be defined in the URI that will be passed
            to the controller.  These take the form of key/value pairs:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/controller/action/key1/value1/]]>
        </programlisting>

        <para>
            If either the controller or action are missing from the URI path,
            <code>Zend_Controller_Dispatcher</code> will try and grab the value
            from the request object's parameters, and, if not found, use default
            values. In both cases, the default values are "<code>index</code>".
            These examples illustrate:
        </para>
        <programlisting role="php"><![CDATA[
http://framework.zend.com/roadmap/future/
Controller: roadmap
Action    : future

http://framework.zend.com/roadmap/
Controller: roadmap
Action    : index

http://framework.zend.com/
Controller: index
Action    : index]]>
        </programlisting>

		<note>
		    <title>Flexibility</title>
		    <para>
                If you want more flexible capabilities, you may want to check out
                <xref linkend="zend.controller.providedsubclasses.rewriterouter"/>.
            </para>
		</note>

		<para>
            The controller name, the action name within that controller, and any
            optional parameters are set in the request object.  When
            <code>Zend_Controller_Front</code> enters the dispatch loop, the
            request object will be passed to
            <code>Zend_Controller_Dispatcher</code>.
		</para>
	</sect2>

	<sect2 id="zend.controller.overview.dispatching">
		<title>Dispatch Process</title>

		<para>
            Dispatching is the process of taking the request object,
            <code>Zend_Controller_Request_Abstract</code>, extracting the
            controller name, action name, and optional parameters contained in it,
            and then instantiating a controller and calling an action of that
            controller. If no controller or action are found, it will use
            default values for them. <code>Zend_Controller_Dispatcher</code>
            specifies <code>index</code> for each of these defaults, but allows
            the developer to change them using the
            <code>setDefaultController()</code> and
            <code>setDefaultAction()</code> methods.
		</para>

        <para>
            Dispatching happens in a loop in the front controller. Before
            dispatching occurs, the front controller routes the request to find
            user specified values for the controller, action, and optional
            parameters. It then enters a dispatch loop, dispatching the request.
        </para>

        <para>
            At the beginning of each iteration, it sets a flag in the request
            object indicating that the action has been dispatched. If an action
            or pre/postDispatch plugin resets that flag, the dispatch loop will
            continue and attempt to dispatch the request again. By changing the
            controller and/or action in the request and resetting the dispatched
            flag, the developer may define a chain of requests to perform.
        </para>

        <para>
            The action controller method that controlls such dispatching is
            <code>_forward()</code>; call this method from any of the
            pre/postDispatch() or action methods, providing a controller,
            action, and optionally any additional parameters you may wish to
            send to the new action:
        </para>
        
        <programlisting role="php"><![CDATA[
public function myAction()
{
    // do some processing...
    // forward to another action, FooController::barAction():
    $this->_forward('foo', 'bar', array('baz' => 'bogus'));
}
]]></programlisting>
	</sect2>

	<sect2 id="zend.controller.overview.response">
		<title>Response Object</title>

		<para>
            The response object is the logical pair to the request object. Its
            purpose is to collate content and/or headers so that they may be
            returned en masse. Additionally, the front controller will pass any
            caught exceptions to the response object, allowing the developer to
            gracefully handle exceptions.
        </para>

        <para>
            Since the response object implements <code>__toString()</code>, it
            may be safely echoed. This allows for the following usage:
        </para>

        <programlisting role="php"><![CDATA[
echo $controller->dispatch();
]]></programlisting>
        
        <para>
            Developers should make use of the response object in their action
            controllers. Instead of directly rendering output and sending
            headers, push them to the response object:
        </para>

        <programlisting role="php"><![CDATA[
// Within an action controller action:
// Set a header
$this->getResponse()
    ->setHeader('Content-Type', 'text/html')
    ->appendBody($content);
]]></programlisting>

        <para>
            By doing this, all headers get sent at once, just prior to
            displaying the content.
        </para>

        <para>
            Should an exception occur in an application, check the
            response object's <code>isException()</code> flag, and retrieve the
            exception using <code>getException()</code>. Additionally, one
            may create custom response objects that redirect to error pages, log
            exception messages, do pretty formatting of exception messages (for
            development environments), etc.
        </para>

        <para>
            By default, exception messages are not displayed. This behaviour may
            be overridden by calling <code>renderException()</code>.
        </para>
	</sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
