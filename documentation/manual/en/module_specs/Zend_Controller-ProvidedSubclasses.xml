<sect1 id="zend.controller.providedsubclasses">
    <title>Provided Subclasses</title>

    <sect2 id="zend.controller.providedsubclasses.introduction">
        <title>Introduction</title>

        <para>
            Zend Framework provides several alternatives to the default classes
            provided, including alternate request objects, routers, and response
            objects.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.request.http">
        <title>Zend_Controller_Request_Http</title>

        <sect3 id="zend.controller.providedsubclasses.request.http.introduction">
            <title>Introduction</title>

            <para>
                <code>Zend_Controller_Request_Http</code> provides a request object
                for use in an HTTP environment. 
                <code>Zend_Controller_Request_Http</code>
                is the default request class utilised by
                <code>Zend_Controller_Dispatcher</code>.
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.dataaccess">
            <title>Accessing Request Data</title>

            <para>
                <code>Zend_Controller_Request_Http</code> encapsulates access
                to relevant values such as the key name and value for the
                controller and action router variables, and all additional
                parameters parsed from the URI. By proxying to
                <code>Zend_Controller_Request_Http</code> it additionally allows
                access to values contained in the superglobals as public
                members and manages the current Base URL and Request URI.
                Superglobal values cannot be set on a request object, instead use
                the setParam/getParam methods to set or retrieve user parameters.
            </para>

            <note>
                <title>Superglobal data</title>
                <para>
                    When accessing superglobal data through <code>Zend_Controller_Request_Http</code>
                    as public member properties, it is necessary to keep in mind that
                    the property name (superglobal array key) is matched to a superglobal
                    in a specific order of precedence: 1. GET, 2. POST, 3. COOKIE, 4. SERVER, 5. ENV.
                </para>
            </note>

            <para>
                Specific superglobals can be accessed using a public method as an
                alternative. For example, the raw value of <code>$_POST['user']</code>
                can be accessed by calling <code>getPost('user')</code> on the
                request object.
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.request.http.baseurl">
            <title>Base Url and subdirectories</title>

            <para>
                <code>Zend_Controller_Request_Http</code> allows
                Zend_Controller_RewriteRouter to be used in subdirectories.
                Zend_Controller_Request_Http will attempt to automatically
                detect your base URL and set it accordingly.
            </para>

            <para>
                For example, if you keep your
                <code>index.php</code> in a webserver subdirectory named
                <code>/projects/myapp/index.php</code>, base URL (rewrite base)
                should be set to <code>/projects/myapp</code>. This string will
                then be stripped from the beginning of the path before
                calculating any route matches. This frees one from the necessity
                of prepending it to any of your routes. A route of
                <code>'user/:username'</code> will match URIs like
                <code>http://localhost/projects/myapp/user/martel</code> and
                <code>http://example.com/user/martel</code>.
            </para>

            <note>
                <title>URL detection is case sensitive</title>
                <para>
                    Automatic base URL detection is case sensitive, so make sure your URL
                    will match a subdirectory name in a filesystem (even on Windows
                    machines). If it doesn't you will get to noRoute action.
                </para>
            </note>

            <para>
                Should base URL be detected incorrectly you can override it
                with your own base path with the help of the
                <code>setBaseUrl()</code> method of either the
                <code>Zend_Controller_Request_Http</code> class, or the
                <code>Zend_Controller_Front</code> class. The easiest
                method is to set it in <code>Zend_Controller_Front</code>, 
                which will proxy it into the request object. Example usage to
                set a custom base URL:
            </para>

            <programlisting role="php"><![CDATA[
/** 
 * Dispatch Request with custom base URL with Zend_Controller_Front.
 */
$router     = new Zend_Controller_RewriteRouter();
$controller = Zend_Controller_Front::getInstance();
$controller->setControllerDirectory('./application/controllers')
           ->setRouter($router)
           ->setBaseUrl('/projects/myapp'); // set the base url!
$response   = $controller->dispatch();]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.rewriterouter">
        <title>Zend_Controller_RewriteRouter</title>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.introduction">
            <title>Introduction</title>
            <para>
                <code>Zend_Controller_RewriteRouter</code> is a new
                version of the framework
                router. Routing is the process of taking a URI endpoint (that part
                of the URI which comes after the base URL) and
                decomposing it into parameters to determine which
                controller and action of that
                controller should receive the request. This value of the
                controller, action and other parameters is packaged into a
                <code>Zend_Controller_Request_Http</code> object which is
                then processed by <code>Zend_Controller_Dispatcher</code>.
                Routing occurs only once: when the request is initially
                received and before the first controller is dispatched.
            </para>

            <para>
                <code>Zend_Controller_RewriteRouter</code> is designed to allow for
                mod_rewrite like functionality using pure php structures. It is
                very loosely based on Ruby on Rails routing and does not require
                any prior knowledge of webserver URL rewriting. It is designed
                to work with a single Apache mod_rewrite rule (one of):
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php]]></programlisting>

            <para>
            or:
            </para>

            <programlisting role="php"><![CDATA[
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 ]]></programlisting>
            
            <para>
                The RewriteRouter can also be used with the IIS webserver
                if <ulink url="http://www.isapirewrite.com">Isapi_Rewrite</ulink>
                has been installed as an Isapi extension with the following rewrite rule:
            </para>

            <programlisting role="php"><![CDATA[
RewriteRule ^[\w/\%]*(?:\.(?!(?:js|ico|gif|jpg|png|css)$)[\w\%]*$)? /index.php [I]]]></programlisting>

            <note>
                <title>IIS Isapi_Rewrite</title>
                <para>
                    When using IIS, <code>$_SERVER['REQUEST_URI']</code>
                    will either not exist, or be set as an empty string. In
                    this case, <code>Zend_Controller_Request_Http</code> will
                    attempt to use the <code>$_SERVER['HTTP_X_REWRITE_URL']</code>
                    value set by the Isapi_Rewrite extension.
                </para>
            </note>

            <para>If using Lighttpd, the following rewrite rule is valid:</para>

            <programlisting role="php"><![CDATA[
url.rewrite-once = ( ".*\.(js|ico|gif|jpg|png|css)$" => "$0", "" => "/index.php")]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.usage">
            <title>Using a router</title>

            <para>
                To properly use the RewriteRouter you have to instantiate it,
                add some user defined routes and inject it into the controller.
                The following code illustrates the procedure:
            </para>

            <programlisting role="php"><![CDATA[
/* Create a router */

$router = new Zend_Controller_RewriteRouter();
$router->addRoute(
	'user',
	new Zend_Controller_Router_Route('user/:username', array('controller' => 'user', 'action' => 'info'))
);

/* Set it in a controller */

$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.basic">
            <title>Basic Routes</title>

            <para>
                The heart of the RewriteRouter is the definition of user defined
                routes. Routes are created by calling the addRoute method of
                RewriteRouter and passing in a new instance of
                <code>Zend_Controller_Router_Route</code>:
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute('user', new Zend_Controller_Router_Route('user/:username'));]]></programlisting>

            <para>
                The first parameter is the name of the route. It is redundant at
                the moment of writing but will be used in the future in a URL
                view helper to allow for easy URL generation in your views.
                Should you need to make use of a previously configured named
                route, you can retrieve it with the getRoute method of the
                RewriteRouter. The second parameter is an instance of
                <code>Zend_Controller_Router_Route</code>.
            </para>

            <para>
                The first parameter for the
                <code>Zend_Controller_Router_Route</code>
                constructor is a route that will be matched to a URL -
                for example, the above route will match
                <code>http://example.com/user/martel</code>. The colon in a
                route marks a URL variable. After the successful routing, values 
                of all defined variables will be injected to the Zend_Controller_Request.
                After that they will be accessible through a Zend_Controller_Request::getParam or 
                Zend_Controller_Action::_getParam methods. In our example a
                parameter named username will be set to a value of 'martel'.
            </para>

            <note>
                <title>Reverse matching</title>
                <para>
                    Routes are matched in reverse order so make sure your most
                    generic routes are defined first.
                </para>
            </note>

            <note>
                <title>Character useage</title>
                <para>
                    For now the current implementation allows for use of any
                    characters except a slash (/) as a variable identifier but it is
                    strongly recommended that one uses only php variable friendly
                    characters. In future the implementation will probably be
                    altered and this may introduce bugs to your code.
                </para>
            </note>

            <para>
                There are two special variables which can be used in your routes
                - ':controller' and ':action'. These special variables will be
                used to find a controller and/or an action chosen in the URL.
                The ':action' variable must always be defined either in the route
                or as a default parameter. The ':controller' variable will
                default to the IndexController if it is not defined.
            </para>

            <note>
                <title>Special variables</title>
                <para>
                    Names of these special variables may be different if you choose to 
                    alter the defaults in <code>Zend_Controller_Request_Http</code> 
                    by the means of setControllerKey and setActionKey methods.
                </para>
            </note>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'user', new Zend_Controller_Router_Route(':controller/:action')
);]]></programlisting>

            <para>
                If you point your browser to 'http://example.com/news/latest'
                with this route defined the <code>Zend_Controller_Dispatcher</code>
                will invoke the latestAction method of your NewsController class.
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.variable-defaults">
            <title>Variable defaults</title>

            <para>
                Every variable in the route can have a default. To provide it
                you have to add a second parameter to the
                <code>Zend_Controller_Router_Route</code> constructor. This
                parameter is an array with keys as variable names and
                values as desired defaults.
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive', new Zend_Controller_Router_Route('archive/:year', array('year' => 2006))
);]]></programlisting>

            <para>
                What may not be clearly visible is that the above route will
                match URLs like 'http://example.com/archive/2005' and
                'http://example.com/archive'. In the latter case the variable
                year will have a value of 2006.
            </para>

            <para>
                The above example will only result in injecting a year variable 
                to the request. No routing will take place since controller and 
                action parameters are not set. To make it more usable you have to 
                provide a valid controller and a valid action as defaults. 
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive',
    new Zend_Controller_Router_Route('archive/:year', array('year' => 2006, 'controller' => 'archive', 'action' => 'show')
);]]></programlisting>

            <para>
				This route will then result in dispatching to showAction of ArchiveController.
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.variable-requirements">
            <title>Variable requirements</title>

            <para>
                One can add a third parameter to the 
                <code>Zend_Controller_Router_Route</code>
                constructor where variable requirements can
                be set. These are defined as regular expressions:
            </para>

            <programlisting role="php"><![CDATA[
$router->addRoute(
    'archive',
    new Zend_Controller_Router_Route('archive/:year', array('year' => 2006), array('year' => '\d+'))
);]]></programlisting>

            <note>
                <title>Routing behavior</title>
                <para>
                    Unlike Ruby on Rails, ZF RewriteRouter will match a route and
                    use a default when a third parameter variable requirement is
                    not met. So the URL of 'http://example.com/archive/test' will
                    match the above route and set the year to 2006. This
                    functionality may be altered in the future as it is being
                    discussed at the moment of writing of this documentation.
                </para>
            </note>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.rewritebase">
            <title>Base URL and subdirectories</title>

            <para>
                Unlike the original Router, the current RewriteRouter can be used in
                subdirectories. The original RewriteRouter's setRewriteBase()
                method is no longer available however. Instead the base URL
                will be automatically detected by Zend_Controller_Request_Http.
            </para>

            <para>
                Should the base URL be detected incorrectly you can override it
                with your own base path with the help of Zend_Controller_Request_Http
                by calling the setBaseUrl() method (see <xref linkend="zend.controller.providedsubclasses.request.http.baseurl" />).
            </para>

        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.default-routes">
            <title>Default routes</title>

            <para>
                Zend_Controller_RewriteRouter is preconfigured with one default
                route to provide compatibility with the first version of the 
                router. It will match URIs in the shape of <code>'controller/action'</code> 
                and will also match any additional parameters appended to the URI by default.
                It is configured as:
            </para>

            <programlisting role="php"><![CDATA[
// Route for Router v1 compatibility
$compat = new Zend_Controller_Router_Route(':controller/:action/*', array('controller' => 'index', 'action' => 'index'));
$this->addRoute('default', $compat);]]></programlisting>

            <note>
                <title>Matching URIs</title>
                <para>
                    Zend_Controller_RewriteRouter is configured for backwards
                    compatibility. It will automatically match <code>controller/action</code>
                    URIs with additional parameters. The additional parameters do not
                    require the addition of new routes unless they must have default values
                    or variable requirements. These additional parameters will be accessible
                    from the Zend_Controller_Action::_getParam method.
                </para>
            </note>

            <para>
                If you do not want the default route in your routing schema, you
                may remove it using <code>removeDefaultRoutes()</code>:
            </para>

            <programlisting role="php"><![CDATA[
// Remove default compatability route
$router->removeDefaultRoutes();]]></programlisting>

        </sect3>    

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.static-routes">
            <title>Static Routes</title>

            <para>
                The examples above all use dynamic routes -- routes that contain
                patterns to match against. Sometimes, however, a particular
                route is set in stone, and firing up the regular expression
                engine would be overkill. The answer to this situation is to use
                static routes:
            </para>

            <programlisting role="php"><![CDATA[
$loginRoute = new Zend_Controller_Router_StaticRoute('login', array('controller' => 'login', 'action' => 'form'));
$router->addRoute('login', $static);
]]></programlisting>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.add-config">
            <title>Using Zend_Config with the RewriteRouter</title>

            <para>
                Sometimes its more convenient to update a configuration file
                with new routes than to change the code. This is possible via
                the <code>addConfig()</code> method. Basically, you create a
                Zend_Config-compatible configuration, and in your code read it
                in and pass it to the RewriteRouter:
            </para>

            <programlisting role="php"><![CDATA[
/**
 * Example INI:
 * routes.archive.route = "archive/:year/*"
 * routes.archive.defaults.controller = archive
 * routes.archive.defaults.action = show
 * routes.archive.defaults.year = 2000
 * routes.archive.reqs.year = "\d+"
 * 
 * routes.news.type = "Zend_Controller_Router_StaticRoute"
 * routes.news.route = "news"
 * routes.news.defaults.controller = "news"
 * routes.news.defaults.action = "list"
 */
$config = new Zend_Config_Ini($file);
$router = new Zend_Controller_RewriteRouter();
$router->addConfig($config, 'routes');
]]></programlisting>

            <para>
                In the above example, we tell the router to use the 'routes'
                section of the INI file to use for its routes. Each first-level
                key under that section will be used to define a route name; the
                above example defines the routes 'archive' and 'news'. Each
                route then requires, minimally a 'route' entry and one or more
                'defaults' entries; optionally one or more 'reqs' (short for
                'required') may be provided. All told, these correspond to the
                three arguments provided to a <code>Zend_Controller_Router_Route_Interface</code> 
                object. An option key, 'type', can be used to specify the route
                class type to use for that particular route; by default, it uses
                <code>Zend_Controller_Router_Route</code>. In the example above,
                the 'news' route is defined to use
                <code>Zend_Controller_Router_StaticRoute</code>.
            </para>
        </sect3>

        <sect3 id="zend.controller.providedsubclasses.rewriterouter.modules">
            <title>Using RewriteRouter with modular MVC components</title>

            <para>
                A module aware version of the RewriteRouter is also available,
                Zend_Controller_ModuleRewriteRouter. It works in precisely the
                same fashion as Zend_Controller_RewriteRouter, but has for the
                default route the path ':module/:controller/:action/*'.
            </para>

            <para>
                See the <xref linkend="zend.controller.modular">Conventional
                Modular directory structure documentation</xref> for more
                information. 
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.http">
        <title>Zend_Controller_Response_Http</title>

        <para>
            <code>Zend_Controller_Response_Http</code> is a response object
            suitable for use in an HTTP environment. It contains methods for
            setting, retrieving, and clearing headers, and the
            <code>__toString()</code> method sends all headers at once before
            returning the response content.
        </para>

        <para>
            <code>setHeader()</code> takes two arguments, a header type and the
            header value. A third, optional parameter, if passed and true, will
            force the new header to replace any other headers registered with
            that type.
        </para>
    </sect2>

    <sect2 id="zend.controller.providedsubclasses.response.cli">
        <title>Zend_Controller_Response_Cli</title>

        <para>
            <code>Zend_Controller_Response_Cli</code> is a response object
            suitable for use in an CLI environment. It has no methods for
            handling headers, and simply returns all body content when
            <code>__toString()</code> is invoked.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
