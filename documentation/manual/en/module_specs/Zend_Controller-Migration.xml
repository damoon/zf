<sect1 id="zend.controller.migration">
    <title>Migrating from Previous Versions</title>

    <para>
        The API of the MVC components has changed over time. If you started
        using Zend Framework in an early version, follow the guidelines below to
        migrate your scripts to use the new architecture.
    </para>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>Migrating from 0.2.0 or before to 0.6.0</title>

        <para>
            The most basic usage of the MVC components has not changed; you can
            still do each of the following:
        </para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Controller/Front.php';
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting role="php"><![CDATA[
/* -- create a router -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user', 'user/:username', array('controller' => 'user',
'action' => 'info'));

/* -- set it in a controller -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- set controller directory and dispatch -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            However, due to the addition of the <xref linkend="zend.controller.overview.response" />, 
            you will want to change the last line of the latter example to read:
        </para>

        <programlisting role="php"><![CDATA[
echo $ctrl->dispatch();
]]></programlisting>
        
        <para>
            We encourage use of the Response object to aggregate content and
            headers. This will allow for more flexible output format switching
            (for instance, JSON or XML instead of XHTML) in your applications.
            Echoing the return value of <code>dispatch()</code> ensures that any
            content pushed to the response object will be returned, as well as
            any headers pushed to it.
        </para>

        <para>
            There are many additional features that extend the existing API,
            and these are noted in the documentation.
        </para>

        <para>
            The main changes you will need to be aware of will be found when
            subclassing the various components. Key amongst these are:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>Zend_Controller_Dispatcher_Interface::dispatch()</code>
                now accepts and returns a <xref linkend="zend.controller.overview.request" />
                object instead of a dispatcher token.
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Router_Interface::route()</code>
                now accepts and returns a <xref linkend="zend.controller.overview.request" />
                object instead of a dispatcher token.
            </para></listitem>

            <listitem>
                <para><code>Zend_Controller_Action</code> changes include:</para>

                <itemizedlist>
                    <listitem><para>
                        The constructor now accepts exactly three arguments,
                        <code>Zend_Controller_Request_Abstract $request</code>, 
                        <code>Zend_Controller_Response_Abstract $response</code>, 
                        and <code>array $params (optional)</code>.
                        <code>Zend_Controller_Action::__construct()</code> uses
                        these to set the request, response, and invokeArgs
                        properties of the object, and if overriding the
                        constructor, you should do so as well. Better yet, use
                        the <code>init()</code> method to do any instance
                        configuration, as this method is called as the final
                        action of the constructor.
                    </para></listitem>

                    <listitem><para>
                        <code>run()</code> is no longer defined as final, but is
                        also no longer used by the front controller; it's sole
                        purpose is for using the class as a page controller. It
                        now takes two optional arguments, a
                        <code>Zend_Controller_Request_Abstract $request</code> 
                        and a <code>Zend_Controller_Response_Abstract $response</code>.
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> no longer needs to be
                        defined, but is encouraged as the default action. This
                        allows using the RewriteRouter and action controllers to
                        specify different default action methods.
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> should be overridden to handle any
                        undefined actions automatically.
                    </para></listitem>

                    <listitem><para>
                        <code>_redirect()</code> now takes an optional second
                        argument, the HTTP code to return with the redirect, and
                        an optional third argument, <code>$prependBase</code>,
                        that can indicate that the base URL registered with the
                        request object should be prepended to the url specified.
                    </para></listitem>

                    <listitem>
                        <para>
                            The <code>_action</code> property is no longer set.
                            This property was a <code>Zend_Controller_Dispatcher_Token</code>, 
                            which no longer exists in the current incarnation.
                            The sole purpose of the token was to provide
                            information about the requested controller, action,
                            and URL parameters. This information is now
                            available in the request object, and can be accessed
                            as follows:
                        </para>

                        <programlisting role="php"><![CDATA[
// Retrieve the requested controller name
// Access used to be via: $this->_action->getControllerName().
// The example below uses getRequest(), though you may also directly access the
// $_request property; using getRequest() is recommended as a parent class may
// override access to the request object.
$controller = $this->getRequest()->getControllerName();

// Retrieve the requested action name
// Access used to be via: $this->_action->getActionName().
$action = $this->getRequest()->getActionName();

// Retrieve the request parameters
// This hasn't changed; the _getParams() and _getParam() methods simply proxy to
// the request object now.
$params = $this->_getParams();
$foo = $this->_getParam('foo', 'default'); // request 'foo' parameter, using
                                           // 'default' as default value if not found

]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            <code>noRouteAction()</code> has been removed. The
                            appropriate way to handle non-existent action
                            methods should you wish to route them to a default
                            action is using <code>__call()</code>:
                        </para>

                        <programlisting role="php"><![CDATA[
public function __call($method, $args)
{
    // If an unmatched 'Action' method was requested, pass on to the default
    // action method:
    if ('Action' == substr($method, -6)) {
        return $this->defaultAction();
    }
    
    throw new Zend_Controller_Exception('Invalid method called');
}
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <code>Zend_Controller_RewriteRouter::setRewriteBase()</code> has
                been removed. Use <code>Zend_Controller_Front::setBaseUrl()</code> 
                instead (or Zend_Controller_Request_Http::setBaseUrl(), if using
                that request class).
            </para></listitem>

            <listitem><para>
                <code>Zend_Controller_Plugin_Interface</code> was replaced
                by <code>Zend_Controller_Plugin_Abstract</code>. All methods now
                accept and return a <xref linkend="zend.controller.overview.request" />
                object instead of a dispatcher token.
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
