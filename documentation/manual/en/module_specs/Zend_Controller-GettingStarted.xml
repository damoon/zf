<sect1 id="zend.controller.getting-started">
	<title>Getting Started</title>
	
	<sect2 id="zend.controller.getting-started.introduction">
		<title>Introduction</title>
		<para>
			The <code>Zend_Controller</code> system was built with extensibility in mind, either
			by subclassing the existing classes or writing new classes that implement 
			the interfaces <code>Zend_Controller_Router_Interface</code> and <code>Zend_Controller_Dispatcher_Interface</code>.
		</para>
	</sect2>
	
	<sect2 id="zend.controller.getting-started.server-configuration">
		<title>Server Configuration</title>
		<para>
			Zend_Controller is built to support modern websites with clean URIs (few or no query parameters).  As such,
			the suggested configuration requires support from the webserver in the form of URI rewriting to redirect 
			all requests to a single file, here called "index.php", which will simply bootstrap <code>Zend_Controller_Front</code>.  
			On Apache webservers, this is handled by an optional module called mod_rewrite.
		</para>

		<para>
			The first step in configuring the server is to sucessfully install and enable mod_rewrite.  The next step
			is to put two files in the document root: .htaccess and index.php.  The .htaccess file is used by Apache
			and must contain a mod_rewrite rule to redirect all requests to index.php.  For development purposes, it
			is often simplest to write a mod_rewrite rule that will redirect all requests to index.php except for certain
			file extensions.  Here is an example of such a file:

			<programlisting role="php"><![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css)$ index.php
]]></programlisting>

			In the example above, all requests not containing one of the above file extensions will be passed to index.php.
			This is useful for development, however in production the rewrite rules should be
			written to exclude directories instead.
		</para>
	</sect2>
	
	<sect2 id="zend.controller.getting-started.bootstrap">
		<title>Bootstrap File</title>
		
		<para>
			After setting up the .htaccess file, create a new file called <code>index.php</code>.  This is a bootstrap file.  
			The purpose of the index.php file is only to bootstrap Zend_Controller_Front, which should ideally be
			located outside of the document root.
		</para>

		<note>	
			The bootstrap file should be the only PHP file stored in the document root.			
		</note>

		<para>
			For security purposes, Zend very strong recommends not storing any PHP files in directories that are 
			accessible by the webserver (those that are beneath the document root).  While this is not possible in 
			every scenario, such as shared hosting, this should be considered a best practice and observed whenever possible.  
		</para>

		<para>
			Create the bootstrap file, <code>index.php</code>, in the document root to bootstrap Zend_Controller_Front:

			<programlisting role="php"><![CDATA[<?php
				
require_once 'Zend/Controller/Front.php';

Zend_Controller_Front::run('/path/to/your/controllers');

?>]]></programlisting>

			See the next section regarding the <code>/path/to/your/controllers</code>.

			As instructed in <code>README.txt</code>, the directory of the Zend Framework library must be in the
			<code>include_path</code>.  If this is not set in <code>php.ini</code>, <code>set_include_path()</code> 
			can be called in this file before the <code>require_once()</code>.
		</para>

		<note>
			At this time, we are presently investigating solutions will not require mod_rewrite installation.  We
			intend to suggest a configuration for systems both with and without mod_rewrite capabilities.  Also,
			please note this system is not bound to Apache or mod_rewrite specifically, any webserver with similar
			redirection capabilities should be sufficient.
		</note>
	</sect2>	
		
	<sect2 id="zend.controller.getting-started.directory-structure">
		<title>Directory Structure</title>
		
		<para>
			It is recommended that websites built with the Zend Framework share a common directory structure.  While
			this is not possible in every case, it is for many or perhaps most.  Choosing to conform to this structure
			will make your code more easily understandable by someone familiar with the conventions of the Zend Framework.
		</para>
		
		<para>	
			The suggested directory structure consists of both library directories (from Zend and elsewhere) 
			and application directories.

			<programlisting role="php"><![CDATA[
/application
  /models
  /views
  /controllers
/document_root
  /images
  /styles
  .htaccess
  index.php
/library
  /Zend
]]></programlisting>
		</para>
		
		<note>
			This section is not yet complete.  It is under heavy construction and is subject to change.
		</note>
	</sect2>	
		
	<sect2 id="zend.controller.overview.indexcontroller">
		<title>IndexController</title>

		<para>
			Every site must define a controller named <code>IndexController</code>.  This is the controller
			that is reached when no controller is specified in the URI, such as in this URI:

			<programlisting role="php"><![CDATA[
http://framework.zend.com/
]]></programlisting>
		</para>

		<para>
			The <code>IndexController</code> class must be stored in a file named <code>IndexController.php</code>, and
			this must be stored in the controllers directory.  The <code>IndexController</code> must subclass
			<code>Zend_Controller_Action</code>.  Here is a sample <code>IndexController</code>:

			<programlisting role="php"><![CDATA[<?php
				
require_once 'Zend/Controller/Action.php';

class IndexController extends Zend_Controller_Action 
{
	public function indexAction()
	{
		echo 'Hello from IndexController';
	}

	public function noRouteAction()
	{
		$this->_redirect('/');
	}
}

?>]]></programlisting>
			
			<note>
				This section is not yet complete.  It is under heavy construction and is subject to change.
			</note>			
		</para>
	</sect2>			
</sect1>