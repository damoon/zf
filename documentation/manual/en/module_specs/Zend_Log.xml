<sect1 id="zend.log.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Log</code> is a general purpose logging class.  <code>Zend_Log</code> is a static class that
        can not be instantiated directly.  It holds an array of instances of <code>Zend_Log</code>, one for
        each log used by the application.  Each logger instance uses an adapter that implements
        <code>Zend_Log_Adapter_Interface</code>.
    </para>

    <para>
        To use <code>Zend_Log</code>, <ulink url="http://php.net/include">include()</ulink> the
        <code>Zend_Log</code> class and any adapter classes that will be used. For example, if an application
        will log to both the console (PHP's output buffer) and text files, the following files would be
        included:

        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                  // Zend_Log base class
require_once 'Zend/Log/Adapter/Console.php';  // Console log adapter
require_once 'Zend/Log/Adapter/File.php';     // File log adapter
]]></programlisting>

        <code>Zend_Log</code> can be used in a simplified way for a single log, can be configured for multiple
        logs, and can also be used to log internal operations of many Zend Framework classes.
    </para>
</sect1>

<sect1 id="zend.log.simple-logging">
    <title>Logging to a Single Log</title>
    <para>
        A Logger is created by calling the <code>Zend_Log::registerLogger()</code> method with a
        <code>Zend_Log_Adapter_Interface</code> instance as an argument.

        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                // Zend_Log base class
require_once 'Zend/Log/Adapter/File.php';   // File log adapter

// Register the file logger
Zend_Log::registerLogger(new Zend_Log_Adapter_File('/logs/simple.txt'));
]]></programlisting>
    </para>

    <para>
        Messages are then sent to the log with <code>Zend_Log::log()</code>.

        <programlisting role="php"><![CDATA[
/**
 * Send a message to the log.  An optional second argument specifies the log
 * level.  If no level is supplied, LEVEL_DEBUG is assumed.
 */
Zend_Log::log('First logging message.');

/**
 * Log a severe message.
 */
Zend_Log::log('A serious error has occurred.', Zend_Log::LEVEL_SEVERE);
]]></programlisting>
    </para>
</sect1>

<sect1 id="zend.log.log-levels">
   <title>Log Levels</title>
   <para>
       <code>Zend_Log::log()</code> will log all messages as <code>LEVEL_DEBUG</code> unless a different level
       is supplied as the optional second argument.  The following levels are available as constants of the
       <code>Zend_Log</code> class.

       <programlisting role="php"><![CDATA[
LEVEL_DEBUG     = 1
LEVEL_WARNING   = 4
LEVEL_ERROR     = 8
LEVEL_SEVERE    = 16
]]></programlisting>
   </para>
</sect1>

<sect1 id="zend.log.advanced-logging">
   <title>Advanced Logging: Multiple Loggers</title>
   <para>
        <code>Zend_Log</code> supports logging to multiple log adapters.  It can either send a message to all
        logs, or target a message to a specific log.
   </para>

   <para>
        When creating multiple loggers, each log must be given a unique name.  Loggers are registered with the
        <code>registerLogger()</code> method, with the log name supplied as the optional second argument.
   </para>

   <para>
        In the example below, two loggers are created: one for the console, and one for a file.  They will be
        given the names <code>Console</code> and <code>File</code>, respectively.

        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                 // Zend_Log base class
require_once 'Zend/Log/Adapter/File.php';    // File log adapter
require_once 'Zend/Log/Adapter/Console.php'; // Console log adapter

Zend_Log::registerLogger(new Zend_Log_Adapter_File('/logs/framework.txt'), 'File');
Zend_Log::registerLogger(new Zend_Log_Adapter_Console(), 'Console');
]]></programlisting>
   </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->