<sect1 id="zend.session.basicusage">

    <title>Basic Usage</title>

    <para>
        <code>Zend_Session_Namespace</code> instances provide the primary API for manipulating session data in the Zend
        Framework. Namespaces are used to segregate all session data, although a default namespace exists for those who
        only want one namespace for all their session data. <code>Zend_Session</code> utilizes ext/session and its
        special <code>$_SESSION</code> superglobal as the storage mechanism for session state data. While
        <code>$_SESSION</code> is still available in PHP's global namespace, developers should refrain from directly
        accessing it, so that <code>Zend_Session</code> and <code>Zend_Session_Namespace</code> can most effectively and
        securely provide its suite of session related functionality.
    </para>

    <sect2 id="zend.session.basicexamples">

        <title>Tutorial Examples</title>

        <para>
            If no namespace is specified when instantiating Zend_Session, all data will be transparently stored in a
            namespace called "<code>Default</code>". The example below demonstrates use of this default namespace,
            showing how to count the number of times a user views pages on your website. To test this example, add the
            following code to your ZF bootstrap area:
        </para>

        <example>
            <title>Counting Page Views</title>
<programlisting role="php">
<![CDATA[<?php
    require_once 'Zend/Session.php';
    $defaultNamespace = new Zend_Session_Namespace('Default');
    $defaultNamespace->numberOfPageRequests++; // this will increment for each page load.
    echo "Page requests this session: ", $defaultNamespace->numberOfPageRequests;
?>]]></programlisting>
        </example>

        <para>
            One of the many benefits of Zend_Session_Namespace results when multiple modules use Zend_Session_Namespace
            and obtain data encapsulation for their session data. Zend_Session can be passed an optional $namespace
            argument in the constructor, which allows other components, modules, and developer specific code to be
            assured that their data is protected by a partition between data areas used by other components, modules,
            and developer code. Namespacing provides an effective and popular way to "secure" a subset of session state
            data against accidental changes. Namespace names are restricted to character sequences represented as
            non-empty PHP strings that do not begin with an underscore ('_') character. Only core components included in
            the Zend Framework should use namespace names starting with 'Zend_'.
        </para>

        <example>
            <title>New Way: Namespaces Avoid Collisions</title>
<programlisting role="php">
<![CDATA[<?php
    // in the Zend_Auth component
    require_once 'Zend/Session.php';
    $authNamespace = new Zend_Session_Namespace('Zend_Auth');
    $authNamespace->user = "myusername";

    // in a web services component
    $webServiceNamespace = new Zend_Session_Namespace('Some_Web_Service');
    $webServiceNamespace->user = "mywebusername";
?>]]></programlisting>
        </example>

        <para>
            The example above achieves the same effect as the code below, except that the session objects above preserve
            encapsulation of session data within their respective namespaces.
        </para>

        <example>
            <title>Old Way: PHP Session Access</title>
<programlisting role="php">
<![CDATA[<?php
    $_SESSION['Zend_Auth']['user'] = "myusername";
    $_SESSION['Some_Web_Service']['user'] = "mywebusername";
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.iteration">

        <title>Iterating Over Session Namespaces</title>

        <para>
            <code>Zend_Session_Namespace</code> provides the full
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html">IteratorAggregate interface</ulink>
            , including support for the <code>foreach</code> statement:
        </para>

        <example>
            <title>Session Iteration</title>
<programlisting role="php">
<![CDATA[<?php
    // Zend_Session is iteratable
    require_once 'Zend/Session.php';
    $aNamespace = new Zend_Session_Namespace('some_namespace_with_data_present');
    foreach ($aNamespace as $index => $value) {
        echo "aNamespace->$index = '$value';\n";
    }
?>]]></programlisting>
        </example>

    </sect2>

    <sect2 id="zend.session.accessors">

        <title>Accessors for Session Namespaces</title>

        <para>
            The usual accessors are available, via the __set(), __unset(), __isset(), and __get() magic methods. The
            magic methods should not be used directly, except from within a subclass of Zend_Session. Instead, use the
            normal operators to invoke these magic methods, such as:
        </para>

        <example>
            <title>Accessing Session Data</title>
<programlisting role="php">
<![CDATA[<?php
            $object->property = $value; echo
            (isset($object->property) ? 'set' : 'unset');
?>]]></programlisting>
        </example>

    </sect2>

</sect1>
