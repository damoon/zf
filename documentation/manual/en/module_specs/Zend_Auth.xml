<sect1 id="zend.auth.introduction">

    <title>Introduction</title>

    <para>
        Zend_Auth provides an API for authentication and includes concrete authentication adapters for
        common use case scenarios.
    </para>

    <note>
        <para>
            Zend_Auth currently includes a
            <link linkend="zend.auth.adapter.digest">digest authentication adapter</link>
            as a simple proof-of-concept for the design. Additional adapters are planned for development.
            Interested in using a particular adapter? Your
            <ulink url="http://framework.zend.com/wiki/x/qx4">voting for an adapter</ulink> and
            <ulink url="http://framework.zend.com/wiki/x/GgE">contributions</ulink> are most welcome!
        </para>
    </note>

    <para>
        Zend_Auth is concerned only with <emphasis role="strong">authentication</emphasis> and not with
        <emphasis role="strong">authorization</emphasis>. Authentication is loosely defined as determining
        whether an entity actually is what it purports to be (i.e., identification), based on some set of
        credentials. Authorization, the process of deciding whether to allow an entity access to, or to
        perform operations upon, other entities is outside the scope of Zend_Auth. For more information about
        authorization and access control with the Zend Framework, please see
        <link linkend="zend.acl">Zend_Acl</link>.
    </para>

    <sect2 id="zend.auth.introduction.adapters">

        <title>Adapters</title>

        <para>
            A Zend_Auth adapter is used to authenticate against a particular type of authentication service,
            such as LDAP, RDBMS, or file-based storage. Different adapters are likely to have vastly different
            options and behaviors, but some basic things are common among adapters. For example, accepting
            authentication credentials (including a purported identity), authenticating, and returning some
            result are common to Zend_Auth adapter.
        </para>

        <para>
            Each Zend_Auth authentication adapter class implements <code>Zend_Auth_Adapter_Interface</code>.
            This interface defines one method, <code>authenticate()</code>, that an adapter class implements
            for authentication purposes. Each adapter class must be prepared prior to calling
            <code>authenticate()</code>. This means that each adapter provides the ability to set up
            credentials (e.g., username and password) and to define values for adapter-specific options, such
            as database connection settings for a database table adapter.
        </para>

        <para>
            The following is an example authentication adapter that requires a username and password to be set
            for authentication. Other details, such as how the authentication service is queried, have been
            omitted for brevity:

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter/Interface.php';

class MyAuthAdapter implements Zend_Auth_Adapter_Interface
{
    /**
     * Sets username and password for authentication
     *
     * @return void
     */
    public function __construct($username, $password)
    {
        // ...
    }

    /**
     * Performs an authentication attempt
     *
     * @throws Zend_Auth_Adapter_Exception If authentication cannot be performed
     * @return Zend_Auth_Result
     */
    public function authenticate()
    {
        // ...
    }
}]]></programlisting>

            As indicated in its docblock, <code>authenticate()</code> must return an instance of
            <code>Zend_Auth_Result</code> (or a class derived from <code>Zend_Auth_Result</code>). If for some
            reason performing an authentication query is impossible, <code>authenticate()</code> should throw
            an exception that derives from <code>Zend_Auth_Adapter_Exception</code>.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.results">

        <title>Results</title>

        <para>
            Zend_Auth adapters return an instance of <code>Zend_Auth_Result</code> with
            <code>authenticate()</code> in order to represent the results of an authentication attempt.
            Adapters populate the <code>Zend_Auth_Result</code> object upon construction, so that the
            following three methods provide a basic set of operations common to the results of Zend_Auth
            adapters:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>isValid()</code> - returns true if and only if the result represents a
                        successful authentication attempt
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getIdentity()</code> - returns the identity of the authentication attempt
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>getMessages()</code> - returns an array of messages regarding a failed
                        authentication attempt
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.persistence">

        <title>Identity Persistence</title>

        <para>
            Authenticating a request that includes authentication credentials is useful per se, but it is also
            important to support maintaining the authenticated identity without having to present the
            authentication credentials with each request.
        </para>

        <para>
            HTTP is a stateless protocol, however, and techniques such as cookies and sessions have been
            developed in order to facilitate maintaining state across multiple requests in server-side web
            applications. <link linkend="zend.session">Zend_Session</link> is used by default within Zend_Auth
            to provide persistent storage of the identity from a successful authentication attempt using the
            PHP session.
        </para>

        <para>
            Upon a successful authentication attempt, <code>Zend_Auth::authenticate()</code> stores the
            identity from the authentication result into persistent storage. By default,
            <code>Zend_Auth</code> uses a storage class based on
            <link linkend="zend.session">Zend_Session</link>. The storage class may be changed by providing a
            different storage object to <code>Zend_Auth::setStorage()</code>.
        </para>

        <para>
            If automatic persistent storage of the identity is not appropriate for a particular use case, then
            developers may forgo using the <code>Zend_Auth</code> class altogether, instead using an adapter
            class directly.
        </para>

    </sect2>

    <sect2 id="zend.auth.introduction.using">

        <title>Using Zend_Auth</title>

        <para>
            There are two provided ways to use Zend_Auth adapters:
            <orderedlist>
            <listitem>
                <para>
                    indirectly, through <code>Zend_Auth::authenticate()</code>
                </para>
            </listitem>
            <listitem>
                <para>
                    directly, through the adapter's <code>authenticate()</code> method
                </para>
            </listitem>
            </orderedlist>
        </para>

        <para>
            The following example illustrates how to use a Zend_Auth adapter indirectly, through the use of
            the <code>Zend_Auth</code> class:

            <programlisting role="php"><![CDATA[<?php
// Get a reference to the Singleton instance of Zend_Auth
require_once 'Zend/Auth.php';
$auth = Zend_Auth::getInstance();

// Set up the authentication adapter
$authAdapter = new MyAuthAdapter($username, $password);

// Attempt authentication, saving the result
$result = $auth->authenticate($authAdapter);

if (!$result->isValid()) {
    // Authentication failed; print the reasons why
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Authentication succeeded; the identity ($username) is stored in the session
    // $result->getIdentity() === $auth->getIdentity()
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

        <para>
            Once authentication has been attempted in a request, as in the above example, it is a simple
            matter to check whether a successfully authenticated identity exists:
            <programlisting role="php"><![CDATA[<?php
$auth = Zend_Auth::getInstance();
if ($auth->hasIdentity()) {
    // Identity exists; get it
    $identity = $auth->getIdentity();
}]]></programlisting>
        </para>

        <para>
            To remove an identity from persistent storage, simply use the <code>clearIdentity()</code> method.
            This typically would be used for implementing an application "logout" operation:
            <programlisting role="php"><![CDATA[<?php
Zend_Auth::getInstance()->clearIdentity();]]></programlisting>
        </para>

        <para>
            When the automatic use of persistent storage is inappropriate for a particular use case, a
            developer may simply bypass the use of the <code>Zend_Auth</code> class, using an adapter class
            directly. Direct use of an adapter class involves configuring and preparing an adapter object and
            then calling its <code>authenticate()</code> method. Adapter-specific details are discussed in the
            documentation for each adapter. The following example directly utilizes
            <code>MyAuthAdapter</code>:

            <programlisting role="php"><![CDATA[<?php
// Set up the authentication adapter
$authAdapter = new MyAuthAdapter($username, $password);

// Attempt authentication, saving the result
$result = $authAdapter->authenticate();

if (!$result->isValid()) {
    // Authentication failed; print the reasons why
    foreach ($result->getMessages() as $message) {
        echo "$message\n";
    }
} else {
    // Authentication succeeded
    // $result->getIdentity() === $username
}]]></programlisting>
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->