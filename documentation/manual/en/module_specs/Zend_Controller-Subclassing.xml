<sect1 id="zend.controller.subclassing">
    <title>Subclassing</title>

    <sect2 id="zend.controller.subclassing.introduction">
        <title>Introduction</title>
        <para>
            The <code>Zend_Controller</code> system was built with extensibility
            in mind, either by subclassing the existing classes or writing new
            classes that implement the interfaces
            <code>Zend_Controller_Router_Interface</code> and
            <code>Zend_Controller_Dispatcher_Interface</code> or extend the
            classes <code>Zend_Controller_Request_Abstract</code>,
            <code>Zend_Controller_Response_Abstract</code>, and
            <code>Zend_Controller_Action</code>.
        </para>

        <para>
            Possible reasons for subclassing include:

            <itemizedlist>
                <listitem>
                    <para>
                        The existing URI routing system is not suitable in some
                        way, such as integrating into an existing website that
                        uses its own conventions for routing that do not mesh
                        with the routing mechanism provided with the Zend
                        Framework.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You need to implement routing for something completely
                        different.  The <code>Zend_Controller_Router</code>
                        class only deals with URIs.  It's possible and likely
                        that you might want to use the MVC pattern for
                        developing another type of program, such as a console or
                        GUI application.  In the case of a console application,
                        a custom request object could process command line
                        arguments.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The mechanism provided by
                        <code>Zend_Controller_Dispatcher</code> is not suitable.
                        The default configuration assumes a convention that
                        controllers are classes and actions are methods of those
                        classes.  However, there are many other strategies for
                        doing this.  One example would be where controllers are
                        directories and actions are files within those
                        directories.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You wish to provide additional capabilities that will be
                        inherited by all of your controllers.  For example,
                        <code>Zend_Controller_Action</code> does not integrate
                        with <code>Zend_View</code> by default.  However, you
                        could extend your own controller to do this, and using
                        it would not require modifying the supplied
                        <code>Zend_Controller_Router</code> or
                        <code>Zend_Controller_Dispatcher</code>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You wish to log application exceptions when caught and
                        redirect to a generic error page. Extending
                        <code>Zend_Controller_Response_Http</code>, you could
                        modify <code>__toString()</code> to check for registered
                        exceptions, log them, and then redirect to an error
                        page.
                    </para>
                </listitem>
            </itemizedlist>

            Please be careful when overriding significant parts of the system,
            particularly the dispatcher.  One of the advantages of
            <code>Zend_Controller</code> is that it establishes common
            conventions for building applications.  If too much of this default
            behavior is changed, some of these advantages are lost.  However,
            there are many different needs and one solution can't fit them all,
            so the freedom is provided if needed.
        </para>
    </sect2>

    <sect2 id="zend.controller.subclassing.conventions">
        <title>Conventions</title>

        <para>
            When subclassing any of the Zend_Controller classes, you are
            strongly encouraged to follow these conventions for naming or
            storing files.  Doing so will ensure that another programmer who is
            familiar with the Zend Framework will be able to understand your
            project easily.
        </para>

        <sect3 id="zend.controller.subclassing.prefix">
            <title>Prefix</title>

            <para>
                Classes included with the Zend Framework follow a convention
                where every class is prefixed by "Zend_".  This is the prefix.
                We recommend that you name all of your classes in the same way,
                e.g. if your company name is Widget, Inc., the prefix might be
                "Widget_".
            </para>
        </sect3>

        <sect3 id="zend.controller.directory.layout">
            <title>Directory Layout</title>

            <para>
                The <code>Zend_Controller</code> classes are stored in the
                library directory as follows:
            </para>
    <programlisting role="php"><![CDATA[
/library
  /Zend
    /Controller
      Action.php
      Dispatcher.php
      Router.php
]]></programlisting>
            <para>
                When subclassing <code>Zend_Controller</code> classes, it is
                recommended that the new classes be stored in an identical
                structure under your prefix.  This will make them easy to find
                for someone during that learning process of reviewing the code
                for your project.
            </para>

            <para>
                For example, a project from Widget, Inc. which implements only a
                custom router might look like this:
            </para>
<programlisting role="php"><![CDATA[
/library
  /Zend
  /Widget
    /Controller
      Router.php
      README.txt
]]></programlisting>
            <para>
                Notice in this example that the <code>Widget/Controller/</code>
                directory mirrors the <code>Zend/Controller/</code> directory
                wherever possible.  In this case, it provides the class
                <code>Widget_Controller_Router</code>, which would be either a
                subclass or replacement for <code>Zend_Controller_Router</code>
                implementing <code>Zend_Controller_Router_Interface</code>.
            </para>

            <para>
                Also, notice in the example above that a <code>README.txt</code>
                file has been placed in <code>Widget/Controller/</code>.  Zend
                strongly encourages you to document your projects through
                supplying separate tests and documentation for customers.
                However, we encourage you to also place a simple
                <code>README.txt</code> file right in the directory to briefly
                explain your changes and how they work.
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.request.abstract">
        <title>Request Abstract</title>

        <para>
            The abstract <code>Zend_Controller_Request_Abstract</code> defines a
            handful of methods:
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * @return string
     */
    public function getControllerName();

    /**
     * @param string $value 
     * @return self
     */
    public function setControllerName($value);

    /**
     * @return string
     */
    public function getActionName();

    /**
     * @param string $value 
     * @return self
     */
    public function setActionName($value);

    /**
     * @return string
     */
    public function getControllerKey();

    /**
     * @param string $key 
     * @return self
     */
    public function setControllerKey($key);

    /**
     * @return string
     */
    public function getActionKey();

    /**
     * @param string $key 
     * @return self
     */
    public function setActionKey($key);

    /**
     * @param string $key 
     * @return mixed
     */
    public function getParam($key);

    /**
     * @param string $key 
     * @param mixed $value 
     * @return self
     */
    public function setParam($key, $value);

    /**
     * @return array
     */
     public function getParams();

    /**
     * @param array $array 
     * @return self
     */
    public function setParams(array $array);

    /**
     * @param boolean $flag 
     * @return self
     */
    public function setDispatched($flag = true);

    /**
     * @return boolean
     */
    public function isDispatched();
}
]]></programlisting>

        <para>
            The request object is a container for the request environment. The
            controller chain really only needs to know how to set and retrieve the
            controller, action, optional parameters, and dispatched status. By
            default, the request will search its own parameters using the
            controller or action keys in order to determine the controller and
            action.
        </para>
    </sect2>

    <sect2 id="zend.controller.router.interface">
        <title>Router Interface</title>

        <para>
            The interface <code>Zend_Controller_Router_Interface</code> provides
            a definition for only one method:
        </para>
        <programlisting role="php"><![CDATA[<?php

  /**
   * @param  Zend_Controller_Request_Abstract $request
   * @throws Zend_Controller_Router_Exception
   * @return Zend_Controller_Request_Abstract
   */
  public function route(Zend_Controller_Request_Abstract $request);

?>]]></programlisting>
        <para>
            Routing only occurs once: when the request is first received into
            the system.  The purpose of the router is to determine the
            controller, action, and optional parameters based on the request
            environment, and then set them in the request.  The request object
            is then passed to the dispatcher.  If it is not possible to map a
            route to a dispatch token, the router should do nothing to the
            request object.
        </para>
    </sect2>

    <sect2 id="zend.controller.dispatcher.interface">
        <title>Dispatcher Interface</title>

        <para>
            <code>Zend_Controller_Front</code> will first call the router to
            determine the first dispatchable action in the request. It then
            enters a dispatch loop.
        </para>

        <para>
            In the loop, it first sets the request object's dispatched flag and
            then dispatches the request (instantiate the controller, call its
            action). If the action method (or a pre/postDispatch plugin) resets
            the request object's dispatched flag, the front controller will do
            another iteration of the dispatch loop with whatever action is
            currently set in the request object. This allows for actions to be
            processed sequentially until all work has been done.
        </para>
            
        <para>
            The interface <code>Zend_Controller_Dispatcher_Interface</code>
            provides definitions for two methods:
        </para>
        <programlisting role="php"><![CDATA[<?php

/**
 * @param  Zend_Controller_Request_Abstract $request
 * @return boolean
 */
public function isDispatchable(Zend_Controller_Request_Abstract $request);

?>]]></programlisting>
        <para>
            <code>isDispatchable()</code> checks if a request is
            dispatchable.  If it is, it returns <code>TRUE</code>.  Otherwise,
            it returns <code>FALSE</code>.  The definition of what is
            dispatchable is left to the class implementing the interface.  In
            the case of the default implementation,
            <code>Zend_Controller_Dispatcher</code>, it means that the
            controller file exists, the class exists within the file, and the
            action method exists within the class.
        </para>
        <programlisting role="php"><![CDATA[<?php

/**
 * @param  Zend_Controller_Request_Abstract $route
 * @return Zend_Controller_Request_Abstract
 */
public function dispatch(Zend_Controller_Request_Abstract $request);

?>]]></programlisting>
        <para>
            <code>dispatch()</code> is where the work gets done.  This method
            must execute the action of the controller.  It must return a
            request object.
        </para>
    </sect2>

    <sect2 id="zend.controller.action">
        <title>Action Controller</title>

        <para>
            The Action Controller handles the various actions of an application.
            This abstract class provides the following methods:
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * @param Zend_Controller_Request_Abstract $request Request object
     * @param Zend_Controller_Response_Abstract $response Response object
     * @param array $args Optional associative array of
     * configuration/environment settings
     */
    public function __construct(Zend_Controller_Request_Abstract $request, Zend_Controller_Response_Abstract $response, array $args = array());

    /**
     * @return void
     */
    public function init();

    /**
     * @return Zend_Controller_Request_Abstract
     */
    public function getRequest();

    /**
     * @param Zend_Controller_Request_Abstract $request 
     * @return self
     */
    public function setRequest(Zend_Controller_Request_Abstract $request);

    /**
     * @return Zend_Controller_Response_Abstract
     */
    public function getResponse();

    /**
     * @param Zend_Controller_Response_Abstract $response 
     * @return self
     */
    public function setResponse(Zend_Controller_Response_Abstract $response);

    /**
     * @return array
     */
    public function getInvokeArgs();

    /**
     * @return mixed
     */
    public function getInvokeArg($name);

    public function preDispatch();

    public function postDispatch();

    /**
     * @param string $methodName
     * @param array $args
     */
    public function __call($methodName, $args);

    /**
     * @param null|Zend_Controller_Request_Abstract $request Optional request 
     * object to use
     * @param null|Zend_Controller_Response_Abstract $response Optional response 
     * object to use
     * @return Zend_Controller_Response_Abstract
     */
    public function run(Zend_Controller_Request_Abstract $request = null, Zend_Controller_Response_Abstract $response = null);
]]></programlisting>

        <para>
            The constructor registers the request and response objects with the
            object, as well as an array of any additional configuration
            arguments. This last array consists of parameters registered with
            the Front Controller's <code>setParam()</code> or 
            <code>setParams()</code> methods. Once done, the constructor passes
            handling to <code>init()</code>.
        </para>

        <para>
            While you may override the constructor, we suggest putting any
            initialization handling into <code>init()</code> to ensure the
            request and response objects are properly registered.
        </para>

        <para>
            Any configuration arguments passed to the constructor are later
            accessible using <code>getInvokeArg()</code> and
            <code>getInvokeArgs()</code>. The recommendation is to use such
            invocation arguments to pass in objects such as view,
            authentication/authorization, or registry objects. For example:
        </para>

        <programlisting role="php"><![CDATA[
$front = Zend_Controller_Front::getInstance();
$front->setParam('view', new Zend_View())
      ->setControllerDirectory($config->controller->directory);
$response = $front->dispatch();

// In a sample action controller:
class FooController extends Zend_Controller_Action
{
    protected $_view = null;

    public function init()
    {
        $this->_view = $this->getInvokeArg('view');
    }
}
]]></programlisting>

        <para>
            When an action is dispatched, processing may be performed before and
            after the action using the <code>preDispatch()</code> and
            <code>postDispatch()</code> methods, respectively. By default, they
            are empty and do nothing.
        </para>

        <para>
            The <code>__call()</code> method will handle any unregistered
            actions in the class. By default, it throws an exception if the
            action is not defined. This should only ever occur if the default
            action method is not defined.
        </para>

        <para>
            The default naming convention for action methods is lowercaseAction,
            where 'lowercase' specifies the name of the action, and 'Action'
            specifies that the method is an action method. Thus,
            <code>http://framework.zend.com/foo/bar</code> will call
            <code>FooController::barAction()</code>.
        </para>

        <para>
            Action controllers may also be used as Page Controllers. Most
            typical usage would be as follows:
        </para>

        <programlisting role="php"><![CDATA[
$controller = new FooController(
    new Zend_Controller_Request_Abstract(),
    new Zend_Controller_Response_Abstract()
);
$controller->run();
]]></programlisting>
        
        <note>
            <title>Use Front-/Action Controller</title>
            <para>
                We recommend using the Front Controller/Action Controller
                combination instead of the Page Controller paradigm to encourage
                writing applications that will inter-operate.
            </para>
        </note>
    </sect2>
    
    <sect2 id="zend.controller.response.abstract">
        <title>Response Object</title>

        <para>
            The Response Object collects content and headers from the various
            actions called and returns them to the client. It has the following
            methods:
        </para>

        <programlisting role="php"><![CDATA[
    /**
     * @param string $name Header name
     * @param string $value Header value
     * @param boolean $replace Whether or not to replace headers with the same
     * name already registered with the object
     * @return self
     */
    public function setHeader($name, $value, $replace = false);

    /**
     * @return array
     */
    public function getHeaders();

    /**
     * @return void
     */
    public function clearHeaders();

    /**
     * Sends all headers
     * @return void
     */
    public function sendHeaders();

    /**
     * @param string $content
     * @return self
     */
    public function setBody($content);

    /**
     * @param string $content
     * @return self
     */
    public function appendBody($content);

    /**
     * @return string
     */
    public function getBody();

    /**
     * echoes body content
     * @return void
     */
    public function outputBody();

    /**
     * @param Exception $e 
     * @return self
     */
    public function setException(Exception $e);

    /**
     * @return null|Exception
     */
    public function getException();

    /**
     * @return boolean
     */
    public function isException();

    /**
     * @param boolean $flag
     * @return boolean
     */
    public function renderExceptions($flag = null);

    /**
     * @return string
     */
    public function __toString();
]]></programlisting>

        <para>
            <code>setBody()</code> will replace all body content; we encourage using
            <code>appendBody()</code> instead. <code>__toString()</code> should
            render any content and send all headers.
        </para>

        <para>
            The response object is also where action controller exceptions are
            finally caught and registered (unless
            <code>Zend_Controller_Front::throwExceptions()</code> has been
            enabled. <code>isException()</code> should return a boolean
            indicating whether or not this has occurred.
            <code>renderExceptions()</code> should be used to indicate whether
            <code>__toString()</code> will render exception output if an
            exception was trapped.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
