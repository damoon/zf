<sect1 id="zend.search.searching">
    <title>Searching an Index</title>

    <sect2 id="zend.search.searching.query-parser">
        <title>Building Queries</title>

        <para>
            There are two ways to search the index. The first method uses
            Query Parser to construct query from a string. The second provides
            the ability to create your own queries through the Zend_Search_Lucene API.
        </para>

        <para>
        Before choosing to use the provided Query Parser, please consider
        the following:

            <orderedlist>
                <listitem>
                    <para>
                        If you are programmatically generating a query string and then parsing
                        it with the query parser then you should seriously consider building
                        your queries directly with the query API. In other words, the query
                        parser is designed for human-entered text, not for program-generated text.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Untokenized fields are best added directly to queries and not through
                        the query parser. If a field's values are generated programmatically
                        by the application, then the query clauses for this field should also
                        be constructed programmatically.
                        An analyzer, which the query parser uses, is designed to convert
                        human-entered text to terms. Program-generated values, like dates,
                        keywords, etc., should be consistently program-generated.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        In a query form, fields that are general text should use the query parser.
                        All others, such as date ranges, keywords, etc., are better added directly
                        through the query API. A field with a limited set of values that can be
                        specified with a pull-down menu should not be added to a query string
                        that is subsequently parsed but instead should be added as a TermQuery clause.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Boolean queries allow to mix several other queries into new one.
                        Thus it's the best way to add some additional criteria to user search, defined by
                        a query string.
                    </para>
                </listitem>
            </orderedlist>

        </para>

        <para>
            Both ways use the same API method to search through the index:
        </para>

        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$index->find($query);

?>]]></programlisting>
        <para>
            The <code>Zend_Search_Lucene::find()</code> method determines input type automatically and
            uses query parser to construct appropriate Zend_Search_Lucene_Search_Query object
            from a string.
        </para>

        <para>
            It is important to note that query parser uses standard analyzer to tokenize separate parts of query string.
            Thus all transformations, whech are done on indexed text are also done on query string entries.
        </para>
        <para>
            It may be transforming to lower case to make search case-insensitive, removing stop-words, stamming and
            mauch more other things.
        </para>
        <para>
            As opposed to it, API method doesn't transform or filter input terms. Thus it's more suitable for
            computer generated or untokenized fields.
        </para>
    </sect2>

    <sect2 id="zend.search.searching.sorting">
        <title>Search Result Sorting</title>
        <para>
            Search result is sorted by score by default. You change this by setting a sort field (or fields), sort type
            and sort order parameters.
        </para>

        <para>
            <code>$index->find()</code> call may take several optional parameters:
            <programlisting role="php"><![CDATA[
$index->find($query [, $sortField [, $sortType [, $sortOrder]]] [, $sortField2 [, $sortType [, $sortOrder]]] ...);
]]></programlisting>
        </para>

        <para>
            <code>$sortField</code> is a name of stored field to sort result.
        </para>

        <para>
            <code>$sortType</code> may be omitted or take values
            <code>SORT_REGULAR</code> (compare items normally, default value),
            <code>SORT_NUMERIC</code> (compare items numerically),
            <code>SORT_STRING</code> (compare items as strings).
        </para>

        <para>
            <code>$sortOrder</code> may be omitted or take values
            <code>SORT_ASC</code> (sort in ascending order, default value),
            <code>SORT_DESC</code> (sort in descending order).
        </para>

        <para>
            Exampes:
            <programlisting role="php"><![CDATA[
$index->find($query, 'quantity', SORT_NUMERIC, SORT_DESC);
]]></programlisting>
            <programlisting role="php"><![CDATA[
$index->find($query, 'fname', SORT_STRING, 'lname', SORT_STRING);
]]></programlisting>
            <programlisting role="php"><![CDATA[
$index->find($query, 'name', SORT_STRING, 'quantity', SORT_NUMERIC, SORT_DESC);
]]></programlisting>
        </para>

        <para>
            Please be careful when using non-default search order.
            It needs to completely retrive documents from the index and may drammatically slow down search performance.
        </para>
</sect2>

    <sect2 id="zend.search.searching.results">
        <title>Search Results</title>
        <para>
            The search result is an array of Zend_Search_Lucene_Search_QueryHit objects.  Each of these has
            two properties: <code>$hit->document</code> is a document number within
            the index and <code>$hit->score</code> is a score of the hit in
            a search result. Result is ordered by score (top scores come first).
        </para>

        <para>
            The Zend_Search_Lucene_Search_QueryHit object also exposes each field of the Zend_Search_Lucene_Document found by
            the hit as a property of the hit.  In this example, a hit is returned and
            the corresponding document has two fields: title and author.
        </para>
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$hits = $index->find($query);

foreach ($hits as $hit) {
    echo $hit->score;
    echo $hit->title;
    echo $hit->author;
}

?>]]></programlisting>

        <para>
        Optionally, the original Zend_Search_Lucene_Document object can be returned from the
        Zend_Search_Lucene_Search_QueryHit.

        You can retrieve stored parts of the document by using the <code>getDocument()</code>
        method of the index object and then get them by
        <code>getFieldValue()</code> method:
        </para>
        <programlisting role="php"><![CDATA[<?php

require_once('Zend/Search/Lucene.php');

$index = new Zend_Search_Lucene('/data/my_index');

$hits = $index->find($query);
foreach ($hits as $hit) {
    // return Zend_Search_Lucene_Document object for this hit
    echo $document = $hit->getDocument();

    // return a Zend_Search_Lucene_Field object
    // from the Zend_Search_Lucene_Document
    echo $document->getField('title');

    // return the string value of the Zend_Search_Lucene_Field object
    echo $document->getFieldValue('title');

    // same as getFieldValue()
    echo $document->title;
}

?>]]></programlisting>
        <para>
        The fields available from the Zend_Search_Lucene_Document object are determined at
        the time of indexing.  The document fields are either indexed, or
        index and stored, in the document by the indexing application
        (e.g. LuceneIndexCreation.jar).
        </para>

        <para>
        Note that the document identity ('path' in our example) is also stored
        in the index and must be retrieved from it.
        </para>

    </sect2>


    <sect2 id="zend.search.searching.results-scoring">
        <title>Results Scoring</title>
        <para>
            Zend_Search_Lucene uses the same scoring algorithms as Java Lucene.
            Search results are ordered by score. Hits with greater score come first, and
            documents having higher scores match the query more than documents having lower scores.
        </para>

        <para>
            Roughly speaking, search hits that contain the searched term or phrase more frequently
            will have a higher score.
        </para>

        <para>
            A scores can be retrieved by accessing the <code>score</code> property of a hit:
        </para>
        <programlisting role="php"><![CDATA[<?php
$hits = $index->find($query);

foreach ($hits as $hit) {
    echo $hit->id;
    echo $hit->score;
}

?>]]></programlisting>

        <para>
            Zend_Search_Lucene_Search_Similarity class is used to calculate score.
            See <link linkend="zend.search.extending.scoring">Extensibility. Scoring Algorithms</link> section for details.
        </para>

    </sect2>

</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
