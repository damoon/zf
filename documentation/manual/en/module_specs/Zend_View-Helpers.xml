<sect1 id="zend.view.helpers">
    
    <title>View Helpers</title>
    
    <para>
        In your view scripts, often it is necessary to perform certain
        complex functions over and over; e.g., formatting a date,
        generating form elements, or displaying action links.  You can
        use helper classes to perform these behaviors for you.
    </para>
    
    <para>
        To use a helper in your view script, call it using
        $this->helperName(). Behind the scenes, Zend_View will load the
        Zend_View_Helper_HelperName class, create an object instance of
        it, and call its helperName() method.  The object instance is
        persistent within the Zend_View instance, and is reused for all
        future calls to $this->helperName().
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Initial Helpers</title>
        
        <para>
            Zend_View comes with an initial set of helper classes, all of
            which relate to form element generation.  They each perform the
            appopriate output escaping automatically.  They are:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): Creates an &lt;input
                type="button" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): Creates
                an &lt;input type="checkbox" /&gt; element.  The
                $options param is an array where the first value is the
                "checked" value, and the second is the "unchecked" value
                (the defaults are '1' and '0').  If $value matches the
                "checked" value, the box will be checked for you.
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): Creates an &lt;input
                type="file" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): Creates an &lt;input
                type="hidden" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): Creates an &lt;input
                type="password" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): Creates a
                series of &lt;input type="radio" /&gt; elements, one for
                each of the $options elements.  In the $options array, the
                element key is the radio value, and the element value is the
                radio label.  The $value radio will be preselected for you.
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): Creates an &lt;input
                type="reset" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): Creates a
                &lt;select&gt;...&lt;/select&gt; block, with one
                &lt;option&gt;one for each of the $options elements.  In
                the $options array, the element key is the option value,
                and the element value is the option label.  The $value
                option(s) will be preselected for you.
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): Creates an &lt;input
                type="submit" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): Creates an &lt;input
                type="text" /&gt; element.
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): Creates a
                &lt;textarea&gt;...&lt;/textarea&gt; block.
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Using these in your view scripts is very easy, here is an example.
            Note that you all you need to do is call them; they will load
            and instantiate themselves as they are needed.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// inside your view script, $this refers to the Zend_View instance.
// 
// say that you have already assigned a series of select options under
// the name $countries as array('us' => 'United States', 'il' =>
// 'Israel', 'de' => 'Germany').
?>
<form action="action.php" method="post">
    <p><label>Your Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Your Country:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Would you like to opt in?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no')) ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            The resulting output from the view script will look something like this:
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Your Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Your Country:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Would you like to opt in?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Helper Paths</title>
        
        <para>
            As with view scripts, your controller can specify a stack of
            paths for Zend_View to search for helper classes. By
            default, Zend_View looks in "Zend/View/Helper/*" for helper
            classes. You can tell Zend_View to look in other locations
            using the setHelperPath() and addHelperPath() methods.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            In fact, you can "stack" paths using the addHelperPath()
            method. As you add paths to the stack, Zend_View will look
            at the most-recently-added path for the requested helper
            class.  This allows you to add to (or even override) the
            initial distribution of helpers with your own custom
            helpers.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// now when you call $this->helperName(), Zend_View will look first for
// "/other/path/to/helpers/HelperName.php", then for
// "/path/to/some/helpers/HelperName", and finally for
// "Zend/View/Helpers/HelperName.php".
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Writing Custom Helpers</title>
        
        <para>
            Writing custom helpers is easy; just follow these rules:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                The class name must be Zend_View_Helper_*, where * is
                the helper name itself.  E.g., if you were writing a
                helper called "specialPurpose", the class name would be
                "Zend_View_Helper_SpecialPurpose" (note the
                capitalization).
            </para></listitem>
            
            <listitem><para>
                The class must have a public method that matches the
                helper name; this is the method that will be called when
                your template calls "$this->specialPurpose()".  In our
                "specialPurpose" helper example, the required method
                declaration would be "public function specialPurpose()". 
            </para></listitem>
            
            <listitem><para>
                In general, the class should not echo or print or otherwise
                generate output.  Instead, it should return values to be
                printed or echoed.  The returned values should be escaped
                appropriately.
            </para></listitem>
            
            <listitem><para>
                The class must be in file named after the helper method.
                Again using our "specialPurpose" helper example, the file
                has to be named "SpecialPurpose.php".
            </para></listitem>
        </itemizedlist>
        
        <para>
            Place the helper class file somewhere in your helper path stack,
            and Zend_View will automatically load, instantiate, persist,
            and execute it for you.
        </para>
        
        <para>
            Here is an example of our SpecialPurpose helper code:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "I have seen 'The Jerk' {$this->_count} time(s).";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            Then in a view script, you can call the SpecialPurpose helper
            as many times as you like; it will be instantiated once, and
            then it persists for the life of that Zend_View instance.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// remember, in a view script, $this refers to the Zend_View instance.
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            The output would look something like this:
        </para>
        <programlisting role="php"><![CDATA[I have seen 'The Jerk' 1 time(s).
I have seen 'The Jerk' 2 time(s).
I have seen 'The Jerk' 3 time(s).]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->