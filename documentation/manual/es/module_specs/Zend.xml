<sect1 id="zend.introduction">
    <title>Introducción</title>
    <para>
    La clase Zend es la clase fundacional del Framework Zend. Esta
    clase evoluciona el framework hacia el principio DRY (Don't Repeat
    Yourself - No lo repitas tú mismo). Contiene sólo métodos estáticos, y estos métodos
    contienen funcionalidad que es requerida por muchos componentes en el Framework Zend.
    </para>
</sect1>

<sect1 id="zend.loadfile">
    <title>Zend::loadFile()</title>

    <para>
    <code>Zend::loadFile()</code> carga un fichero PHP, que puede contener cualquier código PHP. Es un wrapper para la
    función de PHP <ulink url="http://php.net/include"><code>include()</code></ulink> que lanza
    <code>Zend_Exception</code> en caso de fallo.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadFile($filename, $dirs=null, $once=false)

?>]]></programlisting>

    <para>El argumento <code>$filename</code> especifica el nombre de fichero a cargar, que no debe contener
    ninguna información de ruta.  Un chequeo de seguridad se realiza sobre <code>$filename</code>. 
    <code>$filename</code> puede contener sólo caracteres alfanuméricos, guiones ("-"), subrayados ("_"), o
    puntos (".").  No existe esta restricción en el argumento <code>$dirs</code>.
    </para>

    <para>El argumento <code>$dirs</code> especifica directorios donde buscar el fichero.  Si es
    <code>NULL</code>, sólo se buscará en <code>include_path</code>.  Si es una cadena o una matriz,
    se buscará en el directorio o directorios especificados, y después en
    <code>include_path</code>.
    </para>

    <para>
    El argumento <code>$once</code> es un boleano que especifica si utilizar las funciones
    PHP <ulink url="http://php.net/include"><code>include()</code></ulink> o <ulink
    url="http://php.net/include_once"><code>include_once()</code></ulink> para cargar el fichero.
    </para>
</sect1>

<sect1 id="zend.loadclass">
    <title>Zend::loadClass()</title>
    <para>
    <code>Zend::loadClass()</code> carga un fichero PHP cuyo nombre está formateado como
    "<code>$className.php</code>", y chequea la existencia de la clase <code>$className</code>.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadClass($class, $dirs)

?>]]></programlisting>

    <para>
    Si el fichero no se encuentra o la clase no existe después de cargarlo, una excepción <code>Zend_Exception</code> es
    lanzada. <code>Zend::loadFile()</code> se utiliza para cargar, y el argumento <code>$dirs</code> es pasado
    directamente a ella..
    </para>

    <para>
    Si preguntas por una clase con subrayados en el nombre, y <code>$dirs</code> es null (por defecto),
    <code>Zend::loadClass()</code> auto-descubrirá el <code>$dirs</code> del nombre de la clase
    convirtiendo los caracteres de subrayado a separadores de directorios.  Por ejemplo, si <code>$class</code> es
    <code>Zend_Example_Class</code>, esto se mapeará a un camino en la forma <code>Zend/Example/Class.php</code>.
    </para>
</sect1>

<sect1 id="zend.loadinterface">
    <title>Zend::loadInterface()</title>
    <para>
    <code>Zend::loadInterface()</code> trabaja exactamente igual <code>Zend::loadClass()</code>, sólo que carga
    un interfaz en vez de una clase.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
loadInterface($interface, $dirs)

?>]]></programlisting>

    <para>
    El método <code>Zend::loadClass()</code> no puede utilizarse para carar interfaces porque la función
    PHP <ulink url="http://php.net/class_exists"><code>class_exists()</code></ulink> no puede chequear
    interfaces (desde PHP 5.0.2).  Usa entonces <code>Zend::loadInterface()</code>.
    </para>

    <para>
    Si preguntas por un interface con subrayados en el nombre, y <code>$dirs</code> es null (por defecto),
    <code>Zend::loadInterface()</code> auto-descubrirá el <code>$dirs</code> del nombre del interfaz
    convirtiendo los caracteres de subrayado a separadores de directorios.  Por ejemplo, si <code>$interface</code> es
    <code>Zend_Example_Interface</code>, esto se mapeará a un camino en la forma <code>Zend/Example/Interface.php</code>.
    </para>
</sect1>

<sect1 id="zend.isreadable">
    <title>Zend::isReadable()</title>

    <para>Devuelve <code>TRUE</code> si un fichero puede leerse, FALSE en otro caso.</para>

    <programlisting role="php"><![CDATA[<?php
	
isReadable($filename)

?>]]></programlisting>

    <para>El argumento <code>$filename</code> especifica el fichero a chequear, que puede
    contener información del camino.  Este método es un wrapper para la función PHP
    <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>.  La función PHP
    no busca el <code>include_path</code>, mientras que <code>Zend::isReadable()</code> sí lo hace.
    </para>
</sect1>

<sect1 id="zend.dump">
    <title>Zend::dump()</title>

    <para>
    <code>Zend::dump()</code> imprime y/o devuelve información sobre una expresión.  Es un wrapper
    para la función PHP <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>. Esta
    envuelve la salida con tags (X)HTML <code>&lt;pre&gt;</code> y opcionalmente añade previamente una etiqueta.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
dump($var, $label=null, $echo=true)

?>]]></programlisting>

    <para>
    El argumento <code>$var</code> especifica la expresión o variable para cual la información será
    obtenida.
    </para>

    <para>
    La etiqueta <code>$label</code> es un texto arbitrario para añadir previamnte a la salida de
    <code>Zend::dump()</code>.  Esto es útil cuando descarga varias variables en una única pantalla.
    </para>

    <para>El boleano <code>$echo</code> controla si la salida de <code>Zend::dump()</code> es impresa
    o no.  Si es <code>TRUE</code>, la salida será impresa.  Independientemente del estado de
    <code>$echo</code>, la salida es siempre devuelta.
    </para>
</sect1>


<sect1 id="zend.register">
    <title>Zend::register()</title>

    <para>
    Registra un objeto en el almacén del objeto.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
register($name, $object)

?>]]></programlisting>

    <para>
    El registro es un mecanismo para proporcionar instancias singleton de objetos al espacio de aplicación.  Al
    almacenar el objeto en el registro una vez, y después recuperarlo del registro si es necesario
    , la misma instancia es siempre devuelta.
    </para>

    <para>
    El argumento <code>$name</code> es una cadena arbitraria para nombrar el objeto en el almacén. Este nombre
    será proporcionado a <code>Zend::registry()</code> para recuperar el objeto de nuevo.
    </para>

    <para>
    El argumento <code>$name</code> debe ser una cadena, sólo objetos pueden ser almacenados en el registro, un objeto
    no puede nunca ser eliminado del registro, y una instancia puede sólo ser almacenada un vez en el registro.
    En caso de no obedecer estas reglas una excepción <code>Zend_Exception</code> será lanzada.
    </para>
</sect1>

<sect1 id="zend.registry">
    <title>Zend::registry()</title>

    <para>
    Devuelve un objeto del registro o lista todos los objetos del registro.
    </para>

    <programlisting role="php"><![CDATA[<?php
	
registry($name=null)

?>]]></programlisting>

    <para>
    Si el argumento <code>$name</code> es <code>NULL</code>, una matriz será devuelta donde las claves de la matriz
    son los nombres de los obeejtos en el registro y los valores son los nombres de las clases de esos objetos.
    </para>

    <para>
    Si <code>$name</code> es una cadena, el manejador del objeto asignado a ese nombre será devuelto. Si
    un objeto no existe en el registro con ese <code>$name</code>, una excepción
    <code>Zend_Exception</code> será lanzada.
    </para>

    <para>
    Para determinar rápidamente si un objeto está presente en el registro, usa Zend::isRegistered().
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
