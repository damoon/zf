<sect1 id="zend.inputfilter.introduction">
    <title>導入</title>
    <para>
    <literal>Zend_InputFilter</literal> は、
    構造化された厳格な入力フィルタリングを行うためのシンプルな機能を提供します。
    さまざまな目的のために使用可能です。なぜなら、これは以下の
    3 種類の異なるグループにとっての要求を満たすものだからです。
    </para>
    <itemizedlist>
        <listitem>
            <para>開発者</para>
            <para>
            何もしないことに比べたら、
            入力のフィルタリングが簡単なことであるはずがありません。
            しかし開発者としては、
            コードを不必要に複雑にすることなしにデータの完全性を保証する必要があります。
            <literal>Zend_InputFilter</literal> は、
            一般的な使用法に耐えうるシンプルなメソッドを提供し、
            特殊な例外にも対応できる拡張性を持ちます。また、
            厳格な命名規則により、コードをわかりやすくします。
            </para>
        </listitem>
        <listitem>
            <para>管理者</para>
            <para>
            大規模な開発者グループを管理しなければならない管理者は、
            <literal>Zend_InputFilter</literal> を使用することにより、
            生の入力データへのアクセスを制限/排除して、
            入力フィルタリングのための構造化されたアプローチを実施することができます。
            </para>
        </listitem>
        <listitem>
            <para>監査者</para>
            <para>
            アプリケーションのコードを監査する際には、
            開発者が生の入力データをそのまま使用していないかどうかを、
            すばやく確実に調べる必要があります。
            わかりやすいコードを書けるようになるという <literal>Zend_InputFilter</literal>
            の特性により、もし通常とは異なるアプローチをとっていれば、
            監査者はすぐにそれを識別できるようになるでしょう。
            </para>
        </listitem>
    </itemizedlist>
    <para>
    入力のフィルタリングにはさまざまな手法があり、
    PHP 開発者が使用できる機能にもさまざまなものがあります。
    ホワイトリストフィルタリング、ブラックリストフィルタリング、
    正規表現、条件文、通常の PHP 関数、…これらは、
    いろいろあるうちのほんの一部に過ぎません。
    <literal>Zend_InputFilter</literal> はこれらのすべての機能を単一の API
    にまとめ、一貫性のある振る舞いと厳格な命名規則を提供します。
    すべてのメソッドは単純な規則にしたがいます。それは、
    もしデータが有効ならそれをそのまま返し、有効でなければ
    <literal>FALSE</literal> を返すという、ごく単純な規則です。
    </para>
    <sect2 id="zend.inputfilter.introduction.whitelist">
        <title>ホワイトリストフィルタリング</title>
        <para>
        ホワイトリスト方式のフィルタリングメソッドは <literal>is</literal>
        で始まります。例えば <literal>isAlpha()</literal> や
        <literal>isEmail()</literal> などです。これらのメソッドは、
        事前に定義された条件にそって入力内容を調べ、
        条件を満たすデータのみを返します。条件を満たさない場合は
        <literal>FALSE</literal> が返されます。簡単な例を以下に示します。
        </para>
        <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST);

if ($alphaName = $filterPost->isAlpha('name')) {
    /* $alphaName には英字しか含まれません。 */
} else {
    /* $alphaName は FALSE と評価されました。*/
}

?>]]>
        </programlisting>
        <para>
        この手法は、返り値を論理型として評価する際に間違いが起こります。
        PHP で <literal>FALSE</literal> と評価される値 (例えば整数の
        <literal>0</literal> や空の文字列など) を識別するには、
        <literal>FALSE</literal> との厳格な比較を行います。
        </para>
        <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST);
$alphaName = $filterPost->isAlpha('name');

if ($alphaName !== FALSE) {
    /* $alphaName には英字しか含まれません。 */
} else {
    /* $alphaName === FALSE */
}

?>]]>
        </programlisting>
    </sect2>
    <sect2 id="zend.inputfilter.introduction.blind">
        <title>ブラインドフィルタリング</title>
        <para>
        ブラインドフィルタリングのメソッドは <literal>get</literal>
        で始まります。例えば <literal>getAlpha()</literal> や
        <literal>getDigits()</literal> などです。これらのメソッドは、
        入力内容を精査するのではなく入力内容のうち有効な部分のみを返します。
        例えば <literal>getAlpha()</literal> は、
        入力から英字のみを抜き出したものを返します
        (もし英字が存在しない場合は空の文字列となります)。
        簡単な例を以下に示します。
        </para>
        <programlisting>
<![CDATA[<?php

/* $_POST['username'] = 'John123Doe'; */

$filterPost = new Zend_InputFilter($_POST);
$alphaUsername = $filterPost->getAlpha('username');

/* $alphaUsername = 'JohnDoe'; */

?>]]>
        </programlisting>
    </sect2>
    <sect2 id="zend.inputfilter.introduction.blacklist">
        <title>ブラックリストフィルタリング</title>
        <para>
        ブラックリスト方式のフィルタリングメソッドは <literal>no</literal>
        で始まります。例えば <literal>noTags()</literal> や
        <literal>noPath()</literal> などです。
        これらのメソッドはブラインドフィルタリング用のメソッドと似ていますが、
        条件として「何が有効なのか」ではなく「何が無効なのか」を設定する点が違います。
        無効なデータは取り除かれ、残った部分 (有効だと考えられる部分)
        が返されます。簡単な例を以下に示します。
        </para>
        <programlisting>
<![CDATA[<?php

/* $_POST['comment'] = '<b>I love PHP!</b>'; */

$filterPost = new Zend_InputFilter($_POST);
$taglessComment = $filterPost->noTags('comment');

/* $taglessComment = 'I love PHP!'; */

?>]]>
        </programlisting>
    </sect2>
</sect1>
<sect1 id="zend.inputfilter.theoryofoperation">
    <title>動作の原理</title>
    <para>
    <literal>Zend_InputFilter</literal> は、
    入力フィルタリングのためのいくつかの異なる機能を単一の API
    にまとめ、一貫性のある振る舞いと厳格な命名規則を提供します。
    (<xref linkend="zend.inputfilter.introduction" /> を参照ください)。
    これらの特性により、<literal>Zend_InputFilter</literal>
    は既存のソリューションと同等のものとなりますが、
    これだけでは、より構造化された厳格な方式をサポートすることにはなりません。
    そのため、デフォルトで <literal>Zend_InputFilter</literal>
    は入力値へのアクセス制御を行うようにしています。
    </para>
    <para>
    二種類の構文がサポートされています。デフォルトの (厳格な)
    方式は、コンストラクタに引数をひとつだけ渡します。
    この引数は、フィルタリング対象となるデータです。
    </para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST);
$email = $filterPost->isEmail('email');

?>]]>
    </programlisting>
    <para>
    <literal>Zend_InputFilter</literal> は、渡された配列
    (<literal>$_POST</literal>) を <literal>NULL</literal> に設定し、
    元の値に直接アクセスできないようにします (元のデータへのアクセスは、
    <literal>getRaw()</literal> メソッドを通してのみ可能となります。
    これで、元の値へのアクセスを管理するのはかなり楽になります)。
    </para>
    <para>
    オプションの (厳格でない) 方式を使用するには、
    コンストラクタへの 2 番目の引数として <literal>FALSE</literal> を渡します。
    </para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST, FALSE);
$email = $filterPost->isEmail('email');

?>]]>
    </programlisting>
    <para>
    フィルタの使用法はまったく同じですが、
    <literal>Zend_InputFilter</literal> が元の配列 (<literal>$_POST</literal>)
    を <literal>NULL</literal> にすることはありません。
    そのため、開発者が元の配列に直接アクセスすることができてしまいます。
    この方式は推奨されず、厳格な方式をとることが推奨されています。
    </para>
    <para>
    <literal>Zend_InputFilter</literal> は、配列を扱うことを考えて設計されています。
    たいていの入力源は PHP のスーパーグローバル配列
    (<literal>$_GET</literal>、<literal>$_POST</literal>、
    <literal>$_COOKIE</literal> など) で網羅されており、
    その他の入力についても、一般的には配列形式で保存されています。
    もしスカラー値をフィルタリングしたい場合は、
    <xref linkend="zend.filter" /> を参照ください。
    </para>
</sect1>
<sect1 id="zend.inputfilter.usecases">
    <title>使用例</title>
    <para>厳格なホワイトリストフィルタリング (推奨)</para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST);

if ($email = $filterPost->isEmail('email')) {
    /* $email は email 形式として有効です。 */
} else {
    /* $email は email 形式ではありません。 */
}

?>]]>
    </programlisting>
    <para>厳格なブラインドフィルタリング</para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST);
$alphaName = $filterPost->getAlpha('name');

?>]]>
    </programlisting>
    <para>厳格なブラックリストフィルタリング</para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST);
$taglessComment = $filterPost->noTags('comment');

?>]]>
    </programlisting>
    <para>厳格でないホワイトリストフィルタリング</para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST, FALSE);

if ($email = $filterPost->isEmail('email')) {
    /* $email は email 形式として有効です。 */
} else {
    /* $email は email 形式ではありません。 */
}

?>]]>
    </programlisting>
    <para>厳格でないブラインドフィルタリング</para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST, FALSE);
$name = $filterPost->getAlpha('name');

?>]]>
    </programlisting>
    <para>厳格でないブラックリストフィルタリング</para>
    <programlisting>
<![CDATA[<?php

$filterPost = new Zend_InputFilter($_POST, FALSE);
$comment = $filterPost->noTags('comment');

?>]]>
    </programlisting>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
