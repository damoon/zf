<sect1 id="zend.feed.introduction">
    <title>Einführung</title>
    <para>
        <code>Zend_Feed</code> stellt Funktionalitäten für das Konsumieren von RSS und Atom Feeds.
        Es stellt eine natürliche Syntax bereit, um auf Elemente und Attribute des Feeds sowie auf 
        die Attribute der Einträge zugreifen zu können. Mit derselben natürlichen Syntax bietet 
        <code>Zend_Feed</code> auch eine umfassende Unterstützung für das Ändern von Feed und 
        Eintragsstruktur sowie die Rückgabe der Ergebniss nach XML. In Zukunft könnte diese
        Modifizierungsunterstützung auch das Atom Publishing Protocol unterstützen.
    </para>

    <para>
        <code>Zend_Feed</code> besteht aus der Basisklasse <code>Zend_Feed</code>, sowie den beiden 
        abstrakten Basisklassen <code>Zend_Feed_Abstract</code> und 
        <code>Zend_Feed_EntryAbstract</code> für die Darstellung von Feeds und Einträgen, aus 
        speziellen Implementationen von Feeds und Einträgen für RSS und Atom sowie einem Helfer,
        der hinter den Kulissen die natürliche Syntax ermöglicht.
    </para>

    <para>
        Im Beispiel unten demonstrieren wir einen einfachen Anwendungsfall für die Abfrage eines
        RSS Feeds und die Speicherung relevanter Teile der Feed Daten in einem einfachen PHP Array,
        welches dann für die Ausgabe der Daten, das Speichern in eine Datenbank, usw. genutzt 
        werden kann.
    </para>

    <note>
        Viele RSS Feeds bieten verschiedene Eigenschaften für Kanäle und Einträge. Die RSS
        Spezifikation bietet viele optionale Eigenschaften, also sei dir dessen beim Schreiben von 
        Code für die Verarbeitung von RSS Daten bewußt.
    </note>

    <example>
        <title>Zend_Feed für die Verarbeitung von RSS Feed Daten verwenden</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Feed.php';

// hole die neuesten Slashdot Schlagzeilen
try {
    $slashdotRss = Zend_Feed::import('http://rss.slashdot.org/Slashdot/slashdot');
} catch (Zend_Feed_Exception $e) {
    // Import des Feeds ist fehlgeschlagen
    echo "Exception caught importing feed: {$e->getMessage()}\n";
    exit;
}

// Initialisiere das Array mit den Channel Daten
$channel = array(
    'title'       => $slashdotRss->title(),
    'link'        => $slashdotRss->link(),
    'description' => $slashdotRss->description(),
    'items'       => array()
    );

// Durchlauf jeden Eintrag und speichere die relevanten Daten
foreach ($slashdotRss as $item) {
    $channel['items'][] = array(
        'title'       => $item->title(),
        'link'        => $item->link(),
        'description' => $item->description()
        );
}

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.importing">
    <title>Feeds mit Zend_Feed importieren</title>
    <para>
        <code>Zend_Feed</code> ermöglicht es Entwicklern, Feeds sehr einfach abzurufen. Wenn Du die
        URI eines Feeds kennst, verwende einfach die <code>Zend_Feed::import()</code> Methode:
        <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]>   </programlisting>
    </para>
    <para>
        Du kannst <code>Zend_Feed</code> außerdem verwenden, um Inhalte eines Feeds aus einer Datei
        oder die Inhalte aus einem PHP String Variable zu abzurufen.
        <programlisting role="php"><![CDATA[
<?php

// Importiere einen Feed aus einer Textdatei
$feedFromFile = Zend_Feed::importFile('feed.xml');

// Importiere einen Feed aus einer PHP String Variable
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
    </para>
    <para>
        In jedem der obigen Beispiele wird bei Erfolg abhängig vom Typ des Feeds ein Objekt einer 
        Klasse zurück gegeben, welche <code>Zend_Feed_Abstract</code> erweitert. Wird ein RSS Feed
        durch eine der obigen Importiermethoden abgerufen, wird eine <code>Zend_Feed_Rss</code>
        Objekt zurückgegeben. Auf der anderen Seite wird beim Importieren eines Atom Feeds ein 
        <code>Zend_Feed_Atom</code> Objekt zurückgegeben. Bei Fehlern, wie z.B. ein unlesbarer oder
        nicht wohlgeformter Feed, werfen die Importiermethoden auch ein 
        <code>Zend_Feed_Exception</code> Objekt. 
    </para>
</sect1>

<sect1 id="zend.feed.findFeeds">
    <title>Feeds von Websites abrufen</title>
    <para>
        Websites beinhalten oft <code>&lt;link&gt;</code> Tags, die auf Feeds mit für diese Seite 
        relevanten Informationen verweisen. <code>Zend_Feed</code> ermöglicht Dir, mit einem 
        einfachen Methodenaufruf alle von einer Webseite referenzierten Feeds abzurufen. 
        <programlisting role="php"><![CDATA[
<?php

$feedArray = Zend_Feed::findFeeds('http://www.example.com/news.html');

?>]]></programlisting>
        Hier gibt die <code>findFeeds()</code> Methode ein Array mit <code>Zend_Feed_Abstract</code>
        Objekten zurück, die durch die <code>&lt;link&gt;</code> Tags der news.html Webseite 
        referenziert worden sind. Abhängig vom Typ jedes Feeds kann jeder einzelne Eintrag in 
        <code>$feedArray</code> eine <code>Zend_Feed_Rss</code> oder <code>Zend_Feed_Atom</code>
        Instanz enthalten. Bei Fehlern, wie z.B. ein HTTP 404 Response Code oder ein nicht 
        wohlgeformter Feed, wirft <code>Zend_Feed</code> eine <code>Zend_Feed_Exception</code>.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-rss">
    <title>Einen RSS Feed konsumieren</title>
    <para>
        Einen RSS Feed zu lesen, ist so einfach wie das Instanziieren eines <code>Zend_Feed_Rss</code>
        Objekts mit der URL eines Feeds:
        <programlisting role="php"><![CDATA[
<?php

$channel = new Zend_Feed_Rss('http://rss.example.com/channelName');

?>]]></programlisting>
        Wenn beim Abrufen des Feeds Fehler auftreten, wird eine <code>Zend_Feed_Exception</code>
        geworfen. 
    </para>

    <para>
        Sobald du ein Feed Objekt hast, kannst du auf jeden Channel-Eigenschaften eines Standard
        RSS Feeds direkt über das Objekt zugreifen:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->title();

?>]]></programlisting>
        Beachte die Syntax der Funktion. <code>Zend_Feed</code> verwendet die Konvention, die 
        Eigenschaften als XML Objekt zu behandeln, wenn sie durch die "Getter" Syntax für Variablen 
        (<code>$obj->property</code>) angefordert werden, und als String zu behandeln, wenn sie 
        durch die Methodensyntax (<code>$obj->property()</code>) angefordert werden. Dies ermöglicht
        den Zugriff auf den kompletten Text jedes individuellen Knotens, während weiterhin der 
        komplette Zugriff auf alle Kindelemente erlaubt ist. 
    </para>

    <para>
        Wenn Channel-Eigenschaften Attribute beinhalten, sind diese durch die PHP Array Syntax 
        ansprechbar:
        <programlisting role="php"><![CDATA[
<?php

echo $channel->category['domain'];

?>]]></programlisting>
        Da XML Attribute keine Kindelemente haben können, ist die Methodensyntax für den Zugriff auf
        Attributwerte nicht notwendig.
    </para>

    <para>
        Meistens möchtest Du einen Feed durchlaufen und etwas mit seinen Einträgen machen. 
        <code>Zend_Feed_Abstract</code> implementiert das <code>Iterator</code> Interface von PHP,
        so dass die Ausgabe aller Artikelüberschriften eines Channels nur dies erfordert:
        <programlisting role="php"><![CDATA[
<?php

foreach ($channel as $item) {
    echo $item->title() . "\n";
}

?>]]></programlisting>
        Wenn du mit RSS nicht vertraut bist, kommt hier eine Übersicht über die Standardelemente, 
        die du in einem RSS Channel und in einzelnen RSS Elementen (Einträgen) als verfügbar 
        erwarten kannst.
    </para>

    <para>
        Erforderliche Elemente eines Channels:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Der Name des Channels</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Die URL einer Website, die dem Channel entspricht</para>
            </listitem>
            <listitem>
                <para><code>description</code> - Ein oder mehr Sätze, die den Channel beschreiben</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Allgemeine optionale Elemente eines Channels:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>pubDate</code> - Das Erscheinungsdatum dieses Informationssatzes, im 
                RFC 822 Datumsformat</para>
            </listitem>
            <listitem>
                <para><code>language</code> - Die Sprache, in der dieser Channel verfasst ist</para>
            </listitem>
            <listitem>
                <para><code>category</code> - Eine oder mehrere Kategorien (durch mehrfache Tags 
                spezifiziert), zu denen der Channel gehört</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        RSS <code>&lt;item&gt;</code> Elemente haben keine strikt erforderlichen Elemente. Dennoch
        müssen entweder <code>title</code> oder <code>description</code> vorhanden sein.
    </para>

    <para>
        Allgemeine Elements eines Eintrags:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Die Überschrift des Eintrags</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Die URL des Eintrags</para>
            </listitem>
            <listitem>
                <para><code>description</code> - Eine Zusammenfassung des Eintrags</para>
            </listitem>
            <listitem>
                <para><code>author</code> - Die E-Mail Adresse des Autoren</para>
            </listitem>
            <listitem>
                <para><code>category</code> - Eine oder mehrere Kategorien, zu denen der Eintrag 
                gehört</para>
            </listitem>
            <listitem>
                <para><code>comments</code> - URL der Kommentare zu diesem Eintrag</para>
            </listitem>
            <listitem>
                <para><code>pubDate</code> - Das Datum, an dem der Eintrag veröffentlicht wurde, 
                im RFC 822 Datumsformat</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        In deinem Code kannst du hiermit immer überprüfen, ob ein Element nicht leer ist:
        <programlisting role="php"><![CDATA[
<?php

if ($item->propname()) {
    // ... fahre fort.
}

?>]]></programlisting>
    </para>

    <para>
        Wenn du stattdessen <code>$item->propname</code> verwendest, wirst du immer ein leeres 
        Objekt erhalten, das mit <code>TRUE</code> evaluiert, so dass deine Prüfung fehlschlagen 
        würde.
    </para>

    <para>
        Für weitere Informationen ist die offizielle RSS 2.0 Specification hier verfügbar:
        <ulink url="http://blogs.law.harvard.edu/tech/rss">http://blogs.law.harvard.edu/tech/rss</ulink>
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom">
<title>Einen Atom Feed konsumieren</title>

    <para>
        <code>Zend_Feed_Atom</code> wird auf die ziemlich genau selbe Weise verwendet wie
        <code>Zend_Feed_Rss</code>. Es stellt die gleichen Zugriffsmöglichkeiten auf Eigenschaften
        auf Feed Ebene und bei der Iteration über Einträge des Feeds bereit. Der Hauptunterschied
        ist die Struktur des Atom Protokolls selber. Atom ist ein Nachfolger von RSS; es ist ein
        mehr verallgemeinertes Protokoll und es wurde gestaltet, um einfacher mit Feeds umzugehen,
        die ihren kompletten Inhalt innerhalb des Feeds bereit stellen, indem für diesen Zweck der 
        <code>description</code> Tag von RSS in die zwei Elemente <code>summary</code> und 
        <code>content</code> aufgeteilt wird.
    </para>

    <example>
        <title>Grundlegende Verwendung eines Atom Feeds</title>
        <para>
            Lese einen Atom Feed und gebe <code>title</code> und <code>summary</code> jedes 
            Eintrages aus:
        </para>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/');
echo 'Der Feed enthält ' . $feed->count() . ' Einträge.' . "\n\n";
foreach ($feed as $entry) {
    echo 'Überschrift: ' . $entry->title() . "\n";
    echo 'Zusammenfassung: ' . $entry->summary() . "\n\n";
}

?>]]>   </programlisting>
    </example>

    <para>
        In einem Atom Feed kannst du die folgenden Feed-Eigenschaften erwarten:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>title</code> - Die Überschrift des Feeds, gleichbedeutend mit der 
                Überschrift eines RSS Channels</para>
            </listitem>
            <listitem>
                <para><code>id</code> - Jeder Feed und Eintrag hat in Atom einen einzigartige 
                Bezeichner</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Feeds können mehrere Links enthalten, welche durch ein
                <code>type</code> Attribut ausgezeichnet werden</para>
                <para>
                    In einem RSS Channel wäre dies gleichbedeutend mit <code>type="text/html"</code>.
                    Wenn der Link auf eine alternative Version des selben Inhalts verweist, der 
                    nicht im Feed enthalten ist, würde es ein <code>rel="alternate"</code> Attribut
                    enthalten.
                </para>
            </listitem>
            <listitem>
                <para><code>subtitle</code> - Die Beschreibung des Feeds, gleichbedeutend mit der 
                Beschreibung eines RSS Channels</para>
                <para><code>author->name()</code> - Der Name des Autoren des Feeds</para>
                <para><code>author->email()</code> - Die E-Mail Adresse des Autoren des Feeds</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Atom Einträge haben normalerweise folgende Eigenschaften:
    </para>

    <para>
        <itemizedlist>
            <listitem>
                <para><code>id</code> - Der einzigartige Bezeichner des Eintrags</para>
            </listitem>
            <listitem>
                <para><code>title</code> - Die Überschrift des Eintrags, gleichbedeutend mit der 
                Überschrift eines RSS Eintrags</para>
            </listitem>
            <listitem>
                <para><code>link</code> - Ein Link zu einem anderen Format oder eine alternativen
                Ansicht diesen Eintrags</para>
            </listitem>
            <listitem>
                <para><code>summary</code> - Eine Zusammenfassung des Inhalts dieses Eintrags</para>
            </listitem>
            <listitem>
                <para><code>content</code> - Der komplette Inhalt des Eintrags; kann übersprungen 
                werden, wenn der Feed nur Zusammenfassungen enthält</para>
            </listitem>
            <listitem>
                <para><code>author</code> - Mit <code>name</code> und <code>email</code> Unter-Tags 
                wie den Feeds</para>
            </listitem>
            <listitem>
                <para><code>published</code> - Das Datum, an dem der Eintrag veröffentlicht wurde, 
                im RFC 3339 Format</para>
            </listitem>
            <listitem>
                <para><code>updated</code> - Das Datum, an dem der Eintrag das letzte Mal geändert 
                wurde, im RFC 3339 Format</para>
            </listitem>
        </itemizedlist>
    </para>

    <para>
        Für weitere Informationen über Atom und unzähligen anderen Quellen, besuche
        <ulink url="http://www.atomenabled.org/">http://www.atomenabled.org/</ulink>.
    </para>
</sect1>

<sect1 id="zend.feed.consuming-atom-single-entry">
    <title>Einen einzelnen Atom Eintrag konsumieren</title>

    <para>
        Einzelne Atom <code>&lt;entry&gt;</code> Elemente sind auch für sich selber gültig. 
        Normalerweise ist die URL für einen Eintrag die URL des Feeds gefolgt von 
        <code>/&lt;entryId&gt;</code>, wie bei <code>http://atom.example.com/feed/1</code>, um
        das obige Beispiel zu verwenden.
    </para>

    <para>
        Wenn Du einen einzelnen Eintrag liest, wirst du dennoch ein <code>Zend_Feed_Atom</code> 
        Objekt erhalten, aber es wird automatisch ein "anonymer" Feed erstellt, welcher den Eintrag
        enthält.
    </para>

    <example>
        <title>Lesen eines Atom Feeds mit einem Eintrag</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
echo 'Der Feed hat: ' . $feed->count() . ' Eintrag.';

$entry = $feed->current();

?>]]>   </programlisting>
    </example>

    <para>
        Alternativ kannst du das Objekt für den Eintrag auch direkt instanziieren, wenn du weist, 
        dass du ein Dokument mit nur einem Eintrag abrufst:
    </para>

    <example>
        <title>Direkte Verwendung des Eintragsobjekts für einen Atom Feed mit nur einem Eintrag</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom('http://atom.example.com/feed/1');
echo $entry->title();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.modifying-feed">
    <title>Verändern der Feed- und Eintragsstruktur</title>

    <para>
        Die natürliche Syntax von <code>Zend_Feed</code> wurde für das Erstellen und Verändern von 
        Feeds und Einträgen sowie das Lesen dieser erweitert. Du kannst die neuen oder veränderten
        Objekte einfach in wohlgeformtes XML umsetzen, um es als Datei zu speichern oder an einen
        Server zu senden.
    </para>

    <example>
        <title>Verändern eines bestehenden Feed Eintrags</title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = 'Dies ist ein neuer Titel';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
            Dies gibt eine vollständige (enthält den <code>&lt;?xml ... &gt;</code> Prolog) XML 
            Darstellung des neuen Eintrags aus, inklusive jedes notwendige XML Namensraumes.
        </para>
        <para>
            Beachte, dass das Obige auch funktioniert, wenn der existierende Eintrag noch keinen
            Autoren Tag beinhaltet. Du kannst soviele Ebenen von <code>-&gt;</code> Verweisen 
            verwenden, wie Du möchtest, um auf eine Zuordnung zugreifen zu können; alle dieser
            zwischengeschalteten Stufen werden automatisch für dich erstellt wenn notwendig.
        </para>
    </example>

    <para>
        Wenn du einen anderen Namensraum als <code>atom:</code>, <code>rss:</code>, oder 
        <code>osrss:</code> in deinem Eintrag verwenden möchtest, musst du den Namensraum mit 
        <code>Zend_Feed</code> durch die Verwendung von <code>Zend_Feed::registerNamespace()</code> 
        registrieren. Wenn du ein bestehendes Element veränderst, wird es immer den ursprünglichen
        Namensraum beibehalten. Wenn du ein neues Element hinzufügst, wird es den standardmäßigen 
        Namensraum verwenden, wenn du nicht explizit einen anderen Namensraum festgelegt hast.
    </para>

    <example>
        <title>Erstellen eines Atom Eintrags mit Elementen eines eigenen Namensraumes</title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_EntryAtom();
// Die ID wird immer vom Server in Atom zugewiesen
$entry->title = 'mein eigener Eintrag';
$entry->author->name = 'Beispiel Autor';
$entry->author->email = 'me@example.com';

// Nun erledige den eigenen Teil
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'mein erster eigener Wert ';
$entry->{'myns:container_elt'}->part1 = 'Erster verschachtelter Teil';
$entry->{'myns:container_elt'}->part2 = 'Zweiter verschachtelter Teil';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>

<sect1 id="zend.feed.custom-feed">
    <title>Eigene Klassen für Feeds und Einträge</title>

    <para>
        Schließlich kannst du die <code>Zend_Feed</code> Klasse erweitern, wenn du dein eigenes
        Format oder Feinheiten wie die automatische Verarbeitung von Elementen, die in deinen 
        eigenen Namensraum enthalten sein sollen, bereit stellen möchtest
    </para>

    <para>
        Hier ist ein Beispiel einer eigenen Klasse für Atom Einträge, die ihre eigenen Elemente für
        den <code>myns:</code> Namensraum verwendet. Beachte, dass sie auch den 
        <code>registerNamespace()</code> Aufruf für dich durchführt, so dass sich der Endbenutzer 
        nicht um Namensräume kümmern muss.
    </para>

    <example>
        <title>Die Klasse für Atom Einträge mit einem eigenen Namensraum erweitern</title>
        <programlisting role="php"><![CDATA[
<?php

/**
 * Die eigene Klasse für Einträge kennt automatisch die Feed URI (optional)
 * und kann automatisch weitere Namensräume hinzufügen
 */
class MyEntry extends Zend_Feed_EntryAtom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // Übersetze myUpdated nach myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // Übersetze myUpdated nach myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
            Um diese Klasse zu verwenden, musst du sie nur direkt instanziieren und die 
            <code>myUpdated</code> Eigenschaft setzen.
            <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>       </programlisting>
        </para>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->