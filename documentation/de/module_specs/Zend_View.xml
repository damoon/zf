<sect1 id="zend.view.introduction">

    <title>Einführung</title>
    
    <para>
        Zend_View ist eine Klasse für die Verarbeitung des "View" Teils des Model-View-Controller
        Entwurfsmusters. Er existiert, um das View Skript von den Model und Controller Skripten
        zu trennen. Es stellt ein System an Helfern, Ausgabefiltern und Variablenmaskierung bereit.
    </para>
    
    <para>
        Zend_View ist unabhängig von einem Template System. Du kannst PHP als Template Sprache 
        verwenden oder Instanzen anderer Template Systeme erstellen und diese in deinem View Skript
        verarbeiten. 
    </para>

    <para>
        Im Wesentlichen verläuft die Verwendung von Zend_View in zwei Hauptschritten:
        
        1. Dein Controller Skript erstellt eine Instanz von Zend_View und übergibt Variablen an
        diese Instanz.
        
        2. Der Controller teilt Zend_View mit, ein bestimmtes View Skript zu verarbeiten. Dabei 
        wird die Kontrolle an das View Skript übergeben, welches die Ausgabe erstellt.
    </para>
    
    <sect2 id="zend.view.introduction.controller">
        
        <title>Controller Skript</title>
        
        <para>
            In einem einfachen Beispiel hat dein Controller Skript eine Liste von Buchdaten, die
            von einem View Skript verarbeitet werden sollen. Dieses Controller Skript kann ungefähr 
            so aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// verwende ein Modell, um die Daten der Bücher und Autoren zu erhalten
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// nun übergebe die Buchdaten an die Zend_View Instanz
Zend::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// und verarbeite ein View Skript mit Namen "booklist.php"
echo $view->render('booklist.php');
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.introduction.view">
    
        <title>View Skript</title>
        
        <para>
            Nun benötigen wir das zugehörige View Skript "booklist.php". Dies ist ein PHP Skript
            wie jedes andere mit einer Ausnahme: es wird innerhalb der Zend_View Instanz ausgeführt,
            was bedeutet, dass Referenzen auf $this auf die Eigenschaften und Methoden der
            Zend_View Instanz weisen. (Variablen, die vom Controller an die Instanz übergeben 
            wurden, sind öffentliche (public) Eigenschaften der Zend_View Instanz.) Dadurch kann
            ein sehr einfaches View Skript wie folgt aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Eine Tabelle mit einigen Büchern. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Titel</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Es gibt keine Bücher zum Anzeigen.</p>
    
<?php endif; ?>]]>
        </programlisting>
        
        <para>
            Beachte, wie wir die "escape()" Methode verwenden, um die Variablen für die Ausgabe zu 
            maskieren.
        </para>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.controllers">
    <title>Controller Skripte</title>
    
    <para>
        Der Controller ist der Ort, wo du Zend_View instanziieren und konfigurieren kannst. Du 
        übergibst dann die Variablen an den View und teilst ihm mit, welches bestimmte Skript für 
        die Ausgabe benutzt werden soll. 
    </para>
    
    <sect2 id="zend.view.controllers.assign">
    
        <title>Variablen übergeben</title>
        
        <para>
            Dein Controller Skript sollte notwendige Variablen an den View übergeben, bevor es die
            Kontrolle an das View Skript übergibt. Normalerweise kannst du eine Variable nach der
            anderen übergeben und an den bezeichneten Eigenschaften der View Instanz zuordnen.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
?>]]>
        </programlisting>
        
        <para>
            Allerdings kann dies mühsam sein, wenn du bereits alle Werte gesammelt hast, um sie  
            einem Array oder einem Objekt zuzuordnen. 
        </para>
        
        <para>
            Mit der assign() Methode kannst Du auch ein Array oder ein Objekt auf einmal übergeben. 
            Das folgende Beispiel hat den selben Effekt wie die obigen einzelnen Übergaben.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// übergebe ein Array mit Schlüssel-Wert Paaren, 
// wo der Schlüssel der Variablenname und der 
// Wert die übergebene Variable ist
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// mache das selbe mit den öffentlichen Eigenschaften
// eines Objektes; beachte wir wir das Objekt beim 
// Übergeben in ein Array umwandeln
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);
?>]]>
        </programlisting>
        
        <para>
            Alternativ kannst du die assign() Methode auch benutzen, um nacheinander einen 
            Variablennamen und den Wert der Variable zu übergeben.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");
?>]]>
        </programlisting>
        
    </sect2>

    <sect2 id="zend.view.controllers.render">
        
        <title>Verarbeitung eines View Skripts</title>
        
        <para>
            Sobald du alle notwendigen Variablen übergeben hast, sollte der Controller dem 
            Zend_View mitteilen, ein bestimmtes View Skript zu verarbeiten. Dies funktioniert über
            die render() Methode. Beachte, dass diese Methode die verarbeitete Ausgabe zurück- aber 
            nicht ausgibt, so dass du die Ausgabe selber zur passenden Zeit per echo() oder print() 
            ausgeben musst. 
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');
?>]]>
        </programlisting>
    
    </sect2>
    
    <sect2 id="zend.view.controllers.script-paths">
        
        <title>Pfade für View Skripte</title>
        
        <para>
            Standardmäßig erwartet Zend_View, dass deine View Skripte im selben Verzeichnis wie 
            das Conntroller Skript liegen. Wenn dein Controller Skript zum Beispiel im Pfad 
            "/path/to/app/controllers" liegt und es $view->render('someView.php') aufruft, wird 
            Zend_View nach der Datei "/path/to/app/controllers/someView.php" schauen.
        </para>
        
        <para>
            Es ist durchaus wahrscheinlich, dass deine View Skripte woanders liegen. Verwende 
            die setScriptPath() Methode, um Zend_View mitzuteilen, wo es nach View Skripten 
            schauen soll. 
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');
?>]]>
        </programlisting>
        
        <para>
            Wenn du nun $view->render('someView.php') aufrufst, wird es nach der Datei 
            "/path/to/app/views/someView.php" schauen. 
        </para>
        
        <para>
            Durch Verwendung der addScriptPath() Methode können die Pfade "gestapelt" werden. Wenn 
            du Pfade zu diesem Stapelspeicher hinzufügst, wird Zend_View im zuletzt
            hinzugefügten Pfad nach dem angeforderten View Skript schauen. Dies erlaubt dir, 
            Standard Views mit spezialisierten Views zu überschreiben, so dass Du  "Themen" 
            oder "Skins" für einige Views erstellen kannst, während du andere bestehen lässt.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// wenn du nun $view->render('booklist.php') aufrufst, wird 
// Zend_View zuerst nach der Datei "/path/to/custom/booklist.php",
// dann nach "/path/to/app/views/booklist.php" und zuguterletzt 
// im aktuellen Pfad nach der Datei "booklist.php" schauen
?>]]>
        </programlisting>
        
    </sect2>

</sect1>

<sect1 id="zend.view.scripts">
    
    <title>View Scripte</title>
        
    <para>
        Sobald dein Controller die Variablen übergeben und die render() Methode aufgerufen hat, 
        inkludiert Zend_View das angeforderte View Skript und führt es "innerhalb" des 
        Gültigkeitsbereichs der Zend_View Instanz aus. Deshalb weisen Referenzen auf $this in 
        deinem View Skript auf die Zend_View Instanz selber.  
    </para>
    
    <para>
        Auf Variablen, die vom Controller an den View übergeben worden sind, kann als Eigenschaften
        der Instanz zurückgegriffen werden. Wenn der Controller zum Beispiel eine Variable 
        'irgendwas' übergeben hat, würdest du in deinem View Skript über $this->irgendwas darauf
        zugreifen können. (Dies erlaubt es dir, den Überblick darüber zu behalten, welche Variablen
        an das Skript übergeben worden sind und welche Variablen intern zum Skript selber gehören.)
    </para>
    
    <para>
        Zur Erinnerung hier noch einmal das Beispiel View Skript aus der Zend_View Einführung.        
    </para>
    
    <programlisting role="php"><![CDATA[<?php if ($this->books): ?>
    
    <!-- Eine Tabelle mit einigen Büchern. -->
    <table>
        <tr>
            <th>Autor</th>
            <th>Titel</th>
        </tr>
        
        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>
        
    </table>
    
<?php else: ?>
    
    <p>Es gibt keine Bücher zum Anzeigen.</p>
    
<?php endif; ?>]]>
    </programlisting>
        
    <sect2 id="zend.view.scripts.escaping">
        
        <title>Ausgaben maskieren</title>
        
        <para>
            Eine der wichtigsten Aufgaben, die in einem View Skript zu erledigen sind, ist es 
            sicherzustellen, dass die Ausgaben auch richtig maskiert sind; neben anderen Dingen
            hilft dies auch Cross-Site Scripting Attacken zu vermeiden. Sofern du keine Funktion,
            Methode oder einen Helfer verwendest, der die Maskierungen selber durchführt, solltest
            Du Variablen immer maskieren, wenn du sie ausgeben möchtest.
        </para>
        
        <para>
            Zend_View stellt eine Methode escape() bereit, die das Maskieren für dich übernimmt.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// schlechte View Skript Praxis:
echo $this->variable;

// gute View Skript Praxis:
echo $this->escape($this->variable);
?>]]>
        </programlisting>
        
        <para>
            Standardmäßig verwendet escape() die PHP htmlspecialchars() Funktion für die Maskierung.
            Allerdings könntest du abhängig von deiner Umgebung den Wunsch haben, die Maskierung
            anders durchzuführen. Verwende die setEscape() Methode auf der Controller Ebene, um 
            Zend_View mitzuteilen, welche Maskierungsmöglichkeit als Callback verwendet werden soll.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// erstelle eine Zend_View Instanz
$view = new Zend_View();

// teile ihr mit, dass htmlentities für die Maskierung
// verwendet werden soll
$view->setEscape('htmlentities');

// oder teile ihr mit, eine statische Klassenmethode für
// die Maskierung zu verwenden
$view->setEscape(array('SomeClass', 'methodName'));

// sogar Instanzmethoden sind möglich
$obj = new SomeClass();
$view->setEscape(array($obj, 'methodName'));

// und dann erstelle die Ausgabe
echo $view->render(...);
?>]]>
        </programlisting>
        
        <para>
            Diese Callback Funktion oder Methode sollte den zu maskierenden Wert als ersten 
            Parameter übernehmen und alle anderen Parameter sollten optional sein.
        </para>
        
    </sect2>

    <sect2 id="zend.view.scripts.templates">
    
        <title>Templatesysteme</title>
        
        <para>
            Obwohl PHP selber eine mächtiges Templatesystem ist, haben viele Entwickler das Gefühl,
            dass es zu mächtig oder komplex für die Template Designer ist. Deshalb kann das View 
            Skript auch verwendet werden, um ein separates Templatesystem zu instanzieren und zu
            verarbeiten. Das View Skript für einen solchen Ablauf könnte wie folgt aussehen: 
        </para>
        
        <programlisting role="php"><![CDATA[<?php
include_once 'template.inc';
$tpl = new Template();

if ($this->books) {
    $tpl->setFile(array(
        "booklist" => "booklist.tpl",
        "eachbook" => "eachbook.tpl",
    ));
    
    foreach ($this->books as $key => $val) {
        $tpl->set_var('author', $this->escape($val['author']);
        $tpl->set_var('title', $this->escape($val['title']);
        $tpl->parse("books", "eachbook", true);
    }
    
    $tpl->pparse("output", "booklist");
} else {
    $tpl->setFile("nobooks", "nobooks.tpl")
    $tpl->pparse("output", "nobooks");
}
?>]]>
        </programlisting>
        
        <para>
            Dies wären die zugehörigen Template Dateien:
        </para>
        
        <programlisting role="html"><![CDATA[
<!-- booklist.tpl -->
<table>
    <tr>
        <th>Autor</th>
        <th>Titel</th>
    </tr>
    {books}
</table>

<!-- eachbook.tpl -->
    <tr>
        <td>{author}</td>
        <td>{title}</td>
    </tr>

<!-- nobooks.tpl -->
<p>Es gibt keine Bücher zum Anzeigen.</p>
]]>
        </programlisting>
        
    </sect2>
    
</sect1>

<sect1 id="zend.view.helpers">
    
    <title>View Helfer</title>
    
    <para>
        In deinen View Skripten ist es oft notwendig, bestimmte komplexe Funktionen immer wieder 
        auszuführen, z.B. Datum formatieren, Formularelemente erstellen oder Links für Aktionen
        anzuzeigen. Du kannst Helferklassen verwenden, um diese Aufgaben für dich durchführen zu
        lassen. 
    </para>
    
    <para>
        Um einen Helfer in deinem View Skript zu verwenden, rufe ihn mittels $this->helperName() 
        auf. Im Hintergrund wird Zend_View die Klasse Zend_View_Helper_HelperName laden, eine 
        Objektinstanz der Klasse erstellen und deren Methode helperName() aufrufen. Die 
        Objektinstanz bleibt innerhalb der Zend_View Instanz bestehen und wird bei allen weiteren 
        Aufrufen von $this->helperName() wiederverwendet.
    </para>
    
    <sect2 id="zend.view.helpers.initial">
    
        <title>Vorhandene Helfer</title>
        
        <para>
            Zend_View enthält bereits einige vorhandene Helferklassen, die sich alle auf die 
            Erstellung von Formularelementen beziehen. Alle führen die entsprechende 
            Ausgabemaskierung automatisch durch. Diese sind: 
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                formButton($name, $value, $attribs): Erstellt ein &lt;input type="button" /&gt; 
                Element.
            </para></listitem>
            
            <listitem><para>
                formCheckbox($name, $value, $attribs, $options): Erstellt ein 
                &lt;input type="checkbox" /&gt; Element. Der $options Parameter ist ein Array, bei
                dem der erste Wert der ausgewählte Wert ("checked") und der zweite Wert der 
                nicht ausgewählte Wert ("unchecked") angibt (die Standardwerte sind '1' und '0').
                Wenn $value mit dem ausgewählten Wert ("checked") übereinstimmt, wird die Checkbox
                für dich ausgewählt sein.
            </para></listitem>
            
            <listitem><para>
                formFile($name, $value, $attribs): Erstellt ein &lt;input type="file" /&gt; 
                Element.
            </para></listitem>
            
            <listitem><para>
                formHidden($name, $value, $attribs): Erstellt ein &lt;input type="hidden" /&gt; 
                Element.
            </para></listitem>
            
            <listitem><para>
                formPassword($name, $value, $attribs): Erstellt ein an &lt;input type="password" /&gt; 
                Element.
            </para></listitem>
            
            <listitem><para>
                formRadio($name, $value, $attribs, $options): Erstellt eine Reihe von 
                &lt;input type="radio" /&gt; Elementen, eine für jeden der $options Elemente. 
                Im $options Array ist der Elementschlüssel der Wert und der Elementwert die 
                Bezeichnung des Radio-Buttons. Der $value Radiobutton wird für dich vorgewählt.
            </para></listitem>
            
            <listitem><para>
                formReset($name, $value, $attribs): Erstellt eine &lt;input type="reset" /&gt; 
                Element.
            </para></listitem>
            
            <listitem><para>
                formSelect($name, $value, $attribs, $options): Erstellt einen 
                &lt;select&gt;...&lt;/select&gt; block mit einer &lt;option&gt;one für jedes
                $options Element. Im $options Array ist der Elementschlüssel der Optionswert und 
                der Elementwert die Optionsbezeichnung. Die $value Optionen werden für dich 
                vorgewählt.
            </para></listitem>
            
            <listitem><para>
                formSubmit($name, $value, $attribs): Erstellt ein &lt;input type="submit" /&gt; 
                Element.
            </para></listitem>
            
            <listitem><para>
                formText($name, $value, $attribs): Erstellt ein &lt;input type="text" /&gt; Element.
            </para></listitem>
            
            <listitem><para>
                formTextarea($name, $value, $attribs): Erstellt einen
                &lt;textarea&gt;...&lt;/textarea&gt; Block.
            </para></listitem>
            
        </itemizedlist>
        
        <para>
            Die Verwendung dieser Helfer in deinem View Skript ist sehr einfach, hier ist ein
            Beispiel. Beachte, dass du dieser Helfer nur aufrufen brauchst; sie werden automatisch
            geladen und instanziiert, sobald sie benötigt werden.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// Innerhalb deines View Skriptes, verweist $this auf die Zend_View 
// Instanz.
// 
// Sagen wir, dass du bereits eine Serie von Auswahlwerten der Variable
// $countries in Form eines Arrays zugewiesen hast 
// ('us' => 'United States', 'il' => 'Israel', 'de' => 'Germany')
?>
<form action="action.php" method="post">
    <p><label>Deine Email:
        <?php echo $this->formText('email', 'you@example.com', array('size' => 32)) ?>
    </label></p>
    <p><label>Dein Land:
        <?php echo $this->formSelect('country', 'us', null, $this->countries) ?>
    </label></p>
    <p><label>Möchtest Du hinzugefügt werden?
        <?php echo $this->formCheckbox('opt_in', 'yes', null, array('yes', 'no') ?>
    </label></p>
</form>]]>
        </programlisting>
        
        <para>
            Die Ausgabe des View Skriptes wird in etwa so aussehen:
        </para>
        
        <programlisting role="php"><![CDATA[<form action="action.php" method="post">
    <p><label>Deine Email:
        <input type="text" name="email" value="you@example.com" size="32" />
    </label></p>
    <p><label>Dein Land:
        <select name="country">
            <option value="us" selected="selected">United States</option>
            <option value="il">Israel</option>
            <option value="de">Germany</option>
        </select>
    </label></p>
    <p><label>Möchtest Du hinzugefügt werden?
        <input type="hidden" name="opt_in" value="no" />
        <input type="checkbox" name="opt_in" value="yes" checked="checked" />
    </label></p>
</form>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.paths">
        
        <title>Helfer Pfade</title>
        
        <para>
            Wie bei den View Skripten kann der Controller für Zend_View auch einen Stapel an Pfaden 
            festlegen, in dem nach Hilfsklassen gesucht werden soll. Standardmäßig sucht Zend_View
            in "Zend/View/Helper/*" nach Hilfsklassen. Du kannst Zend_View mit Hilfe der Methoden
            setHelperPath() und addHelperPath() mitteilen, auch in anderen Verzeichnissen zu suchen.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setHelperPath('/path/to/more/helpers');
?>]]>
        </programlisting>
        
        <para>
            Durch Verwendung der addHelperPath() Methode können die Pfade "gestapelt" werden. Wenn 
            du Pfade zu diesem Stapelspeicher hinzufügst, wird Zend_View im zuletzt hinzugefügten 
            Pfad nach der angeforderten Hilfsklasse schauen. Dies erlaubt dir, zu den vorhandenen 
            Helfern weitere hinzufügen oder diese durch eigene zu ersetzen. 
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addHelperPath('/path/to/some/helpers');
$view->addHelperPath('/other/path/to/helpers');

// wenn du nun $this->helperName() aufrufst, wird Zend_View zuerst nach
// "/other/path/to/helpers/HelperName.php", dann nach for
// "/path/to/some/helpers/HelperName", und zuletzt nach 
// "Zend/View/Helpers/HelperName.php" schauen.
?>]]>
        </programlisting>
        
    </sect2>
    
    <sect2 id="zend.view.helpers.custom">
        
        <title>Eigene Helfer schreiben</title>
        
        <para>
            Eigene Helfer zu schreiben ist einfach; du mußt nur diese Regeln befolgen:
        </para>
        
        <itemizedlist>
            
            <listitem><para>
                Der Klassennamen muss Zend_View_Helper_* sein, wobei * für den Helfernamen selber
                steht. Wenn du z.B. einen Helfer mit Namen "specialPurpose" schreibst, würde der
                Klassennamen "Zend_View_Helper_SpecialPurpose" lauten (beachte die Großschreibung).
            </para></listitem>
            
            <listitem><para>
                Die Klasse muss eine öffentliche Methode mit dem Namen des Helfers haben. Dies ist 
                die Methode, welche vom View Skript durch "$this->specialPurpose()" aufgerufen wird.
                In unserem "specialPurpose" Beispiel, würde die notwendige Deklaration dieser 
                Methode "public function specialPurpose()" lauten. 
            </para></listitem>
            
            <listitem><para>
                Im Allgemeinen sollte die Klasse keine Ausgaben durch echo(), print() oder auf
                andere Weise erstellen. Stattdessen sollte es die auszugebenen Werte zurückgeben.
                Die zurückgegebenen Werte sollten entsprechend maskiert werden.
            </para></listitem>
            
            <listitem><para>
                Diese Klasse muss sich in einer Datei befinden, die nach der Helfermethode benannt
                ist. Bezogen auf unser "specialPurpose" Beispiel, muss der Dateiname 
                "SpecialPurpose.php" lauten.
            </para></listitem>
        </itemizedlist>
        
        <para>
            Platziere die Hilfsklasse irgendwo in deinem Stapelspeicher für Hilfspfade und Zend_View 
            wird den Helfer automatisch für dich laden, instanziieren, speichern und ausführen. 
        </para>
        
        <para>
            Hier ist ein Beispiel für unseren SpecialPurpose Helfer:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
class Zend_View_Helper_SpecialPurpose {
    protected $_count = 0;
    public function specialPurpose()
    {
        $this->_count++;
        $output = "Ich habe 'The Jerk' {$this->_count} Mal(e) gesehen.";
        return htmlspecialchars($output);
    }
}
?>]]>
        </programlisting>
        
        <para>
            Dann rufst du in einem View Skript den SpecialPurpose Helfer so oft auf, wie du 
            möchtest; er wird einmal instanziiert und bleibt für die Lebensdauer der Zend_View
            Instanz bestehen.
        </para>
        
        <programlisting role="php"><![CDATA[<?php
// denke daran, dass $this in deinem View Skript auf die 
// Zend_View Instanz verweist.
echo $this->specialPurpose();
echo $this->specialPurpose();
echo $this->specialPurpose();
?>]]>
        </programlisting>
        
        <para>
            Die Ausgabe wird in etwa so aussehen:
        </para>
        <programlisting role="php"><![CDATA[Ich habe 'The Jerk' 1 Mal(e) gesehen.
Ich habe 'The Jerk' 2 Mal(e) gesehen.
Ich habe 'The Jerk' 3 Mal(e) gesehen.]]>
        </programlisting>
        
    </sect2>
    
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->