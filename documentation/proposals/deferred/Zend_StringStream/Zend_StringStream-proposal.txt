Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
Zend_StringStream


Proposers
-----------------------------------------------
Wez Furlong <wez@omniti.com>


Revision
-----------------------------------------------
1.0


Overview
-----------------------------------------------
Provides a stream interface for working with strings by leveraging the
user-space streams wrapper.  This is useful when building code that
is more naturally expressed using streams APIs, but still needs to work with
strings.


References
-----------------------------------------------
My limited "global-variable" stream class in the PHP manual:
http://www.php.net/manual/en/function.stream-wrapper-register.php.


Requirements
-----------------------------------------------
To provide a seekable read/write streaming interface to a string.  Note that by
writable, I don't mean that the original string is updated, just that it is
possible to write into the stream and read the results back out again.
Similarly, changes to the original string out side of the stream are not
reflected in the stream (in other words, the stream holds a copy-on-write
reference to the original string).


Dependencies on Other Framework Components
-----------------------------------------------
None.


Theory of Operation
-----------------------------------------------
Zend_StringStream registers a custom URL protocol handler with the
streams layer that allows a proxy object to be created each time
that URL is opened.  This object is made available via stream_get_meta_data().
After opening the URL and obtaining a reference to the object, the string
that is to be exposed as a string is set as a property of the object.
(take a look at the skeleton at the bottom of this file for the code).

>From that point onwards, the regular user-space stream wrapper methods can
operate on the string, maintaining the file pointer offset and returning
chunks of data as required by the streams layer.


Class Index
-----------------------------------------------
Zend_StringStream


Use Cases
-----------------------------------------------
$string = "a really long string";
$fp = Zend_StringStream::create($string);
fseek($fp, 5);
echo fread($fp, 10); // "lly long s"

// take advantage of fgetcsv()
$string = "one,two,three";
$fp = Zend_StringStream::create($string);

while (!feof($fp)) {
	$columns = fgetcsv($fp);
	// columns is now an array containing "one", "two", "three"
}


Class Skeletons
-----------------------------------------------
class Zend_StringStream {
	static $registered = false;
	
	public static function create($string, $mode = 'r') {
		if (!self::$registered) {
			stream_wrapper_register('zend-string-stream', 'Zend_StringStream');
			self::$registered = true;
		}
		// create a new stream resource
		$stream = fopen('zend-string-stream://', $mode);
		// poke the underlying object with the string value
		$meta = stream_get_meta_data($stream);
		$obj = $meta['wrapper_data'];
		$obj->string = $string;
		return $stream;
	}

	/* all the stream_XXX methods as described at
	 * http://www.php.net/manual/en/function.stream-wrapper-register.php
	 * go here */
}

