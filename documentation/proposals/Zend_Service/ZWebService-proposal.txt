Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
ZWebService


Proposers
-----------------------------------------------
David Sklar


Revision
-----------------------------------------------
$Id: ZWebService-proposal.txt,v 1.1 2005/12/21 15:30:16 david Exp $


Overview
-----------------------------------------------
ZWebService offers a simple OO interface for dealing with REST-style 
web services. It provides standardized methods for parsing
options, sending requests, and receiving results. It is designed
to be subclassed and customized for individual web services. ZWebService and
its subclasses insulate the user from the nitty-gritty of dealing with different
service endpoint URLs, XML parsing, and type manipulation of results.


References
-----------------------------------------------
ZWebService and initial subclasses are based on the Ning XNC_Services
components, such as XNC_Services_Amazon
(http://developerdocumentation.ning.com/post.php?Post:slug=XNC-XNC_Services_Amazon)


Requirements
-----------------------------------------------
simplexml


Dependencies on Other Framework Components
-----------------------------------------------
ZValidator for option validation
ZUri for URI construction
ZHttpClient for sending/receiving requests

Theory of Operation
-----------------------------------------------
ZWebService handles option parsing and request transport. Semantics of a 
particular web service are left up to a subclass. That subclass should
define methods that map to particular calls, validate input to the particular
calls, and provide formatted / type-cast returned data.

A ZWebService subclass deals with two different kinds of options: service options
and request options. Service options, either set by default inside the subclass
or passed to the subclass constructor, are data that are relevant to the mechanics
of the service across various requests: authentication info, a user-specific
application or developer key, and perhaps the request end-point. Request
options, passed to individual methods, determine the behavior of a particular
request: search terms, result set ordering, and so on.


Class Index
-----------------------------------------------
ZWebService
Subclasses for individual services: ZWebServiceAmazon, ZWebServiceYahoo, etc.
Individual subclasses may also define helper classes to represent the
structure of returned results.

Use Cases
-----------------------------------------------
class ZWebServiceAmazon extends ZWebService {
/* define options */
/* define base URL */
/* define URL construction */
/* define some methods */
}

$serviceOptions = array('subscriptionID' => 'XXXX',
                        'country' => 'DE');
$amazon = new ZWebServiceAmazon($serviceOptions);

$requestOptions = array('keywords' => 'ten-speed bicycle');
foreach ($amazon->itemSearch($requestOptions) as $item) {
 /* ... */
}


Class Skeletons
-----------------------------------------------
<?php 
/**
 * Base class to handle the common mechanics of sending/receiving
 * requests and parsing/validating service and request options.
 */
class ZWebService {
    
    /**
     * Prepare option array with defaults and other logic
     *
     * @param array $options User-provided options
     * @param array $default_options Defaults for the web service
     * @return array Options ready for the request
     */
    protected function prepareOptions($options,$default_options);
    
    /**
     * Actually execute a web service request
     *
     * @param array $serviceOptions, $requestOptions
     */
    protected function executeRequest($serviceOptions, $requestOptions);
}

/**
 * Sample ZWebService subclass. The constructor accepts and validates service
 * options. Each other method corresponds to a particular method the web
 * service exposes.
 */
class ZWebServiceSample {
    
    /**
     * Accept and validate options for the service 
     *
     * @param array $serviceOptions
     */
    public function __construct($serviceOptions = null);
    
    /**
     * Execute the "search" method against the web service.
     *
     * @param array $requestOptions Request options such as search term, result set size.
     * @return array An array of ZWebServiceSampleSearchResult objects
     */
    public function search($requestOptions = null);

    /**
     * Execute the "userLookup" method against the web service.
     *
     * @param array $requestOptions Request options such as username to look up.
     * @return ZWebServiceSampleUserLookupResult Information about the user
     */
    public function userLookup($requestOptions = null);
}

/**
 * Container for search results. Puts info from the SimpleXML
 * representation of the result into appropriately typed properties
 *
 */
class ZWebServiceSampleSearchResult {    
    public function __construct(SimpleXMLElement $xml);
    
}

/**
 * Container for user lookup results. Puts info from the SimpleXML
 * representation of the result into appropriately typed properties
 */
class ZWebServiceSampleUserLookupResult {
    public function __construct(SimpleXMLElement $xml);
}

