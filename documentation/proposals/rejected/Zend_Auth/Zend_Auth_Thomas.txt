Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
Zend_Auth


Proposers
-----------------------------------------------
Richard Thomas


Revision
-----------------------------------------------
0.1


Overview
-----------------------------------------------
Provide a clear and easy method to check user security permissions


References
-----------------------------------------------
None


Requirements
-----------------------------------------------
None


Dependencies on Other Framework Components
-----------------------------------------------
None


Theory of Operation
-----------------------------------------------
Provide a binary check operation to verify multiple levels of security.


Class Index
-----------------------------------------------
Zend_Auth


Use Cases
-----------------------------------------------

1. Somehow Authorize the user, during this process you get the user settings, his security level is assigned to $_SESSION['security']. Lets assume at this time its 3

2. You have the user_perms table with the following
Name -- Flag
------------
Login -- 1
Write -- 2
Edit  -- 3

3. You init the permissions
Perms::initPerms($db, $_SESSION['security']);

4. You check permissions, user is trying to edit something
Perms::permCheck('Edit'); This fails, user only has a 3 flag

Or you want to check that they can write AND login
Perms::permCheck(array('Login','Write')); This passed



Class Skeletons
-----------------------------------------------
class Zend_Auth {
    public static function initPerms();
# Check against permissions list
    public static function permCheck();
# Load in an array of security permissions
    public static function ArrayLoad();
# Load security levels by db
    public static function DBLoad();

}




<?php

/**
 * Permissions class
 *
 */
class Perms {
    private static $_dblink;
    /**
     * Stores the permissions array
   * $array['Login'] = 1;
     * $array['Post'] = 2;
     * $array['Edit'] = 4;
     * $array['Delete'] = 8;
     */
    private static $_perm_array;
    /**
     * Holds a reference to the variable to verify againsts
     */
    private static $_user_value;

    /**
     * $user_value must be a already initilized variable
     * an example would be $_SESSION['security'] but this
     * would only work AFTER start session has been called
     */
    public static function initPerms(&$user_value, $dblink = NULL) {
        self::$_dblink = $dblink;
        self::$_user_value = &$user_value;
    }

    /**
     * Accepts either a single key or array of keys
     */
    public static function permCheck($value) {
        if(!isset(self::$_perm_array) AND self::$_dblink) {
            self::DBLoad();
        }
        if(!isset(self::$_perm_array)) {
            return false;
        }
        if(is_array($value)) {
            /**
             * Since we are dealing with an array we need to check each key
             * If any keys fail there check return false
             */
            foreach($value as $key) {
                if(!isset(self::$_perm_array[$key]) OR !(self::$_perm_array[$key] & self::$_user_value)) {
                    return false;
                }
            }
            return true;
        /**
         * Single value, go ahead and check, return true if success
         */
        } elseif(isset(self::$_perm_array[$value]) AND (self::$_perm_array[$value] & self::$_user_value)) {
            return true;
        }
        return false;
    }

    /**
     * Assign the array you wish to use for verification
     */
    public static function ArrayLoad($perm_array) {
        self::$_perm_array = $perm_array;
    }

    /**
     * Loads the verification array from a database
     */
    private static function DBLoad() {
        $stmt = self::$_dblink->prepare('SELECT * FROM user_perms');
        $stmt->execute();
        while($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            self::$_perm_array[$row['name']] = $row['flag'];
        }
        $stmt->closeCursor();
    }

}

