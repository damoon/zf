Zend Framework Component Proposal

Proposed Component Name
-----------------------------------------------
Zend_Tree


Proposers
-----------------------------------------------
Andries Seutens <andries.seutens@skynet.be>


Overview
-----------------------------------------------
Providing an easy to use "tree" reader/builder/manipulator.
Trees can either be stored in a database, xml file, or the
filesystem.


References
-----------------------------------------------
http://pear.php.net/package/Tree (never really finished (last beta release 2003-03-17)


Requirements
-----------------------------------------------
* Possibility to store data seperately from the tree nodes (for complex objects);
* Possibility to store directly as class members of a Tree_Node (for common data types like strings, integers)
* Support standard recursion,
* Support MPTT;


Theory of Operation
-----------------------------------------------
* Enumerating all the items;
* Searching for an item;
* Adding a new item at a certain position on the tree;
* Deleting an item;
* Removing a whole section of a tree;
* Adding a whole section to a tree;
* Moving a whole section to a different node;
* Finding the root for any node;
* Manipulate hierarchical data;
* Manipulate sorted lists of data;
* Exporting to a variety of different formats (eg DHTML, XML, etc);
* Importing from a variety of different formats (eg XML, database resources etc);
* Get a node's children
* Get a node's parent
* Sort each level of a subtree


Class Index
-----------------------------------------------
((List Zend_Classes that will be provided by this component.))


Use Cases
-----------------------------------------------
This is just to show an example, please do not mind the naming conventions used.

Usage COULD be as follows (regardless of the naming conventions):

$tree = new Tree();
$tree->import(new Tree_Import_XML('foobar.xml'));
$data = $tree->export(new Tree_HTML_Menu());

$menu = new HTML_Menu($data, 'tree');
$menu->show();

You are also able to switch data sources:

$tree = new Tree();
$tree->import(new Tree_Import_XML('foobar.xml'));
$tree->export(new Tree_RDBMS_Menu($dbconfig));

And now you can read your menu from the database:

$tree = new Tree();
$tree->import(new Tree_Import_RDBMS($dbconfig));
$data = $tree->export(new Tree_HTML_Menu());

$menu = new HTML_Menu($data, 'tree');
$menu->show();

Class Skeletons
-----------------------------------------------
Open for discussion

/**
 * Base tree class
 *
 * Implementing IteratorAggregate allows to
 * iterate recusively over the tree
 */
class Tree (implements IteratorAggregate)
{
        /**
         * Reference to the root node
         */
        public $rootnode;

        /**
         * Stores references to all nodes in the tree
         */
        private $_nodes;

        /**
         * Returns node by id
         *
         * All nodes in the tree are accessible by an unique id
         */
        function getNode($id)
        {
        }

        /**
         * Moves an node ands its children
         */
        function move(Tree_Node $sourcenode, Tree_Node $targetnode)
        {
        }

        /**
         * Copies a node and its children
         */
        function copy(Tree_Node $sourcenode, Tree_Node $targetnode)
        {
        }

        /**
         * Setups the ids
         *
         * After adding/removing/moving/copying nodes
         * this method must be called.
         */
        function setup()
        {
        }

        /**
         * Exports the tree
         * The export is handled by an Tree_Export object. So the
         * the tree can be exported as plain text, xml, stored in
         * a database or whatever you can
         * think of
         */
        function export(Tree_Export $object)
        {
                return $object->get($this);
        }

        /**
         * Counterpart to export
         */
        function import(Tree_Import $import)
        {
                $import->import($this);
        }
} //end of class Tree

/**
 * Represents a node in a tree
 */
class Tree_Node implements IteratorAggregate
{
        /**
         * Reference to parent node
         */
        public $parent;

        /**
         * Array of references to child nodes
         */
        public children;

        /**
         * Index of this node in the
         * $this->parent->children array
         */
        public $childindex;

        /**
         * name of the node
         */
        public $payload;

        /**
         * Level of this node in the tree
         */
        public $level;

        /**
         * ID of the node in the tree
         * @see Tree->getNode($id) and Tree->setup()
         */
        public $id;

        /**
         * Checks if this node has children
         */
        public function hasChildren()
        {
        }

        public funtion getChild($index)
        {
        }

        public function addChild(Tree_Node $child)
        {
        }

        public function removeChild($index)
        {
        }

        /**
         * Used after removing/adding child nodes
         */
        private function updateLevels(Tree_Node $node)
        {
        }
} //end of Tree_Node

interface Tree_Export
{
    /**
     * Converts tree nodes to data
     * @param $tree (object Tree)
     */
    public function get($tree);
}

/** @ingroup Tree
 * Interface for tree import objects
 */
interface Tree_Import
{
    /**
     * Converts data to tree nodes
     * @param $tree (object Tree)
     */
    public function import($tree);
}
