Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
ZInputFilter


Proposers
-----------------------------------------------
Chris Shiflett


Revision
-----------------------------------------------
$Id: ZInputFilter-proposal.txt,v 1.11 2006/01/26 04:22:26 chris Exp $


Overview
-----------------------------------------------
ZInputFilter provides simple facilities that promote a structured and
rigid approach to input filtering.


References
-----------------------------------------------
http://files.derickrethans.nl/filter_extension.html
http://pear.php.net/package/Validate
http://www.owasp.org/software/labs/phpfilters.html
http://cyberai.com/inputfilter/
http://iamcal.com/publish/articles/php/parsing_email


Requirements
-----------------------------------------------
There are three groups of people who benefit from the use of
ZInputFilter:

1. Developers - Developers are given a simple solution for filtering
   input that helps ensure the integrity of their data without adding
   unnecessary complexity to their code.

2. Managers - Managers (project managers, technical managers, etc.)
   can restrict what developers are able to do with raw input and
   enforce a structured approach to input filtering.

3. Auditors - People who audit the code can easily identify when and
   where raw input is accessed by a developer. This has the
   additional benefit of code clarity.


Dependencies on Other Framework Components
-----------------------------------------------


Theory of Operation
-----------------------------------------------
In its simplest form, ZInputFilter provides both blacklist and
whitelist methods for filtering input. Both provide consistent
operation. If the data is valid, it is returned. Otherwise, FALSE
is returned. Extreme simplicity.

This brings ZInputFilter on par with many existing solutions, but it
does nothing to further help those who need a more structured or
rigid approach. Therefore, by default, ZInputFilter enforces
controlled access to raw input.

Two syntaxes are supported. In the default (strict) approach, only
the array to be filtered is passed to the constructor:

$filterPost = new ZInputFilter($_POST);
$email = $filterPost->isEmail('email');

ZInputFilter sets the array that is passed ($_POST) to NULL, so
direct access is no longer possible (except through the getRaw()
method, which is much easier to monitor and/or avoid altogether.)

In the optional (non-strict) approach, a second argument, FALSE, is
passed to the constructor:

$filterPost = new ZInputFilter($_POST, FALSE);
$email = $filterPost->isEmail('email');

The use of the filter is exactly the same, but instead of
ZInputFilter setting the original array ($_POST) to NULL, developers
can still access it directly. This approach is discouraged.

Class Index
-----------------------------------------------
ZInputFilter


Use Cases
-----------------------------------------------
<?php

/**
 * Strict Whitelist Approach (Preferred)
 */
$clean = array();
$filterPost = new ZInputFilter($_POST);

if (!$clean['email'] = $filterPost->isEmail('email'))
{
    /* Invalid Email */
}

/**
 * Strict Blacklist Approach
 */
$clean = array();
$filterPost = new ZInputFilter($_POST);

$clean['comment'] = $filterPost->noTags('comment');

/**
 * Non-Strict Whitelist Approach
 */
$clean = array();
$filterPost = new ZInputFilter($_POST, FALSE);

if (!$clean['email'] = $filterPost->isEmail('email'))
{
    /* Invalid Email */
}

/**
 * Non-Strict Blacklist Approach
 */
$clean = array();
$filterPost = new ZInputFilter($_POST, FALSE);

$clean['comment'] = $filterPost->noTags('comment');

?>

Class Skeletons
-----------------------------------------------

The following methods represent essential filters. They are divided
into three groups: whitelist, blacklist, and custom. We shouldn't
present these methods in categories like this, but I think this helps
with consistent naming and implementation during development.

Note: Where filtering is locale-specific, adhere to locale settings,
so that developers can simply use setlocale() as appropriate.

Note: The references to $key in the descriptions refer to the key of
the array element to filter. The array itself is passed to the
constructor when the object is instantiated. The references to value
refer to the value of the array element. See the use cases for more
information.

Whitelist:

    isAlnum($key)
        Returns value if every character is alphabetic or a digit,
        FALSE otherwise.

    isAlpha($key)
        Returns value if every character is alphabetic, FALSE
        otherwise.

    isBetween($key, $min, $max)
        Returns value if it is greater than $min and less than
        $max, FALSE otherwise.

    isCcnum($key, $type = NULL)
        Returns value if it is a valid credit card number format.
        The optional second argument allows developers to indicate
        the type.

    isDate($key, $format = NULL)
        Returns value if it is a valid date, FALSE otherwise. The
        optional second argument allows developers to indicate a
        specific format, using a valid date() string such as H:i:s.
        It also checks for a valid Gregorian date, so 31 Feb 2006
        isn't valid.

    isDigits($key)
        Returns value if every character is a digit, FALSE
        otherwise. This is just like isInt(), except there is no
        upper limit.

    isEmail($key)
        Returns value if it is a valid email format, FALSE
        otherwise.

    isFloat($key)
        Returns value if it is a valid float value, FALSE
        otherwise.

    isGreaterThan($key, $min)
        Returns value if it is greater than $min, FALSE otherwise.

    isHex($key)
        Returns value if it is a valid hexadecimal format, FALSE
        otherwise.

    isHostname($key)
        Returns value if it is a valid hostname, FALSE otherwise.

    isInt($key)
        Returns value if it is a valid integer value, FALSE
        otherwise.

    isIp($key)
        Returns value if it is a valid IP format, FALSE otherwise.

    isLength($key, $min, $max)
        Returns value if its length is greater than $min and less
        than $max, FALSE otherwise.

    isLessThan($key, $max)
        Returns value if it is less than $max, FALSE otherwise.

    isName($key)
        Returns value if it is a valid format for a person's name,
        FALSE otherwise.

    isPhone($key)
        Returns value if it is a valid phone number format, FALSE
        otherwise.

    isUri($key)
        Returns value if it is a valid URI format, FALSE otherwise.

    isZip($key)
        Returns value if it is a valid US ZIP, FALSE otherwise.

Blacklist:

    noTags($key, $tags = NULL, $attributes = NULL)
        Returns value without tags. The optional second and third
        arguments allow developers to indicate tags and attributes
        that should not be removed.

    noPath($key)
        Returns basename(value).

    getAlpha($key)
        Returns only the alphabetic characters in value.

    getAlnum($key)
        Returns only the alphabetic characters and digits in value.

    getDigits($key)
        Returns only the digits in value. This differs from
        getInt().

    getDir($key)
        Returns dirname(value).

    getPath($key)
        Returns realpath(value).

    getInt($key)
        Returns (int) value.

    getLength($key, $length)
        Returns the first $length characters of value.

    getRaw($key)
        Returns value.

Custom:

    isOneOf($key, $allowed)
        Returns value if it is one of $allowed, FALSE otherwise.

    isRegex($key, $pattern)
        Returns value if it matches $pattern, FALSE otherwise. Uses
        preg_match() for the matching.
