Zend Framework Component Proposal



Proposed Component Name
-----------------------------------------------
Zend_Crypt


Proposers
-----------------------------------------------
Jeffrey Sambells <jeff@wecreate.com>


Revision
-----------------------------------------------
1.0


Overview
-----------------------------------------------
Zend_Crypt will offer a consistent OO interface for encryption, decryption and 
if applicable, public/private key management for various ciphers.

References
-----------------------------------------------
GnuPG (http://www.gnupg.org/)
PGP (http://www.pgp.com/)
Mcrypt (http://ca3.php.net/mcrypt)


Requirements
-----------------------------------------------
- Dependent on cipher, installation may require one of Mcrypt, GnuPG or PGP
- Able to decrypt and encrypt strings & files
- Provide public & private key management including creating, importing and 
  exporting keys.
- Provide a consistent OO interface for varying ciphers.


Dependencies on Other Framework Components
-----------------------------------------------
none outside this proposal


Theory of Operation
-----------------------------------------------
Zend_Crypt::factory() will create instances of Zend_Crypt_Adapter_Abstract
depending on which type of cipher has been requested. The user will then use 
the methods of the new object to decrypt and encrypt data. 

Encrypted (ciphertext) and decrypted (cleartext) data is held in the 
Zend_Crypt_Data object. When dealing with files, this object would implement an
iterator pattern so the user would be able to read the contents of the encrypted
or decrypted file without the need to invoke their own file calls to the file.

Key creation is are managed through the Zend_Crypt_Adapter_Abstract and each key
is represented by the Zend_Crypt_Key object. The role of the key will vary
slightly from cipher to cipher, but in general, the Zend_Crypt_Key is created by
the Zend_Crypt_Adapter_Abstract (getKey & generateKey factories) but signing and
other direct key related functionality falls directly on the Zend_Crypt_Key 
object.

The class attempts to provide a consistent interface to varying ciphers however
it will be up to the user to understand the proper cryptographic use of each 
type of cipher offered. (For example, if using Blowfish, it is up to the user
to know that Blowfish does not use keys in a keyring, and the singing of keys 
is not applicable.) An exception will be thrown in the event the user attempts
to use methods that are not applicable to their requested cipher.


Class Index
-----------------------------------------------
Classes will follow the directory structure:

Crypt.php
Crypt/
    Exception.php
    Key.php
    Data.php
    Adapter/
        Abstract.php
        Exception.php
        Gpg.php
        Pgp.php
        TripleDes.php
        BlowFish.php
        etc...


Use Cases
-----------------------------------------------
Exact usage would depend on the type of cipher and/or standard chosen for 
the encryption. GnuPG for example requires the use of public/private keys 
whereas TripleDES requires only a passphrase. In the event that the user 
attempts to do operations that do not apply to a specific cipher/standard, 
an exception would be thrown.

Note: in real production code the following would be wrapped in try/catch 
blocks as necessary to catch exceptions and deal with errors.

<?php
/**
* GPG example using public/private keys
**/

//deault password for GPG keyring user
$config = array(
	'password'=>'******'
);

$crypt = Zend_Crypt::factory('gpg',$config);


/**
* Key management
*/

//create a new key
$newPrivateKey = $crypt->generateKey(
        'me@example.com',
        'Jeffrey Sambells',
        'Just a test key',
        'password');

//list all keys
$availableKeys = $crypt->getAllKeys();

//Import a key
$importedKey = $crypt->importBlock($ascii);

//Retrieve a key and create a Zend_Crypt_Key object
$myKey = $crypt->getKey('jeff@wecreate.com');
$recipientKey = $crypt->getKey('you@example.com');

//sign the imported key
$importedKey->sign($myKey);

//set trust level
$importedKey->trust = Zend_Crypt::KEY_FULLY_TRUST;

//Exporting a key
$publicASCII = $myKey->export();

//Removing
$crypt->removeKey($importedKey);


//optionally you could also retrieve keys using
Zend_Crypt_Key::setDefaultAdapter($crypt);
$myKey = new Zend_Crypt_Key('jeff@wecreate.com');



/**
* Encrypting / Decrypting
*
* There are two methods you could use to encrypt/decrypt data. The first is 
* to usethe quick encryptString & encryptFile methods, or you could create a 
* data object directly.
*/


//encrypt a string
$dataObject = $crypt->encryptString($recipientKey,'hello world');

//encrypt a file
$dataObject = $crypt->encryptFile($recipientKey,'/path    o/file.in');

//encrypt a file into another destination file
$dataObject = $crypt->encryptFile($recipientKey,'/path    o/file.in','/path    o/file.out');

//decrypt a string
$dataObject = $crypt->decryptString($myKey,'--ENCRYPTED TEXT--');

//decrypt a file
$dataObject = $crypt->decryptFile($myKey,'/path    o/file.in');

//decrypt file into another destination file
$dataObject = $crypt->decryptFile($myKey,'/path    o/file.in','/path    o/file.out');

//Signing the encrypted information
$dataObject->sign($myKey);



//encrypting/dectypting by createing a Zend_Crypt_Data object

$dataObject = new Zend_Crypt_Data;

//encrypting
//from a string
$dataObject->setCleartext('hello world');

//from a file
$dataObject->setCleartext('/path/to/file.in',true);

$crypt->encrypt($dataObject);
echo $dataObject->ciphertext;

//decrypting
//from a string
$dataObject->setCiphertext('--ENCRYPTED TEXT--');

//from a file
$dataObject->setCiphertext('/path    o/file.in',true);

//decrypting
$crypt->decrypt($dataObject);
echo $dataObject->cleartext;



/**
* TripleDES Example
* 
* TripleDES only requires a string key and the text to encrypt.
* @see http://ca3.php.net/mcrypt example
**/

$crypt = Zend_Crypt::factory('tripleDes');

//create a Zend_Crypt_Key object
$key = $crypt->getKey('this is a secret key');

$dataObject = $crypt->encryptString($key,'hello world');

$crypt->decrypt($key,$dataObject);
echo $dataObject->cleartext;

?>







Class Skeletons
-----------------------------------------------
I've provided the rough skeleton for
- Zend_Crypt
- Zend_Crypt_Adapter_Abstract
- Zend_Crypt_Data
- Zend_Crypt_Key

Obviously the exceptions would be implements similar to the exceptions in other
modules and each adapter would implement the abstract and include additional 
internal processing functions to deal with IO to the system.

<?php

/**
 * Class for creating the adapter and performing common operations.
 */
class Zend_Crypt {

    /**
     * constant values
     */
    const KEY_TRUST_UNKNOWN = 1;
    const KEY_TRUST_NO = 2;
    const KEY_TRUST_MARGINALLY = 3;
    const KEY_TRUST_FULLY = 4;
    const KEY_TRUST_ULTIMATELY = 5;
    
    const CIPHER_GPG = 1;
    const CIPHER_PGP = 2;
    const CIPHER_BLOWFISH = 3;
    const CIPHER_TRIPLEDES = 4;
    //etc...
   
    /**
     * Factory for Zend_Crypt_Adapter classes.
     *
     * @return Zend_Crypt_Adapter_Abstract
     */
    static public function factory($adapterName, $config = array()) {}
}


/**
 * Abstract to be used for each cipher.
 *
 * Provides common methods for each cipher. Some will throw Zend_Crypt_Adapter_Exception 
 * in the event the method does not apply. For example, ciphers such as BlowFish
 * do not use all 'key' related emthods.
 */
abstract class Zend_Crypt_Adapter_Abstract
{

    /**
     * User-provided configuration
     */
    protected $_config = array();

    /**
     * Constructor.
     */
    public function __construct($config) {}

    /**
     * Encrypt a Zend_Crypt_Data object.
     *
     * @param object $recipient Key of recipient.
     * @param Zend_Crypt_Data $in Item to encrypt.
     * @return Zend_Crypt_Data
     */
    abstract public function encrypt(Zend_Crypt_Key $recipientKey,$in) {}

    /**
     * Encrypt a string.
     *
     * @param object $recipient Key of recipient.
     * @param string $in string to encrypt.
     * @return bool | Zend_Crypt_Data
     */
    abstract public function encryptString(Zend_Crypt_Key $recipientKey,$in) {}
    
    /**
     * Encrypt a file.
     *
     * @param object $recipient Key of recipient.
     * @param string $in Path to the file.
     * @param string $out Optional path to output the file.
     * @return bool | Zend_Crypt_Data
     */
    abstract public function encryptFile(Zend_Crypt_Key $recipientKey,$in,$out=null) {}

    /**
     * Decrypt a Zend_Crypt_Data object.
     *
     * @param Zend_Crypt_Data $in Data to decrypt.
     * @return Zend_Crypt_Data
     */
    abstract public function decrypt($in) {}
    
    /**
     * Decrypt a string.
     *
     * @param string $in Data to decrypt.
     * @return Zend_Crypt_Data
     */
    abstract public function decryptString($in) {}

    /**
     * Decrypt a file.
     *
     * @param string $in Path to the file.
     * @param string $out Optional path to output the file.
     * @return Zend_Crypt_Data
     */
    abstract public function decryptFile($in,$out) {}

    /**
     * List all the keys available in the key ring.
     *
     * @param string $type Type of keys to include (public | secret | both).
     * @return array of Zend_Crypt_Key
     */
    abstract public function getAllKeys($type='public') {}

    /**
     * Get a single key from the key ring.
     *
     * @param string $id Key id.
     * @param string $type Type of keys to include (public | secret | both).
     * @return Zend_Crypt_Key
     */
    abstract public function getKey($id,$type='public') {}

    /**
     * Import a key.
     *
     * @param string $block ASCII key to import.
     * @return Zend_Crypt_Key
     */
    abstract public function importBlock($block) {}

    /**
     * Generate a new key.
     *
     * @return Zend_Crypt_Key
     */
    abstract public function generateKey($email, $realName, $comment, 
    $passphrase = null, $expireDate = null, $type = null, $length = null) {}

    /**
     * Remove a key.
     *
     * @return bool
     */
    abstract public function removeKey(Zend_Crypt_Key $id, $type = 'public') {}
}

/**
 * Object which contains the cleartext and ciphertext of 
 * encrypted & decrypted data.
 */
class Zend_Crypt_Data {
	private $cipher;
	private $ciphertext;
	private $cleartext;
	private $signed;

    /**
     * Sign encrypted data.
     *
     * @param string $key Key id to sign with.
     * @return bool
     */
    abstract public function sign($key) {}
    
    /**
     * Verify the signature.
     * @return bool
     */
    abstract public function verify() {}
    
    /**
     * Set the encrypted text.
     *
     * Useful for reading from existing encrypted variables or files
     * @param string $in input string or file name.
     * @param bool $isFile true if $in is a path to a file.
     * @return bool
     */
    abstract public function setCiphertext($in,$isFile=false)
    
    /**
     * Set the unencrypted text.
     *
     * @param string $in input string or file name.
     * @param bool $isFile true if $in is a path to a file.
     * @return bool
     */
    abstract public function setCleartext($in,$isFile=false)
    
    /**
     * Get/Set data properties
     */
    __set() {}
    __get() {}
}

/**
 * Object to represent keys for applicable ciphers.
 */
class Zend_Crypt_Key {
	private $cipher;
	private $signed;
	private $trust;
	
    /**
     * set the default crypt object and cipher.
     *
     * @param object $adapter instance of the adapter.
     * @return bool
     */
    static setDefaultAdapter(Zend_Crypt_Adapter_Abstract $adapter) {}
    
    /**
     * Sign key.
     *
     * @param string $key Key id to sign with.
     * @return bool
     */
    abstract public function sign($key) {}

    /**
     * Verify the key.
     * @return bool
     */
    abstract public function verify() {}

    /**
     * Export a key.
     *
     * @param string $type Type of key to export.
     * @return Zend_Crypt_Key
     */
    abstract public function export($type) {}

    /**
     * Get/Set key properties
     * 
     * Set properties such as trust
     */
    __set() {}
    __get() {}
}


?>
