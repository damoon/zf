Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
Zend_Mail

Proposers
-----------------------------------------------
Nico Edtinger, Telekom Austria

Revision
-----------------------------------------------
Zend_Mail,Read 2006-04-30


Overview
-----------------------------------------------
Mail is one of the most important services on the internet. In addition to
sending mails it's also important for many websites to read and receive mail
messages, be it simple webmail interfaces, archives of mailing lists or
cron jobs that need to read incoming mails.

There are many existing mail libs, even in PHP, but they often don't fit
well. Some of them are to strict or to sloppy, others are made for a specific
application. And then there is some code written in C, that's good, but
not part of the default PHP distribution.

The goal is to offer classes for Mbox, Maildir, POP3 and IMAP and reuse
the existing code of the mail sending classes. Also links between these two
are possible, like reply to a message or sending to an IMAP folder.

Note: Some methods or parameters needed for IMAP may be missing in 
this proposal (folder, flags, save message)

References
-----------------------------------------------
Inspirations: (the good, the bad and the ugly - in no particular order)

PECL: mailparse, POP3
PEAR: Mail_IMAP, Mail_Mbox
eZ Components: ezcMailPop3Transport
PHP: c-client lib, imap_*


Requirements
-----------------------------------------------
Create an easy and common API to fetch messages from mail storages.
Make it possible to access additonal functionality of mail storages without
coding for one specific mail storage (via capabilities).

Dependencies on Other Framework Components
-----------------------------------------------
Zend_Mime - for decoding and as base for message class


Theory of Operation
-----------------------------------------------
The classes are divided in:
	transport classes
	mail classes
	message classes

All mail messages are stored in a message storage. If the
storage is external (not read from a file resource) a transport
class is used to translate the used protocol in PHP structures.

Based on this classes are the mail classes, or if an internal
storage is used the mail classes can read directly from the
storage. These classes extend an abstract mail class defining
the common interface.

Each message is returned as message class, which can be specialized
to support mail storage specific functions like late fetching of 
the whole message or parts of a message.

If the message is a multipart message it can return each part, which
could itself be multipart.

As ASCII pseudo graphic:

Zend_Mail_Transport_Pop3/Imap
        ^
        |
      <uses>
        |
Zend_Mail_Pop3/Imap | Zend_Mail_Mbox/Maildir  
               \     /
                \   /
                 \ /
                  + --<extends>--> Zend_Mail_Abstract 
                  |
              <returns>
                  |
                  v
            Zend_Mail_Message
                  |
               <returns>
                  |
                  v
            Zend_Mime_Part<-.
                  |         |
              <returns>-----Â´
                
Class Index
-----------------------------------------------
Zend_Mail_Message
Zend_Mail_Abstract
Zend_Mail_Mbox
Zend_Mail_POP3
Zend_Mail_Transport_POP3
Zend_Mail_Maildir
Zend_Mail_Imap
Zend_Mail_Transport_Imap


Use Cases
-----------------------------------------------
<?php

Zend::loadClass('Zend_Mail_Mbox');

$mail = new Zend_Mail_Mbox(array('filename' => 'foo.mbox'));
echo $mail->countMessages(), " mails in your mbox file\n";
echo "== First message ==\n";
$message = $mail->getMessage(1);
echo 'from ', $message->from, ' to ', $message->to, "\n";
echo 'with subject "', $message->subject, "\"\n---\n";
echo $message->getContent();

?>

A more complex example can be found 
at http://nico.edtinger.at/pub/2006/examples/example3.phps

Class Skeletons
-----------------------------------------------
Zend_Mail_Transport_*
	depending on the protocol

Zend_Mail_Abstract (interface implemented by Zend_Mail_[Mbox|Pop3|...])
	mixed __get()
		for accessing capabilities: hasFolder, hasUniqueid, hasDelete, hasCreate, hasTop
	array getCapabilities()
		returns all capabilities at once
	int countMessages()
		count messages in current mailbox or folder
	mixed getSize([int $id])
		 get size of a specific message or array with size of all messages in current 
		 mailbox or folder
	Zend_Mail_Message getMessage(int $id)
		get a message from current mailbox or folder
	Zend_Mail_Message getHeader(int $id, [int $bodyLines])
		fetch only header and $bodyLines lines of message body (default: 0)
	__construct(array $params)
		mail class specific parameters
	__destruct, null close()
		close resources to mail storage
	null noop()
		do nothing, but at least check if the transport resource is alive
	removeMessage(int $id)
		remove a message from mail storage

Zend_Mail_Message
	mixed __get()
		for accessing mail headers (case-insensitive)
	mixed getHeader([string $name, [int $format]])
		get one or all headers. If $format is not defined a mail header that occurs more than
		once is returned as array; else as string. With $format it can be forced to be
		an array or a string. 
	string getContent()
		get whole message
	bool isMultipart()
		is message a mime multipart message?
	string getPart(mixed $part)
		$part can be number of part or a mime type. In the latter case the first found part
		with the given mime type is returned.
	int countParts()
		number of parts 
