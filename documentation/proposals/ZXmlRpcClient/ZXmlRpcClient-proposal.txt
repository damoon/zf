Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
ZXmlRpcClient


Proposers
-----------------------------------------------
Amit Gottlieb


Revision
-----------------------------------------------
$Id: ZXmlRpcClient-proposal.txt,v 1.1 2006/02/01 09:17:33 amit Exp $


Overview
-----------------------------------------------
ZXmlRpcClient is a very simple XML-RPC client implementation.


References
-----------------------------------------------
http://www.xmlrpc.com/ (spec can be found directly at http://www.xmlrpc.com/spec)


Requirements
-----------------------------------------------
SimpleXML


Dependencies on Other Framework Components
-----------------------------------------------
ZHttpClient for sending/receiving HTTP requests

Theory of Operation
-----------------------------------------------
The ZXmlRpcClient is trying to follow the "Extreme Simplicity" as much as possible.
The user who uses this class should know nothing about the XML-RPC protocol, response, request and almost nothing about the different available values.
The user will deal with PHP native types, no necessary to do any encoding (not base64 nor XML encoding for strings)
The user need to know 3 things:
1. The full address of the service he wants to use
2. The name of the method he wants to call, plus it's necessary parameters
3. The type of the value he gets in response to the method call (scalar/array), and of course what he wants to do with it.
Optionally, the user will be able to tell the ZXmlRpcClient to "find out" the types for his method call, the class will call the system.methodSignature call (if exists) and than the class will "know" and will automatically cast the PHP native parameters into the necessary XML-RPC values.
This option is expensive (require an additional HTTP request) so will be disabled by default.

There are 2 ways to call the methods:
a. using the ZXmlRpcClient::call(), the first parameter of call() is the method name, and then the method parameters
b. using the magic function __call(), this option is more intuitive but with one problem, most methods of XML-RPC services are in "namespace.method_name" format which means that the __call() cannot be called directily.
    The user need to wrap the method name with {""}, i.e. $xmlrpc->{"namespace.method_name"}().
    This cause the intuitive way to be a little less intuitive.

On failure an exception will be thrown.


Class Index
-----------------------------------------------
ZXmlRpcClient
ZXMLRPCValue for holding XML-RPC value types (although the user will not have to use them directly)

Use Cases
-----------------------------------------------
<?php
// Set the full address of the server service we want to access
$time_service = new ZXmlRpcClient('http://time.xmlrpc.com/RPC2');

// Call the currentTime.getCurrentTime method in the service (the method has no parameters)
// we could also call this function using $time_service->{"currentTime.getCurrentTime"}();
try {
    $time_service->call('currentTime.getCurrentTime');
} catch (ZXmlRpcClientException $e) {   // Request failed
    // Show the error code and string
    echo 'Error: (' . $e->faultCode() . '): '. $e->faultString() . '<br>';
	die();
}

// Request succeeded, we can show the return value in 3 formats: native PHP (default), original XML and as the ZXmlRpcValue object (optional)
Zend::dump($time_service->getResponse(),'Native PHP');
Zend::dump($time_service->getResponse(ZXmlRpcClient::XML),'XML');

// Example of calling a method with parametrs:
// Gets 2 integers
$xml_client->call('method.name',1,2);
// Gets 2 parameters, the first is a string and the second is an array of integers
$xml_client->{"method.name"}('Amit',array(1,2));
// Gets 1 parameter, it convert it automaticalyy to struct (cause this array is associative)
$xml_client->call('method.name',array('name' => 'Amit'));
// Gets 1 parameter of type dateTime.iso8601, we use a static function that converts native PHP string to the ZXmlRpcValue object
$xml_client->{"method.name"}(ZXmlRpcClient::dateTimeValue(date('c',time())));

?>


Class Skeletons
-----------------------------------------------
<?php
/**
 * An XML-RPC client implementation
 *
 */
class ZXmlRpcClient
{
    /**
     * Different types for the response: as PHP native types, original XML or in ZXmlRpcValue objects
     */
    const PHP_NATIVE = 'php_native';
    const XML = 'xml';
    const ZXMLRPC_VALUE = 'ZXMLRPC_value';
    
    /**
     * Set the XML_RPC service server address
     *
     * @param string $server Full address of the XML-RPC service (i.e. http://time.xmlrpc.com/RPC2)
     */
    public function __construct($server);
    
    /**
     * Call a specific method (with or without parameters) from the XML-RPC service
     *
     * @param string $method_name The method we call from the service
     * @param array $params Optional, Parameters to pass the method, multiple (using func_get_args() functiojn) parameter of native PHP types or ZXmlRpcValue objects
     * @return bool Whether or not the request succedded
     */
    public function call($method_name);
    
    /**
     * Using the magic function __call, the user can call methods directly by the method name.
     * One exception: many of the XML-RPC methods have namespace in the method name (i.e. currentTime.getCurrentTime),
     *   so in order to use the __call the user will have to call it in the following way: $xml_client->{"namespace.methodname"}()
     * This function will call the ZXmlRpcClient::call() function
     *
     * @return bool Whether or not the request succedded
     */
    public function __call($method_name, $params);
    
    /**
     * Call the reserved system.methodSignature method (try to call it even if it doesn't exists)
     * This will return the signature (return value type and the method parameters types) that is required for the parameter method
     *
     * @param string $method_name The name of the method we want to get it's signature
     * @return bool Whether or not the request succedded
     */
    public function methodSignature($method_name);
    
    /**
     * Call the reserved system.methodHelp method (try to call it even if it doesn't exists)
     * This will display a short description of the parameter method
     *
     * @param string $method_name The name of the method we want to get it's help
     * @return bool Whether or not the request succedded
     */
    public function methodHelp($method_name);
    
     /**
     * Call the reserved system.listMethods method (try to call it even if it doesn't exists)
     * This will display a list of all the methods exists in the service
     *
     * @return bool Whether or not the request succedded
     */
    public function listMethods();
    
    /**
     * In case there was a failure in the request, this function gets the failure string
     *
     * @param string $type The response value types, options are: PHP native types, original XML text or ZXmlRpcValue objects
     * @return mixed The response of the serivce
     */
    public function getResponse($type = ZXmlRpcClient::PHP_NATIVE);
    
    /**
     * Convert a PHP native string into a ZXmlRpcValue object of type dateTime.iso8601 (to be used as a parameter to the ZXmlRpcClient::call function)
     *
     * @param string $value The value to convert into dateTime value
     * @return ZXmlRpcValue
     */
    public static function dateTimeValue($value);
    
    /**
     * Convert a PHP native string into a ZXmlRpcValue object of type base64 (to be used as a parameter to the ZXmlRpcClient::call function)
     *
     * @param string $value The value to convert into base64 value
     * @return ZXmlRpcValue
     */
    public static function base64Value($value);
    
    /**
     * Transform a PHP native variable into a XML-RPC value object
     *
     * @param mixed $param the variable we want to transform into the ZXmlRpcValue objecr
     * @return ZXmlRpcValue
     */
    private function _phpNativeToXMLValue($variable);
    
}
