Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
ZView


Proposers
-----------------------------------------------
Paul M. Jones
Mike Naberezny


Revision
-----------------------------------------------
$Id$


Overview
-----------------------------------------------
Simple module for separating view logic from model and controller logic.
The view logic may use any template system, whether plain PHP, PHPLib,
or some other system.


References
-----------------------------------------------
Harry Fuecks
http://www.phppatterns.com/docs/design/templates_and_template_engines

Brian Lozier
http://www.massassi.com/php/articles/template_engines/


Requirements
-----------------------------------------------

- Separate view logic from model and controller logic

- Provide an interface for helper methods and supply a set of default
  helpers

- Provide an interface for output filters and supply a set of default
  filters


Dependencies on Other Framework Components
-----------------------------------------------
None


Theory of Operation
-----------------------------------------------

-- Overview

ZView provides a standardized way to encapsulate view logic away from
the model and controller logic in a Zend Framework application.  It is
template-system agnostic.

The controller tells the ZView object where view scripts are located,
and then assigns variables to ZView.  Alternatively, the view script can
be told to "mirror" the properties of an object.

The controller then tells the ZView object to render output using a
specified PHP view script.  ZView executes the view script in a
restricted scope and returns the buffered output results.

The view script runs inside the scope of the ZView class (as opposed to
the scope of the controller).  This means the view script has direct
access only to the variables assigned to the ZView object (i.e., via
"$this->").

The view script may use any template system desired.  These include (but
are not limited to) both plain PHP and PHPLib templates.


-- On-Demand Helpers

ZView supports load-on-demand helper objects.  As long as the helper
conforms to a specific convention, and exists in the defined helper
path, ZView will load and instantiate the helper only when it is are
called the first time.  For a helper called 'example', the convention
dictates:

    File name:   ZViewHelperExample.php
    Class name:  ZViewHelperExample
    Method name: example()

Helpers are dynamically loaded, but once loaded, they persist for the
duration of the ZView object.


-- Output Filters

ZView allows you to add output filters that are applied to the final
view script output.  As long as the filter conforms to a specific
convention, and exists in the defined filter path, ZView will load
and instantiate the filter only when it is are called the first time.
For a filter called 'example', the convention dictates:

    File name:   ZViewFilterExample.php
    Class name:  ZViewFilterExample
    Method name: filter()

Filters are loaded on-demand, are always static, and always use the
method name filter() as the entry point.


Class Index
-----------------------------------------------
ZView
ZView/helpers/ZViewHelper*
ZView/filters/ZViewFilter*


Use Cases
-----------------------------------------------

-- Controller script

With ZView, the controller logic is exactly the same regardless of the
view script and any related template system.  All the controller does is
tell the ZView object where the view scripts are located and what
variables should be used in the view.


-- View scripts

Note that all the following view scripts execute "inside" the scope of a
ZView object; all references to $this are references to the ZView object
properties and methods.


---- View script with plain PHP template

This books.php view script is itself a template, using plain PHP as the
markup.

    <html>
        <head>
            <title><?php echo $this->_escape($this->title) ?></title>
        </head>
        <body>
            <?php if ($this->books): ?>
                <!-- A table of some books. -->
                <table>
                    <tr>
                        <th>Author</th>
                        <th>Title</th>
                    </tr>
                    <?php foreach ($this->books as $key => $val): ?>
                        <tr>
                            <td><?php echo $this->_escape($val['author']) ?></td>
                            <td><?php echo $this->_escape($val['title']) ?></td>
                        </tr>
                    <?php endforeach; ?>
                </table>
            <?php else: ?>
                <p>There are no books to display.</p>
            <?php endif; ?>
        </body>
    </html>


---- View script with PHPLib templates

This books.php view script to manipulates a set of PHPLib templates.

First, the templates.

    header.tpl:
        <html>
            <head>
                <title>{title}</title>
            </head>
            <body>

    books.tpl:
        <!-- A table of some books. -->
        <table>
            <tr>
                <th>Author</th>
                <th>Title</th>
            </tr>
            <!-- BEGIN item -->
            <tr>
                <td>{author}</td>
                <td>{title}</td>
            </tr>
            <!-- END item -->
        </table>

    footer.tpl:
            </body>
        </html>

Next, the books.php view script itself to manipulate the templates.

    <?php
        // set up the template manipulation object
        require_once 'PhpLibTemplate/PhpLibTemplate.php';
        $root = dirname(__FILE__) . '/templates/';
        $unknowns = 'remove';
        $fallback = '';
        $tpl = new PhpLibTemplate($root, $unknowns, $fallback);

        // manipulate and output the header template
        $tpl->setFile('header', 'header.tpl');
        $tpl->setVar('title', $this->_escape($this->title));
        $tpl->pParse('header');

        // manipulate and output the books template
        if ($this->books) {
            $tpl->setFile('books', 'books.tpl');
            $tpl->setBlock('books', 'item', 'ItemBlock');
            foreach ($this->books as $book) {
                $tpl->setVar('author', $this->_escape($book['author']));
                $tpl->setVar('title', $this->_escape($book['title']));
                $tpl->parse('ItemBlock', 'item', true);
            }
            $tpl->pParse('output', 'books');
        } else {
            echo '<p>There are no books to display.</p>';
        }

        // manipulate and output the footer template
        $tpl->setFile('footer', 'footer.tpl');
        $tpl->print('footer');
    ?>


-- Rendering Additional View Scripts

To render additional scripts from within a view script, use the render()
method.

    <?php
        // the header portion
        $this->render('header.php');

        // the "main" body of this view script goes here
        // ...

        // the footer portion
        $this->render('footer.php')
    ?>

Note that each view script is rendered in its own scope, so local
variables set in one view script will not be carried into another.
If you want to share local variables, you may include the view script
directly:

    <?php
        // the header portion
        include $this->_script('header.php');

        // the "main" body of this view script goes here
        // ...

        // the footer portion
        include $this->_script('footer.php');
    ?>


-- Calling View Helpers

View helpers are loaded via the __call() magic method.  In order to call
a helper function, such as 'example', do this in your view script ...

    <?php
        $output = $this->example('hello');
    ?>

... and use $output as required by your template mechanism.  In plain PHP,
you would simply echo it.


Class Skeletons
-----------------------------------------------

<?php
/**
 * Abstract class for ZView to help enforce private constructs.
 *
 * $Id: ZView-proposal.txt,v 1.4 2005/12/08 14:31:17 pmjones Exp $
 */

/**
 * ZViewException
 */
require_once 'ZViewException.php';

/**
 * Abstract class for ZView to help enforce private constructs.
 */
abstract class ZViewAbstract {

    /**
     * Assigned variables.
     *
     * @var array
     */
    private $_vars = array();

    /**
     * Path stack for script, helper, and filter directories.
     *
     * @var StdClass
     */
    private $_path = array(
        'script' => array(),
        'helper' => array(),
        'filter' => array(),
    );

    /**
     * Stack of executing script file names.
     *
     * @var array
     */
    private $_file = array();

    /**
     * Instances of helper objects.
     *
     * @var array
     */
    private $_helper = array();

    /**
     * Stack of ZViewFilter names to apply as filters.
     *
     * @var array
     */
    private $_filter = array();

    /**
     * Callback for escaping.
     */
    private $_escape = 'htmlspecialchars';

    /**
     * Constructor.
     *
     * @param array $config Configuration key-value pairs.
     */
    public function __construct($config = array()) {
    }

    /**
     * Directly assigns a variable to the view script.
     *
     * Note that variable names may not be prefixed with '_'.
     *
     * @param string $key The variable name.
     * @param mixed $val The variable value.
     */
    public function __set($key, $val) {
    }

    /**
     * Retrieves an assigned variable.
     *
     * Note that variable names may not be prefixed with '_'.
     *
     * @param string $key The variable name.
     * @return mixed The variable value.
     */
    public function __get($key) {
    }

    /**
     * Accesses a helper object from within a script.
     *
     * @param string $name The helper name.
     * @param array $args The parameters for the helper.
     */
    protected function __call($name, $args) {
    }

    /**
     * Adds to the stack of view script paths in LIFO order.
     *
     * @param string|array The directory (-ies) to add.
     */
    public function addScriptPath($path) {
    }

    /**
     * Resets the stack of view script paths.
     *
     * To clear all paths, use ZView::setScriptPath(null).
     *
     * @param string|array The directory (-ies) to set as the path.
     */
    public function setScriptPath($path) {
    }

    /**
     * Adds to the stack of helper paths in LIFO order.
     *
     * @param string|array The directory (-ies) to add.
     */
    public function addHelperPath($path) {
    }

    /**
     * Resets the stack of helper paths.
     *
     * To clear all paths, use ZView::setHelperPath(null).
     *
     * @param string|array The directory (-ies) to set as the path.
     */
    public function setHelperPath($path) {
    }

    /**
     * Adds to the stack of filter paths in LIFO order.
     *
     * @param string|array The directory (-ies) to add.
     */
    public function addFilterPath($path) {
    }

    /**
     * Resets the stack of filter paths.
     *
     * To clear all paths, use ZView::setFilterPath(null).
     *
     * @param string|array The directory (-ies) to set as the path.
     */
    public function setFilterPath($path) {
    }

    /**
     * Add one or more filters to the stack in FIFO order.
     *
     * @param string|array One or more filters to add.
     * @return void
     */
    public function addFilter($name) {
    }

    /**
     * Resets the filter stack.
     *
     * To clear all filters, use ZView::setFilter(null).
     *
     * @param string|array One or more filters to set.
     * @return void
     */
    public function setFilter($name) {
    }

    /**
     * Assigns variables to the view script via differing strategies.
     *
     * ZView::assign('name', $value) assigns a variable called 'name'
     * with the corresponding $value.
     *
     * ZView::assign($array) assigns the array keys as variable
     * names (with the corresponding array values).
     *
     * @param string|array|object The assignment strategy to use.
     * @param mixed (Optional) If assigning a named variable, use this
     * as the value.
     * @see __set()
     */
    public function assign($spec) {
    }

    /**
     * Mirrors all public, protected, and private properties of an object
     * into the view script scope.
     *
     * Ideally, your controller should explicitly inject its instance
     * variables into the script scope using the assign() method or using
     * direct assignment.
     *
     * When this is not convenient or practical, mirror() copies all
     * instances variables from $object into the script scope,
     * without regard for the visibility of those variables (public,
     * protected, or private -- all are copied).
     *
     * @param object $object The object to mirror.
     */
    public function mirror($object) {
    }

    /**
     * Processes a view script and returns the output.
     *
     * @param string $name The script script name to process.
     * @return string The script output.
     */
    public function render($name) {
    }

    /**
     * Finds a view script from the available directories.
     *
     * @param $name string The base name of the script.
     */
    protected function _script($name) {
    }

    /**
     * Escapes a value for output in a view script.
     *
     * @param mixed $var The output to escape.
     * @return mixed The escaped value.
     */
    protected function _escape($var) {
    }

    /**
     * Applies the filter callback to a buffer.
     *
     * @param string $buffer The buffer contents.
     * @return string The filtered buffer.
     */
    private function _filter($buffer) {
    }

    /**
     * Adds paths to the path stack in LIFO order.
     *
     * ZView::_addPath($type, 'dirname') adds one directory
     * to the path stack.
     *
     * ZView::_addPath($type, $array) adds one directory for
     * each array element value.
     *
     * @param string $type The path type ('script', 'helper', or 'filter').
     * @param string|array $path The path specification.
     */
    private function _addPath($type, $path) {
    }

    /**
     * Resets the path stack for helpers and filters.
     *
     * @param string $type The path type ('helper' or 'filter').
     * @param string|array $path The directory (-ies) to set as the path.
     */
    private function _setPath($type, $path) {
    }

    /**
     * Loads a helper or filter class.
     *
     * @param string $type The class type ('helper' or 'filter').
     * @param string $name The base name.
     * @param string The full class name.
     */
    private function _loadClass($type, $name) {
    }
}
?>

<?php
/**
 * Concrete class for handling view scripts.
 *
 * $Id: ZView-proposal.txt,v 1.4 2005/12/08 14:31:17 pmjones Exp $
 */

/**
 * Abstract master class for extension.
 */
require_once 'ZViewAbstract.php';

/**
 * Concrete class for handling view scripts.
 */
class ZView extends ZViewAbstract {

    /**
     * Includes the view script in a scope with only public $this variables.
     *
     * @param string The view script to execute.
     */
    protected function _run() {
    }
}
?>

<?php
/**
 * An example helper class.
 */
class ZViewHelperExample {
    function example($var) {
        $var = htmlspecialchars($var);
        return "Here is '$var' as an example.";
    }
}
?>

<?php
/**
 * An example output-filter class.
 */
class ZViewFilterExample {
    function filter($buffer) {
        return str_replace('example', '-E-X-A-M-P-L-E-', $buffer);
    }
}
?>