Zend Framework Component Proposal


Proposed Component Name
-----------------------------------------------
ZAjax


Proposers
-----------------------------------------------
Stew Nickolas


Revision
-----------------------------------------------
$Id: ZAjax-proposal.txt,v 1.1 2006/01/19 00:09:39 mike Exp $


Overview
-----------------------------------------------
The ZAjax component provides Ajax based interaction with server side components
of the Zend Collaboration framework. The component consists of a simple 
javascript request object and associated handlers along with helper PHP 
classes for creating and responding to client ZAjax requests. ZAjax also 
provides a simple javascript proxy creation facitilty for conforming PHP 
classes, enabling developers to more easily interact with PHP
classes from the javascript client.

A note about AJAX:

For this proposal we tried to follow the classification used at the AjaxPatterns Wiki:

    * Application Frameworks - notable for widget abstractions and more along 
      the lines of traditional GUI frameworks
    * Infrastructure Frameworks - basic piping, leaving the content for the 
      developer to create.
    * Server-side Frameworks - HTML generation, remote invocation


References
-----------------------------------------------
((Links to inspirations, similar efforts, etc.))

Application Frameworks - OpenSource

Open Rico: http://openrico.org
Ning: http://www.ning.org
DOJO: http://www.dojotoolkit.org/
qooxdoo: http://qooxdoo.sourceforge.net/
Tibet: http://www.technicalpursuit.com/
Laszlo

Commerical Frameworks use of AJAX:

Backbase: http://www.backbase.com/
TIBCO/General Interface -  http://weblog.infoworld.com/udell/gems/tibco.html
Atlas (Microsoft)  
      Blog link - http://weblogs.asp.net/scottgu/archive/2005/06/28/416185.aspx
Flex - Macromedia
Nexaweb - http://www.nexaweb.com/
Lumen - http://www.lumensoftware.com/
Bindows - http://www.bindows.net/
NexusEdge - http://www.nexusedge.com/
Smashforce - http://blog.sforce.com/sforce/2005/07/ajax_toolkit.html

Infrastructure Frameworks:

prototype.js
script.aculo.us!
Behaviour - http://bennolan.com/behaviour/
sarissa - http://sarissa.sourceforge.net/doc/

Server-side Frameworks:

WebORB for Java - http://www.themidnightcoders.com/weborb/aboutWeborb.htm
Echo 2 - http://www.nextapp.com/products/echo2/
DWR - http://www.getahead.ltd.uk/dwr/
SWATO - http://swato.dev.java.net/
AJAX JSP Tag Library - http://ajaxtags.sourceforge.net/
AjaxAC - http://ajax.zervaas.com.au/
JPSPAN - http://jpspan.sourceforge.net/wiki/doku.php
XAjax - http://xajax.sf.net
Ruby On Rails
PAJAJ - http://www.wassons.org/pajaj/public/docs/index.php

I'm sure we missed several...

Requirements
-----------------------------------------------
1. Simple, do not attempt to introduce a new programming model for developing
applications, simply extend the existing one, while providing an adaptable
framework.

2. Work with "new" and old code, that is, make sure it is possible to
extend existing applications with ZAjax behavior. 

Our goal is to create a library for the Zend Framework that enables developers
to take advantage of AJAX based interactions while programming in the 
familiar settings of the PHP language and development environment; not 
requiring developers to be experts in the workings of JavaScript and the AJAX 
interaction model. To this end we see the following key requirements:

* Simple to understand, use, integrate and extend 
* Minimize context switches between JavaScript and PHP programming models
* Support the following  Development Scenarios:
	Top-down - developers create the application completely using the 
                   Zend Framework in PHP
	Evolutionary - existing assets can be extended with the AJAX 
	               capabilities
	Meet-in-the-middle - a designer generates a page skeleton and the 
                              developer must hook events etc. to integrate it 
			      with the back-end processing
* Focus on PHP the developer
* Cross-browser - but able to optimize for best browser/version to improve 
  user experience


Dependencies on Other Framework Components
-----------------------------------------------
1. The ZAjax component can work in conjunction with the ZForm implementation.
2. The ZAjax components contains a sub-component for iteracting with s
   server side classes using a JSON base protocol
3. ZRequest

Theory of Operation
-----------------------------------------------
As with most AJax libraries the ZAjax component builds of the XML plugins 
within the browsers (Firefox and IE). Pages can interact with server side 
content through these pipes and target either identified  HTML content or 
object content on the client (see Use Cases below). ZAjax etends the 
basic capabilities for HTML forms with auto-completion and Ajax based 
form submission. 

ZAjax provides a simple client side prototyped based class structure for 
defining javascript based classes and object and also includes basic 
introspection capabilities such as getClass.  

ZJSON builds on these base capabilities to provide javascript proxies for 
PHP classes. User can easily "proxy" PHP classes, invoke methods, set 
instance variables, define static variables, accces class constants as 
though they were PHP classes (well....almost, there are restrictions e.g. 
only public methods/properties, no $s, . instead of -> ...)

Class Index
-----------------------------------------------
((List ZClasses that will be provided by this component.))

The Javascript files/classes provided by the component are:
* class.js - provides the prototype based class structure:

  ZClass - provides the metaclass implementation for the ZAjax component
  Methods:
      create:function(name, initObject) 
      extend: function(cls, superCls) - extends the given 'cls' with the 
              superCls
    getName: function() - returns the name of a given class
    getClassFromName: function(name) - retrieves the class object associated
           with the name (if any) from the class subsystem.
    getSuper: function() = returns the super class of the class object bound
          to receiving (i.e. this) class.
    injectClasses: function(object) - used to apply a class structure to a
    given (object) anonymous javascript object.

  The javascript object system is anchored by a class named '_Object'
    ZClass.create('_Object');

* ZAjax.js - builds on class.js and introduces classes & object which carry
 out Ajax interactions

  var ZAjaxEngine - provides the central contact point for ZAjax component
  Methods:
      invokeURL: function(url,  params, method, async, eventHandlers) 
        Invoke the url with the specified parameters using the method 
	 (POST or GET) either aync (true or false not) with a set of
	 eventHandlers. The eventHandler are optional user specified
	 callback during the request lifecycle. The mo        
      
     invokeRemoteMethod: function(obj, methodName, argNames, argValues) 
        Invokes the method (methodName) on the remote obj. In the ZAjax 
	remote is done using pass by value on object arg arguments. 
	Pass-by-reference is not supported.

      addEventListener: function(sourceElement, eventName, target, capture)
        Browser neutral way of registering an event listener
 
      getFormParameters: function (form) 
         Harvest the HTML input values for a given form for subsequent 
	 submission to a remote form handler. NOTE: Current implementation
	 does not support file submission.
  
  Class(ZAjaxEngine.Request) - builds on class.js and ZAjaxEngine to provide
      a class based interface for interacting with remote classes and HTML
      delivered content.
  Methods:
       __construct: function(url, method, async, eventHandler, targetID, 
		    position, runScripts) 
            Builds on ZAjaxEngine (the first four params are passed directly 
	    to  ZAjaxEngine). The default constructor for classes using the
	    ZClass abstraction is __construct
	    * targetID specifies the HTML ID of the tag to receive the result 
	    of the invocation. 
	    * position is a class constant (REPLACE, PREPEND, APPEND) that 
	     determines what to do with the content within the targetID
	    * runScripts - specifies if of scripts in the delivered content
	     should be spliced into the document and therefore permitted to
	     run.
      sendRequest: function(params, headers) 
          Send the request with the optional params and headers. The events
	  triggered during the lifecyle of the request are:
	    eventHandler.onLoading,
	    eventHandler.onLoaded,
	    eventHandler.onInteractive,
	    eventHandler.onComplete,
	    eventHandler.onSuccess,
	    eventHandler.onFailure	    
	    Each callback is supplied with the request object.
      setTarget: function(htmlID, position) - helper methods for setting
        the target ID and position associated with the request.
      getRequest: function() - return the low level request object
         
  ZClass.create('ZAjaxEngine.JSONEncoder') - helper classes used to 
    encode/decode JSON based server interactions.
  staticMethods:
    encode:function(value) - encodes the given javascript object into its
      JSON format
    decode:function(objSource) - decodes the given JSONM source into its
      corresponding javascript object structure. NOTE: We currently eval the
      source blob.
   
 ZClass.create('ZJSONExceptionWrapper'...) - javascript (ZClass) used to
  wrap server side exceptions. If an error occurs on the remote server the
  exception is wrapped with the JSON based exception and thrown locally 
  using the javascript throw. All exceptions from the ZAjax-JSON system
  are thrown with the message only from the server context.

  Methods:
    getMessage:function() - returns the error message
     
ZClass.create('ZAjaxEngine.Updater'...) - combines a ZAjaxEngine.Request with
 the javascript setTimeout library function to provide an heartbeat callback
 which invokes the ZAjax request interactions
 
  Methods:	     
       __construct: function(request, interval, loopCallback) 
          Sets the updater to send the request every interval milliseconds
	  and invokes the option loopCallback which should return false
	  to stop the updater.
      start: function() - starts the updater looping
      stop: function() - forces the loop to stop during the next iteration.


PHP Classes
   ZJSONEncoder - helper class used to encode PHP classes and objects
   into the ZClass javascript format and JSON object.

   Methods:
    static public function encode($value) - encode the given value into its
      equivalent. Zee http://www.crockford.com/JSON/ for more information on
      formatting used.

    static public function encodeClass($className, $package = '')
      Encodes the given className into the ZClass equivalent. Constants,
      pulic methods and public variables are encoded
  
  ZJSONDecoder - helper class used to decode JSON encoded objects into
   their equivalent PHP object structure
  Methods:
      public function decode($source = NULL) -

 ajaxInvocation.php - helper file which is the target of remote method 
 invocations from the javascript JSON client. The helper decodes the 
 request, create and target object, invokes the method and returns the
 values to the javascript client by encoding the result into the JSON 
 formatted object. If an exception occurs, the helper catches the exception
 transports the exception to the javascript client which throws the exception
 on the client.

Use Cases
-----------------------------------------------
 JSON Use case:

<?php
....

class JSONTest { 
    public function __construct() {
    }
    public function exceptionTest() {
	throw new Exception("Not good, do we catch it?");
    }
    public function echoString($str) {
	return($str);
    }
}

echo ZJSONEncoder::encodeClass('JSONTest');
?>

<DEFANGED_SCRIPT>
  var test = new JSONTest();
  echo test.echoString('helloWorld');
  try {
      test.exceptionTest();
    } catch (err) {
      return(err);
    }

</SCRIPT>
-----------------------------------------------
JSON encode class sample
<?php

require_once('ZJSON/ZJSONEncoder.php');

class JSONTest { 
    public function __construct() {
    }
    public function echoInt($i) {
	return($i);
    }
    public function echoFloat($flt) {
	return($flt);
    }
    public function echoArray($arr) {
	return($arr);
    }
    public function echoString($str) {
	return($str);
    }
}

echo '<DEFANGED_SCRIPT>'.ZJSONEncoder::encodeClass('JSONTest').'</SCRIPT>';

?>

generate this code

<DEFANGED_SCRIPT>Class.create('JSONTest', {
constants : {
},
methods : {
	__construct: function() {
	},
	echoInt: function(i) {
		var argNames = ["i"];
		var result = ZAjaxEngine.invokeRemoteMethod(this, 'echoInt', argNames, arguments);
		return(result);
	},
	echoFloat: function(flt) {
		var argNames = ["flt"];
		var result = ZAjaxEngine.invokeRemoteMethod(this, 'echoFloat', argNames, arguments);
		return(result);
	},
	echoArray: function(arr) {
		var argNames = ["arr"];
		var result = ZAjaxEngine.invokeRemoteMethod(this, 'echoArray', argNames, arguments);
		return(result);
	},
	echoString: function(str) {
		var argNames = ["str"];
		var result = ZAjaxEngine.invokeRemoteMethod(this, 'echoString', argNames, arguments);
		return(result);
	}
},
variables : {

}});</SCRIPT>

========================================================================
ZJAax Request Use cases

Simple Auto-completion

<DEFANGED_INPUT ID='test' TYPE="TEXT" DEFANGED_STYLE="width:400px"/>
<DEFANGED_SCRIPT>
<?php 

class RemoteAutoComplete {
    public function __construct() {
    }
    public function getEntriyFieldsOptions() {
	return(array('red', 'green', 'blue'));
    }
}
  echo ZJSONEncoder::encodeClasses(array('RemoteAutoComplete'));
?>
    var foo = new RemoteAutoComplete();
    var ctrl = new ZAjaxWidgets.AutoCompleteBehavior('test', 
	                "foo.getEntriyFieldsOptions()", -1, true);
</SCRIPT>

-----------------------------------------------
Anchor (link)  calling server, targeting div with returned content

$link = new ZFormLink();
$link->href = "http://www.ibm.com";
$link->setText('HelloWorld');
new ZFormAjaxBehavior($link,
		      'divTestContent.php?msg=foobar', 
		      'testDiv', 
		      2,
		      array("success" => "alert('helloWorld');"),
		      true, 
		      "GET");
echo $link->render();
-----------------------------------------------
Checkbox calling server, targeting div

$checkbox = new ZFormButton();
new ZFormAjaxBehavior($checkbox, 
		      'divTestContent.php?msg=foobar', 
		      'testDiv', 
		      ZFormAjaxBehavior::REPLACE,
		      array("success" => "alert('helloWorld');"),
		      true, 
		      ZFormAjaxBehavior::GET);
$checkbox->render();
-----------------------------------------------
Updater Example
...

<DIV id='hello'>Hello</DIV>

<DEFANGED_SCRIPT>
try {
    var request = new ZAjaxEngine.Request('divTestcontent.php');
    request.setTarget('hello');
    request.sendRequest({msg:'hey'});
    var updater = new ZAjaxEngine.Updater(request, 
					  1000, 
					  function(updater) {
					      updater.getRequest().
					       setParameters({msg:new Date()});
					      return(true);
					  });
    updater.start();
} catch (error) {
    alert(error);
}

function doit() {
    request.sendRequest({msg:new Date()});
}
</SCRIPT>

<DEFANGED_INPUT TYPE='BUTTON' DEFANGED_OnClick='doit()'/>
....
-----------------------------------------------

Ajax Form submission

...
<DEFANGED_FORM NAME='testForm'>
FirstName: <DEFANGED_INPUT TYPE='TEXT NAME='first'/>
Last: <DEFANGED_INPUT TYPE='TEXT NAME='last'/>
....
</FORM>

<?php

$behavior = new ZFormAjaxBehavior('testform',
		       'ZFormTestAjaxCode.php', 
		       'testDiv',     
		       ZFormAjaxBehavior::PREPEND,
		       array("onSuccess" => "alert('helloWorld');"),
		       true, 
		       ZFormAjaxBehavior::POST, 
		       'submit');

$behavior->render();

?>

<DIV ID='testDiv'>Hello Content</DIV>
========================================================================

Example of ZClasses skeleton

ZClass.create('ZAjaxEngine.Request', {
    superClass: MySuper,				    
    constants: {
        POST        : "POST",
        GET         : "GET",
	REPLACE	    : 1,
	PREPEND     : 2,
        APPEND      : 3

    }, 
    methods : {
        __construct: function(url, method, async, eventHandler, 
	                      targetID, position, runScripts) {
         },
	 ....
    },
    staticMethods: {
	encode : function(value) {
	   .....
	},
    }
}