<sect1 id="zend.mail.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Mail</code> fournit des fonctionnalités génériques pour écrire et envoyé des emails au format text et MIME.
        Un email peut-être envoyé avec <code>Zend_Mail</code> via la fonction PHP native <ulink url="http://php.net/mail"><code>mail()</code></ulink>
        ou via une connexion SMTP directe.
    </para>
    <example>
        <title>Email simple avec Zend_Mail</title>
        <para>
            Un e-mail simple est composé d'un destinataire, d'un sujet, d'un message et d'un expéditeur. Pour envoyer ce genre de messages
            en utilisant la fonction PHP <ulink url="http://php.net/mail"><code>mail()</code></ulink>, vous pouvez faire comme ceci :
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('Ceci est le message.');
$mail->setFrom('somebody@example.com', 'un expéditeur');
$mail->addTo('somebody_else@example.com', 'un destinataire');
$mail->setSubject('sujet de test');
$mail->send();
?>]]>       </programlisting>
       </para>
    </example>
    <note>
        Pour envoyer un email avec <code>Zend_Mail</code>, vous devez spécifiez au moins un destinataire, un expéditeur
        (avec <code>setFrom()</code>), et un corp de message (text et/ou HTML).
    </note>
    <para>
        Pour la plupart des attributs de l'email, il y a des méthodes "geté pour lire les informations stockées dans l'objet mail.
        Pour plus de détail, merci de vous référer à la documentation de l'API. Une méthode spéciale est <code>getRecipients()</code>.
        Elle retourne un tableau avec toutes les adresses email des destinataires qui ont été ajouté avant l'appel de cette méthode.
    </para>
    <para>
        Pour des raisons de sécurité, <code>Zend_Mail</code> filtre tous les champs d'entête pour éviter tout problème d'injection
        d'entêtes avec des caractères de nouvelles lignes (<code>\n</code>).
    </para>
</sect1>
<sect1 id="zend.mail.sending">
    <title>Envoyer des mails en utilisant SMTP</title>
    <para>
        Pour envoyer des emails avec SMTP, <code>Zend_Mail_Transport_Smtp</code> a besoin d'être créé et enregistré avant que la méthode
        soit appelée. Pour tout appel de <code>Zend_Mail::send()</code> dans le script en cours, le transport SMTP sera utilisé :
    </para>
    <example>
        <title>Envoyer un email avec SMTP</title>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
Zend_Mail::setDefaultTransport($tr);
?>]]>   </programlisting>
    </example>
    <para>
        La méthode <code>setDefaultTransport()</code> et le constructeur de <code>Zend_Mail_Transport_Smtp</code> ne sont pas coûteux en terme de performances.
        Ces deux lignes peuvent être traitées lors de l'initialisation du script (par exemple dans un fichier config.inc) pour configurer
        le comportement de la classe <code>Zend_Mail</code> pour le reste du script. Cela garde les informations de configuration en dehors
        de la logique applicative - si les mails doivent être envoyés via SMTP ou via <ulink url="http://php.net/mail"><code>mail()</code></ulink>,
        quel serveur utiliser, etc.
    </para>
</sect1>
<sect1 id="zend.mail.multiple-emails">
    <title>Envoyer plusieurs emails par connexion SMTP</title>
    <para>
        Par défaut, une connexion SMTP est établie pour chaque email à envoyer. Si vous voulez envoyer
        plusieurs emails avec une seule connexion SMTP, vous pouvez gérer la méthode <code>connect()</code> vous-même.
        Si le transport a établit une connexion avant que la méthode <code>send()</code> soit appelée, il sera utilisé et ne sera
        pas fermé :
    </para>
    <example>
        <title>Envoyer plusieurs emails par connexion SMTP</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// construction du message
require_once 'Zend/Mail/Transport/Smtp.php';
$tr = new Zend_Mail_Transport_Smtp('mail.example.com');
$tr->connect();
for ($i = 0; $i < 5; $i++) {
    $mail->send();
}
$tr->disconnect();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.different-transports">
    <title>Utiliser différents transports</title>
    <para>
        Au ou vous voulez envoyer différent email avec des connexions différentes, vous pouvez aussi passer l'objet
        de transport directement à <code>send()</code> sans être obligé d'appeler <code>setDefaultTransport()</code> avant.
        L'objet passé va être prioritaire sur le transport par défaut pour la requête <code>send()</code> courante :
    </para>
    <example>
        <title>Utiliser différents transports</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// construction du message
require_once 'Zend/Mail/Transport/Smtp.php';
$tr1 = new Zend_Mail_Transport_Smtp('serveur@exemple.com');
$tr1 = new Zend_Mail_Transport_Smtp('autre_serveur@exemple.com');
$mail->send($tr1);
$mail->send($tr2);
$mail->send();  // utilisation du transport par défaut
?>]]>   </programlisting>
    </example>
    <note>  
        Des transports additionnels peuvent-être écrit en implémentant <code>Zend_Mail_Transport_Interface</code>.
    </note>
</sect1>
<sect1 id="zend.mail.html-mails">
    <title>Email HTML </title>
    <para>
        Pour envoyer un email au format HTML, définisser le corps du message en utilisant la méthode <code>setBodyHTML()</code>
        à la place de <code>setBodyText()</code>. Le type de contenu MIME sera automatiquement définit à <code>text/html</code>.
        Si vous utilisez les formats textes et HTML, un message MIME de type multipart/alternative sera automatiquement généré :
    </para>
    <example>
        <title>Envoyer des emails HTML</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Mon texte de test');
$mail->setFrom('somebody@exemple.com', 'Un expéditeur');
$mail->addTo('somebody_else@exemple.com', 'Un destinataire');
$mail->setSubject('Sujet de test');
$mail->send();
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.attachments">
    <title>Fichiers joints</title>
    <para>
        Des fichiers peuvent-être attaché à un email en utilisant la méthode <code>addAttachment()</code>. Le comportement
        par défaut de <code>Zend_Mail</code> est de définir que le fichier joint est un objet binaire (application/octet-stream),
        qui devra être transféré avec un encodage de type base64, et est définit comme une pièce jointe. Ce comportement peut-être
        re-définit en passant plus de paramètres à <code>addAttachment()</code> :
    </para>
    <example>
        <title>Email avec fichiers joints</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// construction du message
$mail->addAttachment($uneChaineBinaire);
$mail->addAttachment($monImage, 'image/gif', Zend_Mime::DISPOSITION_INLINE, Zend_Mime::ENCODING_8BIT);
?>]]>   </programlisting>
    </example>
    <para>
        Si vous voulez contrôller la partie MIME générées pour un fichier joint, vous pouvez utiliser la valeur retournée
        de <code>addAttachment()</code> pour modifier ses attributs. La méthodes <code>addAttachment()</code>
        retourne un objet de type <code>Zend_Mime_Part</code> :
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
// construction du message
$at = $mail->addAttachment($monImage);
$at->type = 'image/gif';
$at->id = 12;
$at->filename ='test.gif';
//...
$mail->send();
?>]]>   </programlisting>
    </para>
</sect1>
<sect1 id="zend.mail.adding-recipients">
    <title>Ajouter des destinataires</title>
    <para>
        Des destinataires peuvent-être ajouter de trois façons :
        <itemizedlist>
        <listitem>
        <para><code>addTo()</code>: Ajoute un destinataire au mail grâce à une entête "To"</para>
        </listitem>
        <listitem>
        <para><code>addCc()</code>: Ajoute un destinataire au mail grâce à une entête "Cc"</para>
        </listitem>
        <listitem>
        <para><code>addBcc()</code>: Ajoute un destinataire au mail non visible dans les entêtes</para>
        </listitem>
        </itemizedlist>
    </para>
    <note>
        <code>addTo()</code> et <code>addCc()</code> acceptent un second paramètre optionnel, qui est utilisé comme un
        nom de destinataire humainement lisible pour l'entête.
    </note>
</sect1>
<sect1 id="zend.mail.boundary">
    <title>Controller les limites MIME</title>
    <para>
        Dans un message en plusieurs parties, une limite MIME est normallement générée aléatoirement pour séparer 
        les différentes parties du message. Cependant, dans certains cas, vous souhaitez spécifier la limite MIME utilisée.
        Il est possible de le faire en utilisant la méthode <code>setMimeBoundary()</code>, comme le montre l'exemple suivant : 
    </para>
    <example>
        <title>Changer la limite MIME</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->setMimeBoundary('=_' . md5(microtime(1) . $someId++);
// construction du message...
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.additional-headers">
    <title>Entêtes additionelles</title>
    <para>
        Des entêtes arbitraires peuvent être définies en utilisant la méthode <code>addHeader()</code>. Elle à besoin de deux
        paramètres contenant le nom et la valeur du champ d'entête. Un troisième paramètre optionnel détermine si le header
        doit avoir une seule ou plusieures valeurs :
    </para>
    <example>
        <title>Ajouter des entêtes à l'email</title>
        <programlisting role="php"><![CDATA[
<?php
require_once 'Zend/Mail.php';
$mail = new Zend_Mail();
$mail->addHeader('X-MailGenerator', 'MaSuperApplication');
$mail->addHeader('X-greetingsTo', 'Maman', true); // plusieurs valeurs
$mail->addHeader('X-greetingsTo', 'Papa', true);
?>]]>   </programlisting>
    </example>
</sect1>
<sect1 id="zend.mail.character-sets">
    <title>Jeux de caractères</title>
    <para>
        <code>Zend_Mail</code> ne cherche pas le jeux de carcatères des parties de l'email. Lorsque vous instantiez
        <code>Zend_Mail</code>, un jeu de caractères pour l'email peut être donné. La valeur par défaut est iso-8859-1.
        L'application doit vérifier que toutes les parties ajoutées à cet email soient encodées avec le bon jeu de caractères.
        Lors de la création d'une nouvelle partie de l'email, un jeu de caractères différent peut-être définit pour chaque partie.
    </para>
    <note>
        Les jeux de caractères ne s'appliquent que pour les parties au format texte.
    </note>
</sect1>
<sect1 id="zend.mail.encoding">
    <title>Encodage</title>
    <para>
        Les corps des messages textes et HTML sont encodés avec le mécanisme ??? quotedprintable ??? par défaut. Tous les autres
        attachements sont encodés via base64 si aucun autre encodage n'est spécifié lors de l'appel à <code>addAttachment()</code>
        ou assigné plus tard à la partie MIME de l'objet. Les encodages 7Bit et 8Bit ne se font pour l'instant que sur les données
        binaires.
    </para>
    <para>
        <code>Zend_Mail_Transport_Smtp</code> encode les lignes commençant pas un ou deux points, ainsi le mail ne viole 
        pas le protocole SMTP.
    </para>
</sect1>
<sect1 id="zend.mail.smtp-authentication">
    <title>Authentification SMTP</title>
    <para>
        Diverses méthodes d'authentification SMTP seront ajoutées plus tard, mais ne sont pour l'instant pas supportées.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->