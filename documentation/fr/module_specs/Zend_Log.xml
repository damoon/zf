<sect1 id="zend.log.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Log</code> est une classe qui permet de gérer de logs.
        <code>Zend_Log</code> est une classe statique qui ne peut être instantiée directement. 
        Elle contient un tableau d'instances de <code>Zend_Log</code>n une pour chaque fichier de log utilisé par l'application.
        Chaque instance de log utilise un adapteur qui implemente <code>Zend_Log_Adapter_Interface</code>.
    </para>

    <para>
        Pour utiliser <code>Zend_Log</code>, vous devez inclure (<ulink url="http://php.net/include">include()</ulink>) la classe
        <code>Zend_Log</code> et toutes les classes adapteurs qui vont être utilisées. Par exemple, si l'application
        doit logger la console (le tampon de sortie de PHP) et les fichiers textes, les fichiers suivant seront inclus :
        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                  // classe de base Zend_Log
require_once 'Zend/Log/Adapter/Console.php';  // adapteur de log Console
require_once 'Zend/Log/Adapter/File.php';     // adapteur de log File
]]></programlisting>
        <code>Zend_Log</code> peut-être utilisé de façon simplifiée pour un fichier de log unique, peut-être configuré pour
        plusieurs fichiers de log, et peut aussi être utilisé pour enregistrer des opération internes de beaucoup de classes du 
        Framework Zend.
    </para>
</sect1>

<sect1 id="zend.log.simple-logging">
    <title>Enregistrer dans un fichier unique</title>
    <para>
        Un objet de log est créé en appelant la méthode <code>Zend_Log::registerLogger()</code> avec une instance de
        <code>Zend_Log_Adapter_Interface</code> en argument
        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                // classe de base Zend_Log
require_once 'Zend/Log/Adapter/File.php';   // adapteur de log File

// Enregistre le logger de fichier
Zend_Log::registerLogger(new Zend_Log_Adapter_File('/logs/simple.txt'));
]]></programlisting>
    </para>

    <para>
        Les messages sont ensuite envoyé au log avec <code>Zend_Log::log()</code>.

        <programlisting role="php"><![CDATA[
/**
 * Envoie un message au log, Un second argument optionnel définit le niveau de log
 * Si aucun niveau n'est définit, le niveau LEVEL_DEBUG sera utilisé.
 */
Zend_Log::log('Premier message de log');

/**
 * Enregistre un message de log important.
 */
Zend_Log::log('Une grave erreur à eu lieu', Zend_Log::LEVEL_SEVERE);
]]></programlisting>
    </para>
</sect1>

<sect1 id="zend.log.log-levels">
   <title>Niveau de log</title>
   <para>
       <code>Zend_Log::log()</code> va enregistrer tous les messages avec le niveau <code>LEVEL_DEBUG</code> à moins qu'un niveau différent soit 
       définit dans le second argument. Les niveaux suivants sont des constantes de la classe <code>Zend_Log</code>.
       <programlisting role="php"><![CDATA[
LEVEL_DEBUG     = 1
LEVEL_WARNING   = 4
LEVEL_ERROR     = 8
LEVEL_SEVERE    = 16
]]></programlisting>
   </para>
</sect1>

<sect1 id="zend.log.advanced-logging">
   <title>Enregistrements avancés : plusieurs Loggers</title>
   <para>
        <code>Zend_Log</code> supporte l'enregistrement via plusieurs adapteurs de log.
        Il peut soit envoyer un message à tous les logs, ou cibler un message pour un log particulier.
   </para>

   <para>
        Lors de la création de plusieurs loggers, chaque log doit avoir un nom unique. Les loggers sont enregistrés avec
        la méthode <code>registerLogger()</code>, avec le nom du log passé dans le second argument.
   </para>

   <para>
        Dans l'exemple ci-dessus, deux loggers sont créés : un pour la console, et un pour un fichier.
        Ils sont appelés respectivement <code>Console</code> et <code>File</code>.
        <programlisting role="php"><![CDATA[
require_once 'Zend/Log.php';                 // classe de base Zend_Log
require_once 'Zend/Log/Adapter/File.php';    // adapteur de log File
require_once 'Zend/Log/Adapter/Console.php'; // adapteur de log Console

Zend_Log::registerLogger(new Zend_Log_Adapter_File('/logs/framework.txt'), 'File');
Zend_Log::registerLogger(new Zend_Log_Adapter_Console(), 'Console');
]]></programlisting>
   </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->