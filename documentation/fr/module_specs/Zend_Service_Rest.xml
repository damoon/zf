<sect1 id="zend.service.rest">
    <title>Zend_Service_Rest</title>
    <sect2 id="zend.service.rest.introduction">
        <title>Introduction</title>
        <para>
            <code>Zend_Service_Rest</code> est un client REST de base pour effectuer des requêtes sur n'importe quel service Web basé sur REST.
        </para>
        <example>
            <title>Une requête REST de base</title>
            <para>
                Dans le code suivant, la méthode <code>setUri()</code> définit l'URI de <emphasis>base</emphasis> pour le service Web REST.
                Ensuite la méthode <code>restGet()</code> est appelé pour effectuer une requête GET sur un chemin donné, avec une chaîne de requête optionnelle.
            </para>
            <programlisting><![CDATA[<?php
require_once 'Zend/Service/Rest.php;

try {
    $rest = new Zend_Service_Rest();

    $rest->setURI('http://exemple.org');

    // Retourne un objet Zend_HttpClient_Response
    $response = $rest->restGet('/services/rest', 'foo=bar&baz=bat');

    if ($response->isSuccessful()) {
        echo $response->getBody();
    } else {
        echo '<p>Une erreur est survenue</p>';
    }
} catch (Zend_Exception $e) {
        echo '<p>Une erreur est survenue (' .$e->getMessage(). ')<p>';
}
?>]]>       </programlisting>
            <note>
                Vous pouvez passez une chaîne de requête correctement formatté (sans le premier point d'interrogation &quot;<code>?</code>&quot;) à <code>restGet()</code>,
                ou vous pouvez passer un tableau associatif de paires clés/valeurs. Peut importe la méthode que vous choisissez, les noms et les valeurs
                doivent être encodé en utilisant la fonction <ulink url="http://php.net/urlencode"><code>urlencode()</code></ulink>.
            </note>
            <para>
                L'utilisation de <code>restPost()</code> et <code>restPut()</code> est identique à <code>restGet()</code>, sauf que les données sont envoyée respectivement via HTTP POST ou PUT
                au lieu de GET.
            </para>
            <para>
                La méthode <code>restDelete()</code> fonctionne sur un chemin, mais n'a pas de second paramètre dans lequel on pourrait passer des données.
            </para>
        </example>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->