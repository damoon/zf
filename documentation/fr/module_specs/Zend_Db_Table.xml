<sect1 id="zend.db.table">

    <title>Zend_Db_Table</title>

    <sect2 id="zend.db.table.introduction">

        <title>Introduction</title>

        <para>
            Le composant <code>Zend_Db_Table</code> constitue le module de gestion des tables du Framework Zend. 
            Il se connecte à votre base de données via <code>Zend_Db_Adapter</code>, examine le schéma d'une table puis vous aide à manipuler 
            et aller chercher les lignes de cette table.
        </para>

    </sect2>

    <sect2 id="zend.db.table.getting-started">

        <title>Mise en Route</title>

        <para>
            La première chose à faire consiste à fournir à la classe abstraite <code>Zend_Db_Table</code> un adaptateur de base de données par défaut; 
            sauf mention contraire de votre part, toutes les instances de <code>Zend_Db_Table</code> utiliseront cet adaptateur par défaut.
        </para>

        <programlisting role="php"><![CDATA[<?php

// on définit un adaptateur
require_once 'Zend/Db.php';
$parametres = array (
    'adapter'  => 'pdoMysql',
    'host'     => '127.0.0.1',
    'username' => 'arthur',
    'password' => '******',
    'dbname'   => 'camelot'
);

$db = Zend_Db::factory($parametres);

// on définit l'adaptateur par défaut de tous les objets Zend_Db_Table
require_once 'Zend/Db/Table.php';
Zend_Db_Table::setDefaultAdapter($db);

?>]]>
        </programlisting>

        <para>
            Ensuite, supposons que vous disposez d'une table appelée "table_ronde" dans votre base de données. 
            Pour utiliser <code>Zend_Db_Table</code> sur cette table de base de données, étendez simplement <code>Zend_Db_Table</code> pour créer 
            une nouvelle classe appelée TableRonde (notez que nous avons transformé le nom table_ronde en utilisant la notation Camel). 
            Vous pourrez ensuite examiner via cette classe la table 'table_ronde', manipuler ses lignes et aller chercher des lignes particulières.
        </para>

        <programlisting role="php"><![CDATA[<?php
class RoundTable extends Zend_Db_Table {}
$table = new RoundTable();
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.name-and-key">

        <title>Nom de la table et clé primaire</title>

        <para>
            Par défaut, <code>Zend_Db_Table</code> s'attend à ce que le nom de la table de votre base de données soit le même que son propre 
            nom de classe (en le convertissant d'abord de la NotationCamel vers la notation mots_separes_par_tirets_bas). Ainsi, 
            une classe <code>Zend_Db_Table</code> appelée UnNomDeTable est associée à une table SQL appelée 'un_nom_de_table'. Si vous voulez que 
            votre classe soit associée à un nom autre que la forme avec tirets bas du nom de la classe, surchargez la propriété <code>$_name</code>
            lorsque vous définissez votre classe.
        </para>

        <programlisting role="php"><![CDATA[<?php
class NomDeLaClasse extends Zend_Db_Table
{
    // le nom par défaut pour la table est 'nom_de_la_classe'
    // mais nous voulons utiliser un autre nom
    protected $_name = 'un_autre_nom_de_table';
}
?>]]>
        </programlisting>

        <para>
            Par défaut, <code>Zend_Db_Table</code> s'attend à ce que votre table possède une clé primaire 
            nommée 'id'. (C'est mieux si cette colonne est auto-incrémentée, mais ce n'est pas une nécessité.) 
            Si votre clé primaire se nomme autrement que 'id', vous pouvez surcharger la propriété <code>$_primary</code> lorsque vous définissez votre classe.
        </para>

        <programlisting role="php"><![CDATA[<?php
class NomDeLaClasse extends Zend_Db_Table
{
    // la clé primaire par défaut est 'id'
    // mais nous voulons utiliser un autre nom
    protected $_primary = 'un_autre_nom_de_colonne';
}
?>]]>
        </programlisting>

        <para>
             Vous pouvez aussi définir ces propriétés dans la méthode <code>_setup()</code> de votre classe; assurez-vous simplement 
             d'appeler la méthode <code>_setup()</code> de la classe-parente une fois que c'est fait.
        </para>

        <programlisting role="php"><![CDATA[<?php
class NomDeLaClasse extends Zend_Db_Table
{
    protected function _setup()
    {
        $this->_name = 'un_autre_nom_de_table';
        $this->_primary = 'un_autre_nom_de_colonne';
        parent::_setup();
    }
}
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.insert">

        <title>Insertion de lignes</title>

        <para>
             Pour insérer une nouvelle ligne dans votre table, appelez simplement <code>insert()</code> en lui passant un tableau associatif 
             de données sous la forme colonne:valeur. Les données seront échappées automatiquement pour vous et l'ID de la dernière 
             insertion sera renvoyé. 
             (Notez qu'en cela cette méthode diffère de <code>Zend_Db_Adapter::insert()</code>, qui renvoie le nombre de lignes affectées.)
        </para>

        <programlisting role="php"><![CDATA[<?php
//
// INSERT INTO table_ronde
//     (titre, prenom, couleur_preferee)
//     VALUES ("Roi", "Arthur", "bleu")
//

class TableRonde extends Zend_Db_Table {}

$table = new TableRonde();

$donnees = array(
    'titre'  => 'Roi',
    'prenom' => 'Arthur',
    'couleur_preferee' => 'bleu',
)

$id = $table->insert($donnees);
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.udpate">

        <title>Mise à jour de lignes</title>

        <para>
             Pour mettre à jour des lignes de votre table, appelez <code>update()</code> en lui passant un tableau associatif des données à 
             modifier sous la forme <code>colonne:valeur</code> ainsi qu'une clause WHERE permettant de déterminer quelles lignes doivent 
             être mises à jour. Cette méthode mettra à jour la table et renverra le nombre de lignes affectées.
        </para>

        <para>
             Les données à modifier seront automatiquement échappées pour vous mais pas la clause WHERE, que vous devez échapper vous-même 
             à l'aide de l'objet <code>Zend_Db_Adapter</code> de la table.
        </para>

        <programlisting role="php"><![CDATA[<?php
//
// UPDATE table_ronde
//     SET couleur_preferee = "jaune"
//     WHERE prenom = "Robin"
//

class TableRonde extends Zend_Db_Table {}

$table = new TableRonde();
$db = $table->getAdapter();

$set = array(
    'couleur_preferee' => 'jaune',
)

$where = $db->quoteInto('prenom = ?', 'Robin');

$lignes_affectees = $table->update($set, $where);
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.delete">

        <title>Suppression de lignes</title>

        <para>
             Pour supprimer des lignes de votre table, appelez <code>delete()</code> en lui passant une clause WHERE permettant 
             de déterminer quelles lignes doivent être supprimées. Cette méthode renverra ensuite le nombre de lignes supprimées.
        </para>

        <para>
             La clause WHERE ne sera pas échappée pour vous et vous devez donc l'échapper vous-même à l'aide de l'objet <code>Zend_Db_Adapter</code> de la table.
        </para>

        <programlisting role="php"><![CDATA[<?php
//
// DELETE FROM table_ronde
//     WHERE prenom = "Patrick"
//

class TableRonde extends Zend_Db_Table {}

$table = new TableRonde();
$db = $table->getAdapter();

$where = $db->quoteInto('prenom = ?', 'Patrick');

$lignes_affectees = $table->delete($where);
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.findbykey">

        <title>Trouver des lignes par clé primaire</title>

        <para>
             Si vous le souhaitez, vous pouvez facilement obtenir des lignes de la table en fonction des valeurs de leurs clés primaires, grâce 
             à la méthode <code>find()</code>. Cette méthode renvoie un objet <code>Zend_Db_Table_Row</code> si vous tentez de retrouver une seule clé ou un objet 
             <code>Zend_Db_Table_Rowset</code> si vous tentez de retrouver plusieurs clés.
        </para>
        <programlisting role="php"><![CDATA[<?php
class TableRonde extends Zend_Db_Table {}

$table = new TableRonde();

// SELECT * FROM table_ronde WHERE id = "1"
$ligne = $table->find(1);

// SELECT * FROM table_ronde WHERE id IN("1", "2", 3")
$lignes = $table->find(array(1, 2, 3));
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.fetchonerow">

        <title>Aller chercher une ligne</title>

        <para>
             Même si vous pouvez facilement retrouver une ligne par sa clé primaire, vous aurez souvent besoin d'ajouter 
             différentes conditions à la requête lorsque vous cherchez à obtenir une ligne particulière. <code>Zend_Db_Table</code>
             offre précisément dans ce but la méthode <code>fetchRow()</code>. Appelez <code>fetchRow()</code> en lui passant une clause WHERE 
             (et une clause ORDER optionnelle) et <code>Zend_Db_Table</code> renverra un objet <code>Zend_Db_Table_Row</code> associé au premier 
             enregistrement qui correspond aux conditions spécifiées.
        </para>

        <para>
             Notez que la clause WHERE ne sera pas échappée pour vous et vous devez donc l'échapper vous-même à l'aide de l'objet <code>Zend_Db_Adapter</code> de la table.
        </para>

        <programlisting role="php"><![CDATA[<?php
//
// SELECT * FROM table_ronde
//     WHERE titre = "Sire"
//     AND prenom = "Robin"
//     ORDER BY couleur_preferee
//

class TableRonde extends Zend_Db_Table {}

$table = new TableRonde();
$db = $table->getAdapter();

$where = $db->quoteInto('titre = ?', 'Sire')
       . $db->quoteInto('AND prenom = ?', 'Robin');

$order = 'couleur_preferee';

$ligne = $table->fetchRow($where, $order);
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.fetchmultiple">

        <title>Aller chercher plusieurs lignes</title>

        <para>
             Si vous avez besoin d'obtenir plusieurs lignes en même temps, utilisez la méthode <code>fetchAll()</code>. 
             Comme pour <code>fetchRow()</code>, elle prend en argument une clause WHERE et une clause ORDER mais aussi un décompte 
             limite et une valeur offset limite afin de restreindre le nombre de lignes renvoyées. La méthode renverra un objet 
             <code>Zend_Db_Table_Rowset</code> contenant les enregistrements sélectionnés.
        </para>

        <para>
             Notez que la clause WHERE ne sera pas échappée pour vous et vous devez donc l'échapper 
             vous-même à l'aide de l'objet <code>Zend_Db_Adapter</code> de la table.
        </para>

        <programlisting role="php"><![CDATA[<?php
class TableRonde extends Zend_Db_Table {}

$table = new TableRonde();
$db = $table->getAdapter();

// SELECT * FROM table_ronde
//     WHERE titre = "Sire"
//     ORDER BY prenom
//     LIMIT 10 OFFSET 20

$where = $db->quoteInto('titre = ?', 'Sire');
$order = 'prenom';
$decompte = 10;
$offset = 20;

$lignes = $table->fetchRow($where, $order, $decompte, $offset);
?>]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.db.table.domain-logic">

        <title>Ajouter votre propre logique</title>

        <para>
             En bon module de table, <code>Zend_Db_Table</code> se prête bien à l'encapsulation de votre propre logique. 
             Vous pouvez par exemple surcharger les méthodes <code>insert()</code> et <code>update()</code> pour qu'elles manipulent ou valident les 
             données avant que celles-ci n'aillent dans la base de données.
        </para>

        <programlisting role="php"><![CDATA[<?php
class TableRonde extends Zend_Db_Table
{
    public function insert($donnees)
    {
        // on ajoute un timestamp
        if (empty($donnees['cree_le'])) {
            $donnees['cree_le'] = time();
        }
        return parent::insert($data);
    }

    public function update($donnees)
    {
        // on ajoute un timestamp
        if (empty($donnees['cree_le'])) {
            $donnees['cree_le'] = time();
        }
        return parent::update($donnees);
    }
}
?>]]>
        </programlisting>

        <para>
             De même, vous pouvez ajouter vos propres méthodes <code>find()</code> pour rechercher des enregistrements selon un critère autre que la clé primaire.
        </para>

        <programlisting role="php"><![CDATA[<?php
class TableRonde extends Zend_Db_Table
{
    public function findAllParNom($nom)
    {
        $db = $this->getAdapter();
        $where = $db->quoteInto("nom = ?", $nom);
        $order = "prenom";
        return $this->fetchAll($where, $order);
    }
}
?>]]>
        </programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
